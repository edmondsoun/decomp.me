--
-- PostgreSQL database dump
--

-- Dumped from database version 13.16 (Debian 13.16-1.pgdg120+1)
-- Dumped by pg_dump version 13.16 (Debian 13.16-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: auth_group; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.auth_group (
    id integer NOT NULL,
    name character varying(150) NOT NULL
);


ALTER TABLE public.auth_group OWNER TO decompme;

--
-- Name: auth_group_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.auth_group ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_group_permissions; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.auth_group_permissions (
    id bigint NOT NULL,
    group_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_group_permissions OWNER TO decompme;

--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.auth_group_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_group_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_permission; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.auth_permission (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    content_type_id integer NOT NULL,
    codename character varying(100) NOT NULL
);


ALTER TABLE public.auth_permission OWNER TO decompme;

--
-- Name: auth_permission_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.auth_permission ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_permission_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.auth_user (
    id integer NOT NULL,
    password character varying(128) NOT NULL,
    last_login timestamp with time zone,
    is_superuser boolean NOT NULL,
    username character varying(150) NOT NULL,
    first_name character varying(150) NOT NULL,
    last_name character varying(150) NOT NULL,
    email character varying(254) NOT NULL,
    is_staff boolean NOT NULL,
    is_active boolean NOT NULL,
    date_joined timestamp with time zone NOT NULL
);


ALTER TABLE public.auth_user OWNER TO decompme;

--
-- Name: auth_user_groups; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.auth_user_groups (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    group_id integer NOT NULL
);


ALTER TABLE public.auth_user_groups OWNER TO decompme;

--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.auth_user_groups ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.auth_user ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: auth_user_user_permissions; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.auth_user_user_permissions (
    id bigint NOT NULL,
    user_id integer NOT NULL,
    permission_id integer NOT NULL
);


ALTER TABLE public.auth_user_user_permissions OWNER TO decompme;

--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.auth_user_user_permissions ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.auth_user_user_permissions_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: coreapp_asm; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.coreapp_asm (
    hash character varying(64) NOT NULL,
    data text NOT NULL
);


ALTER TABLE public.coreapp_asm OWNER TO decompme;

--
-- Name: coreapp_assembly; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.coreapp_assembly (
    hash character varying(64) NOT NULL,
    "time" timestamp with time zone NOT NULL,
    arch character varying(100) NOT NULL,
    elf_object bytea NOT NULL,
    source_asm_id character varying(64)
);


ALTER TABLE public.coreapp_assembly OWNER TO decompme;

--
-- Name: coreapp_course; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.coreapp_course (
    id bigint NOT NULL,
    slug character varying(100) NOT NULL,
    name character varying(500) NOT NULL,
    description text NOT NULL
);


ALTER TABLE public.coreapp_course OWNER TO decompme;

--
-- Name: coreapp_course_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.coreapp_course ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.coreapp_course_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: coreapp_coursechapter; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.coreapp_coursechapter (
    id bigint NOT NULL,
    index integer NOT NULL,
    slug character varying(100) NOT NULL,
    name character varying(500) NOT NULL,
    description text NOT NULL,
    course_id bigint NOT NULL
);


ALTER TABLE public.coreapp_coursechapter OWNER TO decompme;

--
-- Name: coreapp_coursechapter_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.coreapp_coursechapter ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.coreapp_coursechapter_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: coreapp_coursescenario; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.coreapp_coursescenario (
    id bigint NOT NULL,
    index integer NOT NULL,
    slug character varying(100) NOT NULL,
    name character varying(500) NOT NULL,
    content text NOT NULL,
    chapter_id bigint NOT NULL,
    scratch_id character varying(50) NOT NULL
);


ALTER TABLE public.coreapp_coursescenario OWNER TO decompme;

--
-- Name: coreapp_coursescenario_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.coreapp_coursescenario ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.coreapp_coursescenario_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: coreapp_githubuser; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.coreapp_githubuser (
    user_id integer NOT NULL,
    github_id integer NOT NULL,
    access_token character varying(100) NOT NULL,
    CONSTRAINT coreapp_githubuser_github_id_check CHECK ((github_id >= 0))
);


ALTER TABLE public.coreapp_githubuser OWNER TO decompme;

--
-- Name: coreapp_preset; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.coreapp_preset (
    id bigint NOT NULL,
    name character varying(100) NOT NULL,
    creation_time timestamp with time zone NOT NULL,
    last_updated timestamp with time zone NOT NULL,
    platform character varying(100) NOT NULL,
    compiler character varying(100) NOT NULL,
    assembler_flags text NOT NULL,
    compiler_flags text NOT NULL,
    diff_flags jsonb NOT NULL,
    decompiler_flags text NOT NULL,
    libraries jsonb NOT NULL,
    owner_id bigint
);


ALTER TABLE public.coreapp_preset OWNER TO decompme;

--
-- Name: coreapp_preset_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.coreapp_preset ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.coreapp_preset_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: coreapp_profile; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.coreapp_profile (
    id bigint NOT NULL,
    creation_date timestamp with time zone NOT NULL,
    last_request_date timestamp with time zone NOT NULL,
    user_id integer,
    pseudonym character varying(150) NOT NULL
);


ALTER TABLE public.coreapp_profile OWNER TO decompme;

--
-- Name: coreapp_profile_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.coreapp_profile ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.coreapp_profile_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: coreapp_project; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.coreapp_project (
    slug character varying(50) NOT NULL,
    creation_time timestamp with time zone NOT NULL,
    description text NOT NULL,
    icon character varying(100)
);


ALTER TABLE public.coreapp_project OWNER TO decompme;

--
-- Name: coreapp_projectmember; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.coreapp_projectmember (
    id bigint NOT NULL,
    project_id character varying(50) NOT NULL,
    user_id integer NOT NULL
);


ALTER TABLE public.coreapp_projectmember OWNER TO decompme;

--
-- Name: coreapp_projectmember_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.coreapp_projectmember ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.coreapp_projectmember_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: coreapp_scratch; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.coreapp_scratch (
    slug character varying(50) NOT NULL,
    creation_time timestamp with time zone NOT NULL,
    last_updated timestamp with time zone NOT NULL,
    compiler character varying(100) NOT NULL,
    compiler_flags text NOT NULL,
    source_code text NOT NULL,
    context text NOT NULL,
    owner_id bigint,
    parent_id character varying(50),
    target_assembly_id character varying(64) NOT NULL,
    diff_label character varying(1024) NOT NULL,
    platform character varying(100) NOT NULL,
    score integer NOT NULL,
    description text NOT NULL,
    name character varying(1024) NOT NULL,
    max_score integer NOT NULL,
    diff_flags jsonb NOT NULL,
    match_override boolean NOT NULL,
    libraries jsonb,
    preset_id bigint,
    claim_token character varying(64)
);


ALTER TABLE public.coreapp_scratch OWNER TO decompme;

--
-- Name: django_admin_log; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.django_admin_log (
    id integer NOT NULL,
    action_time timestamp with time zone NOT NULL,
    object_id text,
    object_repr character varying(200) NOT NULL,
    action_flag smallint NOT NULL,
    change_message text NOT NULL,
    content_type_id integer,
    user_id integer NOT NULL,
    CONSTRAINT django_admin_log_action_flag_check CHECK ((action_flag >= 0))
);


ALTER TABLE public.django_admin_log OWNER TO decompme;

--
-- Name: django_admin_log_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.django_admin_log ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_admin_log_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_content_type; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.django_content_type (
    id integer NOT NULL,
    app_label character varying(100) NOT NULL,
    model character varying(100) NOT NULL
);


ALTER TABLE public.django_content_type OWNER TO decompme;

--
-- Name: django_content_type_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.django_content_type ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_content_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_migrations; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.django_migrations (
    id bigint NOT NULL,
    app character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    applied timestamp with time zone NOT NULL
);


ALTER TABLE public.django_migrations OWNER TO decompme;

--
-- Name: django_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: decompme
--

ALTER TABLE public.django_migrations ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.django_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: django_session; Type: TABLE; Schema: public; Owner: decompme
--

CREATE TABLE public.django_session (
    session_key character varying(40) NOT NULL,
    session_data text NOT NULL,
    expire_date timestamp with time zone NOT NULL
);


ALTER TABLE public.django_session OWNER TO decompme;

--
-- Data for Name: auth_group; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.auth_group (id, name) FROM stdin;
\.


--
-- Data for Name: auth_group_permissions; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.auth_group_permissions (id, group_id, permission_id) FROM stdin;
\.


--
-- Data for Name: auth_permission; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.auth_permission (id, name, content_type_id, codename) FROM stdin;
1	Can add asm	1	add_asm
2	Can change asm	1	change_asm
3	Can delete asm	1	delete_asm
4	Can view asm	1	view_asm
5	Can add assembly	2	add_assembly
6	Can change assembly	2	change_assembly
7	Can delete assembly	2	delete_assembly
8	Can view assembly	2	view_assembly
9	Can add profile	3	add_profile
10	Can change profile	3	change_profile
11	Can delete profile	3	delete_profile
12	Can view profile	3	view_profile
13	Can add scratch	4	add_scratch
14	Can change scratch	4	change_scratch
15	Can delete scratch	4	delete_scratch
16	Can view scratch	4	view_scratch
17	Can add GitHub user	5	add_githubuser
18	Can change GitHub user	5	change_githubuser
19	Can delete GitHub user	5	delete_githubuser
20	Can view GitHub user	5	view_githubuser
21	Can add project	6	add_project
22	Can change project	6	change_project
23	Can delete project	6	delete_project
24	Can view project	6	view_project
25	Can add project member	7	add_projectmember
26	Can change project member	7	change_projectmember
27	Can delete project member	7	delete_projectmember
28	Can view project member	7	view_projectmember
29	Can add course	8	add_course
30	Can change course	8	change_course
31	Can delete course	8	delete_course
32	Can view course	8	view_course
33	Can add course chapter	9	add_coursechapter
34	Can change course chapter	9	change_coursechapter
35	Can delete course chapter	9	delete_coursechapter
36	Can view course chapter	9	view_coursechapter
37	Can add course scenario	10	add_coursescenario
38	Can change course scenario	10	change_coursescenario
39	Can delete course scenario	10	delete_coursescenario
40	Can view course scenario	10	view_coursescenario
41	Can add preset	11	add_preset
42	Can change preset	11	change_preset
43	Can delete preset	11	delete_preset
44	Can view preset	11	view_preset
45	Can add log entry	12	add_logentry
46	Can change log entry	12	change_logentry
47	Can delete log entry	12	delete_logentry
48	Can view log entry	12	view_logentry
49	Can add permission	13	add_permission
50	Can change permission	13	change_permission
51	Can delete permission	13	delete_permission
52	Can view permission	13	view_permission
53	Can add group	14	add_group
54	Can change group	14	change_group
55	Can delete group	14	delete_group
56	Can view group	14	view_group
57	Can add user	15	add_user
58	Can change user	15	change_user
59	Can delete user	15	delete_user
60	Can view user	15	view_user
61	Can add content type	16	add_contenttype
62	Can change content type	16	change_contenttype
63	Can delete content type	16	delete_contenttype
64	Can view content type	16	view_contenttype
65	Can add session	17	add_session
66	Can change session	17	change_session
67	Can delete session	17	delete_session
68	Can view session	17	view_session
\.


--
-- Data for Name: auth_user; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.auth_user (id, password, last_login, is_superuser, username, first_name, last_name, email, is_staff, is_active, date_joined) FROM stdin;
\.


--
-- Data for Name: auth_user_groups; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.auth_user_groups (id, user_id, group_id) FROM stdin;
\.


--
-- Data for Name: auth_user_user_permissions; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.auth_user_user_permissions (id, user_id, permission_id) FROM stdin;
\.


--
-- Data for Name: coreapp_asm; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.coreapp_asm (hash, data) FROM stdin;
955167f1953b7b67c155e5c7a260e0d5202b028630f67fbf575624f8cdcbdc8b	.set noat      /* allow manual use of $at */\n.set noreorder /* don't insert nops after branches */\n\nglabel SpuGetVoiceAttr\n/* 1AF20 8002A720 E0FFBD27 */  addiu      $sp, $sp, -0x20\n/* 1AF24 8002A724 1000B0AF */  sw         $s0, 0x10($sp)\n/* 1AF28 8002A728 21808000 */  addu       $s0, $a0, $zero\n/* 1AF2C 8002A72C 1400B1AF */  sw         $s1, 0x14($sp)\n/* 1AF30 8002A730 FFFF1124 */  addiu      $s1, $zero, -0x1\n/* 1AF34 8002A734 21180000 */  addu       $v1, $zero, $zero\n/* 1AF38 8002A738 01000534 */  ori        $a1, $zero, 0x1\n/* 1AF3C 8002A73C 1C00BFAF */  sw         $ra, 0x1C($sp)\n/* 1AF40 8002A740 1800B2AF */  sw         $s2, 0x18($sp)\n/* 1AF44 8002A744 0000048E */  lw         $a0, 0x0($s0)\n/* 1AF48 8002A748 04106500 */  sllv       $v0, $a1, $v1\n.L8002A74C:\n/* 1AF4C 8002A74C 24104400 */  and        $v0, $v0, $a0\n/* 1AF50 8002A750 22004014 */  bnez       $v0, .L8002A7DC\n/* 1AF54 8002A754 00000000 */   nop\n/* 1AF58 8002A758 01006324 */  addiu      $v1, $v1, 0x1\n/* 1AF5C 8002A75C 18006228 */  slti       $v0, $v1, 0x18\n/* 1AF60 8002A760 FAFF4014 */  bnez       $v0, .L8002A74C\n/* 1AF64 8002A764 04106500 */   sllv      $v0, $a1, $v1\n.L8002A768:\n/* 1AF68 8002A768 FFFF0224 */  addiu      $v0, $zero, -0x1\n/* 1AF6C 8002A76C DB002212 */  beq        $s1, $v0, .L8002AADC\n/* 1AF70 8002A770 21280000 */   addu      $a1, $zero, $zero\n/* 1AF74 8002A774 00191100 */  sll        $v1, $s1, 4\n/* 1AF78 8002A778 0380023C */  lui        $v0, %hi(_spu_RXX)\n/* 1AF7C 8002A77C 0435428C */  lw         $v0, %lo(_spu_RXX)($v0)\n/* 1AF80 8002A780 40401100 */  sll        $t0, $s1, 1\n/* 1AF84 8002A784 21186200 */  addu       $v1, $v1, $v0\n/* 1AF88 8002A788 00006694 */  lhu        $a2, 0x0($v1)\n/* 1AF8C 8002A78C 02006794 */  lhu        $a3, 0x2($v1)\n/* 1AF90 8002A790 0080C230 */  andi       $v0, $a2, 0x8000\n/* 1AF94 8002A794 34004010 */  beqz       $v0, .L8002A868\n/* 1AF98 8002A798 C0901100 */   sll       $s2, $s1, 3\n/* 1AF9C 8002A79C 00F0C330 */  andi       $v1, $a2, 0xF000\n/* 1AFA0 8002A7A0 00B00234 */  ori        $v0, $zero, 0xB000\n/* 1AFA4 8002A7A4 28006210 */  beq        $v1, $v0, .L8002A848\n/* 1AFA8 8002A7A8 2A104300 */   slt       $v0, $v0, $v1\n/* 1AFAC 8002A7AC 11004014 */  bnez       $v0, .L8002A7F4\n/* 1AFB0 8002A7B0 00D00234 */   ori       $v0, $zero, 0xD000\n/* 1AFB4 8002A7B4 00900234 */  ori        $v0, $zero, 0x9000\n/* 1AFB8 8002A7B8 1F006210 */  beq        $v1, $v0, .L8002A838\n/* 1AFBC 8002A7BC 2A104300 */   slt       $v0, $v0, $v1\n/* 1AFC0 8002A7C0 08004014 */  bnez       $v0, .L8002A7E4\n/* 1AFC4 8002A7C4 00A00234 */   ori       $v0, $zero, 0xA000\n/* 1AFC8 8002A7C8 00800234 */  ori        $v0, $zero, 0x8000\n/* 1AFCC 8002A7CC 18006210 */  beq        $v1, $v0, .L8002A830\n/* 1AFD0 8002A7D0 00000000 */   nop\n/* 1AFD4 8002A7D4 1AAA0008 */  j          .L8002A868\n/* 1AFD8 8002A7D8 FF0FC630 */   andi      $a2, $a2, 0xFFF\n.L8002A7DC:\n/* 1AFDC 8002A7DC DAA90008 */  j          .L8002A768\n/* 1AFE0 8002A7E0 21886000 */   addu      $s1, $v1, $zero\n.L8002A7E4:\n/* 1AFE4 8002A7E4 16006210 */  beq        $v1, $v0, .L8002A840\n/* 1AFE8 8002A7E8 00000000 */   nop\n/* 1AFEC 8002A7EC 1AAA0008 */  j          .L8002A868\n/* 1AFF0 8002A7F0 FF0FC630 */   andi      $a2, $a2, 0xFFF\n.L8002A7F4:\n/* 1AFF4 8002A7F4 18006210 */  beq        $v1, $v0, .L8002A858\n/* 1AFF8 8002A7F8 2A104300 */   slt       $v0, $v0, $v1\n/* 1AFFC 8002A7FC 06004014 */  bnez       $v0, .L8002A818\n/* 1B000 8002A800 00E00234 */   ori       $v0, $zero, 0xE000\n/* 1B004 8002A804 00C00234 */  ori        $v0, $zero, 0xC000\n/* 1B008 8002A808 11006210 */  beq        $v1, $v0, .L8002A850\n/* 1B00C 8002A80C 00000000 */   nop\n/* 1B010 8002A810 1AAA0008 */  j          .L8002A868\n/* 1B014 8002A814 FF0FC630 */   andi      $a2, $a2, 0xFFF\n.L8002A818:\n/* 1B018 8002A818 11006210 */  beq        $v1, $v0, .L8002A860\n/* 1B01C 8002A81C 00F00234 */   ori       $v0, $zero, 0xF000\n/* 1B020 8002A820 0F006210 */  beq        $v1, $v0, .L8002A860\n/* 1B024 8002A824 00000000 */   nop\n/* 1B028 8002A828 1AAA0008 */  j          .L8002A868\n/* 1B02C 8002A82C FF0FC630 */   andi      $a2, $a2, 0xFFF\n.L8002A830:\n/* 1B030 8002A830 19AA0008 */  j          .L8002A864\n/* 1B034 8002A834 01000534 */   ori       $a1, $zero, 0x1\n.L8002A838:\n/* 1B038 8002A838 19AA0008 */  j          .L8002A864\n/* 1B03C 8002A83C 02000534 */   ori       $a1, $zero, 0x2\n.L8002A840:\n/* 1B040 8002A840 19AA0008 */  j          .L8002A864\n/* 1B044 8002A844 03000534 */   ori       $a1, $zero, 0x3\n.L8002A848:\n/* 1B048 8002A848 19AA0008 */  j          .L8002A864\n/* 1B04C 8002A84C 04000534 */   ori       $a1, $zero, 0x4\n.L8002A850:\n/* 1B050 8002A850 19AA0008 */  j          .L8002A864\n/* 1B054 8002A854 05000534 */   ori       $a1, $zero, 0x5\n.L8002A858:\n/* 1B058 8002A858 19AA0008 */  j          .L8002A864\n/* 1B05C 8002A85C 06000534 */   ori       $a1, $zero, 0x6\n.L8002A860:\n/* 1B060 8002A860 07000534 */  ori        $a1, $zero, 0x7\n.L8002A864:\n/* 1B064 8002A864 FF0FC630 */  andi       $a2, $a2, 0xFFF\n.L8002A868:\n/* 1B068 8002A868 0080E230 */  andi       $v0, $a3, 0x8000\n/* 1B06C 8002A86C 32004010 */  beqz       $v0, .L8002A938\n/* 1B070 8002A870 21200000 */   addu      $a0, $zero, $zero\n/* 1B074 8002A874 00F0E330 */  andi       $v1, $a3, 0xF000\n/* 1B078 8002A878 00B00234 */  ori        $v0, $zero, 0xB000\n/* 1B07C 8002A87C 26006210 */  beq        $v1, $v0, .L8002A918\n/* 1B080 8002A880 2A104300 */   slt       $v0, $v0, $v1\n/* 1B084 8002A884 0F004014 */  bnez       $v0, .L8002A8C4\n/* 1B088 8002A888 00D00234 */   ori       $v0, $zero, 0xD000\n/* 1B08C 8002A88C 00900234 */  ori        $v0, $zero, 0x9000\n/* 1B090 8002A890 1D006210 */  beq        $v1, $v0, .L8002A908\n/* 1B094 8002A894 2A104300 */   slt       $v0, $v0, $v1\n/* 1B098 8002A898 06004014 */  bnez       $v0, .L8002A8B4\n/* 1B09C 8002A89C 00A00234 */   ori       $v0, $zero, 0xA000\n/* 1B0A0 8002A8A0 00800234 */  ori        $v0, $zero, 0x8000\n/* 1B0A4 8002A8A4 16006210 */  beq        $v1, $v0, .L8002A900\n/* 1B0A8 8002A8A8 00000000 */   nop\n/* 1B0AC 8002A8AC 4EAA0008 */  j          .L8002A938\n/* 1B0B0 8002A8B0 FF0FE730 */   andi      $a3, $a3, 0xFFF\n.L8002A8B4:\n/* 1B0B4 8002A8B4 16006210 */  beq        $v1, $v0, .L8002A910\n/* 1B0B8 8002A8B8 00000000 */   nop\n/* 1B0BC 8002A8BC 4EAA0008 */  j          .L8002A938\n/* 1B0C0 8002A8C0 FF0FE730 */   andi      $a3, $a3, 0xFFF\n.L8002A8C4:\n/* 1B0C4 8002A8C4 18006210 */  beq        $v1, $v0, .L8002A928\n/* 1B0C8 8002A8C8 2A104300 */   slt       $v0, $v0, $v1\n/* 1B0CC 8002A8CC 06004014 */  bnez       $v0, .L8002A8E8\n/* 1B0D0 8002A8D0 00E00234 */   ori       $v0, $zero, 0xE000\n/* 1B0D4 8002A8D4 00C00234 */  ori        $v0, $zero, 0xC000\n/* 1B0D8 8002A8D8 11006210 */  beq        $v1, $v0, .L8002A920\n/* 1B0DC 8002A8DC 00000000 */   nop\n/* 1B0E0 8002A8E0 4EAA0008 */  j          .L8002A938\n/* 1B0E4 8002A8E4 FF0FE730 */   andi      $a3, $a3, 0xFFF\n.L8002A8E8:\n/* 1B0E8 8002A8E8 11006210 */  beq        $v1, $v0, .L8002A930\n/* 1B0EC 8002A8EC 00F00234 */   ori       $v0, $zero, 0xF000\n/* 1B0F0 8002A8F0 0F006210 */  beq        $v1, $v0, .L8002A930\n/* 1B0F4 8002A8F4 00000000 */   nop\n/* 1B0F8 8002A8F8 4EAA0008 */  j          .L8002A938\n/* 1B0FC 8002A8FC FF0FE730 */   andi      $a3, $a3, 0xFFF\n.L8002A900:\n/* 1B100 8002A900 4DAA0008 */  j          .L8002A934\n/* 1B104 8002A904 01000434 */   ori       $a0, $zero, 0x1\n.L8002A908:\n/* 1B108 8002A908 4DAA0008 */  j          .L8002A934\n/* 1B10C 8002A90C 02000434 */   ori       $a0, $zero, 0x2\n.L8002A910:\n/* 1B110 8002A910 4DAA0008 */  j          .L8002A934\n/* 1B114 8002A914 03000434 */   ori       $a0, $zero, 0x3\n.L8002A918:\n/* 1B118 8002A918 4DAA0008 */  j          .L8002A934\n/* 1B11C 8002A91C 04000434 */   ori       $a0, $zero, 0x4\n.L8002A920:\n/* 1B120 8002A920 4DAA0008 */  j          .L8002A934\n/* 1B124 8002A924 05000434 */   ori       $a0, $zero, 0x5\n.L8002A928:\n/* 1B128 8002A928 4DAA0008 */  j          .L8002A934\n/* 1B12C 8002A92C 06000434 */   ori       $a0, $zero, 0x6\n.L8002A930:\n/* 1B130 8002A930 07000434 */  ori        $a0, $zero, 0x7\n.L8002A934:\n/* 1B134 8002A934 FF0FE730 */  andi       $a3, $a3, 0xFFF\n.L8002A938:\n/* 1B138 8002A938 FFFFC330 */  andi       $v1, $a2, 0xFFFF\n/* 1B13C 8002A93C 0040622C */  sltiu      $v0, $v1, 0x4000\n/* 1B140 8002A940 03004010 */  beqz       $v0, .L8002A950\n/* 1B144 8002A944 00800234 */   ori       $v0, $zero, 0x8000\n/* 1B148 8002A948 56AA0008 */  j          .L8002A958\n/* 1B14C 8002A94C 080006A6 */   sh        $a2, 0x8($s0)\n.L8002A950:\n/* 1B150 8002A950 23106200 */  subu       $v0, $v1, $v0\n/* 1B154 8002A954 080002A6 */  sh         $v0, 0x8($s0)\n.L8002A958:\n/* 1B158 8002A958 FFFFE330 */  andi       $v1, $a3, 0xFFFF\n/* 1B15C 8002A95C 0040622C */  sltiu      $v0, $v1, 0x4000\n/* 1B160 8002A960 03004010 */  beqz       $v0, .L8002A970\n/* 1B164 8002A964 00800234 */   ori       $v0, $zero, 0x8000\n/* 1B168 8002A968 5EAA0008 */  j          .L8002A978\n/* 1B16C 8002A96C 0A0007A6 */   sh        $a3, 0xA($s0)\n.L8002A970:\n/* 1B170 8002A970 23106200 */  subu       $v0, $v1, $v0\n/* 1B174 8002A974 0A0002A6 */  sh         $v0, 0xA($s0)\n.L8002A978:\n/* 1B178 8002A978 0E0004A6 */  sh         $a0, 0xE($s0)\n/* 1B17C 8002A97C 0380043C */  lui        $a0, %hi(_spu_RXX)\n/* 1B180 8002A980 0435848C */  lw         $a0, %lo(_spu_RXX)($a0)\n/* 1B184 8002A984 40100800 */  sll        $v0, $t0, 1\n/* 1B188 8002A988 0C0005A6 */  sh         $a1, 0xC($s0)\n/* 1B18C 8002A98C 21104400 */  addu       $v0, $v0, $a0\n/* 1B190 8002A990 00024394 */  lhu        $v1, 0x200($v0)\n/* 1B194 8002A994 00000000 */  nop\n/* 1B198 8002A998 100003A6 */  sh         $v1, 0x10($s0)\n/* 1B19C 8002A99C 02024294 */  lhu        $v0, 0x202($v0)\n/* 1B1A0 8002A9A0 00000000 */  nop\n/* 1B1A4 8002A9A4 120002A6 */  sh         $v0, 0x12($s0)\n/* 1B1A8 8002A9A8 40101200 */  sll        $v0, $s2, 1\n/* 1B1AC 8002A9AC 21104400 */  addu       $v0, $v0, $a0\n/* 1B1B0 8002A9B0 04004294 */  lhu        $v0, 0x4($v0)\n/* 1B1B4 8002A9B4 0380033C */  lui        $v1, %hi(_spu_voice_centerNote)\n/* 1B1B8 8002A9B8 C0306324 */  addiu      $v1, $v1, %lo(_spu_voice_centerNote)\n/* 1B1BC 8002A9BC 140002A6 */  sh         $v0, 0x14($s0)\n/* 1B1C0 8002A9C0 40101100 */  sll        $v0, $s1, 1\n/* 1B1C4 8002A9C4 21104300 */  addu       $v0, $v0, $v1\n/* 1B1C8 8002A9C8 00004494 */  lhu        $a0, 0x0($v0)\n/* 1B1CC 8002A9CC 00004590 */  lbu        $a1, 0x0($v0)\n/* 1B1D0 8002A9D0 14000696 */  lhu        $a2, 0x14($s0)\n/* 1B1D4 8002A9D4 8BAC000C */  jal        _spu_pitch2note\n/* 1B1D8 8002A9D8 02220400 */   srl       $a0, $a0, 8\n/* 1B1DC 8002A9DC 03004004 */  bltz       $v0, .L8002A9EC\n/* 1B1E0 8002A9E0 00000000 */   nop\n/* 1B1E4 8002A9E4 7CAA0008 */  j          .L8002A9F0\n/* 1B1E8 8002A9E8 160002A6 */   sh        $v0, 0x16($s0)\n.L8002A9EC:\n/* 1B1EC 8002A9EC 160000A6 */  sh         $zero, 0x16($s0)\n.L8002A9F0:\n/* 1B1F0 8002A9F0 40101100 */  sll        $v0, $s1, 1\n/* 1B1F4 8002A9F4 0380013C */  lui        $at, %hi(_spu_voice_centerNote)\n/* 1B1F8 8002A9F8 21082200 */  addu       $at, $at, $v0\n/* 1B1FC 8002A9FC C0302294 */  lhu        $v0, %lo(_spu_voice_centerNote)($at)\n/* 1B200 8002AA00 40181200 */  sll        $v1, $s2, 1\n/* 1B204 8002AA04 180002A6 */  sh         $v0, 0x18($s0)\n/* 1B208 8002AA08 0380023C */  lui        $v0, %hi(_spu_RXX)\n/* 1B20C 8002AA0C 0435428C */  lw         $v0, %lo(_spu_RXX)($v0)\n/* 1B210 8002AA10 0380043C */  lui        $a0, %hi(_spu_mem_mode_plus)\n/* 1B214 8002AA14 2835848C */  lw         $a0, %lo(_spu_mem_mode_plus)($a0)\n/* 1B218 8002AA18 21186200 */  addu       $v1, $v1, $v0\n/* 1B21C 8002AA1C 0C006294 */  lhu        $v0, 0xC($v1)\n/* 1B220 8002AA20 00000000 */  nop\n/* 1B224 8002AA24 1A0002A6 */  sh         $v0, 0x1A($s0)\n/* 1B228 8002AA28 06006294 */  lhu        $v0, 0x6($v1)\n/* 1B22C 8002AA2C 00000000 */  nop\n/* 1B230 8002AA30 04108200 */  sllv       $v0, $v0, $a0\n/* 1B234 8002AA34 1C0002AE */  sw         $v0, 0x1C($s0)\n/* 1B238 8002AA38 0E006294 */  lhu        $v0, 0xE($v1)\n/* 1B23C 8002AA3C 00000000 */  nop\n/* 1B240 8002AA40 04108200 */  sllv       $v0, $v0, $a0\n/* 1B244 8002AA44 200002AE */  sw         $v0, 0x20($s0)\n/* 1B248 8002AA48 08006494 */  lhu        $a0, 0x8($v1)\n/* 1B24C 8002AA4C 0A006394 */  lhu        $v1, 0xA($v1)\n/* 1B250 8002AA50 80008230 */  andi       $v0, $a0, 0x80\n/* 1B254 8002AA54 02004014 */  bnez       $v0, .L8002AA60\n/* 1B258 8002AA58 05000234 */   ori       $v0, $zero, 0x5\n/* 1B25C 8002AA5C 01000234 */  ori        $v0, $zero, 0x1\n.L8002AA60:\n/* 1B260 8002AA60 240002AE */  sw         $v0, 0x24($s0)\n/* 1B264 8002AA64 00036230 */  andi       $v0, $v1, 0x300\n/* 1B268 8002AA68 08004014 */  bnez       $v0, .L8002AA8C\n/* 1B26C 8002AA6C 07000234 */   ori       $v0, $zero, 0x7\n/* 1B270 8002AA70 00026230 */  andi       $v0, $v1, 0x200\n/* 1B274 8002AA74 05004014 */  bnez       $v0, .L8002AA8C\n/* 1B278 8002AA78 05000234 */   ori       $v0, $zero, 0x5\n/* 1B27C 8002AA7C 00016230 */  andi       $v0, $v1, 0x100\n/* 1B280 8002AA80 02004014 */  bnez       $v0, .L8002AA8C\n/* 1B284 8002AA84 03000234 */   ori       $v0, $zero, 0x3\n/* 1B288 8002AA88 01000234 */  ori        $v0, $zero, 0x1\n.L8002AA8C:\n/* 1B28C 8002AA8C 280002AE */  sw         $v0, 0x28($s0)\n/* 1B290 8002AA90 20006230 */  andi       $v0, $v1, 0x20\n/* 1B294 8002AA94 02004014 */  bnez       $v0, .L8002AAA0\n/* 1B298 8002AA98 07000234 */   ori       $v0, $zero, 0x7\n/* 1B29C 8002AA9C 03000234 */  ori        $v0, $zero, 0x3\n.L8002AAA0:\n/* 1B2A0 8002AAA0 2C0002AE */  sw         $v0, 0x2C($s0)\n/* 1B2A4 8002AAA4 02120400 */  srl        $v0, $a0, 8\n/* 1B2A8 8002AAA8 300002A6 */  sh         $v0, 0x30($s0)\n/* 1B2AC 8002AAAC F0008230 */  andi       $v0, $a0, 0xF0\n/* 1B2B0 8002AAB0 02110200 */  srl        $v0, $v0, 4\n/* 1B2B4 8002AAB4 320002A6 */  sh         $v0, 0x32($s0)\n/* 1B2B8 8002AAB8 82110300 */  srl        $v0, $v1, 6\n/* 1B2BC 8002AABC FFFC4230 */  andi       $v0, $v0, 0xFCFF\n/* 1B2C0 8002AAC0 340002A6 */  sh         $v0, 0x34($s0)\n/* 1B2C4 8002AAC4 1F006230 */  andi       $v0, $v1, 0x1F\n/* 1B2C8 8002AAC8 360002A6 */  sh         $v0, 0x36($s0)\n/* 1B2CC 8002AACC 0F008230 */  andi       $v0, $a0, 0xF\n/* 1B2D0 8002AAD0 380002A6 */  sh         $v0, 0x38($s0)\n/* 1B2D4 8002AAD4 3A0004A6 */  sh         $a0, 0x3A($s0)\n/* 1B2D8 8002AAD8 3C0003A6 */  sh         $v1, 0x3C($s0)\n.L8002AADC:\n/* 1B2DC 8002AADC 1C00BF8F */  lw         $ra, 0x1C($sp)\n/* 1B2E0 8002AAE0 1800B28F */  lw         $s2, 0x18($sp)\n/* 1B2E4 8002AAE4 1400B18F */  lw         $s1, 0x14($sp)\n/* 1B2E8 8002AAE8 1000B08F */  lw         $s0, 0x10($sp)\n/* 1B2EC 8002AAEC 2000BD27 */  addiu      $sp, $sp, 0x20\n/* 1B2F0 8002AAF0 0800E003 */  jr         $ra\n/* 1B2F4 8002AAF4 00000000 */   nop\n.size SpuGetVoiceAttr, . - SpuGetVoiceAttr
8d6de0ac3943d88a102efd95c0300239485a6ccefec5e030f86f3d0fd894afd7	.set noat      /* allow manual use of $at */\n.set noreorder /* don't insert nops after branches */\n\nglabel EntityWeaponAttack\n/* 17F2AC 8017B2AC 0780023C */  lui        $v0, %hi(g_Entities)\n/* 17F2B0 8017B2B0 D833428C */  lw         $v0, %lo(g_Entities)($v0)\n/* 17F2B4 8017B2B4 C8FFBD27 */  addiu      $sp, $sp, -0x38\n/* 17F2B8 8017B2B8 1800B2AF */  sw         $s2, 0x18($sp)\n/* 17F2BC 8017B2BC 21908000 */  addu       $s2, $a0, $zero\n/* 17F2C0 8017B2C0 3000BFAF */  sw         $ra, 0x30($sp)\n/* 17F2C4 8017B2C4 2C00B7AF */  sw         $s7, 0x2C($sp)\n/* 17F2C8 8017B2C8 2800B6AF */  sw         $s6, 0x28($sp)\n/* 17F2CC 8017B2CC 2400B5AF */  sw         $s5, 0x24($sp)\n/* 17F2D0 8017B2D0 2000B4AF */  sw         $s4, 0x20($sp)\n/* 17F2D4 8017B2D4 1C00B3AF */  sw         $s3, 0x1C($sp)\n/* 17F2D8 8017B2D8 1400B1AF */  sw         $s1, 0x14($sp)\n/* 17F2DC 8017B2DC 1000B0AF */  sw         $s0, 0x10($sp)\n/* 17F2E0 8017B2E0 000042AE */  sw         $v0, 0x0($s2)\n/* 17F2E4 8017B2E4 0780023C */  lui        $v0, %hi(PLAYER_posY_val)\n/* 17F2E8 8017B2E8 DC33428C */  lw         $v0, %lo(PLAYER_posY_val)($v0)\n/* 17F2EC 8017B2EC 00000000 */  nop\n/* 17F2F0 8017B2F0 040042AE */  sw         $v0, 0x4($s2)\n/* 17F2F4 8017B2F4 0780023C */  lui        $v0, %hi(PLAYER_facingLeft)\n/* 17F2F8 8017B2F8 EC334294 */  lhu        $v0, %lo(PLAYER_facingLeft)($v0)\n/* 17F2FC 8017B2FC 00000000 */  nop\n/* 17F300 8017B300 140042A6 */  sh         $v0, 0x14($s2)\n/* 17F304 8017B304 31004292 */  lbu        $v0, 0x31($s2)\n/* 17F308 8017B308 0780033C */  lui        $v1, %hi(g_Player_D_80072F00_11)\n/* 17F30C 8017B30C 162F6384 */  lh         $v1, %lo(g_Player_D_80072F00_11)($v1)\n/* 17F310 8017B310 00000000 */  nop\n/* 17F314 8017B314 02006010 */  beqz       $v1, .L17E000_8017B320\n/* 17F318 8017B318 7F005730 */   andi      $s7, $v0, 0x7F\n/* 17F31C 8017B31C 02001734 */  ori        $s7, $zero, 0x2\n.L17E000_8017B320:\n/* 17F320 8017B320 00111700 */  sll        $v0, $s7, 4\n/* 17F324 8017B324 1880033C */  lui        $v1, %hi(D_17E000_8017AEC4)\n/* 17F328 8017B328 C4AE6324 */  addiu      $v1, $v1, %lo(D_17E000_8017AEC4)\n/* 17F32C 8017B32C 21984300 */  addu       $s3, $v0, $v1\n/* 17F330 8017B330 0780043C */  lui        $a0, %hi(PLAYER_ext_generic_unkAC)\n/* 17F334 8017B334 84348490 */  lbu        $a0, %lo(PLAYER_ext_generic_unkAC)($a0)\n/* 17F338 8017B338 0C006392 */  lbu        $v1, 0xC($s3)\n/* 17F33C 8017B33C 00000000 */  nop\n/* 17F340 8017B340 2B108300 */  sltu       $v0, $a0, $v1\n/* 17F344 8017B344 C8004014 */  bnez       $v0, .L17E000_8017B668\n/* 17F348 8017B348 07006224 */   addiu     $v0, $v1, 0x7\n/* 17F34C 8017B34C 2A108200 */  slt        $v0, $a0, $v0\n/* 17F350 8017B350 C5004010 */  beqz       $v0, .L17E000_8017B668\n/* 17F354 8017B354 00000000 */   nop\n/* 17F358 8017B358 0780023C */  lui        $v0, %hi(g_Player_unk46)\n/* 17F35C 8017B35C 662F4294 */  lhu        $v0, %lo(g_Player_unk46)($v0)\n/* 17F360 8017B360 00000000 */  nop\n/* 17F364 8017B364 C0004010 */  beqz       $v0, .L17E000_8017B668\n/* 17F368 8017B368 00000000 */   nop\n/* 17F36C 8017B36C 2C004296 */  lhu        $v0, 0x2C($s2)\n/* 17F370 8017B370 00000000 */  nop\n/* 17F374 8017B374 9C004014 */  bnez       $v0, .L17E000_8017B5E8\n/* 17F378 8017B378 00000000 */   nop\n/* 17F37C 8017B37C 1880043C */  lui        $a0, %hi(D_17E000_8017A040)\n/* 17F380 8017B380 40A08424 */  addiu      $a0, $a0, %lo(D_17E000_8017A040)\n/* 17F384 8017B384 04EC050C */  jal        SetSpriteBank1\n/* 17F388 8017B388 00000000 */   nop\n/* 17F38C 8017B38C 1880033C */  lui        $v1, %hi(g_HandId)\n/* 17F390 8017B390 08AF638C */  lw         $v1, %lo(g_HandId)($v1)\n/* 17F394 8017B394 10800224 */  addiu      $v0, $zero, -0x7FF0\n/* 17F398 8017B398 540042A6 */  sh         $v0, 0x54($s2)\n/* 17F39C 8017B39C 10010234 */  ori        $v0, $zero, 0x110\n/* 17F3A0 8017B3A0 160042A6 */  sh         $v0, 0x16($s2)\n/* 17F3A4 8017B3A4 64000234 */  ori        $v0, $zero, 0x64\n/* 17F3A8 8017B3A8 0A006010 */  beqz       $v1, .L17E000_8017B3D4\n/* 17F3AC 8017B3AC 5A0042A6 */   sh        $v0, 0x5A($s2)\n/* 17F3B0 8017B3B0 54004296 */  lhu        $v0, 0x54($s2)\n/* 17F3B4 8017B3B4 5A004396 */  lhu        $v1, 0x5A($s2)\n/* 17F3B8 8017B3B8 02004224 */  addiu      $v0, $v0, 0x2\n/* 17F3BC 8017B3BC 540042A6 */  sh         $v0, 0x54($s2)\n/* 17F3C0 8017B3C0 16004296 */  lhu        $v0, 0x16($s2)\n/* 17F3C4 8017B3C4 02006324 */  addiu      $v1, $v1, 0x2\n/* 17F3C8 8017B3C8 5A0043A6 */  sh         $v1, 0x5A($s2)\n/* 17F3CC 8017B3CC 18004224 */  addiu      $v0, $v0, 0x18\n/* 17F3D0 8017B3D0 160042A6 */  sh         $v0, 0x16($s2)\n.L17E000_8017B3D4:\n/* 17F3D4 8017B3D4 02000434 */  ori        $a0, $zero, 0x2\n/* 17F3D8 8017B3D8 16004396 */  lhu        $v1, 0x16($s2)\n/* 17F3DC 8017B3DC 08006596 */  lhu        $a1, 0x8($s3)\n/* 17F3E0 8017B3E0 0600023C */  lui        $v0, (0x60000 >> 16)\n/* 17F3E4 8017B3E4 340042AE */  sw         $v0, 0x34($s2)\n/* 17F3E8 8017B3E8 21186500 */  addu       $v1, $v1, $a1\n/* 17F3EC 8017B3EC 160043A6 */  sh         $v1, 0x16($s2)\n/* 17F3F0 8017B3F0 0480023C */  lui        $v0, %hi(g_api_AllocPrimitives)\n/* 17F3F4 8017B3F4 B8C7428C */  lw         $v0, %lo(g_api_AllocPrimitives)($v0)\n/* 17F3F8 8017B3F8 00000000 */  nop\n/* 17F3FC 8017B3FC 09F84000 */  jalr       $v0\n/* 17F400 8017B400 0C000534 */   ori       $a1, $zero, 0xC\n/* 17F404 8017B404 00140200 */  sll        $v0, $v0, 16\n/* 17F408 8017B408 03140200 */  sra        $v0, $v0, 16\n/* 17F40C 8017B40C FFFF0324 */  addiu      $v1, $zero, -0x1\n/* 17F410 8017B410 4B004310 */  beq        $v0, $v1, .L17E000_8017B540\n/* 17F414 8017B414 640042AE */   sw        $v0, 0x64($s2)\n/* 17F418 8017B418 21880000 */  addu       $s1, $zero, $zero\n/* 17F41C 8017B41C 01001534 */  ori        $s5, $zero, 0x1\n/* 17F420 8017B420 6400438E */  lw         $v1, 0x64($s2)\n/* 17F424 8017B424 02001634 */  ori        $s6, $zero, 0x2\n/* 17F428 8017B428 40100300 */  sll        $v0, $v1, 1\n/* 17F42C 8017B42C 21104300 */  addu       $v0, $v0, $v1\n/* 17F430 8017B430 80100200 */  sll        $v0, $v0, 2\n/* 17F434 8017B434 21104300 */  addu       $v0, $v0, $v1\n/* 17F438 8017B438 80100200 */  sll        $v0, $v0, 2\n/* 17F43C 8017B43C 0880033C */  lui        $v1, %hi(g_PrimBuf)\n/* 17F440 8017B440 EC6F6324 */  addiu      $v1, $v1, %lo(g_PrimBuf)\n/* 17F444 8017B444 21804300 */  addu       $s0, $v0, $v1\n/* 17F448 8017B448 3400428E */  lw         $v0, 0x34($s2)\n/* 17F44C 8017B44C 8000033C */  lui        $v1, (0x800000 >> 16)\n/* 17F450 8017B450 25104300 */  or         $v0, $v0, $v1\n/* 17F454 8017B454 340042AE */  sw         $v0, 0x34($s2)\n/* 17F458 8017B458 0400222A */  slti       $v0, $s1, 0x4\n.L17E000_8017B45C:\n/* 17F45C 8017B45C 07004010 */  beqz       $v0, .L17E000_8017B47C\n/* 17F460 8017B460 0700222A */   slti      $v0, $s1, 0x7\n/* 17F464 8017B464 3958000C */  jal        rand\n/* 17F468 8017B468 00000000 */   nop\n/* 17F46C 8017B46C 03004230 */  andi       $v0, $v0, 0x3\n/* 17F470 8017B470 1C0002A2 */  sb         $v0, 0x1C($s0)\n/* 17F474 8017B474 1E0015A2 */  sb         $s5, 0x1E($s0)\n/* 17F478 8017B478 0700222A */  slti       $v0, $s1, 0x7\n.L17E000_8017B47C:\n/* 17F47C 8017B47C 09004014 */  bnez       $v0, .L17E000_8017B4A4\n/* 17F480 8017B480 01002232 */   andi      $v0, $s1, 0x1\n/* 17F484 8017B484 07004010 */  beqz       $v0, .L17E000_8017B4A4\n/* 17F488 8017B488 00000000 */   nop\n/* 17F48C 8017B48C 3958000C */  jal        rand\n/* 17F490 8017B490 00000000 */   nop\n/* 17F494 8017B494 0F004230 */  andi       $v0, $v0, 0xF\n/* 17F498 8017B498 1C0002A2 */  sb         $v0, 0x1C($s0)\n/* 17F49C 8017B49C 2EED0508 */  j          .L17E000_8017B4B8\n/* 17F4A0 8017B4A0 1E0016A2 */   sb        $s6, 0x1E($s0)\n.L17E000_8017B4A4:\n/* 17F4A4 8017B4A4 3958000C */  jal        rand\n/* 17F4A8 8017B4A8 00000000 */   nop\n/* 17F4AC 8017B4AC 07004230 */  andi       $v0, $v0, 0x7\n/* 17F4B0 8017B4B0 1C0002A2 */  sb         $v0, 0x1C($s0)\n/* 17F4B4 8017B4B4 1E0015A2 */  sb         $s5, 0x1E($s0)\n.L17E000_8017B4B8:\n/* 17F4B8 8017B4B8 AA2A023C */  lui        $v0, (0x2AAAAAAB >> 16)\n/* 17F4BC 8017B4BC ABAA4234 */  ori        $v0, $v0, (0x2AAAAAAB & 0xFFFF)\n/* 17F4C0 8017B4C0 18002202 */  mult       $s1, $v0\n/* 17F4C4 8017B4C4 C31F1100 */  sra        $v1, $s1, 31\n/* 17F4C8 8017B4C8 10100000 */  mfhi       $v0\n/* 17F4CC 8017B4CC 23104300 */  subu       $v0, $v0, $v1\n/* 17F4D0 8017B4D0 280002A2 */  sb         $v0, 0x28($s0)\n/* 17F4D4 8017B4D4 0B000234 */  ori        $v0, $zero, 0xB\n/* 17F4D8 8017B4D8 07002216 */  bne        $s1, $v0, .L17E000_8017B4F8\n/* 17F4DC 8017B4DC FF000234 */   ori       $v0, $zero, 0xFF\n/* 17F4E0 8017B4E0 18000234 */  ori        $v0, $zero, 0x18\n/* 17F4E4 8017B4E4 1C0002A2 */  sb         $v0, 0x1C($s0)\n/* 17F4E8 8017B4E8 03000234 */  ori        $v0, $zero, 0x3\n/* 17F4EC 8017B4EC 280016A2 */  sb         $s6, 0x28($s0)\n/* 17F4F0 8017B4F0 1E0002A2 */  sb         $v0, 0x1E($s0)\n/* 17F4F4 8017B4F4 FF000234 */  ori        $v0, $zero, 0xFF\n.L17E000_8017B4F8:\n/* 17F4F8 8017B4F8 100002A2 */  sb         $v0, 0x10($s0)\n/* 17F4FC 8017B4FC 3958000C */  jal        rand\n/* 17F500 8017B500 040002A2 */   sb        $v0, 0x4($s0)\n/* 17F504 8017B504 1F004230 */  andi       $v0, $v0, 0x1F\n/* 17F508 8017B508 01003126 */  addiu      $s1, $s1, 0x1\n/* 17F50C 8017B50C 110002A2 */  sb         $v0, 0x11($s0)\n/* 17F510 8017B510 050002A2 */  sb         $v0, 0x5($s0)\n/* 17F514 8017B514 120002A2 */  sb         $v0, 0x12($s0)\n/* 17F518 8017B518 060002A2 */  sb         $v0, 0x6($s0)\n/* 17F51C 8017B51C 0780033C */  lui        $v1, %hi(PLAYER_zPriority)\n/* 17F520 8017B520 FC336394 */  lhu        $v1, %lo(PLAYER_zPriority)($v1)\n/* 17F524 8017B524 08030234 */  ori        $v0, $zero, 0x308\n/* 17F528 8017B528 320002A6 */  sh         $v0, 0x32($s0)\n/* 17F52C 8017B52C 0C00222A */  slti       $v0, $s1, 0xC\n/* 17F530 8017B530 260003A6 */  sh         $v1, 0x26($s0)\n/* 17F534 8017B534 0000108E */  lw         $s0, 0x0($s0)\n/* 17F538 8017B538 C8FF4014 */  bnez       $v0, .L17E000_8017B45C\n/* 17F53C 8017B53C 0400222A */   slti      $v0, $s1, 0x4\n.L17E000_8017B540:\n/* 17F540 8017B540 21204002 */  addu       $a0, $s2, $zero\n/* 17F544 8017B544 21280000 */  addu       $a1, $zero, $zero\n/* 17F548 8017B548 0780023C */  lui        $v0, %hi(PLAYER_zPriority)\n/* 17F54C 8017B54C FC334294 */  lhu        $v0, %lo(PLAYER_zPriority)($v0)\n/* 17F550 8017B550 30000334 */  ori        $v1, $zero, 0x30\n/* 17F554 8017B554 180043A2 */  sb         $v1, 0x18($s2)\n/* 17F558 8017B558 FEFF4224 */  addiu      $v0, $v0, -0x2\n/* 17F55C 8017B55C 6CEC050C */  jal        SetWeaponProperties\n/* 17F560 8017B560 240042A6 */   sh        $v0, 0x24($s2)\n/* 17F564 8017B564 2120E002 */  addu       $a0, $s7, $zero\n/* 17F568 8017B568 1B008010 */  beqz       $a0, .L17E000_8017B5D8\n/* 17F56C 8017B56C 00000000 */   nop\n/* 17F570 8017B570 0780033C */  lui        $v1, %hi(g_Player_D_80072F00_11)\n/* 17F574 8017B574 162F6324 */  addiu      $v1, $v1, %lo(g_Player_D_80072F00_11)\n/* 17F578 8017B578 00006284 */  lh         $v0, 0x0($v1)\n/* 17F57C 8017B57C 00000000 */  nop\n/* 17F580 8017B580 08004010 */  beqz       $v0, .L17E000_8017B5A4\n/* 17F584 8017B584 38004228 */   slti      $v0, $v0, 0x38\n/* 17F588 8017B588 40004286 */  lh         $v0, 0x40($s2)\n/* 17F58C 8017B58C 00000000 */  nop\n/* 17F590 8017B590 40100200 */  sll        $v0, $v0, 1\n/* 17F594 8017B594 400042A6 */  sh         $v0, 0x40($s2)\n/* 17F598 8017B598 00006284 */  lh         $v0, 0x0($v1)\n/* 17F59C 8017B59C 00000000 */  nop\n/* 17F5A0 8017B5A0 38004228 */  slti       $v0, $v0, 0x38\n.L17E000_8017B5A4:\n/* 17F5A4 8017B5A4 0C004010 */  beqz       $v0, .L17E000_8017B5D8\n/* 17F5A8 8017B5A8 38000234 */   ori       $v0, $zero, 0x38\n/* 17F5AC 8017B5AC 000062A4 */  sh         $v0, 0x0($v1)\n/* 17F5B0 8017B5B0 01000234 */  ori        $v0, $zero, 0x1\n/* 17F5B4 8017B5B4 08008214 */  bne        $a0, $v0, .L17E000_8017B5D8\n/* 17F5B8 8017B5B8 21204002 */   addu      $a0, $s2, $zero\n/* 17F5BC 8017B5BC 1100053C */  lui        $a1, (0x11003D >> 16)\n/* 17F5C0 8017B5C0 3D00A534 */  ori        $a1, $a1, (0x11003D & 0xFFFF)\n/* 17F5C4 8017B5C4 0480023C */  lui        $v0, %hi(g_api_CreateEntFactoryFromEntity)\n/* 17F5C8 8017B5C8 F4C7428C */  lw         $v0, %lo(g_api_CreateEntFactoryFromEntity)($v0)\n/* 17F5CC 8017B5CC 00000000 */  nop\n/* 17F5D0 8017B5D0 09F84000 */  jalr       $v0\n/* 17F5D4 8017B5D4 21300000 */   addu      $a2, $zero, $zero\n.L17E000_8017B5D8:\n/* 17F5D8 8017B5D8 2C004296 */  lhu        $v0, 0x2C($s2)\n/* 17F5DC 8017B5DC 00000000 */  nop\n/* 17F5E0 8017B5E0 01004224 */  addiu      $v0, $v0, 0x1\n/* 17F5E4 8017B5E4 2C0042A6 */  sh         $v0, 0x2C($s2)\n.L17E000_8017B5E8:\n/* 17F5E8 8017B5E8 0780023C */  lui        $v0, %hi(PLAYER_ext_generic_unkAC)\n/* 17F5EC 8017B5EC 84344290 */  lbu        $v0, %lo(PLAYER_ext_generic_unkAC)($v0)\n/* 17F5F0 8017B5F0 0C006392 */  lbu        $v1, 0xC($s3)\n/* 17F5F4 8017B5F4 00000000 */  nop\n/* 17F5F8 8017B5F8 23104300 */  subu       $v0, $v0, $v1\n/* 17F5FC 8017B5FC AC0042A2 */  sb         $v0, 0xAC($s2)\n/* 17F600 8017B600 0780033C */  lui        $v1, %hi(PLAYER_animFrameDuration)\n/* 17F604 8017B604 2A346384 */  lh         $v1, %lo(PLAYER_animFrameDuration)($v1)\n/* 17F608 8017B608 01000234 */  ori        $v0, $zero, 0x1\n/* 17F60C 8017B60C 0D006214 */  bne        $v1, $v0, .L17E000_8017B644\n/* 17F610 8017B610 00000000 */   nop\n/* 17F614 8017B614 0780033C */  lui        $v1, %hi(PLAYER_animFrameIdx)\n/* 17F618 8017B618 28346394 */  lhu        $v1, %lo(PLAYER_animFrameIdx)($v1)\n/* 17F61C 8017B61C 0D006292 */  lbu        $v0, 0xD($s3)\n/* 17F620 8017B620 00000000 */  nop\n/* 17F624 8017B624 07006214 */  bne        $v1, $v0, .L17E000_8017B644\n/* 17F628 8017B628 00000000 */   nop\n/* 17F62C 8017B62C 0A006496 */  lhu        $a0, 0xA($s3)\n/* 17F630 8017B630 0480023C */  lui        $v0, %hi(g_api_PlaySfx)\n/* 17F634 8017B634 DCC7428C */  lw         $v0, %lo(g_api_PlaySfx)($v0)\n/* 17F638 8017B638 00000000 */  nop\n/* 17F63C 8017B63C 09F84000 */  jalr       $v0\n/* 17F640 8017B640 00000000 */   nop\n.L17E000_8017B644:\n/* 17F644 8017B644 0400648E */  lw         $a0, 0x4($s3)\n/* 17F648 8017B648 0000658E */  lw         $a1, 0x0($s3)\n/* 17F64C 8017B64C 0480023C */  lui        $v0, %hi(g_api_UpdateUnarmedAnim)\n/* 17F650 8017B650 14C8428C */  lw         $v0, %lo(g_api_UpdateUnarmedAnim)($v0)\n/* 17F654 8017B654 00000000 */  nop\n/* 17F658 8017B658 09F84000 */  jalr       $v0\n/* 17F65C 8017B65C 00000000 */   nop\n/* 17F660 8017B660 05004104 */  bgez       $v0, .L17E000_8017B678\n/* 17F664 8017B664 00000000 */   nop\n.L17E000_8017B668:\n/* 17F668 8017B668 C3EB050C */  jal        DestroyEntity\n/* 17F66C 8017B66C 21204002 */   addu      $a0, $s2, $zero\n/* 17F670 8017B670 16EE0508 */  j          .L17E000_8017B858\n/* 17F674 8017B674 00000000 */   nop\n.L17E000_8017B678:\n/* 17F678 8017B678 0780023C */  lui        $v0, %hi(PLAYER_drawFlags)\n/* 17F67C 8017B67C F1334290 */  lbu        $v0, %lo(PLAYER_drawFlags)($v0)\n/* 17F680 8017B680 56004386 */  lh         $v1, 0x56($s2)\n/* 17F684 8017B684 190042A2 */  sb         $v0, 0x19($s2)\n/* 17F688 8017B688 0780023C */  lui        $v0, %hi(PLAYER_rotY)\n/* 17F68C 8017B68C F4334294 */  lhu        $v0, %lo(PLAYER_rotY)($v0)\n/* 17F690 8017B690 00000000 */  nop\n/* 17F694 8017B694 1C0042A6 */  sh         $v0, 0x1C($s2)\n/* 17F698 8017B698 0780023C */  lui        $v0, %hi(PLAYER_rotPivotY)\n/* 17F69C 8017B69C FA334294 */  lhu        $v0, %lo(PLAYER_rotPivotY)($v0)\n/* 17F6A0 8017B6A0 00000000 */  nop\n/* 17F6A4 8017B6A4 220042A6 */  sh         $v0, 0x22($s2)\n/* 17F6A8 8017B6A8 0D000234 */  ori        $v0, $zero, 0xD\n/* 17F6AC 8017B6AC 07006210 */  beq        $v1, $v0, .L17E000_8017B6CC\n/* 17F6B0 8017B6B0 22000234 */   ori       $v0, $zero, 0x22\n/* 17F6B4 8017B6B4 05006210 */  beq        $v1, $v0, .L17E000_8017B6CC\n/* 17F6B8 8017B6B8 2C000234 */   ori       $v0, $zero, 0x2C\n/* 17F6BC 8017B6BC 03006210 */  beq        $v1, $v0, .L17E000_8017B6CC\n/* 17F6C0 8017B6C0 3E000234 */   ori       $v0, $zero, 0x3E\n/* 17F6C4 8017B6C4 64006214 */  bne        $v1, $v0, .L17E000_8017B858\n/* 17F6C8 8017B6C8 00000000 */   nop\n.L17E000_8017B6CC:\n/* 17F6CC 8017B6CC 6400438E */  lw         $v1, 0x64($s2)\n/* 17F6D0 8017B6D0 FFFF0224 */  addiu      $v0, $zero, -0x1\n/* 17F6D4 8017B6D4 60006210 */  beq        $v1, $v0, .L17E000_8017B858\n/* 17F6D8 8017B6D8 21880000 */   addu      $s1, $zero, $zero\n/* 17F6DC 8017B6DC 6400438E */  lw         $v1, 0x64($s2)\n/* 17F6E0 8017B6E0 1880073C */  lui        $a3, %hi(D_17E000_8017AEF4)\n/* 17F6E4 8017B6E4 F4AEE724 */  addiu      $a3, $a3, %lo(D_17E000_8017AEF4)\n/* 17F6E8 8017B6E8 40100300 */  sll        $v0, $v1, 1\n/* 17F6EC 8017B6EC 21104300 */  addu       $v0, $v0, $v1\n/* 17F6F0 8017B6F0 80100200 */  sll        $v0, $v0, 2\n/* 17F6F4 8017B6F4 21104300 */  addu       $v0, $v0, $v1\n/* 17F6F8 8017B6F8 80100200 */  sll        $v0, $v0, 2\n/* 17F6FC 8017B6FC 0880033C */  lui        $v1, %hi(g_PrimBuf)\n/* 17F700 8017B700 EC6F6324 */  addiu      $v1, $v1, %lo(g_PrimBuf)\n/* 17F704 8017B704 21804300 */  addu       $s0, $v0, $v1\n/* 17F708 8017B708 3400428E */  lw         $v0, 0x34($s2)\n/* 17F70C 8017B70C 8000033C */  lui        $v1, (0x800000 >> 16)\n/* 17F710 8017B710 25104300 */  or         $v0, $v0, $v1\n/* 17F714 8017B714 340042AE */  sw         $v0, 0x34($s2)\n.L17E000_8017B718:\n/* 17F718 8017B718 56004386 */  lh         $v1, 0x56($s2)\n/* 17F71C 8017B71C 22000234 */  ori        $v0, $zero, 0x22\n/* 17F720 8017B720 10006210 */  beq        $v1, $v0, .L17E000_8017B764\n/* 17F724 8017B724 23006228 */   slti      $v0, $v1, 0x23\n/* 17F728 8017B728 05004010 */  beqz       $v0, .L17E000_8017B740\n/* 17F72C 8017B72C 0D000234 */   ori       $v0, $zero, 0xD\n/* 17F730 8017B730 0A006210 */  beq        $v1, $v0, .L17E000_8017B75C\n/* 17F734 8017B734 40301400 */   sll       $a2, $s4, 1\n/* 17F738 8017B738 DFED0508 */  j          .L17E000_8017B77C\n/* 17F73C 8017B73C 00000000 */   nop\n.L17E000_8017B740:\n/* 17F740 8017B740 2C000234 */  ori        $v0, $zero, 0x2C\n/* 17F744 8017B744 09006210 */  beq        $v1, $v0, .L17E000_8017B76C\n/* 17F748 8017B748 3E000234 */   ori       $v0, $zero, 0x3E\n/* 17F74C 8017B74C 09006210 */  beq        $v1, $v0, .L17E000_8017B774\n/* 17F750 8017B750 40301400 */   sll       $a2, $s4, 1\n/* 17F754 8017B754 DFED0508 */  j          .L17E000_8017B77C\n/* 17F758 8017B758 00000000 */   nop\n.L17E000_8017B75C:\n/* 17F75C 8017B75C DEED0508 */  j          .L17E000_8017B778\n/* 17F760 8017B760 21A00000 */   addu      $s4, $zero, $zero\n.L17E000_8017B764:\n/* 17F764 8017B764 DEED0508 */  j          .L17E000_8017B778\n/* 17F768 8017B768 01001434 */   ori       $s4, $zero, 0x1\n.L17E000_8017B76C:\n/* 17F76C 8017B76C DEED0508 */  j          .L17E000_8017B778\n/* 17F770 8017B770 02001434 */   ori       $s4, $zero, 0x2\n.L17E000_8017B774:\n/* 17F774 8017B774 03001434 */  ori        $s4, $zero, 0x3\n.L17E000_8017B778:\n/* 17F778 8017B778 40301400 */  sll        $a2, $s4, 1\n.L17E000_8017B77C:\n/* 17F77C 8017B77C 2110C700 */  addu       $v0, $a2, $a3\n/* 17F780 8017B780 00004294 */  lhu        $v0, 0x0($v0)\n/* 17F784 8017B784 FFFF0424 */  addiu      $a0, $zero, -0x1\n/* 17F788 8017B788 23185100 */  subu       $v1, $v0, $s1\n/* 17F78C 8017B78C 14004296 */  lhu        $v0, 0x14($s2)\n/* 17F790 8017B790 00000000 */  nop\n/* 17F794 8017B794 03004010 */  beqz       $v0, .L17E000_8017B7A4\n/* 17F798 8017B798 21286000 */   addu      $a1, $v1, $zero\n/* 17F79C 8017B79C 23280300 */  negu       $a1, $v1\n/* 17F7A0 8017B7A0 01000434 */  ori        $a0, $zero, 0x1\n.L17E000_8017B7A4:\n/* 17F7A4 8017B7A4 AA2A023C */  lui        $v0, (0x2AAAAAAB >> 16)\n/* 17F7A8 8017B7A8 ABAA4234 */  ori        $v0, $v0, (0x2AAAAAAB & 0xFFFF)\n/* 17F7AC 8017B7AC 18002202 */  mult       $s1, $v0\n/* 17F7B0 8017B7B0 20000296 */  lhu        $v0, 0x20($s0)\n/* 17F7B4 8017B7B4 00000000 */  nop\n/* 17F7B8 8017B7B8 21108200 */  addu       $v0, $a0, $v0\n/* 17F7BC 8017B7BC 200002A6 */  sh         $v0, 0x20($s0)\n/* 17F7C0 8017B7C0 1880013C */  lui        $at, %hi(D_17E000_8017AEFC)\n/* 17F7C4 8017B7C4 21082600 */  addu       $at, $at, $a2\n/* 17F7C8 8017B7C8 FCAE2494 */  lhu        $a0, %lo(D_17E000_8017AEFC)($at)\n/* 17F7CC 8017B7CC 02004296 */  lhu        $v0, 0x2($s2)\n/* 17F7D0 8017B7D0 20000396 */  lhu        $v1, 0x20($s0)\n/* 17F7D4 8017B7D4 2110A200 */  addu       $v0, $a1, $v0\n/* 17F7D8 8017B7D8 080002A6 */  sh         $v0, 0x8($s0)\n/* 17F7DC 8017B7DC 21104300 */  addu       $v0, $v0, $v1\n/* 17F7E0 8017B7E0 1C000592 */  lbu        $a1, 0x1C($s0)\n/* 17F7E4 8017B7E4 C31F1100 */  sra        $v1, $s1, 31\n/* 17F7E8 8017B7E8 140002A6 */  sh         $v0, 0x14($s0)\n/* 17F7EC 8017B7EC 10100000 */  mfhi       $v0\n/* 17F7F0 8017B7F0 23104300 */  subu       $v0, $v0, $v1\n/* 17F7F4 8017B7F4 06004396 */  lhu        $v1, 0x6($s2)\n/* 17F7F8 8017B7F8 21208200 */  addu       $a0, $a0, $v0\n/* 17F7FC 8017B7FC 21188300 */  addu       $v1, $a0, $v1\n/* 17F800 8017B800 0A0003A6 */  sh         $v1, 0xA($s0)\n/* 17F804 8017B804 06004296 */  lhu        $v0, 0x6($s2)\n/* 17F808 8017B808 28000392 */  lbu        $v1, 0x28($s0)\n/* 17F80C 8017B80C 21208200 */  addu       $a0, $a0, $v0\n/* 17F810 8017B810 28000292 */  lbu        $v0, 0x28($s0)\n/* 17F814 8017B814 2B186500 */  sltu       $v1, $v1, $a1\n/* 17F818 8017B818 21104400 */  addu       $v0, $v0, $a0\n/* 17F81C 8017B81C 06006010 */  beqz       $v1, .L17E000_8017B838\n/* 17F820 8017B820 160002A6 */   sh        $v0, 0x16($s0)\n/* 17F824 8017B824 28000292 */  lbu        $v0, 0x28($s0)\n/* 17F828 8017B828 1E000392 */  lbu        $v1, 0x1E($s0)\n/* 17F82C 8017B82C 00000000 */  nop\n/* 17F830 8017B830 21104300 */  addu       $v0, $v0, $v1\n/* 17F834 8017B834 280002A2 */  sb         $v0, 0x28($s0)\n.L17E000_8017B838:\n/* 17F838 8017B838 32000296 */  lhu        $v0, 0x32($s0)\n/* 17F83C 8017B83C 01003126 */  addiu      $s1, $s1, 0x1\n/* 17F840 8017B840 F7FF4230 */  andi       $v0, $v0, 0xFFF7\n/* 17F844 8017B844 320002A6 */  sh         $v0, 0x32($s0)\n/* 17F848 8017B848 0C00222A */  slti       $v0, $s1, 0xC\n/* 17F84C 8017B84C 0000108E */  lw         $s0, 0x0($s0)\n/* 17F850 8017B850 B1FF4014 */  bnez       $v0, .L17E000_8017B718\n/* 17F854 8017B854 00000000 */   nop\n.L17E000_8017B858:\n/* 17F858 8017B858 3000BF8F */  lw         $ra, 0x30($sp)\n/* 17F85C 8017B85C 2C00B78F */  lw         $s7, 0x2C($sp)\n/* 17F860 8017B860 2800B68F */  lw         $s6, 0x28($sp)\n/* 17F864 8017B864 2400B58F */  lw         $s5, 0x24($sp)\n/* 17F868 8017B868 2000B48F */  lw         $s4, 0x20($sp)\n/* 17F86C 8017B86C 1C00B38F */  lw         $s3, 0x1C($sp)\n/* 17F870 8017B870 1800B28F */  lw         $s2, 0x18($sp)\n/* 17F874 8017B874 1400B18F */  lw         $s1, 0x14($sp)\n/* 17F878 8017B878 1000B08F */  lw         $s0, 0x10($sp)\n/* 17F87C 8017B87C 3800BD27 */  addiu      $sp, $sp, 0x38\n/* 17F880 8017B880 0800E003 */  jr         $ra\n/* 17F884 8017B884 00000000 */   nop\n.size EntityWeaponAttack, . - EntityWeaponAttack
145e7697f71e59a5c9a6b6d50257a7edb73daa8c45bbf42b280457d3ad4c7fd0	.set noat      /* allow manual use of $at */\n.set noreorder /* don't insert nops after branches */\n\nglabel func_ptr_80170008\n/* 15CD2C 8017BD2C 0780023C */  lui        $v0, %hi(PLAYER_ext_generic_unkAC)\n/* 15CD30 8017BD30 84344290 */  lbu        $v0, %lo(PLAYER_ext_generic_unkAC)($v0)\n/* 15CD34 8017BD34 C0FFBD27 */  addiu      $sp, $sp, -0x40\n/* 15CD38 8017BD38 2400B3AF */  sw         $s3, 0x24($sp)\n/* 15CD3C 8017BD3C 21988000 */  addu       $s3, $a0, $zero\n/* 15CD40 8017BD40 3800BFAF */  sw         $ra, 0x38($sp)\n/* 15CD44 8017BD44 3400B7AF */  sw         $s7, 0x34($sp)\n/* 15CD48 8017BD48 3000B6AF */  sw         $s6, 0x30($sp)\n/* 15CD4C 8017BD4C 2C00B5AF */  sw         $s5, 0x2C($sp)\n/* 15CD50 8017BD50 2800B4AF */  sw         $s4, 0x28($sp)\n/* 15CD54 8017BD54 2000B2AF */  sw         $s2, 0x20($sp)\n/* 15CD58 8017BD58 1C00B1AF */  sw         $s1, 0x1C($sp)\n/* 15CD5C 8017BD5C BFFF4224 */  addiu      $v0, $v0, -0x41\n/* 15CD60 8017BD60 0700422C */  sltiu      $v0, $v0, 0x7\n/* 15CD64 8017BD64 A3004010 */  beqz       $v0, .L15B000_8017BFF4\n/* 15CD68 8017BD68 1800B0AF */   sw        $s0, 0x18($sp)\n/* 15CD6C 8017BD6C 0780023C */  lui        $v0, %hi(g_Player_unk46)\n/* 15CD70 8017BD70 662F4294 */  lhu        $v0, %lo(g_Player_unk46)($v0)\n/* 15CD74 8017BD74 00000000 */  nop\n/* 15CD78 8017BD78 9E004010 */  beqz       $v0, .L15B000_8017BFF4\n/* 15CD7C 8017BD7C 00000000 */   nop\n/* 15CD80 8017BD80 0780023C */  lui        $v0, %hi(PLAYER_facingLeft)\n/* 15CD84 8017BD84 EC334294 */  lhu        $v0, %lo(PLAYER_facingLeft)($v0)\n/* 15CD88 8017BD88 00000000 */  nop\n/* 15CD8C 8017BD8C 02004010 */  beqz       $v0, .L15B000_8017BD98\n/* 15CD90 8017BD90 0C000334 */   ori       $v1, $zero, 0xC\n/* 15CD94 8017BD94 F4FF0324 */  addiu      $v1, $zero, -0xC\n.L15B000_8017BD98:\n/* 15CD98 8017BD98 0780023C */  lui        $v0, %hi(PLAYER_posX_i_hi)\n/* 15CD9C 8017BD9C DA334294 */  lhu        $v0, %lo(PLAYER_posX_i_hi)($v0)\n/* 15CDA0 8017BDA0 00000000 */  nop\n/* 15CDA4 8017BDA4 21106200 */  addu       $v0, $v1, $v0\n/* 15CDA8 8017BDA8 020062A6 */  sh         $v0, 0x2($s3)\n/* 15CDAC 8017BDAC 0780033C */  lui        $v1, %hi(PLAYER_posY_i_hi)\n/* 15CDB0 8017BDB0 DE336394 */  lhu        $v1, %lo(PLAYER_posY_i_hi)($v1)\n/* 15CDB4 8017BDB4 00000000 */  nop\n/* 15CDB8 8017BDB8 E6FF6224 */  addiu      $v0, $v1, -0x1A\n/* 15CDBC 8017BDBC 060062A6 */  sh         $v0, 0x6($s3)\n/* 15CDC0 8017BDC0 0780023C */  lui        $v0, %hi(PLAYER_drawFlags)\n/* 15CDC4 8017BDC4 F1334290 */  lbu        $v0, %lo(PLAYER_drawFlags)($v0)\n/* 15CDC8 8017BDC8 00000000 */  nop\n/* 15CDCC 8017BDCC 02004230 */  andi       $v0, $v0, 0x2\n/* 15CDD0 8017BDD0 02004010 */  beqz       $v0, .L15B000_8017BDDC\n/* 15CDD4 8017BDD4 E1FF6224 */   addiu     $v0, $v1, -0x1F\n/* 15CDD8 8017BDD8 060062A6 */  sh         $v0, 0x6($s3)\n.L15B000_8017BDDC:\n/* 15CDDC 8017BDDC 2C006396 */  lhu        $v1, 0x2C($s3)\n/* 15CDE0 8017BDE0 00000000 */  nop\n/* 15CDE4 8017BDE4 05006010 */  beqz       $v1, .L15B000_8017BDFC\n/* 15CDE8 8017BDE8 01000234 */   ori       $v0, $zero, 0x1\n/* 15CDEC 8017BDEC 73006210 */  beq        $v1, $v0, .L15B000_8017BFBC\n/* 15CDF0 8017BDF0 00000000 */   nop\n/* 15CDF4 8017BDF4 01F00508 */  j          .L15B000_8017C004\n/* 15CDF8 8017BDF8 00000000 */   nop\n.L15B000_8017BDFC:\n/* 15CDFC 8017BDFC 02000434 */  ori        $a0, $zero, 0x2\n/* 15CE00 8017BE00 0480023C */  lui        $v0, %hi(g_api_AllocPrimitives)\n/* 15CE04 8017BE04 B8C7428C */  lw         $v0, %lo(g_api_AllocPrimitives)($v0)\n/* 15CE08 8017BE08 00000000 */  nop\n/* 15CE0C 8017BE0C 09F84000 */  jalr       $v0\n/* 15CE10 8017BE10 10000534 */   ori       $a1, $zero, 0x10\n/* 15CE14 8017BE14 00140200 */  sll        $v0, $v0, 16\n/* 15CE18 8017BE18 03140200 */  sra        $v0, $v0, 16\n/* 15CE1C 8017BE1C FFFF0324 */  addiu      $v1, $zero, -0x1\n/* 15CE20 8017BE20 74004310 */  beq        $v0, $v1, .L15B000_8017BFF4\n/* 15CE24 8017BE24 640062AE */   sw        $v0, 0x64($s3)\n/* 15CE28 8017BE28 21880000 */  addu       $s1, $zero, $zero\n/* 15CE2C 8017BE2C E0FF1524 */  addiu      $s5, $zero, -0x20\n/* 15CE30 8017BE30 FF001434 */  ori        $s4, $zero, 0xFF\n/* 15CE34 8017BE34 6400638E */  lw         $v1, 0x64($s3)\n/* 15CE38 8017BE38 8600023C */  lui        $v0, (0x860000 >> 16)\n/* 15CE3C 8017BE3C 340062AE */  sw         $v0, 0x34($s3)\n/* 15CE40 8017BE40 40100300 */  sll        $v0, $v1, 1\n/* 15CE44 8017BE44 21104300 */  addu       $v0, $v0, $v1\n/* 15CE48 8017BE48 80100200 */  sll        $v0, $v0, 2\n/* 15CE4C 8017BE4C 21104300 */  addu       $v0, $v0, $v1\n/* 15CE50 8017BE50 80100200 */  sll        $v0, $v0, 2\n/* 15CE54 8017BE54 0880033C */  lui        $v1, %hi(g_PrimBuf)\n/* 15CE58 8017BE58 EC6F6324 */  addiu      $v1, $v1, %lo(g_PrimBuf)\n/* 15CE5C 8017BE5C 21904300 */  addu       $s2, $v0, $v1\n/* 15CE60 8017BE60 00861100 */  sll        $s0, $s1, 24\n.L15B000_8017BE64:\n/* 15CE64 8017BE64 03841000 */  sra        $s0, $s0, 16\n/* 15CE68 8017BE68 5A5B000C */  jal        rcos\n/* 15CE6C 8017BE6C 21200002 */   addu      $a0, $s0, $zero\n/* 15CE70 8017BE70 21200002 */  addu       $a0, $s0, $zero\n/* 15CE74 8017BE74 40100200 */  sll        $v0, $v0, 1\n/* 15CE78 8017BE78 03120200 */  sra        $v0, $v0, 8\n/* 15CE7C 8017BE7C 20004224 */  addiu      $v0, $v0, 0x20\n/* 15CE80 8017BE80 275B000C */  jal        rsin\n/* 15CE84 8017BE84 0C0042A2 */   sb        $v0, 0xC($s2)\n/* 15CE88 8017BE88 01003126 */  addiu      $s1, $s1, 0x1\n/* 15CE8C 8017BE8C 00861100 */  sll        $s0, $s1, 24\n/* 15CE90 8017BE90 03841000 */  sra        $s0, $s0, 16\n/* 15CE94 8017BE94 21200002 */  addu       $a0, $s0, $zero\n/* 15CE98 8017BE98 40100200 */  sll        $v0, $v0, 1\n/* 15CE9C 8017BE9C 03120200 */  sra        $v0, $v0, 8\n/* 15CEA0 8017BEA0 2310A202 */  subu       $v0, $s5, $v0\n/* 15CEA4 8017BEA4 5A5B000C */  jal        rcos\n/* 15CEA8 8017BEA8 0D0042A2 */   sb        $v0, 0xD($s2)\n/* 15CEAC 8017BEAC 21200002 */  addu       $a0, $s0, $zero\n/* 15CEB0 8017BEB0 40100200 */  sll        $v0, $v0, 1\n/* 15CEB4 8017BEB4 03120200 */  sra        $v0, $v0, 8\n/* 15CEB8 8017BEB8 20004224 */  addiu      $v0, $v0, 0x20\n/* 15CEBC 8017BEBC 275B000C */  jal        rsin\n/* 15CEC0 8017BEC0 180042A2 */   sb        $v0, 0x18($s2)\n/* 15CEC4 8017BEC4 40100200 */  sll        $v0, $v0, 1\n/* 15CEC8 8017BEC8 03120200 */  sra        $v0, $v0, 8\n/* 15CECC 8017BECC 0D004392 */  lbu        $v1, 0xD($s2)\n/* 15CED0 8017BED0 2310A202 */  subu       $v0, $s5, $v0\n/* 15CED4 8017BED4 0400632C */  sltiu      $v1, $v1, 0x4\n/* 15CED8 8017BED8 02006010 */  beqz       $v1, .L15B000_8017BEE4\n/* 15CEDC 8017BEDC 190042A2 */   sb        $v0, 0x19($s2)\n/* 15CEE0 8017BEE0 0D0054A2 */  sb         $s4, 0xD($s2)\n.L15B000_8017BEE4:\n/* 15CEE4 8017BEE4 19004292 */  lbu        $v0, 0x19($s2)\n/* 15CEE8 8017BEE8 00000000 */  nop\n/* 15CEEC 8017BEEC 0400422C */  sltiu      $v0, $v0, 0x4\n/* 15CEF0 8017BEF0 02004010 */  beqz       $v0, .L15B000_8017BEFC\n/* 15CEF4 8017BEF4 20000234 */   ori       $v0, $zero, 0x20\n/* 15CEF8 8017BEF8 190054A2 */  sb         $s4, 0x19($s2)\n.L15B000_8017BEFC:\n/* 15CEFC 8017BEFC 300042A2 */  sb         $v0, 0x30($s2)\n/* 15CF00 8017BF00 240042A2 */  sb         $v0, 0x24($s2)\n/* 15CF04 8017BF04 E0000234 */  ori        $v0, $zero, 0xE0\n/* 15CF08 8017BF08 310042A2 */  sb         $v0, 0x31($s2)\n/* 15CF0C 8017BF0C 250042A2 */  sb         $v0, 0x25($s2)\n/* 15CF10 8017BF10 7F000234 */  ori        $v0, $zero, 0x7F\n/* 15CF14 8017BF14 1D0042A2 */  sb         $v0, 0x1D($s2)\n/* 15CF18 8017BF18 290042A2 */  sb         $v0, 0x29($s2)\n/* 15CF1C 8017BF1C 5F010234 */  ori        $v0, $zero, 0x15F\n/* 15CF20 8017BF20 0E0042A6 */  sh         $v0, 0xE($s2)\n/* 15CF24 8017BF24 1A000234 */  ori        $v0, $zero, 0x1A\n/* 15CF28 8017BF28 1A0042A6 */  sh         $v0, 0x1A($s2)\n/* 15CF2C 8017BF2C 04000234 */  ori        $v0, $zero, 0x4\n/* 15CF30 8017BF30 110040A2 */  sb         $zero, 0x11($s2)\n/* 15CF34 8017BF34 120040A2 */  sb         $zero, 0x12($s2)\n/* 15CF38 8017BF38 100040A2 */  sb         $zero, 0x10($s2)\n/* 15CF3C 8017BF3C 050040A2 */  sb         $zero, 0x5($s2)\n/* 15CF40 8017BF40 060040A2 */  sb         $zero, 0x6($s2)\n/* 15CF44 8017BF44 040040A2 */  sb         $zero, 0x4($s2)\n/* 15CF48 8017BF48 280054A2 */  sb         $s4, 0x28($s2)\n/* 15CF4C 8017BF4C 1C0054A2 */  sb         $s4, 0x1C($s2)\n/* 15CF50 8017BF50 2A0040A2 */  sb         $zero, 0x2A($s2)\n/* 15CF54 8017BF54 1E0040A2 */  sb         $zero, 0x1E($s2)\n/* 15CF58 8017BF58 070042A2 */  sb         $v0, 0x7($s2)\n/* 15CF5C 8017BF5C 0780033C */  lui        $v1, %hi(PLAYER_zPriority)\n/* 15CF60 8017BF60 FC336394 */  lhu        $v1, %lo(PLAYER_zPriority)($v1)\n/* 15CF64 8017BF64 35030234 */  ori        $v0, $zero, 0x335\n/* 15CF68 8017BF68 320042A6 */  sh         $v0, 0x32($s2)\n/* 15CF6C 8017BF6C 1000222A */  slti       $v0, $s1, 0x10\n/* 15CF70 8017BF70 02006324 */  addiu      $v1, $v1, 0x2\n/* 15CF74 8017BF74 260043A6 */  sh         $v1, 0x26($s2)\n/* 15CF78 8017BF78 0000528E */  lw         $s2, 0x0($s2)\n/* 15CF7C 8017BF7C B9FF4014 */  bnez       $v0, .L15B000_8017BE64\n/* 15CF80 8017BF80 00861100 */   sll       $s0, $s1, 24\n/* 15CF84 8017BF84 04000234 */  ori        $v0, $zero, 0x4\n/* 15CF88 8017BF88 7C0062A6 */  sh         $v0, 0x7C($s3)\n/* 15CF8C 8017BF8C 30006296 */  lhu        $v0, 0x30($s3)\n/* 15CF90 8017BF90 19000334 */  ori        $v1, $zero, 0x19\n/* 15CF94 8017BF94 007F4230 */  andi       $v0, $v0, 0x7F00\n/* 15CF98 8017BF98 03004010 */  beqz       $v0, .L15B000_8017BFA8\n/* 15CF9C 8017BF9C 7E0063A6 */   sh        $v1, 0x7E($s3)\n/* 15CFA0 8017BFA0 28000234 */  ori        $v0, $zero, 0x28\n/* 15CFA4 8017BFA4 7E0062A6 */  sh         $v0, 0x7E($s3)\n.L15B000_8017BFA8:\n/* 15CFA8 8017BFA8 2C006296 */  lhu        $v0, 0x2C($s3)\n/* 15CFAC 8017BFAC 00000000 */  nop\n/* 15CFB0 8017BFB0 01004224 */  addiu      $v0, $v0, 0x1\n/* 15CFB4 8017BFB4 01F00508 */  j          .L15B000_8017C004\n/* 15CFB8 8017BFB8 2C0062A6 */   sh        $v0, 0x2C($s3)\n.L15B000_8017BFBC:\n/* 15CFBC 8017BFBC 7C006286 */  lh         $v0, 0x7C($s3)\n/* 15CFC0 8017BFC0 00000000 */  nop\n/* 15CFC4 8017BFC4 21184000 */  addu       $v1, $v0, $zero\n/* 15CFC8 8017BFC8 28004228 */  slti       $v0, $v0, 0x28\n/* 15CFCC 8017BFCC 02004010 */  beqz       $v0, .L15B000_8017BFD8\n/* 15CFD0 8017BFD0 06006224 */   addiu     $v0, $v1, 0x6\n/* 15CFD4 8017BFD4 7C0062A6 */  sh         $v0, 0x7C($s3)\n.L15B000_8017BFD8:\n/* 15CFD8 8017BFD8 7E006296 */  lhu        $v0, 0x7E($s3)\n/* 15CFDC 8017BFDC 00000000 */  nop\n/* 15CFE0 8017BFE0 FFFF4224 */  addiu      $v0, $v0, -0x1\n/* 15CFE4 8017BFE4 7E0062A6 */  sh         $v0, 0x7E($s3)\n/* 15CFE8 8017BFE8 00140200 */  sll        $v0, $v0, 16\n/* 15CFEC 8017BFEC 05004014 */  bnez       $v0, .L15B000_8017C004\n/* 15CFF0 8017BFF0 00000000 */   nop\n.L15B000_8017BFF4:\n/* 15CFF4 8017BFF4 53EC050C */  jal        DestroyEntity\n/* 15CFF8 8017BFF8 21206002 */   addu      $a0, $s3, $zero\n/* 15CFFC 8017BFFC 47F00508 */  j          .L15B000_8017C11C\n/* 15D000 8017C000 00000000 */   nop\n.L15B000_8017C004:\n/* 15D004 8017C004 7E006386 */  lh         $v1, 0x7E($s3)\n/* 15D008 8017C008 00000000 */  nop\n/* 15D00C 8017C00C 08006228 */  slti       $v0, $v1, 0x8\n/* 15D010 8017C010 02004010 */  beqz       $v0, .L15B000_8017C01C\n/* 15D014 8017C014 80001634 */   ori       $s6, $zero, 0x80\n/* 15D018 8017C018 00B10300 */  sll        $s6, $v1, 4\n.L15B000_8017C01C:\n/* 15D01C 8017C01C 21880000 */  addu       $s1, $zero, $zero\n/* 15D020 8017C020 FF00C232 */  andi       $v0, $s6, 0xFF\n/* 15D024 8017C024 42B80200 */  srl        $s7, $v0, 1\n/* 15D028 8017C028 02007596 */  lhu        $s5, 0x2($s3)\n/* 15D02C 8017C02C 06007496 */  lhu        $s4, 0x6($s3)\n/* 15D030 8017C030 6400638E */  lw         $v1, 0x64($s3)\n/* 15D034 8017C034 7C007386 */  lh         $s3, 0x7C($s3)\n/* 15D038 8017C038 40100300 */  sll        $v0, $v1, 1\n/* 15D03C 8017C03C 21104300 */  addu       $v0, $v0, $v1\n/* 15D040 8017C040 80100200 */  sll        $v0, $v0, 2\n/* 15D044 8017C044 21104300 */  addu       $v0, $v0, $v1\n/* 15D048 8017C048 80100200 */  sll        $v0, $v0, 2\n/* 15D04C 8017C04C 0880033C */  lui        $v1, %hi(g_PrimBuf)\n/* 15D050 8017C050 EC6F6324 */  addiu      $v1, $v1, %lo(g_PrimBuf)\n/* 15D054 8017C054 21904300 */  addu       $s2, $v0, $v1\n/* 15D058 8017C058 00861100 */  sll        $s0, $s1, 24\n.L15B000_8017C05C:\n/* 15D05C 8017C05C 03841000 */  sra        $s0, $s0, 16\n/* 15D060 8017C060 21200002 */  addu       $a0, $s0, $zero\n/* 15D064 8017C064 2C0055A6 */  sh         $s5, 0x2C($s2)\n/* 15D068 8017C068 200055A6 */  sh         $s5, 0x20($s2)\n/* 15D06C 8017C06C 2E0054A6 */  sh         $s4, 0x2E($s2)\n/* 15D070 8017C070 220054A6 */  sh         $s4, 0x22($s2)\n/* 15D074 8017C074 280056A2 */  sb         $s6, 0x28($s2)\n/* 15D078 8017C078 1C0056A2 */  sb         $s6, 0x1C($s2)\n/* 15D07C 8017C07C 290057A2 */  sb         $s7, 0x29($s2)\n/* 15D080 8017C080 5A5B000C */  jal        rcos\n/* 15D084 8017C084 1D0057A2 */   sb        $s7, 0x1D($s2)\n/* 15D088 8017C088 03110200 */  sra        $v0, $v0, 4\n/* 15D08C 8017C08C 18005300 */  mult       $v0, $s3\n/* 15D090 8017C090 21200002 */  addu       $a0, $s0, $zero\n/* 15D094 8017C094 12100000 */  mflo       $v0\n/* 15D098 8017C098 03120200 */  sra        $v0, $v0, 8\n/* 15D09C 8017C09C 2110A202 */  addu       $v0, $s5, $v0\n/* 15D0A0 8017C0A0 275B000C */  jal        rsin\n/* 15D0A4 8017C0A4 080042A6 */   sh        $v0, 0x8($s2)\n/* 15D0A8 8017C0A8 03110200 */  sra        $v0, $v0, 4\n/* 15D0AC 8017C0AC 18005300 */  mult       $v0, $s3\n/* 15D0B0 8017C0B0 01003126 */  addiu      $s1, $s1, 0x1\n/* 15D0B4 8017C0B4 00861100 */  sll        $s0, $s1, 24\n/* 15D0B8 8017C0B8 03841000 */  sra        $s0, $s0, 16\n/* 15D0BC 8017C0BC 21200002 */  addu       $a0, $s0, $zero\n/* 15D0C0 8017C0C0 12100000 */  mflo       $v0\n/* 15D0C4 8017C0C4 03120200 */  sra        $v0, $v0, 8\n/* 15D0C8 8017C0C8 23108202 */  subu       $v0, $s4, $v0\n/* 15D0CC 8017C0CC 5A5B000C */  jal        rcos\n/* 15D0D0 8017C0D0 0A0042A6 */   sh        $v0, 0xA($s2)\n/* 15D0D4 8017C0D4 03110200 */  sra        $v0, $v0, 4\n/* 15D0D8 8017C0D8 18005300 */  mult       $v0, $s3\n/* 15D0DC 8017C0DC 21200002 */  addu       $a0, $s0, $zero\n/* 15D0E0 8017C0E0 12100000 */  mflo       $v0\n/* 15D0E4 8017C0E4 03120200 */  sra        $v0, $v0, 8\n/* 15D0E8 8017C0E8 2110A202 */  addu       $v0, $s5, $v0\n/* 15D0EC 8017C0EC 275B000C */  jal        rsin\n/* 15D0F0 8017C0F0 140042A6 */   sh        $v0, 0x14($s2)\n/* 15D0F4 8017C0F4 03110200 */  sra        $v0, $v0, 4\n/* 15D0F8 8017C0F8 18005300 */  mult       $v0, $s3\n/* 15D0FC 8017C0FC 12100000 */  mflo       $v0\n/* 15D100 8017C100 03120200 */  sra        $v0, $v0, 8\n/* 15D104 8017C104 23108202 */  subu       $v0, $s4, $v0\n/* 15D108 8017C108 160042A6 */  sh         $v0, 0x16($s2)\n/* 15D10C 8017C10C 1000222A */  slti       $v0, $s1, 0x10\n/* 15D110 8017C110 0000528E */  lw         $s2, 0x0($s2)\n/* 15D114 8017C114 D1FF4014 */  bnez       $v0, .L15B000_8017C05C\n/* 15D118 8017C118 00861100 */   sll       $s0, $s1, 24\n.L15B000_8017C11C:\n/* 15D11C 8017C11C 3800BF8F */  lw         $ra, 0x38($sp)\n/* 15D120 8017C120 3400B78F */  lw         $s7, 0x34($sp)\n/* 15D124 8017C124 3000B68F */  lw         $s6, 0x30($sp)\n/* 15D128 8017C128 2C00B58F */  lw         $s5, 0x2C($sp)\n/* 15D12C 8017C12C 2800B48F */  lw         $s4, 0x28($sp)\n/* 15D130 8017C130 2400B38F */  lw         $s3, 0x24($sp)\n/* 15D134 8017C134 2000B28F */  lw         $s2, 0x20($sp)\n/* 15D138 8017C138 1C00B18F */  lw         $s1, 0x1C($sp)\n/* 15D13C 8017C13C 1800B08F */  lw         $s0, 0x18($sp)\n/* 15D140 8017C140 4000BD27 */  addiu      $sp, $sp, 0x40\n/* 15D144 8017C144 0800E003 */  jr         $ra\n/* 15D148 8017C148 00000000 */   nop\n.size func_ptr_80170008, . - func_ptr_80170008
6b4b67e43c029e2a68fcefd2d73edee683a9a38b72427decdc068b4e2e255977	.set noat      /* allow manual use of $at */\n.set noreorder /* don't insert nops after branches */\n\nglabel func_ptr_80170004\n/* 155980 8017B980 0780023C */  lui        $v0, %hi(PLAYER_ext_generic_unkAC)\n/* 155984 8017B984 84344290 */  lbu        $v0, %lo(PLAYER_ext_generic_unkAC)($v0)\n/* 155988 8017B988 B0FFBD27 */  addiu      $sp, $sp, -0x50\n/* 15598C 8017B98C 3400B3AF */  sw         $s3, 0x34($sp)\n/* 155990 8017B990 21988000 */  addu       $s3, $a0, $zero\n/* 155994 8017B994 4C00BFAF */  sw         $ra, 0x4C($sp)\n/* 155998 8017B998 4800BEAF */  sw         $fp, 0x48($sp)\n/* 15599C 8017B99C 4400B7AF */  sw         $s7, 0x44($sp)\n/* 1559A0 8017B9A0 4000B6AF */  sw         $s6, 0x40($sp)\n/* 1559A4 8017B9A4 3C00B5AF */  sw         $s5, 0x3C($sp)\n/* 1559A8 8017B9A8 3800B4AF */  sw         $s4, 0x38($sp)\n/* 1559AC 8017B9AC 3000B2AF */  sw         $s2, 0x30($sp)\n/* 1559B0 8017B9B0 2C00B1AF */  sw         $s1, 0x2C($sp)\n/* 1559B4 8017B9B4 BFFF4224 */  addiu      $v0, $v0, -0x41\n/* 1559B8 8017B9B8 0700422C */  sltiu      $v0, $v0, 0x7\n/* 1559BC 8017B9BC 04014010 */  beqz       $v0, .L154000_8017BDD0\n/* 1559C0 8017B9C0 2800B0AF */   sw        $s0, 0x28($sp)\n/* 1559C4 8017B9C4 0780023C */  lui        $v0, %hi(g_Player_unk46)\n/* 1559C8 8017B9C8 662F4294 */  lhu        $v0, %lo(g_Player_unk46)($v0)\n/* 1559CC 8017B9CC 00000000 */  nop\n/* 1559D0 8017B9D0 FF004010 */  beqz       $v0, .L154000_8017BDD0\n/* 1559D4 8017B9D4 00000000 */   nop\n/* 1559D8 8017B9D8 31006292 */  lbu        $v0, 0x31($s3)\n/* 1559DC 8017B9DC 00000000 */  nop\n/* 1559E0 8017B9E0 7F005530 */  andi       $s5, $v0, 0x7F\n/* 1559E4 8017B9E4 1000A22A */  slti       $v0, $s5, 0x10\n/* 1559E8 8017B9E8 14004010 */  beqz       $v0, .L154000_8017BA3C\n/* 1559EC 8017B9EC 2000A22A */   slti      $v0, $s5, 0x20\n/* 1559F0 8017B9F0 0780023C */  lui        $v0, %hi(PLAYER_facingLeft)\n/* 1559F4 8017B9F4 EC334294 */  lhu        $v0, %lo(PLAYER_facingLeft)($v0)\n/* 1559F8 8017B9F8 00000000 */  nop\n/* 1559FC 8017B9FC 02004010 */  beqz       $v0, .L154000_8017BA08\n/* 155A00 8017BA00 0C000334 */   ori       $v1, $zero, 0xC\n/* 155A04 8017BA04 F4FF0324 */  addiu      $v1, $zero, -0xC\n.L154000_8017BA08:\n/* 155A08 8017BA08 0780023C */  lui        $v0, %hi(PLAYER_posX_i_hi)\n/* 155A0C 8017BA0C DA334294 */  lhu        $v0, %lo(PLAYER_posX_i_hi)($v0)\n/* 155A10 8017BA10 00000000 */  nop\n/* 155A14 8017BA14 21106200 */  addu       $v0, $v1, $v0\n/* 155A18 8017BA18 020062A6 */  sh         $v0, 0x2($s3)\n/* 155A1C 8017BA1C 0780023C */  lui        $v0, %hi(PLAYER_posY_i_hi)\n/* 155A20 8017BA20 DE334294 */  lhu        $v0, %lo(PLAYER_posY_i_hi)($v0)\n/* 155A24 8017BA24 02006F96 */  lhu        $t7, 0x2($s3)\n/* 155A28 8017BA28 B6FF5424 */  addiu      $s4, $v0, -0x4A\n/* 155A2C 8017BA2C E6FF4224 */  addiu      $v0, $v0, -0x1A\n/* 155A30 8017BA30 1800AFA7 */  sh         $t7, 0x18($sp)\n/* 155A34 8017BA34 A0EE0508 */  j          .L154000_8017BA80\n/* 155A38 8017BA38 060062A6 */   sh        $v0, 0x6($s3)\n.L154000_8017BA3C:\n/* 155A3C 8017BA3C 04004014 */  bnez       $v0, .L154000_8017BA50\n/* 155A40 8017BA40 21206002 */   addu      $a0, $s3, $zero\n/* 155A44 8017BA44 1000A527 */  addiu      $a1, $sp, 0x10\n/* 155A48 8017BA48 96EE0508 */  j          .L154000_8017BA58\n/* 155A4C 8017BA4C 21300000 */   addu      $a2, $zero, $zero\n.L154000_8017BA50:\n/* 155A50 8017BA50 1000A527 */  addiu      $a1, $sp, 0x10\n/* 155A54 8017BA54 01000634 */  ori        $a2, $zero, 0x1\n.L154000_8017BA58:\n/* 155A58 8017BA58 04EE050C */  jal        func_154000_8017B810\n/* 155A5C 8017BA5C 00000000 */   nop\n/* 155A60 8017BA60 02006396 */  lhu        $v1, 0x2($s3)\n/* 155A64 8017BA64 1000A297 */  lhu        $v0, 0x10($sp)\n/* 155A68 8017BA68 1200A497 */  lhu        $a0, 0x12($sp)\n/* 155A6C 8017BA6C 21186200 */  addu       $v1, $v1, $v0\n/* 155A70 8017BA70 06006296 */  lhu        $v0, 0x6($s3)\n/* 155A74 8017BA74 1800A3A7 */  sh         $v1, 0x18($sp)\n/* 155A78 8017BA78 21104400 */  addu       $v0, $v0, $a0\n/* 155A7C 8017BA7C 21A04000 */  addu       $s4, $v0, $zero\n.L154000_8017BA80:\n/* 155A80 8017BA80 0780023C */  lui        $v0, %hi(PLAYER_facingLeft)\n/* 155A84 8017BA84 EC334294 */  lhu        $v0, %lo(PLAYER_facingLeft)($v0)\n/* 155A88 8017BA88 00000000 */  nop\n/* 155A8C 8017BA8C 140062A6 */  sh         $v0, 0x14($s3)\n/* 155A90 8017BA90 0780023C */  lui        $v0, %hi(PLAYER_drawFlags)\n/* 155A94 8017BA94 F1334290 */  lbu        $v0, %lo(PLAYER_drawFlags)($v0)\n/* 155A98 8017BA98 00000000 */  nop\n/* 155A9C 8017BA9C 02004230 */  andi       $v0, $v0, 0x2\n/* 155AA0 8017BAA0 16004010 */  beqz       $v0, .L154000_8017BAFC\n/* 155AA4 8017BAA4 1000A22A */   slti      $v0, $s5, 0x10\n/* 155AA8 8017BAA8 05004010 */  beqz       $v0, .L154000_8017BAC0\n/* 155AAC 8017BAAC 00000000 */   nop\n/* 155AB0 8017BAB0 06006296 */  lhu        $v0, 0x6($s3)\n/* 155AB4 8017BAB4 FDFF9426 */  addiu      $s4, $s4, -0x3\n/* 155AB8 8017BAB8 FDFF4224 */  addiu      $v0, $v0, -0x3\n/* 155ABC 8017BABC 060062A6 */  sh         $v0, 0x6($s3)\n.L154000_8017BAC0:\n/* 155AC0 8017BAC0 0780023C */  lui        $v0, %hi(PLAYER_ext_generic_unkAC)\n/* 155AC4 8017BAC4 84344290 */  lbu        $v0, %lo(PLAYER_ext_generic_unkAC)($v0)\n/* 155AC8 8017BAC8 00000000 */  nop\n/* 155ACC 8017BACC BDFF4224 */  addiu      $v0, $v0, -0x43\n/* 155AD0 8017BAD0 0200422C */  sltiu      $v0, $v0, 0x2\n/* 155AD4 8017BAD4 05004010 */  beqz       $v0, .L154000_8017BAEC\n/* 155AD8 8017BAD8 00000000 */   nop\n/* 155ADC 8017BADC 06006296 */  lhu        $v0, 0x6($s3)\n/* 155AE0 8017BAE0 FFFF9426 */  addiu      $s4, $s4, -0x1\n/* 155AE4 8017BAE4 BEEE0508 */  j          .L154000_8017BAF8\n/* 155AE8 8017BAE8 FFFF4224 */   addiu     $v0, $v0, -0x1\n.L154000_8017BAEC:\n/* 155AEC 8017BAEC 06006296 */  lhu        $v0, 0x6($s3)\n/* 155AF0 8017BAF0 FDFF9426 */  addiu      $s4, $s4, -0x3\n/* 155AF4 8017BAF4 FDFF4224 */  addiu      $v0, $v0, -0x3\n.L154000_8017BAF8:\n/* 155AF8 8017BAF8 060062A6 */  sh         $v0, 0x6($s3)\n.L154000_8017BAFC:\n/* 155AFC 8017BAFC 2C006396 */  lhu        $v1, 0x2C($s3)\n/* 155B00 8017BB00 00000000 */  nop\n/* 155B04 8017BB04 05006010 */  beqz       $v1, .L154000_8017BB1C\n/* 155B08 8017BB08 01000234 */   ori       $v0, $zero, 0x1\n/* 155B0C 8017BB0C A9006210 */  beq        $v1, $v0, .L154000_8017BDB4\n/* 155B10 8017BB10 21880000 */   addu      $s1, $zero, $zero\n/* 155B14 8017BB14 79EF0508 */  j          .L154000_8017BDE4\n/* 155B18 8017BB18 00000000 */   nop\n.L154000_8017BB1C:\n/* 155B1C 8017BB1C 02000434 */  ori        $a0, $zero, 0x2\n/* 155B20 8017BB20 0480023C */  lui        $v0, %hi(g_api_AllocPrimitives)\n/* 155B24 8017BB24 B8C7428C */  lw         $v0, %lo(g_api_AllocPrimitives)($v0)\n/* 155B28 8017BB28 00000000 */  nop\n/* 155B2C 8017BB2C 09F84000 */  jalr       $v0\n/* 155B30 8017BB30 0A000534 */   ori       $a1, $zero, 0xA\n/* 155B34 8017BB34 00140200 */  sll        $v0, $v0, 16\n/* 155B38 8017BB38 03140200 */  sra        $v0, $v0, 16\n/* 155B3C 8017BB3C FFFF0324 */  addiu      $v1, $zero, -0x1\n/* 155B40 8017BB40 A3004310 */  beq        $v0, $v1, .L154000_8017BDD0\n/* 155B44 8017BB44 640062AE */   sw        $v0, 0x64($s3)\n/* 155B48 8017BB48 21880000 */  addu       $s1, $zero, $zero\n/* 155B4C 8017BB4C 0F00A232 */  andi       $v0, $s5, 0xF\n/* 155B50 8017BB50 1880173C */  lui        $s7, %hi(D_154000_8017AFE0)\n/* 155B54 8017BB54 E0AFF726 */  addiu      $s7, $s7, %lo(D_154000_8017AFE0)\n/* 155B58 8017BB58 C0B00200 */  sll        $s6, $v0, 3\n/* 155B5C 8017BB5C 0200E226 */  addiu      $v0, $s7, 0x2\n/* 155B60 8017BB60 2110C202 */  addu       $v0, $s6, $v0\n/* 155B64 8017BB64 2000A2AF */  sw         $v0, 0x20($sp)\n/* 155B68 8017BB68 0400E226 */  addiu      $v0, $s7, 0x4\n/* 155B6C 8017BB6C 21F0C202 */  addu       $fp, $s6, $v0\n/* 155B70 8017BB70 6666103C */  lui        $s0, (0x66666667 >> 16)\n/* 155B74 8017BB74 67661036 */  ori        $s0, $s0, (0x66666667 & 0xFFFF)\n/* 155B78 8017BB78 6400638E */  lw         $v1, 0x64($s3)\n/* 155B7C 8017BB7C 8600023C */  lui        $v0, (0x860000 >> 16)\n/* 155B80 8017BB80 340062AE */  sw         $v0, 0x34($s3)\n/* 155B84 8017BB84 40100300 */  sll        $v0, $v1, 1\n/* 155B88 8017BB88 21104300 */  addu       $v0, $v0, $v1\n/* 155B8C 8017BB8C 80100200 */  sll        $v0, $v0, 2\n/* 155B90 8017BB90 21104300 */  addu       $v0, $v0, $v1\n/* 155B94 8017BB94 80100200 */  sll        $v0, $v0, 2\n/* 155B98 8017BB98 0880033C */  lui        $v1, %hi(g_PrimBuf)\n/* 155B9C 8017BB9C EC6F6324 */  addiu      $v1, $v1, %lo(g_PrimBuf)\n/* 155BA0 8017BBA0 21904300 */  addu       $s2, $v0, $v1\n/* 155BA4 8017BBA4 2110D702 */  addu       $v0, $s6, $s7\n.L154000_8017BBA8:\n/* 155BA8 8017BBA8 0A000334 */  ori        $v1, $zero, 0xA\n/* 155BAC 8017BBAC 00004694 */  lhu        $a2, 0x0($v0)\n/* 155BB0 8017BBB0 23187100 */  subu       $v1, $v1, $s1\n/* 155BB4 8017BBB4 1800C300 */  mult       $a2, $v1\n/* 155BB8 8017BBB8 12700000 */  mflo       $t6\n/* 155BBC 8017BBBC 00000000 */  nop\n/* 155BC0 8017BBC0 00000000 */  nop\n/* 155BC4 8017BBC4 1800D001 */  mult       $t6, $s0\n/* 155BC8 8017BBC8 2000AF8F */  lw         $t7, 0x20($sp)\n/* 155BCC 8017BBCC 00000000 */  nop\n/* 155BD0 8017BBD0 0000E595 */  lhu        $a1, 0x0($t7)\n/* 155BD4 8017BBD4 10480000 */  mfhi       $t1\n/* 155BD8 8017BBD8 FFFFA530 */  andi       $a1, $a1, 0xFFFF\n/* 155BDC 8017BBDC 00000000 */  nop\n/* 155BE0 8017BBE0 1800A300 */  mult       $a1, $v1\n/* 155BE4 8017BBE4 12680000 */  mflo       $t5\n/* 155BE8 8017BBE8 00000000 */  nop\n/* 155BEC 8017BBEC 00000000 */  nop\n/* 155BF0 8017BBF0 1800B001 */  mult       $t5, $s0\n/* 155BF4 8017BBF4 0000C497 */  lhu        $a0, 0x0($fp)\n/* 155BF8 8017BBF8 10380000 */  mfhi       $a3\n/* 155BFC 8017BBFC FFFF8430 */  andi       $a0, $a0, 0xFFFF\n/* 155C00 8017BC00 00000000 */  nop\n/* 155C04 8017BC04 18008300 */  mult       $a0, $v1\n/* 155C08 8017BC08 12600000 */  mflo       $t4\n/* 155C0C 8017BC0C 00000000 */  nop\n/* 155C10 8017BC10 00000000 */  nop\n/* 155C14 8017BC14 18009001 */  mult       $t4, $s0\n/* 155C18 8017BC18 10400000 */  mfhi       $t0\n/* 155C1C 8017BC1C 09000234 */  ori        $v0, $zero, 0x9\n/* 155C20 8017BC20 23105100 */  subu       $v0, $v0, $s1\n/* 155C24 8017BC24 1800C200 */  mult       $a2, $v0\n/* 155C28 8017BC28 12500000 */  mflo       $t2\n/* 155C2C 8017BC2C 00000000 */  nop\n/* 155C30 8017BC30 00000000 */  nop\n/* 155C34 8017BC34 18005001 */  mult       $t2, $s0\n/* 155C38 8017BC38 10300000 */  mfhi       $a2\n/* 155C3C 8017BC3C 00000000 */  nop\n/* 155C40 8017BC40 00000000 */  nop\n/* 155C44 8017BC44 1800A200 */  mult       $a1, $v0\n/* 155C48 8017BC48 12580000 */  mflo       $t3\n/* 155C4C 8017BC4C 00000000 */  nop\n/* 155C50 8017BC50 00000000 */  nop\n/* 155C54 8017BC54 18007001 */  mult       $t3, $s0\n/* 155C58 8017BC58 10280000 */  mfhi       $a1\n/* 155C5C 8017BC5C 00000000 */  nop\n/* 155C60 8017BC60 00000000 */  nop\n/* 155C64 8017BC64 18008200 */  mult       $a0, $v0\n/* 155C68 8017BC68 01003126 */  addiu      $s1, $s1, 0x1\n/* 155C6C 8017BC6C C3770E00 */  sra        $t6, $t6, 31\n/* 155C70 8017BC70 83480900 */  sra        $t1, $t1, 2\n/* 155C74 8017BC74 23482E01 */  subu       $t1, $t1, $t6\n/* 155C78 8017BC78 040049A2 */  sb         $t1, 0x4($s2)\n/* 155C7C 8017BC7C C36F0D00 */  sra        $t5, $t5, 31\n/* 155C80 8017BC80 83380700 */  sra        $a3, $a3, 2\n/* 155C84 8017BC84 2338ED00 */  subu       $a3, $a3, $t5\n/* 155C88 8017BC88 060047A2 */  sb         $a3, 0x6($s2)\n/* 155C8C 8017BC8C 12180000 */  mflo       $v1\n/* 155C90 8017BC90 C3670C00 */  sra        $t4, $t4, 31\n/* 155C94 8017BC94 83400800 */  sra        $t0, $t0, 2\n/* 155C98 8017BC98 18007000 */  mult       $v1, $s0\n/* 155C9C 8017BC9C 23400C01 */  subu       $t0, $t0, $t4\n/* 155CA0 8017BCA0 050048A2 */  sb         $t0, 0x5($s2)\n/* 155CA4 8017BCA4 C3570A00 */  sra        $t2, $t2, 31\n/* 155CA8 8017BCA8 83300600 */  sra        $a2, $a2, 2\n/* 155CAC 8017BCAC 2330CA00 */  subu       $a2, $a2, $t2\n/* 155CB0 8017BCB0 100046A2 */  sb         $a2, 0x10($s2)\n/* 155CB4 8017BCB4 C35F0B00 */  sra        $t3, $t3, 31\n/* 155CB8 8017BCB8 83280500 */  sra        $a1, $a1, 2\n/* 155CBC 8017BCBC 2328AB00 */  subu       $a1, $a1, $t3\n/* 155CC0 8017BCC0 120045A2 */  sb         $a1, 0x12($s2)\n/* 155CC4 8017BCC4 C31F0300 */  sra        $v1, $v1, 31\n/* 155CC8 8017BCC8 10100000 */  mfhi       $v0\n/* 155CCC 8017BCCC 83100200 */  sra        $v0, $v0, 2\n/* 155CD0 8017BCD0 23104300 */  subu       $v0, $v0, $v1\n/* 155CD4 8017BCD4 3958000C */  jal        rand\n/* 155CD8 8017BCD8 110042A2 */   sb        $v0, 0x11($s2)\n/* 155CDC 8017BCDC 200042A6 */  sh         $v0, 0x20($s2)\n/* 155CE0 8017BCE0 0780033C */  lui        $v1, %hi(PLAYER_zPriority)\n/* 155CE4 8017BCE4 FC336394 */  lhu        $v1, %lo(PLAYER_zPriority)($v1)\n/* 155CE8 8017BCE8 35030234 */  ori        $v0, $zero, 0x335\n/* 155CEC 8017BCEC 320042A6 */  sh         $v0, 0x32($s2)\n/* 155CF0 8017BCF0 0A00222A */  slti       $v0, $s1, 0xA\n/* 155CF4 8017BCF4 04006324 */  addiu      $v1, $v1, 0x4\n/* 155CF8 8017BCF8 260043A6 */  sh         $v1, 0x26($s2)\n/* 155CFC 8017BCFC 0000528E */  lw         $s2, 0x0($s2)\n/* 155D00 8017BD00 A9FF4014 */  bnez       $v0, .L154000_8017BBA8\n/* 155D04 8017BD04 2110D702 */   addu      $v0, $s6, $s7\n/* 155D08 8017BD08 8C00628E */  lw         $v0, 0x8C($s3)\n/* 155D0C 8017BD0C 21206002 */  addu       $a0, $s3, $zero\n/* 155D10 8017BD10 AE004294 */  lhu        $v0, 0xAE($v0)\n/* 155D14 8017BD14 21280000 */  addu       $a1, $zero, $zero\n/* 155D18 8017BD18 BDEC050C */  jal        SetWeaponProperties\n/* 155D1C 8017BD1C AE0062A6 */   sh        $v0, 0xAE($s3)\n/* 155D20 8017BD20 8C00628E */  lw         $v0, 0x8C($s3)\n/* 155D24 8017BD24 00000000 */  nop\n/* 155D28 8017BD28 3A004294 */  lhu        $v0, 0x3A($v0)\n/* 155D2C 8017BD2C 00000000 */  nop\n/* 155D30 8017BD30 3A0062A6 */  sh         $v0, 0x3A($s3)\n/* 155D34 8017BD34 1000A22A */  slti       $v0, $s5, 0x10\n/* 155D38 8017BD38 09004010 */  beqz       $v0, .L154000_8017BD60\n/* 155D3C 8017BD3C ECFF0224 */   addiu     $v0, $zero, -0x14\n/* 155D40 8017BD40 120062A6 */  sh         $v0, 0x12($s3)\n/* 155D44 8017BD44 04000234 */  ori        $v0, $zero, 0x4\n/* 155D48 8017BD48 460062A2 */  sb         $v0, 0x46($s3)\n/* 155D4C 8017BD4C 14000234 */  ori        $v0, $zero, 0x14\n/* 155D50 8017BD50 470062A2 */  sb         $v0, 0x47($s3)\n/* 155D54 8017BD54 28000234 */  ori        $v0, $zero, 0x28\n/* 155D58 8017BD58 67EF0508 */  j          .L154000_8017BD9C\n/* 155D5C 8017BD5C 100060A6 */   sh        $zero, 0x10($s3)\n.L154000_8017BD60:\n/* 155D60 8017BD60 2000A22A */  slti       $v0, $s5, 0x20\n/* 155D64 8017BD64 0D004014 */  bnez       $v0, .L154000_8017BD9C\n/* 155D68 8017BD68 06000234 */   ori       $v0, $zero, 0x6\n/* 155D6C 8017BD6C 0F00A232 */  andi       $v0, $s5, 0xF\n/* 155D70 8017BD70 08004014 */  bnez       $v0, .L154000_8017BD94\n/* 155D74 8017BD74 20000234 */   ori       $v0, $zero, 0x20\n/* 155D78 8017BD78 100062A6 */  sh         $v0, 0x10($s3)\n/* 155D7C 8017BD7C 20000234 */  ori        $v0, $zero, 0x20\n/* 155D80 8017BD80 460062A2 */  sb         $v0, 0x46($s3)\n/* 155D84 8017BD84 06000234 */  ori        $v0, $zero, 0x6\n/* 155D88 8017BD88 120060A6 */  sh         $zero, 0x12($s3)\n/* 155D8C 8017BD8C 66EF0508 */  j          .L154000_8017BD98\n/* 155D90 8017BD90 470062A2 */   sb        $v0, 0x47($s3)\n.L154000_8017BD94:\n/* 155D94 8017BD94 3C0060A6 */  sh         $zero, 0x3C($s3)\n.L154000_8017BD98:\n/* 155D98 8017BD98 06000234 */  ori        $v0, $zero, 0x6\n.L154000_8017BD9C:\n/* 155D9C 8017BD9C 7C0062A6 */  sh         $v0, 0x7C($s3)\n/* 155DA0 8017BDA0 2C006296 */  lhu        $v0, 0x2C($s3)\n/* 155DA4 8017BDA4 00000000 */  nop\n/* 155DA8 8017BDA8 01004224 */  addiu      $v0, $v0, 0x1\n/* 155DAC 8017BDAC 78EF0508 */  j          .L154000_8017BDE0\n/* 155DB0 8017BDB0 2C0062A6 */   sh        $v0, 0x2C($s3)\n.L154000_8017BDB4:\n/* 155DB4 8017BDB4 7C006296 */  lhu        $v0, 0x7C($s3)\n/* 155DB8 8017BDB8 00000000 */  nop\n/* 155DBC 8017BDBC FFFF4224 */  addiu      $v0, $v0, -0x1\n/* 155DC0 8017BDC0 7C0062A6 */  sh         $v0, 0x7C($s3)\n/* 155DC4 8017BDC4 00140200 */  sll        $v0, $v0, 16\n/* 155DC8 8017BDC8 06004014 */  bnez       $v0, .L154000_8017BDE4\n/* 155DCC 8017BDCC 00000000 */   nop\n.L154000_8017BDD0:\n/* 155DD0 8017BDD0 14EC050C */  jal        DestroyEntity\n/* 155DD4 8017BDD4 21206002 */   addu      $a0, $s3, $zero\n/* 155DD8 8017BDD8 C6EF0508 */  j          .L154000_8017BF18\n/* 155DDC 8017BDDC 00000000 */   nop\n.L154000_8017BDE0:\n/* 155DE0 8017BDE0 21880000 */  addu       $s1, $zero, $zero\n.L154000_8017BDE4:\n/* 155DE4 8017BDE4 6666153C */  lui        $s5, (0x66666667 >> 16)\n/* 155DE8 8017BDE8 6766B536 */  ori        $s5, $s5, (0x66666667 & 0xFFFF)\n/* 155DEC 8017BDEC 03001634 */  ori        $s6, $zero, 0x3\n/* 155DF0 8017BDF0 06006496 */  lhu        $a0, 0x6($s3)\n/* 155DF4 8017BDF4 02006696 */  lhu        $a2, 0x2($s3)\n/* 155DF8 8017BDF8 6400638E */  lw         $v1, 0x64($s3)\n/* 155DFC 8017BDFC 1800AF97 */  lhu        $t7, 0x18($sp)\n/* 155E00 8017BE00 23108402 */  subu       $v0, $s4, $a0\n/* 155E04 8017BE04 21B84000 */  addu       $s7, $v0, $zero\n/* 155E08 8017BE08 40100300 */  sll        $v0, $v1, 1\n/* 155E0C 8017BE0C 21104300 */  addu       $v0, $v0, $v1\n/* 155E10 8017BE10 80100200 */  sll        $v0, $v0, 2\n/* 155E14 8017BE14 21104300 */  addu       $v0, $v0, $v1\n/* 155E18 8017BE18 80100200 */  sll        $v0, $v0, 2\n/* 155E1C 8017BE1C 0880033C */  lui        $v1, %hi(g_PrimBuf)\n/* 155E20 8017BE20 EC6F6324 */  addiu      $v1, $v1, %lo(g_PrimBuf)\n/* 155E24 8017BE24 21904300 */  addu       $s2, $v0, $v1\n/* 155E28 8017BE28 2310E601 */  subu       $v0, $t7, $a2\n/* 155E2C 8017BE2C 00140200 */  sll        $v0, $v0, 16\n/* 155E30 8017BE30 03A40200 */  sra        $s4, $v0, 16\n.L154000_8017BE34:\n/* 155E34 8017BE34 01003126 */  addiu      $s1, $s1, 0x1\n/* 155E38 8017BE38 18009102 */  mult       $s4, $s1\n/* 155E3C 8017BE3C 12280000 */  mflo       $a1\n/* 155E40 8017BE40 00000000 */  nop\n/* 155E44 8017BE44 00000000 */  nop\n/* 155E48 8017BE48 1800B500 */  mult       $a1, $s5\n/* 155E4C 8017BE4C 20004296 */  lhu        $v0, 0x20($s2)\n/* 155E50 8017BE50 080046A6 */  sh         $a2, 0x8($s2)\n/* 155E54 8017BE54 0A0044A6 */  sh         $a0, 0xA($s2)\n/* 155E58 8017BE58 00840200 */  sll        $s0, $v0, 16\n/* 155E5C 8017BE5C 03841000 */  sra        $s0, $s0, 16\n/* 155E60 8017BE60 21200002 */  addu       $a0, $s0, $zero\n/* 155E64 8017BE64 00034224 */  addiu      $v0, $v0, 0x300\n/* 155E68 8017BE68 200042A6 */  sh         $v0, 0x20($s2)\n/* 155E6C 8017BE6C 02006296 */  lhu        $v0, 0x2($s3)\n/* 155E70 8017BE70 C32F0500 */  sra        $a1, $a1, 31\n/* 155E74 8017BE74 10180000 */  mfhi       $v1\n/* 155E78 8017BE78 83180300 */  sra        $v1, $v1, 2\n/* 155E7C 8017BE7C 23186500 */  subu       $v1, $v1, $a1\n/* 155E80 8017BE80 21104300 */  addu       $v0, $v0, $v1\n/* 155E84 8017BE84 5A5B000C */  jal        rcos\n/* 155E88 8017BE88 140042A6 */   sh        $v0, 0x14($s2)\n/* 155E8C 8017BE8C 03110200 */  sra        $v0, $v0, 4\n/* 155E90 8017BE90 18005600 */  mult       $v0, $s6\n/* 155E94 8017BE94 12180000 */  mflo       $v1\n/* 155E98 8017BE98 00141700 */  sll        $v0, $s7, 16\n/* 155E9C 8017BE9C 03140200 */  sra        $v0, $v0, 16\n/* 155EA0 8017BEA0 18005100 */  mult       $v0, $s1\n/* 155EA4 8017BEA4 12280000 */  mflo       $a1\n/* 155EA8 8017BEA8 00000000 */  nop\n/* 155EAC 8017BEAC 00000000 */  nop\n/* 155EB0 8017BEB0 1800B500 */  mult       $a1, $s5\n/* 155EB4 8017BEB4 21200002 */  addu       $a0, $s0, $zero\n/* 155EB8 8017BEB8 14004296 */  lhu        $v0, 0x14($s2)\n/* 155EBC 8017BEBC 031A0300 */  sra        $v1, $v1, 8\n/* 155EC0 8017BEC0 21104300 */  addu       $v0, $v0, $v1\n/* 155EC4 8017BEC4 140042A6 */  sh         $v0, 0x14($s2)\n/* 155EC8 8017BEC8 06006296 */  lhu        $v0, 0x6($s3)\n/* 155ECC 8017BECC C32F0500 */  sra        $a1, $a1, 31\n/* 155ED0 8017BED0 10180000 */  mfhi       $v1\n/* 155ED4 8017BED4 83180300 */  sra        $v1, $v1, 2\n/* 155ED8 8017BED8 23186500 */  subu       $v1, $v1, $a1\n/* 155EDC 8017BEDC 21104300 */  addu       $v0, $v0, $v1\n/* 155EE0 8017BEE0 275B000C */  jal        rsin\n/* 155EE4 8017BEE4 160042A6 */   sh        $v0, 0x16($s2)\n/* 155EE8 8017BEE8 03110200 */  sra        $v0, $v0, 4\n/* 155EEC 8017BEEC 18005600 */  mult       $v0, $s6\n/* 155EF0 8017BEF0 14004696 */  lhu        $a2, 0x14($s2)\n/* 155EF4 8017BEF4 16004396 */  lhu        $v1, 0x16($s2)\n/* 155EF8 8017BEF8 12100000 */  mflo       $v0\n/* 155EFC 8017BEFC 03120200 */  sra        $v0, $v0, 8\n/* 155F00 8017BF00 23186200 */  subu       $v1, $v1, $v0\n/* 155F04 8017BF04 0A00222A */  slti       $v0, $s1, 0xA\n/* 155F08 8017BF08 160043A6 */  sh         $v1, 0x16($s2)\n/* 155F0C 8017BF0C 0000528E */  lw         $s2, 0x0($s2)\n/* 155F10 8017BF10 C8FF4014 */  bnez       $v0, .L154000_8017BE34\n/* 155F14 8017BF14 21206000 */   addu      $a0, $v1, $zero\n.L154000_8017BF18:\n/* 155F18 8017BF18 4C00BF8F */  lw         $ra, 0x4C($sp)\n/* 155F1C 8017BF1C 4800BE8F */  lw         $fp, 0x48($sp)\n/* 155F20 8017BF20 4400B78F */  lw         $s7, 0x44($sp)\n/* 155F24 8017BF24 4000B68F */  lw         $s6, 0x40($sp)\n/* 155F28 8017BF28 3C00B58F */  lw         $s5, 0x3C($sp)\n/* 155F2C 8017BF2C 3800B48F */  lw         $s4, 0x38($sp)\n/* 155F30 8017BF30 3400B38F */  lw         $s3, 0x34($sp)\n/* 155F34 8017BF34 3000B28F */  lw         $s2, 0x30($sp)\n/* 155F38 8017BF38 2C00B18F */  lw         $s1, 0x2C($sp)\n/* 155F3C 8017BF3C 2800B08F */  lw         $s0, 0x28($sp)\n/* 155F40 8017BF40 5000BD27 */  addiu      $sp, $sp, 0x50\n/* 155F44 8017BF44 0800E003 */  jr         $ra\n/* 155F48 8017BF48 00000000 */   nop\n.size func_ptr_80170004, . - func_ptr_80170004
b9c02a4bd51f739a416e8faa680d861df480dc37c66772f56ef0efafc086e670	.set noat      /* allow manual use of $at */\n.set noreorder /* don't insert nops after branches */\n\nglabel EntityWeaponAttack\n/* 18D400 8017B400 0780023C */  lui        $v0, %hi(g_Entities)\n/* 18D404 8017B404 D833428C */  lw         $v0, %lo(g_Entities)($v0)\n/* 18D408 8017B408 D0FFBD27 */  addiu      $sp, $sp, -0x30\n/* 18D40C 8017B40C 1800B2AF */  sw         $s2, 0x18($sp)\n/* 18D410 8017B410 21908000 */  addu       $s2, $a0, $zero\n/* 18D414 8017B414 2C00BFAF */  sw         $ra, 0x2C($sp)\n/* 18D418 8017B418 2800B6AF */  sw         $s6, 0x28($sp)\n/* 18D41C 8017B41C 2400B5AF */  sw         $s5, 0x24($sp)\n/* 18D420 8017B420 2000B4AF */  sw         $s4, 0x20($sp)\n/* 18D424 8017B424 1C00B3AF */  sw         $s3, 0x1C($sp)\n/* 18D428 8017B428 1400B1AF */  sw         $s1, 0x14($sp)\n/* 18D42C 8017B42C 1000B0AF */  sw         $s0, 0x10($sp)\n/* 18D430 8017B430 000042AE */  sw         $v0, 0x0($s2)\n/* 18D434 8017B434 0780023C */  lui        $v0, %hi(PLAYER_posY_val)\n/* 18D438 8017B438 DC33428C */  lw         $v0, %lo(PLAYER_posY_val)($v0)\n/* 18D43C 8017B43C 00000000 */  nop\n/* 18D440 8017B440 040042AE */  sw         $v0, 0x4($s2)\n/* 18D444 8017B444 0780023C */  lui        $v0, %hi(PLAYER_facingLeft)\n/* 18D448 8017B448 EC334294 */  lhu        $v0, %lo(PLAYER_facingLeft)($v0)\n/* 18D44C 8017B44C 00000000 */  nop\n/* 18D450 8017B450 140042A6 */  sh         $v0, 0x14($s2)\n/* 18D454 8017B454 31004292 */  lbu        $v0, 0x31($s2)\n/* 18D458 8017B458 0780033C */  lui        $v1, %hi(g_Player_D_80072F00_11)\n/* 18D45C 8017B45C 162F6384 */  lh         $v1, %lo(g_Player_D_80072F00_11)($v1)\n/* 18D460 8017B460 00000000 */  nop\n/* 18D464 8017B464 02006010 */  beqz       $v1, .L18C000_8017B470\n/* 18D468 8017B468 7F004230 */   andi      $v0, $v0, 0x7F\n/* 18D46C 8017B46C 02000234 */  ori        $v0, $zero, 0x2\n.L18C000_8017B470:\n/* 18D470 8017B470 00110200 */  sll        $v0, $v0, 4\n/* 18D474 8017B474 1880033C */  lui        $v1, %hi(D_18C000_8017AF64)\n/* 18D478 8017B478 64AF6324 */  addiu      $v1, $v1, %lo(D_18C000_8017AF64)\n/* 18D47C 8017B47C 21984300 */  addu       $s3, $v0, $v1\n/* 18D480 8017B480 0780043C */  lui        $a0, %hi(PLAYER_ext_player_anim)\n/* 18D484 8017B484 84348490 */  lbu        $a0, %lo(PLAYER_ext_player_anim)($a0)\n/* 18D488 8017B488 0C006392 */  lbu        $v1, 0xC($s3)\n/* 18D48C 8017B48C 00000000 */  nop\n/* 18D490 8017B490 2B108300 */  sltu       $v0, $a0, $v1\n/* 18D494 8017B494 B9004014 */  bnez       $v0, .L18C000_8017B77C\n/* 18D498 8017B498 07006224 */   addiu     $v0, $v1, 0x7\n/* 18D49C 8017B49C 2A108200 */  slt        $v0, $a0, $v0\n/* 18D4A0 8017B4A0 B6004010 */  beqz       $v0, .L18C000_8017B77C\n/* 18D4A4 8017B4A4 00000000 */   nop\n/* 18D4A8 8017B4A8 0780023C */  lui        $v0, %hi(g_Player_unk46)\n/* 18D4AC 8017B4AC 662F4294 */  lhu        $v0, %lo(g_Player_unk46)($v0)\n/* 18D4B0 8017B4B0 00000000 */  nop\n/* 18D4B4 8017B4B4 B1004010 */  beqz       $v0, .L18C000_8017B77C\n/* 18D4B8 8017B4B8 00000000 */   nop\n/* 18D4BC 8017B4BC 2C004296 */  lhu        $v0, 0x2C($s2)\n/* 18D4C0 8017B4C0 00000000 */  nop\n/* 18D4C4 8017B4C4 8D004014 */  bnez       $v0, .L18C000_8017B6FC\n/* 18D4C8 8017B4C8 00000000 */   nop\n/* 18D4CC 8017B4CC 1880043C */  lui        $a0, %hi(D_18C000_8017A040)\n/* 18D4D0 8017B4D0 40A08424 */  addiu      $a0, $a0, %lo(D_18C000_8017A040)\n/* 18D4D4 8017B4D4 59EC050C */  jal        SetSpriteBank1\n/* 18D4D8 8017B4D8 00000000 */   nop\n/* 18D4DC 8017B4DC 1880033C */  lui        $v1, %hi(g_HandId)\n/* 18D4E0 8017B4E0 5CB0638C */  lw         $v1, %lo(g_HandId)($v1)\n/* 18D4E4 8017B4E4 10800224 */  addiu      $v0, $zero, -0x7FF0\n/* 18D4E8 8017B4E8 540042A6 */  sh         $v0, 0x54($s2)\n/* 18D4EC 8017B4EC 10010234 */  ori        $v0, $zero, 0x110\n/* 18D4F0 8017B4F0 160042A6 */  sh         $v0, 0x16($s2)\n/* 18D4F4 8017B4F4 64000234 */  ori        $v0, $zero, 0x64\n/* 18D4F8 8017B4F8 0A006010 */  beqz       $v1, .L18C000_8017B524\n/* 18D4FC 8017B4FC 5A0042A6 */   sh        $v0, 0x5A($s2)\n/* 18D500 8017B500 54004296 */  lhu        $v0, 0x54($s2)\n/* 18D504 8017B504 5A004396 */  lhu        $v1, 0x5A($s2)\n/* 18D508 8017B508 02004224 */  addiu      $v0, $v0, 0x2\n/* 18D50C 8017B50C 540042A6 */  sh         $v0, 0x54($s2)\n/* 18D510 8017B510 16004296 */  lhu        $v0, 0x16($s2)\n/* 18D514 8017B514 02006324 */  addiu      $v1, $v1, 0x2\n/* 18D518 8017B518 5A0043A6 */  sh         $v1, 0x5A($s2)\n/* 18D51C 8017B51C 18004224 */  addiu      $v0, $v0, 0x18\n/* 18D520 8017B520 160042A6 */  sh         $v0, 0x16($s2)\n.L18C000_8017B524:\n/* 18D524 8017B524 02000434 */  ori        $a0, $zero, 0x2\n/* 18D528 8017B528 16004396 */  lhu        $v1, 0x16($s2)\n/* 18D52C 8017B52C 08006596 */  lhu        $a1, 0x8($s3)\n/* 18D530 8017B530 0600023C */  lui        $v0, (0x60000 >> 16)\n/* 18D534 8017B534 340042AE */  sw         $v0, 0x34($s2)\n/* 18D538 8017B538 21186500 */  addu       $v1, $v1, $a1\n/* 18D53C 8017B53C 160043A6 */  sh         $v1, 0x16($s2)\n/* 18D540 8017B540 0480023C */  lui        $v0, %hi(g_api_AllocPrimitives)\n/* 18D544 8017B544 B8C7428C */  lw         $v0, %lo(g_api_AllocPrimitives)($v0)\n/* 18D548 8017B548 00000000 */  nop\n/* 18D54C 8017B54C 09F84000 */  jalr       $v0\n/* 18D550 8017B550 0C000534 */   ori       $a1, $zero, 0xC\n/* 18D554 8017B554 00140200 */  sll        $v0, $v0, 16\n/* 18D558 8017B558 03140200 */  sra        $v0, $v0, 16\n/* 18D55C 8017B55C FFFF0324 */  addiu      $v1, $zero, -0x1\n/* 18D560 8017B560 4B004310 */  beq        $v0, $v1, .L18C000_8017B690\n/* 18D564 8017B564 640042AE */   sw        $v0, 0x64($s2)\n/* 18D568 8017B568 21880000 */  addu       $s1, $zero, $zero\n/* 18D56C 8017B56C 01001534 */  ori        $s5, $zero, 0x1\n/* 18D570 8017B570 6400438E */  lw         $v1, 0x64($s2)\n/* 18D574 8017B574 02001634 */  ori        $s6, $zero, 0x2\n/* 18D578 8017B578 40100300 */  sll        $v0, $v1, 1\n/* 18D57C 8017B57C 21104300 */  addu       $v0, $v0, $v1\n/* 18D580 8017B580 80100200 */  sll        $v0, $v0, 2\n/* 18D584 8017B584 21104300 */  addu       $v0, $v0, $v1\n/* 18D588 8017B588 80100200 */  sll        $v0, $v0, 2\n/* 18D58C 8017B58C 0880033C */  lui        $v1, %hi(g_PrimBuf)\n/* 18D590 8017B590 EC6F6324 */  addiu      $v1, $v1, %lo(g_PrimBuf)\n/* 18D594 8017B594 21804300 */  addu       $s0, $v0, $v1\n/* 18D598 8017B598 3400428E */  lw         $v0, 0x34($s2)\n/* 18D59C 8017B59C 8000033C */  lui        $v1, (0x800000 >> 16)\n/* 18D5A0 8017B5A0 25104300 */  or         $v0, $v0, $v1\n/* 18D5A4 8017B5A4 340042AE */  sw         $v0, 0x34($s2)\n/* 18D5A8 8017B5A8 0400222A */  slti       $v0, $s1, 0x4\n.L18C000_8017B5AC:\n/* 18D5AC 8017B5AC 07004010 */  beqz       $v0, .L18C000_8017B5CC\n/* 18D5B0 8017B5B0 0700222A */   slti      $v0, $s1, 0x7\n/* 18D5B4 8017B5B4 3958000C */  jal        rand\n/* 18D5B8 8017B5B8 00000000 */   nop\n/* 18D5BC 8017B5BC 03004230 */  andi       $v0, $v0, 0x3\n/* 18D5C0 8017B5C0 1C0002A2 */  sb         $v0, 0x1C($s0)\n/* 18D5C4 8017B5C4 1E0015A2 */  sb         $s5, 0x1E($s0)\n/* 18D5C8 8017B5C8 0700222A */  slti       $v0, $s1, 0x7\n.L18C000_8017B5CC:\n/* 18D5CC 8017B5CC 09004014 */  bnez       $v0, .L18C000_8017B5F4\n/* 18D5D0 8017B5D0 01002232 */   andi      $v0, $s1, 0x1\n/* 18D5D4 8017B5D4 07004010 */  beqz       $v0, .L18C000_8017B5F4\n/* 18D5D8 8017B5D8 00000000 */   nop\n/* 18D5DC 8017B5DC 3958000C */  jal        rand\n/* 18D5E0 8017B5E0 00000000 */   nop\n/* 18D5E4 8017B5E4 0F004230 */  andi       $v0, $v0, 0xF\n/* 18D5E8 8017B5E8 1C0002A2 */  sb         $v0, 0x1C($s0)\n/* 18D5EC 8017B5EC 82ED0508 */  j          .L18C000_8017B608\n/* 18D5F0 8017B5F0 1E0016A2 */   sb        $s6, 0x1E($s0)\n.L18C000_8017B5F4:\n/* 18D5F4 8017B5F4 3958000C */  jal        rand\n/* 18D5F8 8017B5F8 00000000 */   nop\n/* 18D5FC 8017B5FC 07004230 */  andi       $v0, $v0, 0x7\n/* 18D600 8017B600 1C0002A2 */  sb         $v0, 0x1C($s0)\n/* 18D604 8017B604 1E0015A2 */  sb         $s5, 0x1E($s0)\n.L18C000_8017B608:\n/* 18D608 8017B608 AA2A023C */  lui        $v0, (0x2AAAAAAB >> 16)\n/* 18D60C 8017B60C ABAA4234 */  ori        $v0, $v0, (0x2AAAAAAB & 0xFFFF)\n/* 18D610 8017B610 18002202 */  mult       $s1, $v0\n/* 18D614 8017B614 C31F1100 */  sra        $v1, $s1, 31\n/* 18D618 8017B618 10100000 */  mfhi       $v0\n/* 18D61C 8017B61C 23104300 */  subu       $v0, $v0, $v1\n/* 18D620 8017B620 280002A2 */  sb         $v0, 0x28($s0)\n/* 18D624 8017B624 0B000234 */  ori        $v0, $zero, 0xB\n/* 18D628 8017B628 07002216 */  bne        $s1, $v0, .L18C000_8017B648\n/* 18D62C 8017B62C FF000234 */   ori       $v0, $zero, 0xFF\n/* 18D630 8017B630 18000234 */  ori        $v0, $zero, 0x18\n/* 18D634 8017B634 1C0002A2 */  sb         $v0, 0x1C($s0)\n/* 18D638 8017B638 03000234 */  ori        $v0, $zero, 0x3\n/* 18D63C 8017B63C 280016A2 */  sb         $s6, 0x28($s0)\n/* 18D640 8017B640 1E0002A2 */  sb         $v0, 0x1E($s0)\n/* 18D644 8017B644 FF000234 */  ori        $v0, $zero, 0xFF\n.L18C000_8017B648:\n/* 18D648 8017B648 100002A2 */  sb         $v0, 0x10($s0)\n/* 18D64C 8017B64C 3958000C */  jal        rand\n/* 18D650 8017B650 040002A2 */   sb        $v0, 0x4($s0)\n/* 18D654 8017B654 1F004230 */  andi       $v0, $v0, 0x1F\n/* 18D658 8017B658 01003126 */  addiu      $s1, $s1, 0x1\n/* 18D65C 8017B65C 110002A2 */  sb         $v0, 0x11($s0)\n/* 18D660 8017B660 050002A2 */  sb         $v0, 0x5($s0)\n/* 18D664 8017B664 120002A2 */  sb         $v0, 0x12($s0)\n/* 18D668 8017B668 060002A2 */  sb         $v0, 0x6($s0)\n/* 18D66C 8017B66C 0780033C */  lui        $v1, %hi(PLAYER_zPriority)\n/* 18D670 8017B670 FC336394 */  lhu        $v1, %lo(PLAYER_zPriority)($v1)\n/* 18D674 8017B674 08030234 */  ori        $v0, $zero, 0x308\n/* 18D678 8017B678 320002A6 */  sh         $v0, 0x32($s0)\n/* 18D67C 8017B67C 0C00222A */  slti       $v0, $s1, 0xC\n/* 18D680 8017B680 260003A6 */  sh         $v1, 0x26($s0)\n/* 18D684 8017B684 0000108E */  lw         $s0, 0x0($s0)\n/* 18D688 8017B688 C8FF4014 */  bnez       $v0, .L18C000_8017B5AC\n/* 18D68C 8017B68C 0400222A */   slti      $v0, $s1, 0x4\n.L18C000_8017B690:\n/* 18D690 8017B690 21204002 */  addu       $a0, $s2, $zero\n/* 18D694 8017B694 21280000 */  addu       $a1, $zero, $zero\n/* 18D698 8017B698 0780023C */  lui        $v0, %hi(PLAYER_zPriority)\n/* 18D69C 8017B69C FC334294 */  lhu        $v0, %lo(PLAYER_zPriority)($v0)\n/* 18D6A0 8017B6A0 30000334 */  ori        $v1, $zero, 0x30\n/* 18D6A4 8017B6A4 180043A2 */  sb         $v1, 0x18($s2)\n/* 18D6A8 8017B6A8 FEFF4224 */  addiu      $v0, $v0, -0x2\n/* 18D6AC 8017B6AC C1EC050C */  jal        SetWeaponProperties\n/* 18D6B0 8017B6B0 240042A6 */   sh        $v0, 0x24($s2)\n/* 18D6B4 8017B6B4 40004286 */  lh         $v0, 0x40($s2)\n/* 18D6B8 8017B6B8 00000000 */  nop\n/* 18D6BC 8017B6BC 1E004228 */  slti       $v0, $v0, 0x1E\n/* 18D6C0 8017B6C0 0A004014 */  bnez       $v0, .L18C000_8017B6EC\n/* 18D6C4 8017B6C4 21204002 */   addu      $a0, $s2, $zero\n/* 18D6C8 8017B6C8 21300000 */  addu       $a2, $zero, $zero\n/* 18D6CC 8017B6CC 1880053C */  lui        $a1, %hi(g_HandId)\n/* 18D6D0 8017B6D0 5CB0A58C */  lw         $a1, %lo(g_HandId)($a1)\n/* 18D6D4 8017B6D4 0480023C */  lui        $v0, %hi(g_api_CreateEntFactoryFromEntity)\n/* 18D6D8 8017B6D8 F4C7428C */  lw         $v0, %lo(g_api_CreateEntFactoryFromEntity)($v0)\n/* 18D6DC 8017B6DC 0100A524 */  addiu      $a1, $a1, 0x1\n/* 18D6E0 8017B6E0 002B0500 */  sll        $a1, $a1, 12\n/* 18D6E4 8017B6E4 09F84000 */  jalr       $v0\n/* 18D6E8 8017B6E8 3800A534 */   ori       $a1, $a1, 0x38\n.L18C000_8017B6EC:\n/* 18D6EC 8017B6EC 2C004296 */  lhu        $v0, 0x2C($s2)\n/* 18D6F0 8017B6F0 00000000 */  nop\n/* 18D6F4 8017B6F4 01004224 */  addiu      $v0, $v0, 0x1\n/* 18D6F8 8017B6F8 2C0042A6 */  sh         $v0, 0x2C($s2)\n.L18C000_8017B6FC:\n/* 18D6FC 8017B6FC 0780023C */  lui        $v0, %hi(PLAYER_ext_player_anim)\n/* 18D700 8017B700 84344290 */  lbu        $v0, %lo(PLAYER_ext_player_anim)($v0)\n/* 18D704 8017B704 0C006392 */  lbu        $v1, 0xC($s3)\n/* 18D708 8017B708 00000000 */  nop\n/* 18D70C 8017B70C 23104300 */  subu       $v0, $v0, $v1\n/* 18D710 8017B710 AC0042A2 */  sb         $v0, 0xAC($s2)\n/* 18D714 8017B714 0780033C */  lui        $v1, %hi(PLAYER_animFrameDuration)\n/* 18D718 8017B718 2A346384 */  lh         $v1, %lo(PLAYER_animFrameDuration)($v1)\n/* 18D71C 8017B71C 01000234 */  ori        $v0, $zero, 0x1\n/* 18D720 8017B720 0D006214 */  bne        $v1, $v0, .L18C000_8017B758\n/* 18D724 8017B724 00000000 */   nop\n/* 18D728 8017B728 0780033C */  lui        $v1, %hi(PLAYER_animFrameIdx)\n/* 18D72C 8017B72C 28346394 */  lhu        $v1, %lo(PLAYER_animFrameIdx)($v1)\n/* 18D730 8017B730 0D006292 */  lbu        $v0, 0xD($s3)\n/* 18D734 8017B734 00000000 */  nop\n/* 18D738 8017B738 07006214 */  bne        $v1, $v0, .L18C000_8017B758\n/* 18D73C 8017B73C 00000000 */   nop\n/* 18D740 8017B740 0A006496 */  lhu        $a0, 0xA($s3)\n/* 18D744 8017B744 0480023C */  lui        $v0, %hi(g_api_PlaySfx)\n/* 18D748 8017B748 DCC7428C */  lw         $v0, %lo(g_api_PlaySfx)($v0)\n/* 18D74C 8017B74C 00000000 */  nop\n/* 18D750 8017B750 09F84000 */  jalr       $v0\n/* 18D754 8017B754 00000000 */   nop\n.L18C000_8017B758:\n/* 18D758 8017B758 0400648E */  lw         $a0, 0x4($s3)\n/* 18D75C 8017B75C 0000658E */  lw         $a1, 0x0($s3)\n/* 18D760 8017B760 0480023C */  lui        $v0, %hi(g_api_UpdateUnarmedAnim)\n/* 18D764 8017B764 14C8428C */  lw         $v0, %lo(g_api_UpdateUnarmedAnim)($v0)\n/* 18D768 8017B768 00000000 */  nop\n/* 18D76C 8017B76C 09F84000 */  jalr       $v0\n/* 18D770 8017B770 00000000 */   nop\n/* 18D774 8017B774 05004104 */  bgez       $v0, .L18C000_8017B78C\n/* 18D778 8017B778 00000000 */   nop\n.L18C000_8017B77C:\n/* 18D77C 8017B77C 18EC050C */  jal        DestroyEntity\n/* 18D780 8017B780 21204002 */   addu      $a0, $s2, $zero\n/* 18D784 8017B784 5BEE0508 */  j          .L18C000_8017B96C\n/* 18D788 8017B788 00000000 */   nop\n.L18C000_8017B78C:\n/* 18D78C 8017B78C 0780023C */  lui        $v0, %hi(PLAYER_drawFlags)\n/* 18D790 8017B790 F1334290 */  lbu        $v0, %lo(PLAYER_drawFlags)($v0)\n/* 18D794 8017B794 56004386 */  lh         $v1, 0x56($s2)\n/* 18D798 8017B798 190042A2 */  sb         $v0, 0x19($s2)\n/* 18D79C 8017B79C 0780023C */  lui        $v0, %hi(PLAYER_rotY)\n/* 18D7A0 8017B7A0 F4334294 */  lhu        $v0, %lo(PLAYER_rotY)($v0)\n/* 18D7A4 8017B7A4 00000000 */  nop\n/* 18D7A8 8017B7A8 1C0042A6 */  sh         $v0, 0x1C($s2)\n/* 18D7AC 8017B7AC 0780023C */  lui        $v0, %hi(PLAYER_rotPivotY)\n/* 18D7B0 8017B7B0 FA334294 */  lhu        $v0, %lo(PLAYER_rotPivotY)($v0)\n/* 18D7B4 8017B7B4 00000000 */  nop\n/* 18D7B8 8017B7B8 220042A6 */  sh         $v0, 0x22($s2)\n/* 18D7BC 8017B7BC 0D000234 */  ori        $v0, $zero, 0xD\n/* 18D7C0 8017B7C0 07006210 */  beq        $v1, $v0, .L18C000_8017B7E0\n/* 18D7C4 8017B7C4 22000234 */   ori       $v0, $zero, 0x22\n/* 18D7C8 8017B7C8 05006210 */  beq        $v1, $v0, .L18C000_8017B7E0\n/* 18D7CC 8017B7CC 2C000234 */   ori       $v0, $zero, 0x2C\n/* 18D7D0 8017B7D0 03006210 */  beq        $v1, $v0, .L18C000_8017B7E0\n/* 18D7D4 8017B7D4 3E000234 */   ori       $v0, $zero, 0x3E\n/* 18D7D8 8017B7D8 64006214 */  bne        $v1, $v0, .L18C000_8017B96C\n/* 18D7DC 8017B7DC 00000000 */   nop\n.L18C000_8017B7E0:\n/* 18D7E0 8017B7E0 6400438E */  lw         $v1, 0x64($s2)\n/* 18D7E4 8017B7E4 FFFF0224 */  addiu      $v0, $zero, -0x1\n/* 18D7E8 8017B7E8 60006210 */  beq        $v1, $v0, .L18C000_8017B96C\n/* 18D7EC 8017B7EC 21880000 */   addu      $s1, $zero, $zero\n/* 18D7F0 8017B7F0 6400438E */  lw         $v1, 0x64($s2)\n/* 18D7F4 8017B7F4 1880073C */  lui        $a3, %hi(D_18C000_8017AF94)\n/* 18D7F8 8017B7F8 94AFE724 */  addiu      $a3, $a3, %lo(D_18C000_8017AF94)\n/* 18D7FC 8017B7FC 40100300 */  sll        $v0, $v1, 1\n/* 18D800 8017B800 21104300 */  addu       $v0, $v0, $v1\n/* 18D804 8017B804 80100200 */  sll        $v0, $v0, 2\n/* 18D808 8017B808 21104300 */  addu       $v0, $v0, $v1\n/* 18D80C 8017B80C 80100200 */  sll        $v0, $v0, 2\n/* 18D810 8017B810 0880033C */  lui        $v1, %hi(g_PrimBuf)\n/* 18D814 8017B814 EC6F6324 */  addiu      $v1, $v1, %lo(g_PrimBuf)\n/* 18D818 8017B818 21804300 */  addu       $s0, $v0, $v1\n/* 18D81C 8017B81C 3400428E */  lw         $v0, 0x34($s2)\n/* 18D820 8017B820 8000033C */  lui        $v1, (0x800000 >> 16)\n/* 18D824 8017B824 25104300 */  or         $v0, $v0, $v1\n/* 18D828 8017B828 340042AE */  sw         $v0, 0x34($s2)\n.L18C000_8017B82C:\n/* 18D82C 8017B82C 56004386 */  lh         $v1, 0x56($s2)\n/* 18D830 8017B830 22000234 */  ori        $v0, $zero, 0x22\n/* 18D834 8017B834 10006210 */  beq        $v1, $v0, .L18C000_8017B878\n/* 18D838 8017B838 23006228 */   slti      $v0, $v1, 0x23\n/* 18D83C 8017B83C 05004010 */  beqz       $v0, .L18C000_8017B854\n/* 18D840 8017B840 0D000234 */   ori       $v0, $zero, 0xD\n/* 18D844 8017B844 0A006210 */  beq        $v1, $v0, .L18C000_8017B870\n/* 18D848 8017B848 40301400 */   sll       $a2, $s4, 1\n/* 18D84C 8017B84C 24EE0508 */  j          .L18C000_8017B890\n/* 18D850 8017B850 00000000 */   nop\n.L18C000_8017B854:\n/* 18D854 8017B854 2C000234 */  ori        $v0, $zero, 0x2C\n/* 18D858 8017B858 09006210 */  beq        $v1, $v0, .L18C000_8017B880\n/* 18D85C 8017B85C 3E000234 */   ori       $v0, $zero, 0x3E\n/* 18D860 8017B860 09006210 */  beq        $v1, $v0, .L18C000_8017B888\n/* 18D864 8017B864 40301400 */   sll       $a2, $s4, 1\n/* 18D868 8017B868 24EE0508 */  j          .L18C000_8017B890\n/* 18D86C 8017B86C 00000000 */   nop\n.L18C000_8017B870:\n/* 18D870 8017B870 23EE0508 */  j          .L18C000_8017B88C\n/* 18D874 8017B874 21A00000 */   addu      $s4, $zero, $zero\n.L18C000_8017B878:\n/* 18D878 8017B878 23EE0508 */  j          .L18C000_8017B88C\n/* 18D87C 8017B87C 01001434 */   ori       $s4, $zero, 0x1\n.L18C000_8017B880:\n/* 18D880 8017B880 23EE0508 */  j          .L18C000_8017B88C\n/* 18D884 8017B884 02001434 */   ori       $s4, $zero, 0x2\n.L18C000_8017B888:\n/* 18D888 8017B888 03001434 */  ori        $s4, $zero, 0x3\n.L18C000_8017B88C:\n/* 18D88C 8017B88C 40301400 */  sll        $a2, $s4, 1\n.L18C000_8017B890:\n/* 18D890 8017B890 2110C700 */  addu       $v0, $a2, $a3\n/* 18D894 8017B894 00004294 */  lhu        $v0, 0x0($v0)\n/* 18D898 8017B898 FFFF0424 */  addiu      $a0, $zero, -0x1\n/* 18D89C 8017B89C 23185100 */  subu       $v1, $v0, $s1\n/* 18D8A0 8017B8A0 14004296 */  lhu        $v0, 0x14($s2)\n/* 18D8A4 8017B8A4 00000000 */  nop\n/* 18D8A8 8017B8A8 03004010 */  beqz       $v0, .L18C000_8017B8B8\n/* 18D8AC 8017B8AC 21286000 */   addu      $a1, $v1, $zero\n/* 18D8B0 8017B8B0 23280300 */  negu       $a1, $v1\n/* 18D8B4 8017B8B4 01000434 */  ori        $a0, $zero, 0x1\n.L18C000_8017B8B8:\n/* 18D8B8 8017B8B8 AA2A023C */  lui        $v0, (0x2AAAAAAB >> 16)\n/* 18D8BC 8017B8BC ABAA4234 */  ori        $v0, $v0, (0x2AAAAAAB & 0xFFFF)\n/* 18D8C0 8017B8C0 18002202 */  mult       $s1, $v0\n/* 18D8C4 8017B8C4 20000296 */  lhu        $v0, 0x20($s0)\n/* 18D8C8 8017B8C8 00000000 */  nop\n/* 18D8CC 8017B8CC 21108200 */  addu       $v0, $a0, $v0\n/* 18D8D0 8017B8D0 200002A6 */  sh         $v0, 0x20($s0)\n/* 18D8D4 8017B8D4 1880013C */  lui        $at, %hi(D_18C000_8017AF9C)\n/* 18D8D8 8017B8D8 21082600 */  addu       $at, $at, $a2\n/* 18D8DC 8017B8DC 9CAF2494 */  lhu        $a0, %lo(D_18C000_8017AF9C)($at)\n/* 18D8E0 8017B8E0 02004296 */  lhu        $v0, 0x2($s2)\n/* 18D8E4 8017B8E4 20000396 */  lhu        $v1, 0x20($s0)\n/* 18D8E8 8017B8E8 2110A200 */  addu       $v0, $a1, $v0\n/* 18D8EC 8017B8EC 080002A6 */  sh         $v0, 0x8($s0)\n/* 18D8F0 8017B8F0 21104300 */  addu       $v0, $v0, $v1\n/* 18D8F4 8017B8F4 1C000592 */  lbu        $a1, 0x1C($s0)\n/* 18D8F8 8017B8F8 C31F1100 */  sra        $v1, $s1, 31\n/* 18D8FC 8017B8FC 140002A6 */  sh         $v0, 0x14($s0)\n/* 18D900 8017B900 10100000 */  mfhi       $v0\n/* 18D904 8017B904 23104300 */  subu       $v0, $v0, $v1\n/* 18D908 8017B908 06004396 */  lhu        $v1, 0x6($s2)\n/* 18D90C 8017B90C 21208200 */  addu       $a0, $a0, $v0\n/* 18D910 8017B910 21188300 */  addu       $v1, $a0, $v1\n/* 18D914 8017B914 0A0003A6 */  sh         $v1, 0xA($s0)\n/* 18D918 8017B918 06004296 */  lhu        $v0, 0x6($s2)\n/* 18D91C 8017B91C 28000392 */  lbu        $v1, 0x28($s0)\n/* 18D920 8017B920 21208200 */  addu       $a0, $a0, $v0\n/* 18D924 8017B924 28000292 */  lbu        $v0, 0x28($s0)\n/* 18D928 8017B928 2B186500 */  sltu       $v1, $v1, $a1\n/* 18D92C 8017B92C 21104400 */  addu       $v0, $v0, $a0\n/* 18D930 8017B930 06006010 */  beqz       $v1, .L18C000_8017B94C\n/* 18D934 8017B934 160002A6 */   sh        $v0, 0x16($s0)\n/* 18D938 8017B938 28000292 */  lbu        $v0, 0x28($s0)\n/* 18D93C 8017B93C 1E000392 */  lbu        $v1, 0x1E($s0)\n/* 18D940 8017B940 00000000 */  nop\n/* 18D944 8017B944 21104300 */  addu       $v0, $v0, $v1\n/* 18D948 8017B948 280002A2 */  sb         $v0, 0x28($s0)\n.L18C000_8017B94C:\n/* 18D94C 8017B94C 32000296 */  lhu        $v0, 0x32($s0)\n/* 18D950 8017B950 01003126 */  addiu      $s1, $s1, 0x1\n/* 18D954 8017B954 F7FF4230 */  andi       $v0, $v0, 0xFFF7\n/* 18D958 8017B958 320002A6 */  sh         $v0, 0x32($s0)\n/* 18D95C 8017B95C 0C00222A */  slti       $v0, $s1, 0xC\n/* 18D960 8017B960 0000108E */  lw         $s0, 0x0($s0)\n/* 18D964 8017B964 B1FF4014 */  bnez       $v0, .L18C000_8017B82C\n/* 18D968 8017B968 00000000 */   nop\n.L18C000_8017B96C:\n/* 18D96C 8017B96C 2C00BF8F */  lw         $ra, 0x2C($sp)\n/* 18D970 8017B970 2800B68F */  lw         $s6, 0x28($sp)\n/* 18D974 8017B974 2400B58F */  lw         $s5, 0x24($sp)\n/* 18D978 8017B978 2000B48F */  lw         $s4, 0x20($sp)\n/* 18D97C 8017B97C 1C00B38F */  lw         $s3, 0x1C($sp)\n/* 18D980 8017B980 1800B28F */  lw         $s2, 0x18($sp)\n/* 18D984 8017B984 1400B18F */  lw         $s1, 0x14($sp)\n/* 18D988 8017B988 1000B08F */  lw         $s0, 0x10($sp)\n/* 18D98C 8017B98C 3000BD27 */  addiu      $sp, $sp, 0x30\n/* 18D990 8017B990 0800E003 */  jr         $ra\n/* 18D994 8017B994 00000000 */   nop\n.size EntityWeaponAttack, . - EntityWeaponAttack
8580d1cd4533d3203e546382e6b8a55c3f9f9a4dd272e6df802c47204f4b0770	.set noat      /* allow manual use of $at */\n.set noreorder /* don't insert nops after branches */\n\nglabel EntityEquipItemDrop\n/* 16698 80196698 A0FFBD27 */  addiu      $sp, $sp, -0x60\n/* 1669C 8019669C 4000B0AF */  sw         $s0, 0x40($sp)\n/* 166A0 801966A0 21808000 */  addu       $s0, $a0, $zero\n/* 166A4 801966A4 5800BFAF */  sw         $ra, 0x58($sp)\n/* 166A8 801966A8 5400B5AF */  sw         $s5, 0x54($sp)\n/* 166AC 801966AC 5000B4AF */  sw         $s4, 0x50($sp)\n/* 166B0 801966B0 4C00B3AF */  sw         $s3, 0x4C($sp)\n/* 166B4 801966B4 4800B2AF */  sw         $s2, 0x48($sp)\n/* 166B8 801966B8 4400B1AF */  sw         $s1, 0x44($sp)\n/* 166BC 801966BC 30000396 */  lhu        $v1, 0x30($s0)\n/* 166C0 801966C0 2C000296 */  lhu        $v0, 0x2C($s0)\n/* 166C4 801966C4 00000000 */  nop\n/* 166C8 801966C8 FEFF4224 */  addiu      $v0, $v0, -0x2\n/* 166CC 801966CC 0300422C */  sltiu      $v0, $v0, 0x3\n/* 166D0 801966D0 06004010 */  beqz       $v0, .L801966EC\n/* 166D4 801966D4 FF7F7230 */   andi      $s2, $v1, 0x7FFF\n/* 166D8 801966D8 48000292 */  lbu        $v0, 0x48($s0)\n/* 166DC 801966DC 00000000 */  nop\n/* 166E0 801966E0 02004010 */  beqz       $v0, .L801966EC\n/* 166E4 801966E4 05000234 */   ori       $v0, $zero, 0x5\n/* 166E8 801966E8 2C0002A6 */  sh         $v0, 0x2C($s0)\n.L801966EC:\n/* 166EC 801966EC 2C000396 */  lhu        $v1, 0x2C($s0)\n/* 166F0 801966F0 00000000 */  nop\n/* 166F4 801966F4 0600622C */  sltiu      $v0, $v1, 0x6\n/* 166F8 801966F8 47014010 */  beqz       $v0, .L80196C18\n/* 166FC 801966FC 80100300 */   sll       $v0, $v1, 2\n/* 16700 80196700 1980013C */  lui        $at, %hi(jtbl_8018D560)\n/* 16704 80196704 21082200 */  addu       $at, $at, $v0\n/* 16708 80196708 60D5228C */  lw         $v0, %lo(jtbl_8018D560)($at)\n/* 1670C 8019670C 00000000 */  nop\n/* 16710 80196710 08004000 */  jr         $v0\n/* 16714 80196714 00000000 */   nop\njlabel .L80196718\n/* 16718 80196718 0480023C */  lui        $v0, %hi(g_PlayableCharacter)\n/* 1671C 8019671C A0C9428C */  lw         $v0, %lo(g_PlayableCharacter)($v0)\n/* 16720 80196720 00000000 */  nop\n/* 16724 80196724 0C004010 */  beqz       $v0, .L80196758\n/* 16728 80196728 21200000 */   addu      $a0, $zero, $zero\n/* 1672C 8019672C 1980023C */  lui        $v0, %hi(EntityPrizeDrop)\n/* 16730 80196730 845C4224 */  addiu      $v0, $v0, %lo(EntityPrizeDrop)\n/* 16734 80196734 280002AE */  sw         $v0, 0x28($s0)\n/* 16738 80196738 03000234 */  ori        $v0, $zero, 0x3\n/* 1673C 8019673C 300000A6 */  sh         $zero, 0x30($s0)\n/* 16740 80196740 A953060C */  jal        SetStep\n/* 16744 80196744 260002A6 */   sh        $v0, 0x26($s0)\n/* 16748 80196748 2157060C */  jal        EntityPrizeDrop\n/* 1674C 8019674C 21200002 */   addu      $a0, $s0, $zero\n/* 16750 80196750 165B0608 */  j          .L80196C58\n/* 16754 80196754 00000000 */   nop\n.L80196758:\n/* 16758 80196758 1880043C */  lui        $a0, %hi(g_InitializeData0)\n/* 1675C 8019675C 10048424 */  addiu      $a0, $a0, %lo(g_InitializeData0)\n/* 16760 80196760 DD53060C */  jal        InitializeEntity\n/* 16764 80196764 00000000 */   nop\n/* 16768 80196768 065B0608 */  j          .L80196C18\n/* 1676C 8019676C 7C0000A6 */   sh        $zero, 0x7C($s0)\njlabel .L80196770\n/* 16770 80196770 1000A627 */  addiu      $a2, $sp, 0x10\n/* 16774 80196774 02000486 */  lh         $a0, 0x2($s0)\n/* 16778 80196778 06000586 */  lh         $a1, 0x6($s0)\n/* 1677C 8019677C 0480023C */  lui        $v0, %hi(g_api_CheckCollision)\n/* 16780 80196780 BCC7428C */  lw         $v0, %lo(g_api_CheckCollision)($v0)\n/* 16784 80196784 00000000 */  nop\n/* 16788 80196788 09F84000 */  jalr       $v0\n/* 1678C 8019678C 21380000 */   addu      $a3, $zero, $zero\n/* 16790 80196790 1000A28F */  lw         $v0, 0x10($sp)\n/* 16794 80196794 00000000 */  nop\n/* 16798 80196798 07004230 */  andi       $v0, $v0, 0x7\n/* 1679C 8019679C 1C014014 */  bnez       $v0, .L80196C10\n/* 167A0 801967A0 21880000 */   addu      $s1, $zero, $zero\n/* 167A4 801967A4 1A80153C */  lui        $s5, %hi(g_ItemIconSlots)\n/* 167A8 801967A8 2CD4B526 */  addiu      $s5, $s5, %lo(g_ItemIconSlots)\n/* 167AC 801967AC 00141100 */  sll        $v0, $s1, 16\n.L801967B0:\n/* 167B0 801967B0 C3130200 */  sra        $v0, $v0, 15\n/* 167B4 801967B4 21105500 */  addu       $v0, $v0, $s5\n/* 167B8 801967B8 00004294 */  lhu        $v0, 0x0($v0)\n/* 167BC 801967BC 00000000 */  nop\n/* 167C0 801967C0 07004010 */  beqz       $v0, .L801967E0\n/* 167C4 801967C4 01002226 */   addiu     $v0, $s1, 0x1\n/* 167C8 801967C8 21884000 */  addu       $s1, $v0, $zero\n/* 167CC 801967CC 00140200 */  sll        $v0, $v0, 16\n/* 167D0 801967D0 03140200 */  sra        $v0, $v0, 16\n/* 167D4 801967D4 20004228 */  slti       $v0, $v0, 0x20\n/* 167D8 801967D8 F5FF4014 */  bnez       $v0, .L801967B0\n/* 167DC 801967DC 00141100 */   sll       $v0, $s1, 16\n.L801967E0:\n/* 167E0 801967E0 00141100 */  sll        $v0, $s1, 16\n/* 167E4 801967E4 03A40200 */  sra        $s4, $v0, 16\n/* 167E8 801967E8 2000822A */  slti       $v0, $s4, 0x20\n/* 167EC 801967EC 1D004010 */  beqz       $v0, .L80196864\n/* 167F0 801967F0 00000000 */   nop\n/* 167F4 801967F4 94000286 */  lh         $v0, 0x94($s0)\n/* 167F8 801967F8 00000000 */  nop\n/* 167FC 801967FC 0E004010 */  beqz       $v0, .L80196838\n/* 16800 80196800 21204000 */   addu      $a0, $v0, $zero\n/* 16804 80196804 FFFF8424 */  addiu      $a0, $a0, -0x1\n/* 16808 80196808 002C0400 */  sll        $a1, $a0, 16\n/* 1680C 8019680C C32C0500 */  sra        $a1, $a1, 19\n/* 16810 80196810 07008430 */  andi       $a0, $a0, 0x7\n/* 16814 80196814 01000234 */  ori        $v0, $zero, 0x1\n/* 16818 80196818 0480013C */  lui        $at, %hi(D_8003BF9C)\n/* 1681C 8019681C 21082500 */  addu       $at, $at, $a1\n/* 16820 80196820 9CBF2390 */  lbu        $v1, %lo(D_8003BF9C)($at)\n/* 16824 80196824 04108200 */  sllv       $v0, $v0, $a0\n/* 16828 80196828 25186200 */  or         $v1, $v1, $v0\n/* 1682C 8019682C 0480013C */  lui        $at, %hi(D_8003BF9C)\n/* 16830 80196830 21082500 */  addu       $at, $at, $a1\n/* 16834 80196834 9CBF23A0 */  sb         $v1, %lo(D_8003BF9C)($at)\n.L80196838:\n/* 16838 80196838 04000434 */  ori        $a0, $zero, 0x4\n/* 1683C 8019683C 0480023C */  lui        $v0, %hi(g_api_AllocPrimitives)\n/* 16840 80196840 B8C7428C */  lw         $v0, %lo(g_api_AllocPrimitives)($v0)\n/* 16844 80196844 00000000 */  nop\n/* 16848 80196848 09F84000 */  jalr       $v0\n/* 1684C 8019684C 01000534 */   ori       $a1, $zero, 0x1\n/* 16850 80196850 00140200 */  sll        $v0, $v0, 16\n/* 16854 80196854 039C0200 */  sra        $s3, $v0, 16\n/* 16858 80196858 FFFF0224 */  addiu      $v0, $zero, -0x1\n/* 1685C 8019685C 05006216 */  bne        $s3, $v0, .L80196874\n/* 16860 80196860 8000033C */   lui       $v1, (0x800000 >> 16)\n.L80196864:\n/* 16864 80196864 9950060C */  jal        DestroyEntity\n/* 16868 80196868 21200002 */   addu      $a0, $s0, $zero\n/* 1686C 8019686C 165B0608 */  j          .L80196C58\n/* 16870 80196870 00000000 */   nop\n.L80196874:\n/* 16874 80196874 3400028E */  lw         $v0, 0x34($s0)\n/* 16878 80196878 640013AE */  sw         $s3, 0x64($s0)\n/* 1687C 8019687C 25104300 */  or         $v0, $v0, $v1\n/* 16880 80196880 340002AE */  sw         $v0, 0x34($s0)\n/* 16884 80196884 40101400 */  sll        $v0, $s4, 1\n/* 16888 80196888 21105500 */  addu       $v0, $v0, $s5\n/* 1688C 8019688C E0010334 */  ori        $v1, $zero, 0x1E0\n/* 16890 80196890 000043A4 */  sh         $v1, 0x0($v0)\n/* 16894 80196894 FFFF4332 */  andi       $v1, $s2, 0xFFFF\n/* 16898 80196898 A900622C */  sltiu      $v0, $v1, 0xA9\n/* 1689C 8019689C 0D004010 */  beqz       $v0, .L801968D4\n/* 168A0 801968A0 8C0011A6 */   sh        $s1, 0x8C($s0)\n/* 168A4 801968A4 40100300 */  sll        $v0, $v1, 1\n/* 168A8 801968A8 21104300 */  addu       $v0, $v0, $v1\n/* 168AC 801968AC 80100200 */  sll        $v0, $v0, 2\n/* 168B0 801968B0 21104300 */  addu       $v0, $v0, $v1\n/* 168B4 801968B4 0480033C */  lui        $v1, %hi(g_api_equipDefs)\n/* 168B8 801968B8 30C8638C */  lw         $v1, %lo(g_api_equipDefs)($v1)\n/* 168BC 801968BC 80100200 */  sll        $v0, $v0, 2\n/* 168C0 801968C0 21104300 */  addu       $v0, $v0, $v1\n/* 168C4 801968C4 2C004494 */  lhu        $a0, 0x2C($v0)\n/* 168C8 801968C8 2E004594 */  lhu        $a1, 0x2E($v0)\n/* 168CC 801968CC 3D5A0608 */  j          .L801968F4\n/* 168D0 801968D0 00000000 */   nop\n.L801968D4:\n/* 168D4 801968D4 57FF5226 */  addiu      $s2, $s2, -0xA9\n/* 168D8 801968D8 FFFF4232 */  andi       $v0, $s2, 0xFFFF\n/* 168DC 801968DC 0480033C */  lui        $v1, %hi(g_api_g_AccessoryDefs)\n/* 168E0 801968E0 34C8638C */  lw         $v1, %lo(g_api_g_AccessoryDefs)($v1)\n/* 168E4 801968E4 40110200 */  sll        $v0, $v0, 5\n/* 168E8 801968E8 21104300 */  addu       $v0, $v0, $v1\n/* 168EC 801968EC 18004494 */  lhu        $a0, 0x18($v0)\n/* 168F0 801968F0 1A004594 */  lhu        $a1, 0x1A($v0)\n.L801968F4:\n/* 168F4 801968F4 0480023C */  lui        $v0, %hi(g_api_LoadEquipIcon)\n/* 168F8 801968F8 2CC8428C */  lw         $v0, %lo(g_api_LoadEquipIcon)($v0)\n/* 168FC 801968FC 00000000 */  nop\n/* 16900 80196900 09F84000 */  jalr       $v0\n/* 16904 80196904 21308002 */   addu      $a2, $s4, $zero\n/* 16908 80196908 40101300 */  sll        $v0, $s3, 1\n/* 1690C 8019690C 21105300 */  addu       $v0, $v0, $s3\n/* 16910 80196910 80100200 */  sll        $v0, $v0, 2\n/* 16914 80196914 21105300 */  addu       $v0, $v0, $s3\n/* 16918 80196918 80100200 */  sll        $v0, $v0, 2\n/* 1691C 8019691C 0880033C */  lui        $v1, %hi(g_PrimBuf)\n/* 16920 80196920 EC6F6324 */  addiu      $v1, $v1, %lo(g_PrimBuf)\n/* 16924 80196924 21384300 */  addu       $a3, $v0, $v1\n/* 16928 80196928 21182002 */  addu       $v1, $s1, $zero\n/* 1692C 8019692C 07006430 */  andi       $a0, $v1, 0x7\n/* 16930 80196930 00210400 */  sll        $a0, $a0, 4\n/* 16934 80196934 01008534 */  ori        $a1, $a0, 0x1\n/* 16938 80196938 0F008434 */  ori        $a0, $a0, 0xF\n/* 1693C 8019693C 18006330 */  andi       $v1, $v1, 0x18\n/* 16940 80196940 40180300 */  sll        $v1, $v1, 1\n/* 16944 80196944 81006634 */  ori        $a2, $v1, 0x81\n/* 16948 80196948 8F006334 */  ori        $v1, $v1, 0x8F\n/* 1694C 8019694C 1A000234 */  ori        $v0, $zero, 0x1A\n/* 16950 80196950 1A00E2A4 */  sh         $v0, 0x1A($a3)\n/* 16954 80196954 D0012226 */  addiu      $v0, $s1, 0x1D0\n/* 16958 80196958 3100E3A0 */  sb         $v1, 0x31($a3)\n/* 1695C 8019695C 2500E3A0 */  sb         $v1, 0x25($a3)\n/* 16960 80196960 80000334 */  ori        $v1, $zero, 0x80\n/* 16964 80196964 0E00E2A4 */  sh         $v0, 0xE($a3)\n/* 16968 80196968 06000234 */  ori        $v0, $zero, 0x6\n/* 1696C 8019696C 2400E5A0 */  sb         $a1, 0x24($a3)\n/* 16970 80196970 0C00E5A0 */  sb         $a1, 0xC($a3)\n/* 16974 80196974 3000E4A0 */  sb         $a0, 0x30($a3)\n/* 16978 80196978 1800E4A0 */  sb         $a0, 0x18($a3)\n/* 1697C 8019697C 1900E6A0 */  sb         $a2, 0x19($a3)\n/* 16980 80196980 0D00E6A0 */  sb         $a2, 0xD($a3)\n/* 16984 80196984 2600E3A4 */  sh         $v1, 0x26($a3)\n/* 16988 80196988 3200E2A4 */  sh         $v0, 0x32($a3)\n/* 1698C 8019698C 2C000296 */  lhu        $v0, 0x2C($s0)\n/* 16990 80196990 AF5A0608 */  j          .L80196ABC\n/* 16994 80196994 7C0003A6 */   sh        $v1, 0x7C($s0)\njlabel .L80196998\n/* 16998 80196998 0C00028E */  lw         $v0, 0xC($s0)\n/* 1699C 8019699C 00000000 */  nop\n/* 169A0 801969A0 0F004104 */  bgez       $v0, .L801969E0\n/* 169A4 801969A4 1000A627 */   addiu     $a2, $sp, 0x10\n/* 169A8 801969A8 21380000 */  addu       $a3, $zero, $zero\n/* 169AC 801969AC 02000486 */  lh         $a0, 0x2($s0)\n/* 169B0 801969B0 06000586 */  lh         $a1, 0x6($s0)\n/* 169B4 801969B4 0480023C */  lui        $v0, %hi(g_api_CheckCollision)\n/* 169B8 801969B8 BCC7428C */  lw         $v0, %lo(g_api_CheckCollision)($v0)\n/* 169BC 801969BC 00000000 */  nop\n/* 169C0 801969C0 09F84000 */  jalr       $v0\n/* 169C4 801969C4 F9FFA524 */   addiu     $a1, $a1, -0x7\n/* 169C8 801969C8 1000A28F */  lw         $v0, 0x10($sp)\n/* 169CC 801969CC 00000000 */  nop\n/* 169D0 801969D0 05004230 */  andi       $v0, $v0, 0x5\n/* 169D4 801969D4 02004010 */  beqz       $v0, .L801969E0\n/* 169D8 801969D8 00000000 */   nop\n/* 169DC 801969DC 0C0000AE */  sw         $zero, 0xC($s0)\n.L801969E0:\n/* 169E0 801969E0 8651060C */  jal        MoveEntity\n/* 169E4 801969E4 00000000 */   nop\n/* 169E8 801969E8 1000A627 */  addiu      $a2, $sp, 0x10\n/* 169EC 801969EC 21380000 */  addu       $a3, $zero, $zero\n/* 169F0 801969F0 02000486 */  lh         $a0, 0x2($s0)\n/* 169F4 801969F4 06000586 */  lh         $a1, 0x6($s0)\n/* 169F8 801969F8 0480023C */  lui        $v0, %hi(g_api_CheckCollision)\n/* 169FC 801969FC BCC7428C */  lw         $v0, %lo(g_api_CheckCollision)($v0)\n/* 16A00 80196A00 00000000 */  nop\n/* 16A04 80196A04 09F84000 */  jalr       $v0\n/* 16A08 80196A08 0700A524 */   addiu     $a1, $a1, 0x7\n/* 16A0C 80196A0C 1000A28F */  lw         $v0, 0x10($sp)\n/* 16A10 80196A10 00000000 */  nop\n/* 16A14 80196A14 05004230 */  andi       $v0, $v0, 0x5\n/* 16A18 80196A18 10004010 */  beqz       $v0, .L80196A5C\n/* 16A1C 80196A1C 00000000 */   nop\n/* 16A20 80196A20 0C00028E */  lw         $v0, 0xC($s0)\n/* 16A24 80196A24 00000000 */  nop\n/* 16A28 80196A28 0C004018 */  blez       $v0, .L80196A5C\n/* 16A2C 80196A2C F0000234 */   ori       $v0, $zero, 0xF0\n/* 16A30 80196A30 080000AE */  sw         $zero, 0x8($s0)\n/* 16A34 80196A34 0C0000AE */  sw         $zero, 0xC($s0)\n/* 16A38 80196A38 2800A497 */  lhu        $a0, 0x28($sp)\n/* 16A3C 80196A3C 2C000396 */  lhu        $v1, 0x2C($s0)\n/* 16A40 80196A40 800002A2 */  sb         $v0, 0x80($s0)\n/* 16A44 80196A44 06000296 */  lhu        $v0, 0x6($s0)\n/* 16A48 80196A48 01006324 */  addiu      $v1, $v1, 0x1\n/* 16A4C 80196A4C 21104400 */  addu       $v0, $v0, $a0\n/* 16A50 80196A50 060002A6 */  sh         $v0, 0x6($s0)\n/* 16A54 80196A54 995A0608 */  j          .L80196A64\n/* 16A58 80196A58 2C0003A6 */   sh        $v1, 0x2C($s0)\n.L80196A5C:\n/* 16A5C 80196A5C 9251060C */  jal        FallEntity\n/* 16A60 80196A60 00000000 */   nop\n.L80196A64:\n/* 16A64 80196A64 1880043C */  lui        $a0, %hi(D_80180FE0)\n/* 16A68 80196A68 E00F8424 */  addiu      $a0, $a0, %lo(D_80180FE0)\n/* 16A6C 80196A6C 7054060C */  jal        func_801951C0\n/* 16A70 80196A70 02000534 */   ori       $a1, $zero, 0x2\n/* 16A74 80196A74 065B0608 */  j          .L80196C18\n/* 16A78 80196A78 00000000 */   nop\njlabel .L80196A7C\n/* 16A7C 80196A7C E655060C */  jal        func_80195798\n/* 16A80 80196A80 01000434 */   ori       $a0, $zero, 0x1\n/* 16A84 80196A84 30000296 */  lhu        $v0, 0x30($s0)\n/* 16A88 80196A88 00000000 */  nop\n/* 16A8C 80196A8C 00804230 */  andi       $v0, $v0, 0x8000\n/* 16A90 80196A90 0D004014 */  bnez       $v0, .L80196AC8\n/* 16A94 80196A94 10000334 */   ori       $v1, $zero, 0x10\n/* 16A98 80196A98 80000292 */  lbu        $v0, 0x80($s0)\n/* 16A9C 80196A9C 00000000 */  nop\n/* 16AA0 80196AA0 FFFF4224 */  addiu      $v0, $v0, -0x1\n/* 16AA4 80196AA4 800002A2 */  sb         $v0, 0x80($s0)\n/* 16AA8 80196AA8 FF004230 */  andi       $v0, $v0, 0xFF\n/* 16AAC 80196AAC 5A004014 */  bnez       $v0, .L80196C18\n/* 16AB0 80196AB0 50000334 */   ori       $v1, $zero, 0x50\n/* 16AB4 80196AB4 2C000296 */  lhu        $v0, 0x2C($s0)\n/* 16AB8 80196AB8 800003A2 */  sb         $v1, 0x80($s0)\n.L80196ABC:\n/* 16ABC 80196ABC 01004224 */  addiu      $v0, $v0, 0x1\n/* 16AC0 80196AC0 065B0608 */  j          .L80196C18\n/* 16AC4 80196AC4 2C0002A6 */   sh        $v0, 0x2C($s0)\n.L80196AC8:\n/* 16AC8 80196AC8 8C000286 */  lh         $v0, 0x8C($s0)\n/* 16ACC 80196ACC 00000000 */  nop\n/* 16AD0 80196AD0 40100200 */  sll        $v0, $v0, 1\n/* 16AD4 80196AD4 1A80013C */  lui        $at, %hi(g_ItemIconSlots)\n/* 16AD8 80196AD8 21082200 */  addu       $at, $at, $v0\n/* 16ADC 80196ADC 2CD423A4 */  sh         $v1, %lo(g_ItemIconSlots)($at)\n/* 16AE0 80196AE0 065B0608 */  j          .L80196C18\n/* 16AE4 80196AE4 00000000 */   nop\njlabel .L80196AE8\n/* 16AE8 80196AE8 E655060C */  jal        func_80195798\n/* 16AEC 80196AEC 01000434 */   ori       $a0, $zero, 0x1\n/* 16AF0 80196AF0 80000292 */  lbu        $v0, 0x80($s0)\n/* 16AF4 80196AF4 00000000 */  nop\n/* 16AF8 80196AF8 FF004424 */  addiu      $a0, $v0, 0xFF\n/* 16AFC 80196AFC 21108000 */  addu       $v0, $a0, $zero\n/* 16B00 80196B00 800002A2 */  sb         $v0, 0x80($s0)\n/* 16B04 80196B04 FF004230 */  andi       $v0, $v0, 0xFF\n/* 16B08 80196B08 41004010 */  beqz       $v0, .L80196C10\n/* 16B0C 80196B0C 00000000 */   nop\n/* 16B10 80196B10 6400038E */  lw         $v1, 0x64($s0)\n/* 16B14 80196B14 00000000 */  nop\n/* 16B18 80196B18 40100300 */  sll        $v0, $v1, 1\n/* 16B1C 80196B1C 21104300 */  addu       $v0, $v0, $v1\n/* 16B20 80196B20 80100200 */  sll        $v0, $v0, 2\n/* 16B24 80196B24 21104300 */  addu       $v0, $v0, $v1\n/* 16B28 80196B28 80100200 */  sll        $v0, $v0, 2\n/* 16B2C 80196B2C 0880033C */  lui        $v1, %hi(g_PrimBuf)\n/* 16B30 80196B30 EC6F6324 */  addiu      $v1, $v1, %lo(g_PrimBuf)\n/* 16B34 80196B34 21384300 */  addu       $a3, $v0, $v1\n/* 16B38 80196B38 02008230 */  andi       $v0, $a0, 0x2\n/* 16B3C 80196B3C 03004010 */  beqz       $v0, .L80196B4C\n/* 16B40 80196B40 08000234 */   ori       $v0, $zero, 0x8\n/* 16B44 80196B44 065B0608 */  j          .L80196C18\n/* 16B48 80196B48 3200E2A4 */   sh        $v0, 0x32($a3)\n.L80196B4C:\n/* 16B4C 80196B4C 02000234 */  ori        $v0, $zero, 0x2\n/* 16B50 80196B50 065B0608 */  j          .L80196C18\n/* 16B54 80196B54 3200E2A4 */   sh        $v0, 0x32($a3)\njlabel .L80196B58\n/* 16B58 80196B58 0980113C */  lui        $s1, %hi(D_80097410)\n/* 16B5C 80196B5C 10743126 */  addiu      $s1, $s1, %lo(D_80097410)\n/* 16B60 80196B60 0000228E */  lw         $v0, 0x0($s1)\n/* 16B64 80196B64 00000000 */  nop\n/* 16B68 80196B68 09004010 */  beqz       $v0, .L80196B90\n/* 16B6C 80196B6C 00000000 */   nop\n/* 16B70 80196B70 0980043C */  lui        $a0, %hi(D_80097414)\n/* 16B74 80196B74 1474848C */  lw         $a0, %lo(D_80097414)($a0)\n/* 16B78 80196B78 0480023C */  lui        $v0, %hi(g_api_FreePrimitives)\n/* 16B7C 80196B7C B4C7428C */  lw         $v0, %lo(g_api_FreePrimitives)($v0)\n/* 16B84 80196B84 09F84000 */  jalr       $v0\n/* 16B88 80196B88 00000000 */   nop\n/* 16B8C 80196B8C 000020AE */  sw         $zero, 0x0($s1)\n.L80196B90:\n/* 16B90 80196B90 0480023C */  lui        $v0, %hi(g_api_PlaySfx)\n/* 16B98 80196B98 00000000 */  nop\n/* 16B9C 80196B9C 09F84000 */  jalr       $v0\n/* 16BA0 80196BA0 7C060434 */   ori       $a0, $zero, 0x67C\n/* 16BA4 80196BA4 FFFF4432 */  andi       $a0, $s2, 0xFFFF\n/* 16BA8 80196BA8 A900822C */  sltiu      $v0, $a0, 0xA9\n/* 16BAC 80196BAC 09004010 */  beqz       $v0, .L80196BD4\n/* 16BB0 80196BB0 40100400 */   sll       $v0, $a0, 1\n/* 16BB4 80196BB4 21280000 */  addu       $a1, $zero, $zero\n/* 16BB8 80196BB8 21104400 */  addu       $v0, $v0, $a0\n/* 16BBC 80196BBC 80100200 */  sll        $v0, $v0, 2\n/* 16BC0 80196BC0 21104400 */  addu       $v0, $v0, $a0\n/* 16BC4 80196BC4 0480033C */  lui        $v1, %hi(g_api_equipDefs)\n/* 16BC8 80196BC8 30C8638C */  lw         $v1, %lo(g_api_equipDefs)($v1)\n/* 16BCC 80196BCC FB5A0608 */  j          .L80196BEC\n/* 16BD0 80196BD0 80100200 */   sll       $v0, $v0, 2\n.L80196BD4:\n/* 16BD4 80196BD4 57FF5226 */  addiu      $s2, $s2, -0xA9\n/* 16BD8 80196BD8 FFFF4432 */  andi       $a0, $s2, 0xFFFF\n/* 16BDC 80196BDC 02000534 */  ori        $a1, $zero, 0x2\n/* 16BE0 80196BE0 0480033C */  lui        $v1, %hi(g_api_g_AccessoryDefs)\n/* 16BE4 80196BE4 34C8638C */  lw         $v1, %lo(g_api_g_AccessoryDefs)($v1)\n/* 16BE8 80196BE8 40110400 */  sll        $v0, $a0, 5\n.L80196BEC:\n/* 16BEC 80196BEC 21104300 */  addu       $v0, $v0, $v1\n/* 16BF0 80196BF0 0480033C */  lui        $v1, %hi(g_api_AddToInventory)\n/* 16BF4 80196BF4 4CC8638C */  lw         $v1, %lo(g_api_AddToInventory)($v1)\n/* 16BF8 80196BF8 0000518C */  lw         $s1, 0x0($v0)\n/* 16BFC 80196BFC 09F86000 */  jalr       $v1\n/* 16C00 80196C00 00000000 */   nop\n/* 16C04 80196C04 21202002 */  addu       $a0, $s1, $zero\n/* 16C08 80196C08 E96E060C */  jal        BottomCornerText\n/* 16C0C 80196C0C 01000534 */   ori       $a1, $zero, 0x1\n.L80196C10:\n/* 16C10 80196C10 9950060C */  jal        DestroyEntity\n/* 16C14 80196C14 21200002 */   addu      $a0, $s0, $zero\n.L80196C18:\n/* 16C18 80196C18 2C000296 */  lhu        $v0, 0x2C($s0)\n/* 16C1C 80196C1C 00000000 */  nop\n/* 16C20 80196C20 0200422C */  sltiu      $v0, $v0, 0x2\n/* 16C24 80196C24 0C004014 */  bnez       $v0, .L80196C58\n/* 16C28 80196C28 00000000 */   nop\n/* 16C2C 80196C2C 7C000296 */  lhu        $v0, 0x7C($s0)\n/* 16C30 80196C30 00000000 */  nop\n/* 16C34 80196C34 05004010 */  beqz       $v0, .L80196C4C\n/* 16C38 80196C38 00000000 */   nop\n/* 16C3C 80196C3C 7C000296 */  lhu        $v0, 0x7C($s0)\n/* 16C40 80196C40 00000000 */  nop\n/* 16C44 80196C44 FFFF4224 */  addiu      $v0, $v0, -0x1\n/* 16C48 80196C48 7C0002A6 */  sh         $v0, 0x7C($s0)\n.L80196C4C:\n/* 16C4C 80196C4C 7C000596 */  lhu        $a1, 0x7C($s0)\n/* 16C50 80196C50 7D59060C */  jal        BlinkItem\n/* 16C54 80196C54 21200002 */   addu      $a0, $s0, $zero\n.L80196C58:\n/* 16C58 80196C58 5800BF8F */  lw         $ra, 0x58($sp)\n/* 16C5C 80196C5C 5400B58F */  lw         $s5, 0x54($sp)\n/* 16C60 80196C60 5000B48F */  lw         $s4, 0x50($sp)\n/* 16C64 80196C64 4C00B38F */  lw         $s3, 0x4C($sp)\n/* 16C68 80196C68 4800B28F */  lw         $s2, 0x48($sp)\n/* 16C6C 80196C6C 4400B18F */  lw         $s1, 0x44($sp)\n/* 16C70 80196C70 4000B08F */  lw         $s0, 0x40($sp)\n/* 16C74 80196C74 6000BD27 */  addiu      $sp, $sp, 0x60\n/* 16C78 80196C78 0800E003 */  jr         $ra\n/* 16C7C 80196C7C 00000000 */   nop\n.size EntityEquipItemDrop, . - EntityEquipItemDrop\n\n.align 3\nglabel jtbl_8018D560\n/* D560 8018D560 18671980 */ .word .L80196718\n/* D564 8018D564 70671980 */ .word .L80196770\n/* D568 8018D568 98691980 */ .word .L80196998\n/* D56C 8018D56C 7C6A1980 */ .word .L80196A7C\n/* D570 8018D570 E86A1980 */ .word .L80196AE8\n/* D574 8018D574 586B1980 */ .word .L80196B58\n.size jtbl_8018D560, . - jtbl_8018D560
\.


--
-- Data for Name: coreapp_assembly; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.coreapp_assembly (hash, "time", arch, elf_object, source_asm_id) FROM stdin;
c873c26f9624a0e8b478018547a2bac9eb252acc5c843a242e63fed31b65c129	2024-08-20 21:58:38.397401+00	mipsel	\\x7f454c46010101000000000000000000010008000100000000000000000000000c0700000110000034000000000028000c000b00000000000000000000000000e0ffbd271000b0af218080001400b1afffff112421180000010005341c00bfaf1800b2af0000048e041065002410440022004014000000000100632418006228faff401404106500ffff0224db00221221280000001911000000023c0000428c404011002118620000006694020067940080c23034004010c090110000f0c33000b00234280062102a1043001100401400d00234009002341f0062102a1043000800401400a0023400800234180062100000000052000008ff0fc6301200000821886000160062100000000052000008ff0fc630180062102a1043000600401400e0023400c00234110062100000000052000008ff0fc6301100621000f002340f0062100000000052000008ff0fc63051000008010005345100000802000534510000080300053451000008040005345100000805000534510000080600053407000534ff0fc6300080e230320040102120000000f0e33000b00234260062102a1043000f00401400d00234009002341d0062102a1043000600401400a0023400800234160062100000000086000008ff0fe730160062100000000086000008ff0fe730180062102a1043000600401400e0023400c00234110062100000000086000008ff0fe7301100621000f002340f0062100000000086000008ff0fe73085000008010004348500000802000434850000080300043485000008040004348500000805000434850000080600043407000434ff0fe730ffffc3300040622c03004010008002348e000008080006a623106200080002a6ffffe3300040622c0300401000800234960000080a0007a6231062000a0002a60e0004a60000043c0000848c401008000c0005a6211044000002439400000000100003a60202429400000000120002a64010120021104400040042940000033c00006324140002a640101100211043000000449400004590140006960000000c022204000300400400000000b4000008160002a6160000a6401011000000013c210822000000229440181200180002a60000023c0000428c0000043c0000848c211862000c006294000000001a0002a60600629400000000041082001c0002ae0e0062940000000004108200200002ae080064940a00639480008230020040140500023401000234240002ae00036230080040140700023400026230050040140500023400016230020040140300023401000234280002ae200062300200401407000234030002342c0002ae02120400300002a6f000823002110200320002a682110300fffc4230340002a61f006230360002a60f008230380002a63a0004a63c0003a61c00bf8f1800b28f1400b18f1000b08f2000bd270800e003000000000000000000000000fe0107a00000000000000000000000000000000000000000000001000101000100000000000000000000000000000000410f000000676e75000107000000040100000000000000000000000000000000000000000000000000000000030001000000000000000000000000000300030000000000000000000000000003000400000000000000000000000000030005000000000000000000000000000300060000000000000000000000000003000700000000000000000000000000030008000100000000000000d803000012000100110000000000000000000000100000001a000000000000000000000010000000300000000000000000000000100000004000000000000000000000001000000000537075476574566f69636541747472005f7370755f525858005f7370755f766f6963655f63656e7465724e6f7465005f7370755f7069746368326e6f7465005f7370755f6d656d5f6d6f64655f706c7573000058000000050900005c00000006090000b400000004010000bc00000004010000cc00000004010000f00000000401000008010000040100001001000004010000180100000401000020010000040100002801000004010000300100000401000038010000040100008c010000040100009c01000004010000c001000004010000d801000004010000e001000004010000e801000004010000f001000004010000f80100000401000000020000040100000802000004010000280200000401000048020000040100005c02000005090000600200000609000094020000050a000098020000060a0000b4020000040b0000c402000004010000d4020000050a0000dc020000060a0000e802000005090000ec02000006090000f0020000050c0000f4020000060c0000002e73796d746162002e737472746162002e7368737472746162002e72656c2e74657874002e64617461002e627373002e726567696e666f002e4d4950532e616269666c616773002e706472002e676e752e6174747269627574657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f00000001000000060000000000000040000000e0030000000000000000000010000000000000001b000000090000004000000000000000840500002801000009000000010000000400000008000000250000000100000003000000000000002004000000000000000000000000000010000000000000002b00000008000000030000000000000020040000000000000000000000000000100000000000000030000000060000700200000000000000200400001800000000000000000000000400000018000000390000002a0000700200000000000000380400001800000000000000000000000800000018000000480000000100000000000000000000005004000000000000000000000000000004000000000000004d000000f5ffff6f00000000000000005004000010000000000000000000000001000000000000000100000002000000000000000000000060040000d00000000a0000000800000004000000100000000900000003000000000000000000000030050000530000000000000000000000010000000000000011000000030000000000000000000000ac0600005d00000000000000000000000100000000000000	955167f1953b7b67c155e5c7a260e0d5202b028630f67fbf575624f8cdcbdc8b
0d9122b76ee73fc0f2210d8ab81493035325fb71744d56e08235a38aefd9eff1	2024-08-20 22:13:57.564525+00	mipsel	\\x7f454c4601010100000000000000000001000800010000000000000000000000dc0c00000110000034000000000028000c000b000000000000000000000000000000023c0000428cc8ffbd271800b2af219080003000bfaf2c00b7af2800b6af2400b5af2000b4af1c00b3af1400b1af1000b0af000042ae0000023c0000428c00000000040042ae0000023c0000429400000000140042a6310042920000033c0000638400000000020060107f00573002001734001117000000033c00006324219843000000043c000084900c006392000000002b108300c8004014070062242a108200c5004010000000000000023c0000429400000000c0004010000000002c004296000000009c004014000000000000043c000084240000000c000000000000033c0000638c10800224540042a610010234160042a6640002340a0060105a0042a6540042965a00439602004224540042a616004296020063245a0043a618004224160042a60200043416004396080065960600023c340042ae21186500160043a60000023c0000428c0000000009f840000c0005340014020003140200ffff03244b004310640042ae21880000010015346400438e0200163440100300211043008010020021104300801002000000033c00006324218043003400428e8000033c25104300340042ae0400222a070040100700222a0000000c00000000030042301c0002a21e0015a20700222a090040140100223207004010000000000000000c000000000f0042301c0002a2830000081e0016a20000000c00000000070042301c0002a21e0015a2aa2a023cabaa423418002202c31f11001010000023104300280002a20b00023407002216ff000234180002341c0002a203000234280016a21e0002a2ff000234100002a20000000c040002a21f00423001003126110002a2050002a2120002a2060002a20000033c0000639408030234320002a60c00222a260003a60000108ec8ff40140400222a21204002212800000000023c0000429430000334180043a2feff42240000000c240042a62120e0021b008010000000000000033c0000632400006284000000000800401038004228400042860000000040100200400042a60000628400000000380042280c00401038000234000062a40100023408008214212040021100053c3d00a5340000023c0000428c0000000009f84000213000002c00429600000000010042242c0042a60000023c000042900c0063920000000023104300ac0042a20000033c00006384010002340d006214000000000000033c000063940d0062920000000007006214000000000a0064960000023c0000428c0000000009f84000000000000400648e0000658e0000023c0000428c0000000009f840000000000005004104000000000000000c212040026b010008000000000000023c0000429056004386190042a20000023c00004294000000001c0042a60000023c0000429400000000220042a60d0002340700621022000234050062102c000234030062103e00023464006214000000006400438effff022460006210218800006400438e0000073c0000e72440100300211043008010020021104300801002000000033c00006324218043003400428e8000033c25104300340042ae56004386220002341000621023006228050040100d0002340a0062104030140034010008000000002c000234090062103e000234090062104030140034010008000000003301000821a000003301000801001434330100080200143403001434403014002110c70000004294ffff042423185100140042960000000003004010212860002328030001000434aa2a023cabaa423418002202200002960000000021108200200002a60000013c210826000000249402004296200003962110a200080002a6211043001c000592c31f1100140002a610100000231043000600439621208200211883000a0003a6060042962800039221208200280002922b1865002110440006006010160002a6280002921e0003920000000021104300280002a23200029601003126f7ff4230320002a60c00222a0000108eb1ff4014000000003000bf8f2c00b78f2800b68f2400b58f2000b48f1c00b38f1800b28f1400b18f1000b08f3800bd270800e0030000000000000000fe00ffa00000000000000000000000000000000000000000000001000101000100000000000000000000000000000000410f000000676e75000107000000040100000000000000000000000000000000000000000000000000000000030001000000000000000000000000000300030000000000000000000000000003000400000000000000000000000000030005000000000000000000000000000300060000000000000000000000000003000700000000000000000000000000030008000100000000000000dc05000012000100140000000000000000000000100000001f0000000000000000000000100000002f00000000000000000000001000000041000000000000000000000010000000580000000000000000000000100000006a0000000000000000000000100000008300000000000000000000001000000092000000000000000000000010000000a4000000000000000000000010000000b3000000000000000000000010000000bc000000000000000000000010000000d2000000000000000000000010000000dc000000000000000000000010000000e1000000000000000000000010000000f200000000000000000000001000000006010000000000000000000010000000270100000000000000000000100000004001000000000000000000001000000054010000000000000000000010000000620100000000000000000000100000007a0100000000000000000000100000008801000000000000000000001000000099010000000000000000000010000000a5010000000000000000000010000000b6010000000000000000000010000000c801000000000000000000001000000000456e74697479576561706f6e41747461636b00675f456e74697469657300504c415945525f706f73595f76616c00504c415945525f666163696e674c65667400675f506c617965725f445f38303037324630305f313100445f3137453030305f383031374145433400504c415945525f6578745f67656e657269635f756e6b414300675f506c617965725f756e6b343600445f3137453030305f38303137413034300053657453707269746542616e6b3100675f48616e64496400675f6170695f416c6c6f635072696d69746976657300675f5072696d4275660072616e6400504c415945525f7a5072696f7269747900536574576561706f6e50726f7065727469657300675f6170695f437265617465456e74466163746f727946726f6d456e7469747900504c415945525f616e696d4672616d654475726174696f6e00504c415945525f616e696d4672616d6549647800675f6170695f506c617953667800675f6170695f557064617465556e61726d6564416e696d0044657374726f79456e7469747900504c415945525f64726177466c61677300504c415945525f726f745900504c415945525f726f745069766f745900445f3137453030305f383031374145463400445f3137453030305f38303137414546430000000000000005090000040000000609000038000000050a00003c000000060a000048000000050b00004c000000060b00005c000000050c000060000000060c000078000000050d00007c000000060d000084000000050e000088000000060e0000ac000000050f0000b0000000060f0000d000000005100000d400000006100000d800000004110000e000000005120000e4000000061200004401000005130000480100000613000090010000051400009401000006140000b801000004150000e001000004150000f001000004010000f8010000041500005002000004150000700200000516000074020000061600009c02000005160000a002000006160000b002000004170000c4020000050c0000c8020000060c000018030000051800001c030000061800003c030000050e000040030000060e00005403000005190000580300000619000068030000051a00006c030000061a000084030000051b000088030000061b0000a0030000051c0000a4030000061c0000bc030000041d0000c403000004010000cc030000051e0000d0030000061e0000dc030000051f0000e0030000061f0000ec03000005200000f00300000620000034040000052100003804000006210000500400000514000054040000061400008c04000004010000a804000004010000b004000004010000b804000004010000c00400000401000014050000052200001c05000006220000002e73796d746162002e737472746162002e7368737472746162002e72656c2e74657874002e64617461002e627373002e726567696e666f002e4d4950532e616269666c616773002e706472002e676e752e6174747269627574657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f00000001000000060000000000000040000000e0050000000000000000000010000000000000001b0000000900000040000000000000006c0a00001002000009000000010000000400000008000000250000000100000003000000000000002006000000000000000000000000000010000000000000002b00000008000000030000000000000020060000000000000000000000000000100000000000000030000000060000700200000000000000200600001800000000000000000000000400000018000000390000002a0000700200000000000000380600001800000000000000000000000800000018000000480000000100000000000000000000005006000000000000000000000000000004000000000000004d000000f5ffff6f00000000000000005006000010000000000000000000000001000000000000000100000002000000000000000000000060060000300200000a0000000800000004000000100000000900000003000000000000000000000090080000da01000000000000000000000100000000000000110000000300000000000000000000007c0c00005d00000000000000000000000100000000000000	8d6de0ac3943d88a102efd95c0300239485a6ccefec5e030f86f3d0fd894afd7
2d153150e021989d12341e8a3d925d779f4a3d1a544a44f35688ba9865507185	2024-08-20 22:15:14.555595+00	mipsel	\\x7f454c46010101000000000000000000010008000100000000000000000000001c0800000110000034000000000028000c000b000000000000000000000000000000023c00004290c0ffbd272400b3af219880003800bfaf3400b7af3000b6af2c00b5af2800b4af2000b2af1c00b1afbfff42240700422ca30040101800b0af0000023c00004294000000009e004010000000000000023c0000429400000000020040100c000334f4ff03240000023c000042940000000021106200020062a60000033c0000639400000000e6ff6224060062a60000023c00004290000000000200423002004010e1ff6224060062a62c0063960000000005006010010002347300621000000000b600000800000000020004340000023c0000428c0000000009f84000100005340014020003140200ffff032474004310640062ae21880000e0ff1524ff0014346400638e8600023c340062ae40100300211043008010020021104300801002000000033c000063242190430000861100038410000000000c21200002212000024010020003120200200042240000000c0c0042a20100312600861100038410002120000240100200031202002310a2020000000c0d0042a2212000024010020003120200200042240000000c180042a240100200031202000d0043922310a2020400632c02006010190042a20d0054a219004292000000000400422c0200401020000234190054a2300042a2240042a2e0000234310042a2250042a27f0002341d0042a2290042a25f0102340e0042a61a0002341a0042a604000234110040a2120040a2100040a2050040a2060040a2040040a2280054a21c0054a22a0040a21e0040a2070042a20000033c0000639435030234320042a61000222a02006324260043a60000528eb9ff401400861100040002347c0062a63000629619000334007f4230030040107e0063a6280002347e0062a62c0062960000000001004224b60000082c0062a67c00628600000000211840002800422802004010060062247c0062a67e00629600000000ffff42247e0062a60014020005004014000000000000000c21206002fc000008000000007e0063860000000008006228020040108000163400b1030021880000ff00c23242b8020002007596060074966400638e7c00738640100300211043008010020021104300801002000000033c00006324219043000086110003841000212000022c0055a6200055a62e0054a6220054a6280056a21c0056a2290057a20000000c1d0057a203110200180053002120000212100000031202002110a2020000000c080042a60311020018005300010031260086110003841000212000021210000003120200231082020000000c0a0042a603110200180053002120000212100000031202002110a2020000000c140042a60311020018005300121000000312020023108202160042a61000222a0000528ed1ff4014008611003800bf8f3400b78f3000b68f2c00b58f2800b48f2400b38f2000b28f1c00b18f1800b08f4000bd270800e003000000003c00ffa00000000000000000000000000000000000000000000001000101000100000000000000000000000000000000410f000000676e750001070000000401000000000000000000000000000000000000000000000000000000000300010000000000000000000000000003000300000000000000000000000000030004000000000000000000000000000300050000000000000000000000000003000600000000000000000000000000030007000000000000000000000000000300080001000000000000002004000012000100130000000000000000000000100000002c0000000000000000000000100000003b0000000000000000000000100000004d0000000000000000000000100000005e0000000000000000000000100000006f0000000000000000000000100000008000000000000000000000001000000096000000000000000000000010000000a0000000000000000000000010000000a5000000000000000000000010000000aa000000000000000000000010000000bb0000000000000000000000100000000066756e635f7074725f383031373030303800504c415945525f6578745f67656e657269635f756e6b414300675f506c617965725f756e6b343600504c415945525f666163696e674c65667400504c415945525f706f73585f695f686900504c415945525f706f73595f695f686900504c415945525f64726177466c61677300675f6170695f416c6c6f635072696d69746976657300675f5072696d4275660072636f73007273696e00504c415945525f7a5072696f726974790044657374726f79456e74697479000000000000000005090000040000000609000040000000050a000044000000060a000054000000050b000058000000060b00006c000000050c000070000000060c000080000000050d000084000000060d000094000000050e000098000000060e0000c800000004010000d4000000050f0000d8000000060f000028010000051000002c010000061000003c01000004110000540100000412000078010000041100009001000004120000300200000513000034020000061300008802000004010000c802000004140000d0020000040100002003000005100000240300000610000054030000041100007403000004120000a003000004110000c003000004120000002e73796d746162002e737472746162002e7368737472746162002e72656c2e74657874002e64617461002e627373002e726567696e666f002e4d4950532e616269666c616773002e706472002e676e752e6174747269627574657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f0000000100000006000000000000004000000020040000000000000000000010000000000000001b000000090000004000000000000000bc0600000001000009000000010000000400000008000000250000000100000003000000000000006004000000000000000000000000000010000000000000002b00000008000000030000000000000060040000000000000000000000000000100000000000000030000000060000700200000000000000600400001800000000000000000000000400000018000000390000002a0000700200000000000000780400001800000000000000000000000800000018000000480000000100000000000000000000009004000000000000000000000000000004000000000000004d000000f5ffff6f000000000000000090040000100000000000000000000000010000000000000001000000020000000000000000000000a0040000500100000a00000008000000040000001000000009000000030000000000000000000000f0050000c90000000000000000000000010000000000000011000000030000000000000000000000bc0700005d00000000000000000000000100000000000000	145e7697f71e59a5c9a6b6d50257a7edb73daa8c45bbf42b280457d3ad4c7fd0
73b3f488845849438b2951edbb8fa66f5fe29d2ddff43f1e6225d3a8590b77ee	2024-08-20 22:16:58.08726+00	mipsel	\\x7f454c46010101000000000000000000010008000100000000000000000000008c0a00000110000034000000000028000c000b000000000000000000000000000000023c00004290b0ffbd273400b3af219880004c00bfaf4800beaf4400b7af4000b6af3c00b5af3800b4af3000b2af2c00b1afbfff42240700422c040140102800b0af0000023c0000429400000000ff0040100000000031006292000000007f0055301000a22a140040102000a22a0000023c0000429400000000020040100c000334f4ff03240000023c000042940000000021106200020062a60000023c0000429402006f96b6ff5424e6ff42241800afa740000008060062a604004014212060021000a52736000008213000001000a527010006340000000c00000000020063961000a2971200a49721186200060062961800a3a72110440021a040000000023c0000429400000000140062a60000023c000042900000000002004230160040101000a22a050040100000000006006296fdff9426fdff4224060062a60000023c0000429000000000bdff42240200422c050040100000000006006296ffff94265e000008ffff422406006296fdff9426fdff4224060062a62c006396000000000500601001000234a9006210218800001901000800000000020004340000023c0000428c0000000009f840000a0005340014020003140200ffff0324a3004310640062ae218800000f00a2320000173c0000f726c0b002000200e2262110c2022000a2af0400e22621f0c2026666103c676610366400638e8600023c340062ae40100300211043008010020021104300801002000000033c00006324219043002110d7020a00033400004694231871001800c3001270000000000000000000001800d0012000af8f000000000000e59510480000ffffa530000000001800a3001268000000000000000000001800b0010000c49710380000ffff84300000000018008300126000000000000000000000180090011040000009000234231051001800c200125000000000000000000000180050011030000000000000000000001800a200125800000000000000000000180070011028000000000000000000001800820001003126c3770e008348090023482e01040049a2c36f0d00833807002338ed00060047a212180000c3670c00834008001800700023400c01050048a2c3570a00833006002330ca00100046a2c35f0b00832805002328ab00120045a2c31f03001010000083100200231043000000000c110042a2200042a60000033c0000639435030234320042a60a00222a04006324260043a60000528ea9ff40142110d7028c00628e21206002ae004294212800000000000cae0062a68c00628e000000003a004294000000003a0062a61000a22a09004010ecff0224120062a604000234460062a214000234470062a22800023407010008100060a62000a22a0d004014060002340f00a2320800401420000234100062a620000234460062a206000234120060a606010008470062a23c0060a6060002347c0062a62c0062960000000001004224180100082c0062a67c00629600000000ffff42247c0062a60014020006004014000000000000000c212060026601000800000000218800006666153c6766b5360300163406006496020066966400638e1800af972310840221b8400040100300211043008010020021104300801002000000033c00006324219043002310e6010014020003a4020001003126180091021228000000000000000000001800b50020004296080046a60a0044a600840200038410002120000200034224200042a602006296c32f0500101800008318030023186500211043000000000c140042a60311020018005600121800000014170003140200180051001228000000000000000000001800b5002120000214004296031a030021104300140042a606006296c32f0500101800008318030023186500211043000000000c160042a6031102001800560014004696160043961210000003120200231862000a00222a160043a60000528ec8ff4014212060004c00bf8f4800be8f4400b78f4000b68f3c00b58f3800b48f3400b38f3000b28f2c00b18f2800b08f5000bd270800e0030000000000000000fcffffe00000000000000000000000000000000000000000000001000101000100000000000000000000000000000000410f000000676e75000107000000040100000000000000000000000000000000000000000000000000000000030001000000000000000000000000000300030000000000000000000000000003000400000000000000000000000000030005000000000000000000000000000300060000000000000000000000000003000700000000000000000000000000030008000100000000000000cc05000012000100130000000000000000000000100000002c0000000000000000000000100000003b0000000000000000000000100000004d0000000000000000000000100000005e0000000000000000000000100000006f0000000000000000000000100000008400000000000000000000001000000095000000000000000000000010000000ab000000000000000000000010000000bd000000000000000000000010000000c7000000000000000000000010000000cc000000000000000000000010000000dd000000000000000000000010000000f1000000000000000000000010000000ff000000000000000000000010000000040100000000000000000000100000000066756e635f7074725f383031373030303400504c415945525f6578745f67656e657269635f756e6b414300675f506c617965725f756e6b343600504c415945525f666163696e674c65667400504c415945525f706f73585f695f686900504c415945525f706f73595f695f68690066756e635f3135343030305f383031374238313000504c415945525f64726177466c61677300675f6170695f416c6c6f635072696d69746976657300445f3135343030305f383031374146453000675f5072696d4275660072616e6400504c415945525f7a5072696f7269747900536574576561706f6e50726f706572746965730044657374726f79456e746974790072636f73007273696e000000000000000005090000040000000609000044000000050a000048000000060a000070000000050b000074000000060b000088000000050c00008c000000060c00009c000000050d0000a0000000060d0000b400000004010000c800000004010000d8000000040e000000010000050b000004010000060b000010010000050f000014010000060f00004001000005090000440100000609000064010000040100009401000004010000a001000005100000a401000006100000d001000005110000d40100000611000018020000051200001c020000061200005403000004130000600300000514000064030000061400009803000004150000d8030000040100000c040000040100002c04000004010000500400000416000058040000040100009c04000005120000a00400000612000004050000041700006005000004180000002e73796d746162002e737472746162002e7368737472746162002e72656c2e74657874002e64617461002e627373002e726567696e666f002e4d4950532e616269666c616773002e706472002e676e752e6174747269627574657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f00000001000000060000000000000040000000d0050000000000000000000010000000000000001b000000090000004000000000000000ec0800004001000009000000010000000400000008000000250000000100000003000000000000001006000000000000000000000000000010000000000000002b00000008000000030000000000000010060000000000000000000000000000100000000000000030000000060000700200000000000000100600001800000000000000000000000400000018000000390000002a0000700200000000000000280600001800000000000000000000000800000018000000480000000100000000000000000000004006000000000000000000000000000004000000000000004d000000f5ffff6f00000000000000004006000010000000000000000000000001000000000000000100000002000000000000000000000050060000900100000a00000008000000040000001000000009000000030000000000000000000000e00700000901000000000000000000000100000000000000110000000300000000000000000000002c0a00005d00000000000000000000000100000000000000	6b4b67e43c029e2a68fcefd2d73edee683a9a38b72427decdc068b4e2e255977
7953ed1c0c86e3cb43ae28812589e1aa04455db0027b2753cb90432c7481179d	2024-08-20 22:17:51.649916+00	mipsel	\\x7f454c4601010100000000000000000001000800010000000000000000000000980c00000110000034000000000028000c000b000000000000000000000000000000023c0000428cd0ffbd271800b2af219080002c00bfaf2800b6af2400b5af2000b4af1c00b3af1400b1af1000b0af000042ae0000023c0000428c00000000040042ae0000023c0000429400000000140042a6310042920000033c0000638400000000020060107f00423002000234001102000000033c00006324219843000000043c000084900c006392000000002b108300b9004014070062242a108200b6004010000000000000023c0000429400000000b1004010000000002c004296000000008d004014000000000000043c000084240000000c000000000000033c0000638c10800224540042a610010234160042a6640002340a0060105a0042a6540042965a00439602004224540042a616004296020063245a0043a618004224160042a60200043416004396080065960600023c340042ae21186500160043a60000023c0000428c0000000009f840000c0005340014020003140200ffff03244b004310640042ae21880000010015346400438e0200163440100300211043008010020021104300801002000000033c00006324218043003400428e8000033c25104300340042ae0400222a070040100700222a0000000c00000000030042301c0002a21e0015a20700222a090040140100223207004010000000000000000c000000000f0042301c0002a2820000081e0016a20000000c00000000070042301c0002a21e0015a2aa2a023cabaa423418002202c31f11001010000023104300280002a20b00023407002216ff000234180002341c0002a203000234280016a21e0002a2ff000234100002a20000000c040002a21f00423001003126110002a2050002a2120002a2060002a20000033c0000639408030234320002a60c00222a260003a60000108ec8ff40140400222a21204002212800000000023c0000429430000334180043a2feff42240000000c240042a640004286000000001e0042280a00401421204002213000000000053c0000a58c0000023c0000428c0100a524002b050009f840003800a5342c00429600000000010042242c0042a60000023c000042900c0063920000000023104300ac0042a20000033c00006384010002340d006214000000000000033c000063940d0062920000000007006214000000000a0064960000023c0000428c0000000009f84000000000000400648e0000658e0000023c0000428c0000000009f840000000000005004104000000000000000c212040025b010008000000000000023c0000429056004386190042a20000023c00004294000000001c0042a60000023c0000429400000000220042a60d0002340700621022000234050062102c000234030062103e00023464006214000000006400438effff022460006210218800006400438e0000073c0000e72440100300211043008010020021104300801002000000033c00006324218043003400428e8000033c25104300340042ae56004386220002341000621023006228050040100d0002340a0062104030140024010008000000002c000234090062103e000234090062104030140024010008000000002301000821a000002301000801001434230100080200143403001434403014002110c70000004294ffff042423185100140042960000000003004010212860002328030001000434aa2a023cabaa423418002202200002960000000021108200200002a60000013c210826000000249402004296200003962110a200080002a6211043001c000592c31f1100140002a610100000231043000600439621208200211883000a0003a6060042962800039221208200280002922b1865002110440006006010160002a6280002921e0003920000000021104300280002a23200029601003126f7ff4230320002a60c00222a0000108eb1ff4014000000002c00bf8f2800b68f2400b58f2000b48f1c00b38f1800b28f1400b18f1000b08f3000bd270800e003000000000000000000000000fe007fa00000000000000000000000000000000000000000000001000101000100000000000000000000000000000000410f000000676e750001070000000401000000000000000000000000000000000000000000000000000000000300010000000000000000000000000003000300000000000000000000000000030004000000000000000000000000000300050000000000000000000000000003000600000000000000000000000000030007000000000000000000000000000300080001000000000000009805000012000100140000000000000000000000100000001f0000000000000000000000100000002f00000000000000000000001000000041000000000000000000000010000000580000000000000000000000100000006a0000000000000000000000100000008100000000000000000000001000000090000000000000000000000010000000a2000000000000000000000010000000b1000000000000000000000010000000ba000000000000000000000010000000d0000000000000000000000010000000da000000000000000000000010000000df000000000000000000000010000000f000000000000000000000001000000004010000000000000000000010000000250100000000000000000000100000003e0100000000000000000000100000005201000000000000000000001000000060010000000000000000000010000000780100000000000000000000100000008601000000000000000000001000000097010000000000000000000010000000a3010000000000000000000010000000b4010000000000000000000010000000c601000000000000000000001000000000456e74697479576561706f6e41747461636b00675f456e74697469657300504c415945525f706f73595f76616c00504c415945525f666163696e674c65667400675f506c617965725f445f38303037324630305f313100445f3138433030305f383031374146363400504c415945525f6578745f706c617965725f616e696d00675f506c617965725f756e6b343600445f3138433030305f38303137413034300053657453707269746542616e6b3100675f48616e64496400675f6170695f416c6c6f635072696d69746976657300675f5072696d4275660072616e6400504c415945525f7a5072696f7269747900536574576561706f6e50726f7065727469657300675f6170695f437265617465456e74466163746f727946726f6d456e7469747900504c415945525f616e696d4672616d654475726174696f6e00504c415945525f616e696d4672616d6549647800675f6170695f506c617953667800675f6170695f557064617465556e61726d6564416e696d0044657374726f79456e7469747900504c415945525f64726177466c61677300504c415945525f726f745900504c415945525f726f745069766f745900445f3138433030305f383031374146393400445f3138433030305f3830313741463943000000000005090000040000000609000034000000050a000038000000060a000044000000050b000048000000060b000058000000050c00005c000000060c000074000000050d000078000000060d000080000000050e000084000000060e0000a8000000050f0000ac000000060f0000cc00000005100000d000000006100000d400000004110000dc00000005120000e000000006120000400100000513000044010000061300008c010000051400009001000006140000b401000004150000dc01000004150000ec01000004010000f4010000041500004c020000041500006c02000005160000700200000616000098020000051600009c02000006160000ac02000004170000cc02000005120000d002000006120000d402000005180000d802000006180000fc020000050e000000030000060e00001403000005190000180300000619000028030000051a00002c030000061a000044030000051b000048030000061b000060030000051c000064030000061c00007c030000041d000084030000040100008c030000051e000090030000061e00009c030000051f0000a0030000061f0000ac03000005200000b003000006200000f403000005210000f803000006210000100400000514000014040000061400004c040000040100006804000004010000700400000401000078040000040100008004000004010000d404000005220000dc04000006220000002e73796d746162002e737472746162002e7368737472746162002e72656c2e74657874002e64617461002e627373002e726567696e666f002e4d4950532e616269666c616773002e706472002e676e752e6174747269627574657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f00000001000000060000000000000040000000a0050000000000000000000010000000000000001b000000090000004000000000000000280a0000100200000900000001000000040000000800000025000000010000000300000000000000e005000000000000000000000000000010000000000000002b000000080000000300000000000000e0050000000000000000000000000000100000000000000030000000060000700200000000000000e00500001800000000000000000000000400000018000000390000002a0000700200000000000000f80500001800000000000000000000000800000018000000480000000100000000000000000000001006000000000000000000000000000004000000000000004d000000f5ffff6f00000000000000001006000010000000000000000000000001000000000000000100000002000000000000000000000020060000300200000a0000000800000004000000100000000900000003000000000000000000000050080000d80100000000000000000000010000000000000011000000030000000000000000000000380c00005d00000000000000000000000100000000000000	b9c02a4bd51f739a416e8faa680d861df480dc37c66772f56ef0efafc086e670
5767879b1b8c2c22c9a0ac82432600acc1764152efe96eeb4fe5757401219a06	2024-08-20 22:21:14.164225+00	mipsel	\\x7f454c4601010100000000000000000001000800010000000000000000000000480d00000110000034000000000028000c000b00000000000000000000000000a0ffbd274000b0af218080005800bfaf5400b5af5000b4af4c00b3af4800b2af4400b1af300003962c00029600000000feff42240300422c06004010ff7f7230480002920000000002004010050002342c0002a62c000396000000000600622c45014010801003000000013c210822000000228c0000000008004000000000000000023c0000428c000000000c004010212000000000023c00004224280002ae03000234300000a60000000c260002a60000000c212000026e010008000000000000043c000084240000000c000000005e0100087c0000a61000a62702000486060005860000023c0000428c0000000009f84000213800001000a28f00000000070042301a014014218800000000153c0000b52600141100c3130200211055000000429400000000070040100100222621884000001402000314020020004228f5ff4014001411000014110003a402002000822a1d0040100000000094000286000000000e00401021204000ffff8424002c0400c32c050007008430010002340000013c210825000000239004108200251862000000013c21082500000023a0040004340000023c0000428c0000000009f840000100053400140200039c0200ffff0224050062168000033c0000000c212000026e010008000000003400028e640013ae25104300340002ae4010140021105500e0010334000043a4ffff4332a900622c0d0040108c0011a6401003002110430080100200211043000000033c0000638c80100200211043002c0044942e004594970000080000000057ff5226ffff42320000033c0000638c4011020021104300180044941a0045940000023c0000428c0000000009f840002130800240101300211053008010020021105300801002000000033c0000632421384300211820020700643000210400010085340f0084341800633040180300810066348f0063341a0002341a00e2a4d00122263100e3a02500e3a0800003340e00e2a4060002342400e5a00c00e5a03000e4a01800e4a01900e6a00d00e6a02600e3a43200e2a42c000296090100087c0003a60c00028e000000000f0041041000a6272138000002000486060005860000023c0000428c0000000009f84000f9ffa5241000a28f000000000500423002004010000000000c0000ae0000000c000000001000a6272138000002000486060005860000023c0000428c0000000009f840000700a5241000a28f000000000500423010004010000000000c00028e000000000c004018f0000234080000ae0c0000ae2800a4972c000396800002a2060002960100632421104400060002a6f30000082c0003a60000000c000000000000043c000084240000000c020005345e010008000000000000000c010004343000029600000000008042300d004014100003348000029200000000ffff4224800002a2ff00423058004014500003342c000296800003a2010042245e0100082c0002a68c00028600000000401002000000013c21082200000023a45e010008000000000000000c010004348000029200000000ff00442421108000800002a2ff0042303f004010000000006400038e0000000040100300211043008010020021104300801002000000033c00006324213843000200823003004010080002345e0100083200e2a4020002345e0100083200e2a40000113c000031260000228e0000000008004010000000000000043c0000848c0000023c0000428c09f8400000000000000020ae0000023c0000000009f840007c060434ffff4432a900822c0900401040100400212800002110440080100200211044000000033c0000638c530100088010020057ff5226ffff4432020005340000033c0000638c40110400211043000000033c0000638c0000518c09f8600000000000212020020000000c010005340000000c212000022c000296000000000200422c0c004014000000007c0002960000000005004010000000007c00029600000000ffff42247c0002a67c0005960000000c212000025800bf8f5400b58f5000b48f4c00b38f4800b28f4400b18f4000b08f6000bd270800e0030000000080000000d800000000030000e403000050040000c00400000000000000000000fe003fa00000000000000000000000000000000000000000000001000101000100000000000000000000000000000000410f000000676e75000107000000040100000000000000000000000000000000000000000000000000000000030001000000000000000000000000000300030000000000000000000000000003000400000000000000000000000000030005000000000000000000000000000300060000000000000000000000000003000700000000000000000000000000030008000100000000000000e00500001200010015000000e005000018000000120001002300000000000000000000001000000037000000000000000000000010000000470000000000000000000000100000004f00000000000000000000001000000061000000000000000000000010000000720000000000000000000000100000008700000000000000000000001000000097000000000000000000000010000000a2000000000000000000000010000000b8000000000000000000000010000000c6000000000000000000000010000000d6000000000000000000000010000000ec000000000000000000000010000000000100000000000000000000100000000a01000000000000000000001000000015010000000000000000000010000000200100000000000000000000100000002b0100000000000000000000100000003901000000000000000000001000000047010000000000000000000010000000520100000000000000000000100000005d010000000000000000000010000000720100000000000000000000100000008001000000000000000000001000000095010000000000000000000010000000a601000000000000000000001000000000456e7469747945717569704974656d44726f70006a74626c5f383031384435363000675f506c617961626c6543686172616374657200456e746974795072697a6544726f70005365745374657000675f496e697469616c697a65446174613000496e697469616c697a65456e7469747900675f6170695f436865636b436f6c6c6973696f6e00675f4974656d49636f6e536c6f747300445f383030334246394300675f6170695f416c6c6f635072696d6974697665730044657374726f79456e7469747900675f6170695f65717569704465667300675f6170695f675f4163636573736f72794465667300675f6170695f4c6f6164457175697049636f6e00675f5072696d427566004d6f7665456e746974790046616c6c456e7469747900445f38303138304645300066756e635f38303139353143300066756e635f383031393537393800445f383030393734313000445f383030393734313400675f6170695f467265655072696d69746976657300675f6170695f506c617953667800675f6170695f416464546f496e76656e746f727900426f74746f6d436f726e65725465787400426c696e6b4974656d006800000005090000700000000609000080000000050a000084000000060a000094000000050b000098000000060b0000a8000000040c0000b0000000040b0000b800000004010000c0000000050d0000c4000000060d0000c8000000040e0000d000000004010000e4000000050f0000e8000000060f00000c0100000510000010010000061000008001000005110000880100000611000094010000051100009c01000006110000a401000005120000a801000006120000cc01000004130000d4010000040100001c0200000514000020020000061400003402000004010000440200000515000048020000061500005c02000005160000600200000616000084020000051700008802000006170000f8020000040100001c030000050f000020030000060f0000480300000418000060030000050f000064030000060f0000bc03000004010000c403000004190000cc030000051a0000d0030000061a0000d4030000041b0000dc03000004010000e4030000041c000028040000040100003c040000051000004404000006100000480400000401000050040000041c000094040000051700009804000006170000ac04000004010000b804000004010000c0040000051d0000c4040000061d0000d8040000051e0000dc040000061e0000e0040000051f0000e4040000061f0000f404000005200000240500000514000028050000061400002c05000004010000400500000515000044050000061500005005000005210000540500000621000068050000042200007005000004130000b005000004230000e005000002010000e405000002010000e805000002010000ec05000002010000f005000002010000f405000002010000002e73796d746162002e737472746162002e7368737472746162002e72656c2e74657874002e64617461002e627373002e726567696e666f002e4d4950532e616269666c616773002e706472002e676e752e6174747269627574657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f0000000100000006000000000000004000000000060000000000000000000010000000000000001b000000090000004000000000000000700a00007802000009000000010000000400000008000000250000000100000003000000000000004006000000000000000000000000000010000000000000002b00000008000000030000000000000040060000000000000000000000000000100000000000000030000000060000700200000000000000400600001800000000000000000000000400000018000000390000002a0000700200000000000000580600001800000000000000000000000800000018000000480000000100000000000000000000007006000000000000000000000000000004000000000000004d000000f5ffff6f00000000000000007006000010000000000000000000000001000000000000000100000002000000000000000000000080060000400200000a00000008000000040000001000000009000000030000000000000000000000c0080000b00100000000000000000000010000000000000011000000030000000000000000000000e80c00005d00000000000000000000000100000000000000	8580d1cd4533d3203e546382e6b8a55c3f9f9a4dd272e6df802c47204f4b0770
\.


--
-- Data for Name: coreapp_course; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.coreapp_course (id, slug, name, description) FROM stdin;
\.


--
-- Data for Name: coreapp_coursechapter; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.coreapp_coursechapter (id, index, slug, name, description, course_id) FROM stdin;
\.


--
-- Data for Name: coreapp_coursescenario; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.coreapp_coursescenario (id, index, slug, name, content, chapter_id, scratch_id) FROM stdin;
\.


--
-- Data for Name: coreapp_githubuser; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.coreapp_githubuser (user_id, github_id, access_token) FROM stdin;
\.


--
-- Data for Name: coreapp_preset; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.coreapp_preset (id, name, creation_time, last_updated, platform, compiler, assembler_flags, compiler_flags, diff_flags, decompiler_flags, libraries, owner_id) FROM stdin;
\.


--
-- Data for Name: coreapp_profile; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.coreapp_profile (id, creation_date, last_request_date, user_id, pseudonym) FROM stdin;
42	2024-08-20 22:24:55.148688+00	2024-08-20 22:24:55.15807+00	\N	Playful Mongoose
43	2024-08-20 22:24:55.149412+00	2024-08-20 22:24:55.160607+00	\N	Dangerous Shrew
79	2024-08-20 23:04:17.095176+00	2024-08-20 23:04:17.124715+00	\N	Maternal Cheetah
78	2024-08-20 23:04:17.074262+00	2024-08-20 23:04:17.126857+00	\N	Large Sand Dollar
15	2024-08-20 22:15:17.253161+00	2024-08-20 22:15:17.257646+00	\N	Sassy Bee
16	2024-08-20 22:15:17.253493+00	2024-08-20 22:15:17.260535+00	\N	Dangerous Mallard
17	2024-08-20 22:15:17.312263+00	2024-08-20 22:15:17.317965+00	\N	Energetic Gaur
2	2024-08-14 22:55:42.895325+00	2024-08-14 22:55:42.902437+00	\N	Poisonous Opossum
18	2024-08-20 22:15:17.3148+00	2024-08-20 22:15:17.320183+00	\N	Ferocious Emu
19	2024-08-20 22:16:59.825296+00	2024-08-20 22:16:59.829737+00	\N	Strong Buffalo
20	2024-08-20 22:16:59.825932+00	2024-08-20 22:16:59.832762+00	\N	Domestic Red panda
21	2024-08-20 22:16:59.885565+00	2024-08-20 22:16:59.890233+00	\N	Tall Gnat
22	2024-08-20 22:16:59.886066+00	2024-08-20 22:16:59.892896+00	\N	Carnivorous Monkey
80	2024-08-20 23:04:17.17269+00	2024-08-20 23:04:17.182711+00	\N	Quick Rail
44	2024-08-20 22:27:00.300991+00	2024-08-20 22:27:00.308692+00	\N	Clever Manatee
45	2024-08-20 22:27:00.302221+00	2024-08-20 22:27:00.310636+00	\N	Poisonous Wolverine
46	2024-08-20 22:27:00.408911+00	2024-08-20 22:27:00.418135+00	\N	Soft Louse
31	2024-08-20 22:20:48.479743+00	2024-08-20 22:20:48.488681+00	\N	Tall Gnat
47	2024-08-20 22:27:00.421052+00	2024-08-20 22:27:00.429652+00	\N	Short Sardine
48	2024-08-20 22:27:00.641636+00	2024-08-20 22:27:00.650713+00	\N	Fuzzy Baboon
3	2024-08-15 22:21:35.125032+00	2024-08-15 22:21:35.162734+00	\N	Fierce Lyrebird
32	2024-08-20 22:21:15.686668+00	2024-08-20 22:21:15.69136+00	\N	Smelly Vulture
33	2024-08-20 22:21:15.6871+00	2024-08-20 22:21:15.694249+00	\N	Slow Barracuda
4	2024-08-15 22:34:24.030623+00	2024-08-15 22:34:24.37949+00	\N	Quick Crane
34	2024-08-20 22:21:15.741564+00	2024-08-20 22:21:15.746624+00	\N	Furry Toad
35	2024-08-20 22:21:15.744294+00	2024-08-20 22:21:15.748903+00	\N	Loud Leopard
49	2024-08-20 22:27:00.666111+00	2024-08-20 22:27:00.687619+00	\N	Submissive Flamingo
81	2024-08-20 23:04:17.185569+00	2024-08-20 23:04:17.196464+00	\N	Smelly Whale
10	2024-08-20 22:13:45.064052+00	2024-08-20 22:13:45.070625+00	\N	Curious Ibis
58	2024-08-20 22:37:17.663575+00	2024-08-20 22:37:17.66838+00	\N	Friendly Flamingo
27	2024-08-20 22:19:01.23781+00	2024-08-20 22:19:01.246658+00	\N	Candid Manatee
28	2024-08-20 22:19:01.238304+00	2024-08-20 22:19:01.24969+00	\N	Deadly Raven
11	2024-08-20 22:13:59.482091+00	2024-08-20 22:13:59.487475+00	\N	Hairy Elephant
12	2024-08-20 22:13:59.486277+00	2024-08-20 22:13:59.495196+00	\N	Ferocious Hamster
13	2024-08-20 22:13:59.540484+00	2024-08-20 22:13:59.544399+00	\N	Yellow Cheetah
14	2024-08-20 22:13:59.541863+00	2024-08-20 22:13:59.547396+00	\N	Smelly Pheasant
59	2024-08-20 22:37:17.664515+00	2024-08-20 22:37:17.674691+00	\N	Agile Porpoise
5	2024-08-20 21:54:46.906748+00	2024-08-20 21:54:46.918409+00	\N	Lazy Spider
23	2024-08-20 22:17:54.243475+00	2024-08-20 22:17:54.25733+00	\N	Stinky Gull
24	2024-08-20 22:17:54.244746+00	2024-08-20 22:17:54.259479+00	\N	Grey Wolf
25	2024-08-20 22:17:54.309363+00	2024-08-20 22:17:54.313689+00	\N	Loving Sand Dollar
26	2024-08-20 22:17:54.31077+00	2024-08-20 22:17:54.331538+00	\N	Tenacious Penguin
50	2024-08-20 22:34:32.775551+00	2024-08-20 22:34:32.780987+00	\N	Small Manatee
51	2024-08-20 22:34:32.776063+00	2024-08-20 22:34:32.797742+00	\N	Loud Coyote
6	2024-08-20 21:58:50.291523+00	2024-08-20 21:58:50.29607+00	\N	Territorial Eland
7	2024-08-20 21:58:50.292733+00	2024-08-20 21:58:50.299373+00	\N	Deadly Swan
8	2024-08-20 21:58:50.368043+00	2024-08-20 21:58:50.372336+00	\N	Strong Ibex
9	2024-08-20 21:58:50.369542+00	2024-08-20 21:58:50.374788+00	\N	Furry Newt
52	2024-08-20 22:34:32.859603+00	2024-08-20 22:34:32.864138+00	\N	Domestic Swallow
53	2024-08-20 22:34:32.860883+00	2024-08-20 22:34:32.866384+00	\N	Sassy Sardine
60	2024-08-20 22:37:17.725078+00	2024-08-20 22:37:17.729734+00	\N	Nosy Cat
61	2024-08-20 22:37:17.727319+00	2024-08-20 22:37:17.732223+00	\N	Spikey Ram
36	2024-08-20 22:21:30.45038+00	2024-08-20 22:21:30.454882+00	\N	Slimy Gaur
37	2024-08-20 22:21:30.451335+00	2024-08-20 22:21:30.457563+00	\N	Domestic Tapir
62	2024-08-20 22:52:17.241649+00	2024-08-20 22:52:17.276655+00	\N	Energetic Pigeon
54	2024-08-20 22:34:35.186887+00	2024-08-20 22:34:35.196553+00	\N	Poisonous Mandrill
38	2024-08-20 22:24:31.12749+00	2024-08-20 22:24:31.135905+00	\N	Heavy Mallard
39	2024-08-20 22:24:31.128007+00	2024-08-20 22:24:31.139046+00	\N	Vicious Albatross
40	2024-08-20 22:24:31.171526+00	2024-08-20 22:24:31.176046+00	\N	Sassy Chicken
41	2024-08-20 22:24:31.25156+00	2024-08-20 22:24:31.255836+00	\N	Grey Kangaroo
55	2024-08-20 22:34:35.210056+00	2024-08-20 22:34:35.214258+00	\N	Carnivorous Hyena
29	2024-08-20 22:19:33.668211+00	2024-08-20 22:19:33.672667+00	\N	Smart Giraffe
30	2024-08-20 22:19:33.66848+00	2024-08-20 22:19:33.674967+00	\N	Gizzard Mule
56	2024-08-20 22:34:35.253911+00	2024-08-20 22:34:35.258159+00	\N	Smart Stork
57	2024-08-20 22:34:35.258949+00	2024-08-20 22:34:35.26526+00	\N	Ferocious Hawk
63	2024-08-20 22:52:17.242588+00	2024-08-20 22:52:17.28831+00	\N	Candid Sheep
64	2024-08-20 22:52:17.244839+00	2024-08-20 22:52:17.284241+00	\N	Tiny Vulture
65	2024-08-20 22:52:17.248404+00	2024-08-20 22:52:17.292126+00	\N	Messy Turtle
66	2024-08-20 22:52:17.383279+00	2024-08-20 22:52:17.411587+00	\N	Jealous Emu
67	2024-08-20 22:52:17.394242+00	2024-08-20 22:52:17.423244+00	\N	Agile Lapwing
68	2024-08-20 22:52:17.414156+00	2024-08-20 22:52:17.425532+00	\N	Fierce Tapir
69	2024-08-20 22:52:17.465133+00	2024-08-20 22:52:17.474363+00	\N	Wild Cattle
70	2024-08-20 22:52:17.488252+00	2024-08-20 22:52:17.496868+00	\N	Sassy Mouse
71	2024-08-20 22:52:17.493194+00	2024-08-20 22:52:17.502765+00	\N	Fast Oryx
72	2024-08-20 22:52:17.569392+00	2024-08-20 22:52:17.577006+00	\N	Large Koala
73	2024-08-20 22:52:17.758077+00	2024-08-20 22:52:17.77392+00	\N	Agile Caribou
82	2024-08-20 23:04:17.200274+00	2024-08-20 23:04:17.210282+00	\N	Fierce Oyster
83	2024-08-20 23:04:17.208258+00	2024-08-20 23:04:17.22481+00	\N	Feisty Eel
84	2024-08-20 23:04:17.347819+00	2024-08-20 23:04:17.372459+00	\N	Poisonous Curlew
85	2024-08-20 23:04:17.475196+00	2024-08-20 23:04:17.489657+00	\N	Fierce Donkey
86	2024-08-20 23:04:17.67639+00	2024-08-20 23:04:17.681596+00	\N	Wild Pelican
97	2024-08-20 23:07:38.54206+00	2024-08-20 23:07:38.556793+00	\N	Clever Worm
87	2024-08-20 23:07:02.665571+00	2024-08-20 23:07:02.673893+00	\N	Sassy Dinosaur
74	2024-08-20 23:04:17.002804+00	2024-08-20 23:04:17.034651+00	\N	Clever Fox
77	2024-08-20 23:04:17.006034+00	2024-08-20 23:04:17.037232+00	\N	Feisty Mule
75	2024-08-20 23:04:17.004442+00	2024-08-20 23:04:17.039478+00	\N	Dangerous Stinkbug
76	2024-08-20 23:04:17.004628+00	2024-08-20 23:04:17.040925+00	\N	Deadly Monkey
88	2024-08-20 23:07:02.667866+00	2024-08-20 23:07:02.675856+00	\N	Grumpy Trout
93	2024-08-20 23:07:02.922613+00	2024-08-20 23:07:02.931225+00	\N	Short Dotterel
89	2024-08-20 23:07:02.810068+00	2024-08-20 23:07:02.815396+00	\N	Quick Rabbit
90	2024-08-20 23:07:02.813695+00	2024-08-20 23:07:02.819253+00	\N	Candid Wildcat
91	2024-08-20 23:07:02.81641+00	2024-08-20 23:07:02.827836+00	\N	Playful Ram
92	2024-08-20 23:07:02.831032+00	2024-08-20 23:07:02.836704+00	\N	Adorable Magpie
94	2024-08-20 23:07:02.929297+00	2024-08-20 23:07:02.934867+00	\N	Fierce Chinchilla
95	2024-08-20 23:07:02.933762+00	2024-08-20 23:07:02.941153+00	\N	Aggressive Hippopotamus
96	2024-08-20 23:07:02.964873+00	2024-08-20 23:07:02.98498+00	\N	Furry Moose
99	2024-08-20 23:07:38.544455+00	2024-08-20 23:07:38.562968+00	\N	Soft Louse
98	2024-08-20 23:07:38.543882+00	2024-08-20 23:07:38.563745+00	\N	Adorable Loris
100	2024-08-20 23:07:38.550365+00	2024-08-20 23:07:38.569912+00	\N	Cold-blooded Goose
101	2024-08-20 23:07:38.659949+00	2024-08-20 23:07:38.664407+00	\N	Playful Toad
102	2024-08-20 23:07:38.669866+00	2024-08-20 23:07:38.67693+00	\N	Ferocious Salmon
103	2024-08-20 23:07:38.708719+00	2024-08-20 23:07:38.712714+00	\N	Maternal Finch
104	2024-08-20 23:07:38.722718+00	2024-08-20 23:07:38.737044+00	\N	Adorable Wolverine
105	2024-08-20 23:07:38.740603+00	2024-08-20 23:07:38.748983+00	\N	Carnivorous Monkey
106	2024-08-20 23:07:38.75024+00	2024-08-20 23:07:38.771676+00	\N	Tame Kudu
107	2024-08-20 23:07:38.790292+00	2024-08-20 23:07:38.812763+00	\N	Deadly Cattle
108	2024-08-20 23:07:38.895431+00	2024-08-20 23:07:38.917594+00	\N	Ferocious Louse
109	2024-08-20 23:08:02.854108+00	2024-08-20 23:08:02.863734+00	\N	Loving Hippopotamus
110	2024-08-20 23:08:02.859749+00	2024-08-20 23:08:02.879412+00	\N	Lazy Falcon
112	2024-08-20 23:08:02.866878+00	2024-08-20 23:08:02.881465+00	\N	Furry Hamster
131	2024-08-20 23:12:18.895269+00	2024-08-20 23:12:18.91099+00	\N	Tiny Goose
113	2024-08-20 23:08:02.994798+00	2024-08-20 23:08:03.003456+00	\N	Cold-blooded Nightingale
132	2024-08-20 23:12:18.895006+00	2024-08-20 23:12:18.913481+00	\N	Playful Caterpillar
114	2024-08-20 23:08:03.002229+00	2024-08-20 23:08:03.043382+00	\N	Herbivorous Crab
133	2024-08-20 23:12:18.895542+00	2024-08-20 23:12:18.920233+00	\N	Grey Porpoise
115	2024-08-20 23:08:03.017779+00	2024-08-20 23:08:03.049671+00	\N	Scaly Beaver
134	2024-08-20 23:12:18.896668+00	2024-08-20 23:12:18.915219+00	\N	Lazy Guanaco
116	2024-08-20 23:08:03.036083+00	2024-08-20 23:08:03.055663+00	\N	Cuddly Giraffe
117	2024-08-20 23:08:03.04506+00	2024-08-20 23:08:03.061935+00	\N	Colorful Nightingale
118	2024-08-20 23:08:03.053441+00	2024-08-20 23:08:03.064846+00	\N	Grey Scorpion
119	2024-08-20 23:08:03.20329+00	2024-08-20 23:08:03.223309+00	\N	Poisonous Cobra
120	2024-08-20 23:08:03.226344+00	2024-08-20 23:08:03.244871+00	\N	Strong Bat
1	2024-08-14 22:54:28.579072+00	2024-08-20 23:37:12.38653+00	\N	Fluffy Pig
121	2024-08-20 23:11:28.676172+00	2024-08-20 23:11:28.680946+00	\N	Soft Raccoon
122	2024-08-20 23:11:28.677576+00	2024-08-20 23:11:28.692943+00	\N	Maternal Woodcock
123	2024-08-20 23:11:45.510414+00	2024-08-20 23:11:45.515052+00	\N	Bossy Opossum
124	2024-08-20 23:11:45.511663+00	2024-08-20 23:11:45.517414+00	\N	Playful Oryx
125	2024-08-20 23:12:18.574635+00	2024-08-20 23:12:18.58521+00	\N	Warm Hippopotamus
126	2024-08-20 23:12:18.574997+00	2024-08-20 23:12:18.58862+00	\N	Curious Weasel
127	2024-08-20 23:12:18.575892+00	2024-08-20 23:12:18.589507+00	\N	Grey Rat
128	2024-08-20 23:12:18.579173+00	2024-08-20 23:12:18.593423+00	\N	Herbivorous Chamois
129	2024-08-20 23:12:18.893084+00	2024-08-20 23:12:18.907992+00	\N	Carnivorous Kingfisher
130	2024-08-20 23:12:18.893765+00	2024-08-20 23:12:18.91459+00	\N	Deadly Woodpecker
111	2024-08-20 23:08:02.859194+00	2024-08-20 23:08:02.883059+00	\N	Carnivorous Chimpanzee
\.


--
-- Data for Name: coreapp_project; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.coreapp_project (slug, creation_time, description, icon) FROM stdin;
\.


--
-- Data for Name: coreapp_projectmember; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.coreapp_projectmember (id, project_id, user_id) FROM stdin;
\.


--
-- Data for Name: coreapp_scratch; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.coreapp_scratch (slug, creation_time, last_updated, compiler, compiler_flags, source_code, context, owner_id, parent_id, target_assembly_id, diff_label, platform, score, description, name, max_score, diff_flags, match_override, libraries, preset_id, claim_token) FROM stdin;
lYwme	2024-08-20 21:58:40.040378+00	2024-08-20 22:12:42.677553+00	gcc2.6.3-psx	-O2 -G0 -funsigned-char -gcoff -Wa,--expand-div --no-builtin	s16 _spu_pitch2note(u32, u8, u16, u16);\nextern union SpuUnion* _spu_RXX;\nextern s32 _spu_mem_mode_plus;\n\nvoid SpuGetVoiceAttr(SpuVoiceAttr* attr) {\n    s32 voice;\n    s32 i;\n    s32 voiceIndex;\n    volatile u16* raw;\n    s16 note;\n    s16 rightVolMode;\n    s16 leftVolMode;\n    u16 flags;\n    s32 s_mode;\n    s32 a_mode;\n    s32 r_mode;\n    u16 volumeLeft;\n    u16 volumeRight;\n    u16 centerNote;\n    volatile SPU_VOICE_REG* voiceReg;\n\n    s32 temp_s2;\n\n\n    u16 temp_a0;\n    u16 raw_7;\n    u32 raw_4;\n    u32 raw_5;\n\n    voiceIndex = -1;\n    for (i = 0; i < 24; i++) {\n        voice = 1 << i;\n        if ((voice & attr->voice)) {\n            voiceIndex = i;\n            break;\n        }\n    }\n\n    leftVolMode = 0;\n    rightVolMode = 0;\n\n    if (voiceIndex == -1) {\n        return;\n    }\n\n    voiceReg = &_spu_RXX->rxx.voice[voiceIndex];\n    volumeLeft = voiceReg->volume.left;\n    volumeRight = voiceReg->volume.right;\n    temp_s2 = voiceIndex * 2;\n    if (volumeLeft & 0x8000) {\n        flags = volumeLeft & 0xF000;\n        if (flags != 0xB000) {\n            if (flags <= 0xB000) {\n                if (flags != 0x9000) {\n                    if (flags <= 0x9000) {\n                        if (flags != 0x8000) {\n                            volumeLeft &= 0xFFF;\n                        } else {\n                            leftVolMode = 1;\n                            volumeLeft &= 0xFFF;\n                        }\n                    } else if (flags != 0xA000) {\n                            volumeLeft &= 0xFFF;\n                    } else {\n                        leftVolMode = 3;\n                    }\n                } else {\n                    leftVolMode = 2;\n                }\n            } else if (flags != 0xD000) {\n                if (flags <= 0xD000) {\n                    if (flags != 0xC000) {\n                    } else {\n                        leftVolMode = 5;\n                    }\n                } else if ((flags != 0xE000) && (flags != 0xF000)) {\n                } else {\n                    leftVolMode = 7;\n                }\n            } else {\n                leftVolMode = SPU_VOICE_PITCH | SPU_VOICE_VOLMODEL;\n                \n            }\n        } else {\n            leftVolMode = SPU_VOICE_PITCH;\n        }\n        volumeLeft &= 0xFFF;\n    }\n\n    rightVolMode = 0;\n    if (volumeRight & 0x8000) {\n        flags = volumeRight & 0xF000;\n        if (flags != 0xB000) {\n            if (flags <= 0xB000) {\n                if (flags != 0x9000) {\n                    if (flags <= 0x9000) {\n                        if (flags != 0x8000) {\n                            volumeRight &= 0xFFF;\n                        } else {\n                            rightVolMode = 1;\n                            volumeRight &= 0xFFF;\n                        }\n                    } else if (flags != 0xA000) {\n                        volumeRight &= 0xFFF;\n                    } else {\n                        rightVolMode = 3;\n                    }\n                } else {\n                    rightVolMode = 2;\n                }\n            } else if (flags != 0xD000) {\n                if (flags <= 0xD000) {\n                    if (flags != 0xC000) {\n                    } else {\n                        rightVolMode = 5;\n                    }\n                } else if ((flags != 0xE000) && (flags != 0xF000)) {\n                } else {\n                    rightVolMode = 7;\n                }\n            } else {\n                rightVolMode = SPU_VOICE_VOLMODEL | SPU_VOICE_VOLR;\n            }\n        } else {\n            rightVolMode = SPU_VOICE_VOLMODEL;\n        }\n        volumeRight &= 0xFFF;\n    }\n    raw_4 = volumeLeft & 0xFFFF;\n    if (raw_4 < 0x4000U) {\n        attr->volume.left = volumeLeft;\n    } else {\n        attr->volume.left = (u16) (raw_4 - 0x8000);\n    }\n    raw_5 = volumeRight & 0xFFFF;\n    if (raw_5 < 0x4000U) {\n        attr->volume.right = volumeRight;\n    } else {\n        attr->volume.right = (raw_5 - 0x8000);\n    }\n    attr->volmode.right = rightVolMode;\n    attr->volmode.left = leftVolMode;\n    raw = &_spu_RXX->raw[(temp_s2 * 2)];\n\n    // n.b.! well past the end of this array, possibly a different struct that's contiguous in the original\n    attr->volumex.left = raw[0x100];\n    attr->volumex.right = raw[0x101];\n\n    attr->pitch = _spu_RXX->raw[(voiceIndex * 4) + 2];\n    centerNote = _spu_voice_centerNote[voiceIndex];\n    note = _spu_pitch2note(centerNote >> 8,\n                           centerNote & 0xFF,\n                           attr->pitch,\n                           volumeRight);\n    if (note >= 0) {\n        attr->note = note;\n    } else {\n        attr->note = 0;\n    }\n    attr->sample_note = _spu_voice_centerNote[voiceIndex];\n    raw = &_spu_RXX->raw[temp_s2];\n    attr->envx = raw[6];\n    attr->addr = raw[3] << _spu_mem_mode_plus;\n    attr->loop_addr = raw[7] << _spu_mem_mode_plus;\n    temp_a0 = raw[4];\n    raw_7 = raw[5];\n    a_mode = 5;\n    if (!(temp_a0 & 0x80)) {\n        a_mode = 1;\n    }\n    attr->a_mode = a_mode;\n    s_mode = 7;\n    if (!(raw_7 & 0x300)) {\n        s_mode = 5;\n        if (!(raw_7 & 0x200)) {\n            s_mode = 3;\n            if (!(raw_7 & 0x100)) {\n                s_mode = 1;\n            }\n        }\n    }\n    attr->s_mode = s_mode;\n    r_mode = 7;\n    if (!(raw_7 & 0x20)) {\n        r_mode = 3;\n    }\n    attr->r_mode = r_mode;\n\n    attr->ar = temp_a0 >> 8;\n    attr->dr = (temp_a0 & 0xF0) >> 4;\n    attr->sr = (raw_7 >> 6) & 0xFCFF;\n    attr->rr = raw_7 & 0x1F;\n    attr->sl = temp_a0 & 0xF;\n    attr->adsr1 = temp_a0;\n    attr->adsr2 = raw_7;\n}\n	#define MU_DEATH_BALLAD 0x334\n#define NA_VO_DEATH_LAUGH 0x7A1\n#define PAL_DRA(x) (x)\n#define EvSpNEW 0x2000\n#define EvSpINT 0x0002\n#define PLAYER_STATUS_AXEARMOR 0x01000000\n#define CdlModeSpeedDouble 1\n#define CdlDataEnd 0x04\n#define PLAYER_STATUS_UNK1000 0x1000\n#define HwCARD_0 (DescHW | 0x12)\n#define HwCARD_1 (DescHW | 0x13)\n#define FWLOCK 0x0020\n#define SPU_VOICE_ADSR_DR (0x01 << 12)\n#define SAVE_FLAG_REPLAY (2)\n#define SE_INTRO_WIND_QUIET 0x32C\n#define MU_MOONLIGHT_NOCTURNE 0x340\n#define gte_stsxy(r0) \n#define KERNEL_H \n#define MU_SILENCE 0x33D\n#define RCntMdFR 0x0000\n#define SS_IMEDIATE 0\n#define PAL_TERMINATE() ((u_long*)-1)\n#define VERSION_US \n#define SFX_UNK_647 0x647\n#define PAD_LEFT 0x8000\n#define setlen(p,_len) (((P_TAG*)(p))->len = (u_char)(_len))\n#define MU_CRYSTAL_TEARDROPS_LOOP_POINT 0x30C\n#define EvSpACK 0x0010\n#define NA_VO_SU_NO_SCREAM 0x87B\n#define SS_TICK120 3\n#define MU_ABANDONED_PIT_LOOP_POINT 0x31A\n#define NA_SE_SU_CHARGE_PINKBALLS 0x6E2\n#define CdlForward 0x04\n#define SPAD(x) ((s32*)SP(x * sizeof(s32)))\n#define CD_SOUND_COMMAND_8 8\n#define FLAG_UNK_10000000 0x10000000\n#define NA_SE_EN_SPITTLEBONE_ACID_SPLAT 0x73C\n#define getaddr(p) (u_long)(((P_TAG*)(p))->addr)\n#define CdlGetTN 0x13\n#define MU_MARBLE_GALLERY 0x30D\n#define FIX(x) ((s32)((x) * 65536.0))\n#define HEART_VESSEL_INCREASE 5\n#define PLAYER_STATUS_UNK800000 0x800000\n#define JP_VO_YANAMI_JYOUJI_MESSAGE 0x34B\n#define OTSIZE 0x200\n#define EvStACTIVE 0x2000\n#define LIBAPI_H \n#define PRIMITIVE_H \n#define SFX_UNK_6B1 0x6B1\n#define SFX_UNK_6B2 0x6B2\n#define FLAG_UNK_400000 0x400000\n#define EvSpERROR 0x8000\n#define WEAPON_0_END (WEAPON_1_START - 1)\n#define NAMEOF(var) #var\n#define FLAG_UNK_800 0x800\n#define SPU_VOICE_ADSR_RR (0x01 << 14)\n#define JP_VO_SATOU_MASAHARU_MESSAGE 0x348\n#define blendMode drawMode\n#define SPU_VOICE_ADSR_AMODE (0x01 << 8)\n#define NA_SE_PL_TELEPORT 0x8BA\n#define RCntMdSC 0x0001\n#define SFX_UNK_6A0 0x6A0\n#define RCntMdSP 0x0000\n#define PLAYER_STATUS_UNK10 0x10\n#define COLOR_LEN ((COLOR_BPP) / 8)\n#define NA_SE_EN_BONE_SCIMITAR_SWORD_SLASH 0x66D\n#define MU_FINAL_TOCATTA 0x338\n#define SS_TICKMODE_MAX 6\n#define DRAW_UNK_100 0x100\n#define JP_VO_YOKOYAMA_CHISA_MESSAGE 0x34A\n#define CD_SOUND_COMMAND_14 14\n#define COMMON_H \n#define CD_SOUND_COMMAND_16 16\n#define PLAYER_STATUS_UNK40 0x40\n#define SPU_VOICE_SAMPLE_NOTE (0x01 << 6)\n#define CdlReadN 0x06\n#define MaxEntityCount 32\n#define PLAYER_STATUS_POISON 0x00004000\n#define CdlNop 0x01\n#define JP_VO_SH_GROAN 0x52E\n#define ALIGNED4 \n#define FLAG_UNK_4 0x4\n#define NA_VO_RI_IMPRESSIVE_ESCAPE 0x3DB\n#define JP_VO_YANADA_KIYOYUKI_MESSAGE 0x346\n#define HwCPU (DescHW | 0x10)\n#define MU_RAINBOW_CEMETERY_LOOP_POINT 0x308\n#define getcode(p) (u_char)(((P_TAG*)(p))->code)\n#define FIX_FRAC(x) (*(s16*)&(x))\n#define WARNF(...) _log(LOG_LEVEL_W, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define gte_ldv0(r0) \n#define gte_ldv3(r0,r1,r2) \n#define NA_SE_EV_WATER_SPLASH 0x7C2\n#define PAD_TRIANGLE 0x0010\n#define MU_THE_TRAGIC_PRINCE 0x311\n#define FONT_SPACE 4\n#define DISP_ALL_H 240\n#define EvSpPERROR 0x8001\n#define NA_SE_EN_GAIBON_FLAME 0x691\n#define EvMdNOINTR 0x2000\n#define MEMCPY memcpy\n#define gte_SetRotMatrix(r0) \n#define HwCNTL (DescHW | 0x08)\n#define OT_TYPE u_long\n#define DEMO_MAX_LEN 0x2000\n#define MU_CRYSTAL_TEARDROPS 0x30B\n#define MU_REQUIEM_FOR_THE_GODS_LOOP_POINT 0x306\n#define LIBGS_H \n#define DRAW_UNK_40 0x40\n#define MU_METAMORPHOSIS 0x327\n#define FLAG_UNK_08000000 0x08000000\n#define SFX_RICHTER_ATTACK_HIT 0x705\n#define getTPage(tp,abr,x,y) ((GetGraphType() == 1 || GetGraphType() == 2) ? ((((tp) & 0x3) << 9) | (((abr) & 0x3) << 7) | (((y) & 0x300) >> 3) | (((x) & 0x3ff) >> 6)) : ((((tp) & 0x3) << 7) | (((abr) & 0x3) << 5) | (((y) & 0x100) >> 4) | (((x) & 0x3ff) >> 6) | (((y) & 0x200) << 2)))\n#define __asm__(...) \n#define USE_MICRO_OPTIMIZATIONS 0\n#define LAYER_SEMI_TRANS 0x80\n#define JP_VO_SOSHITE 0x342\n#define PAL_UNK_OP3 3\n#define CdlSeekL 0x15\n#define CdlSeekP 0x16\n#define PAD_L1 0x0004\n#define PAD_L3 0x0200\n#define MU_DOOR_OF_HOLY_SPIRITS 0x315\n#define NA_SE_EN_SLOGRA_HURT 0x70C\n#define DISP_TITLE_H DISP_ALL_H\n#define LAYER_TPAGE_ALT 0x100\n#define setLineG4(p) setlen(p, 9), setcode(p, 0x5c), (p)->pad = 0x55555555\n#define JP_VO_KONAMI_5 0x350\n#define SET_SOUNDMODE_MONO 5\n#define MU_LOST_PAINTING 0x301\n#define setSprt8(p) setlen(p, 3), setcode(p, 0x74)\n#define TILE_SIZE 16\n#define STRINGIFY_(x) #x\n#define SFX_THUNDER 0x665\n#define MU_TOWER_OF_MIST 0x313\n#define NA_SE_EN_SLOGRA_SPEAR_PROJECTILE 0x690\n#define SS_SOFF 0\n#define NA_SE_EN_SLOGRA_BEAK_ATTACK 0x6C8\n#define FLT(x) ((s32)((x) * 4096.0))\n#define PAD_SELECT 0x0100\n#define EvSpUNKNOWN 0x0200\n#define PAD_R1 0x0008\n#define PAD_R2 0x0002\n#define GAMEBUTTONS (~(PAD_START | PAD_SELECT))\n#define SE_UNK_TE1_692 0x692\n#define SFX_UNK_668 0x668\n#define SS_REV 1\n#define NA_SE_VO_AXE_KNIGHT_SCREAM 0x767\n#define FLAG_UNK_04000000 0x04000000\n#define MENUCHAR(x) ((x) - 0x20)\n#define setXY0(p,_x0,_y0) (p)->x0 = (_x0), (p)->y0 = (_y0)\n#define setXY2(p,_x0,_y0,_x1,_y1) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1)\n#define setXY4(p,_x0,_y0,_x1,_y1,_x2,_y2,_x3,_y3) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2), (p)->x3 = (_x3), (p)->y3 = (_y3)\n#define ASM_RODATA __asm__(".section .rodata")\n#define EvSpCZ 0x0001\n#define SS_TICKVSYNC 5\n#define NA_VO_RI_DIE_MONSTER 0x358\n#define SPU_VOICE_ADSR_ADSR2 (0x01 << 18)\n#define gte_nclip() \n#define setPolyFT3(p) setlen(p, 7), setcode(p, 0x24)\n#define setPolyFT4(p) setlen(p, 9), setcode(p, 0x2c)\n#define FLAG_UNK_10000 0x10000\n#define LIBGTE_H \n#define MAX_SPRT_COUNT 0x200\n#define MU_WOOD_CARVING_PARTITA 0x309\n#define STAGE_WIDTH 256\n#define CdlModeSize0 0x10\n#define ELEMENT_STONE 0x200\n#define NUM_AVAIL_RELICS (NUM_RELICS - 2)\n#define SS_SEQ_TABSIZ 176\n#define DescEV 0xf1000000\n#define EvStUNUSED 0x0000\n#define NA_SE_EV_CLOCK_TICK 0x6A1\n#define setSprt16(p) setlen(p, 3), setcode(p, 0x7c)\n#define JP_VO_SH_SONO_TEIDO 0x530\n#define SE_UI_MAIN_MENU_SELECT 0x67D\n#define CdlModeAP 0x02\n#define SFX_UNK_641 0x641\n#define DescHW 0xf0000000\n#define MU_BLOOD_RELATIONS_LOOP_POINT 0x337\n#define SAVE_FLAG_CLEAR (1)\n#define NA_SE_EN_GAIBON_SMALL_FIREBALL 0x652\n#define DEBUGF(...) _log(LOG_LEVEL_D, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define CdlDataReady 0x01\n#define ANIMSET_OVL_FLAG 0x8000\n#define PAL_GLOW_ANIM 4\n#define NA_VO_AL_DEATH_DREAM_WORLD 0x391\n#define _ROMIO_H \n#define SE_SAVE_HEARTBEAT 0x64D\n#define FTRUNC 0x0400\n#define LEN(x) ((s32)(sizeof(x) / sizeof(*(x))))\n#define SPU_VOICE_ADSR_AR (0x01 << 11)\n#define CD_SOUND_COMMAND_10 10\n#define LIFE_VESSEL_INCREASE 5\n#define CdlStatSeekError 0x04\n#define CdlGetlocP 0x11\n#define NA_SE_EN_BLOOD_SKELETON_DISASSEMBLES 0x6CB\n#define PLAYER_STATUS_WOLF_FORM 0x00000004\n#define MU_DANCE_OF_PALES_LOOP_POINT 0x318\n#define PAL_UNK_OP3_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define RELIC_FLAG_FOUND 1\n#define EvSpCLOSE 0x0008\n#define CdlSetfilter 0x0d\n#define ELEMENT_CUT 0x40\n#define CdlGetlocL 0x10\n#define TcbStUNUSED 0x1000\n#define SFX_KARMA_COIN_HEADS 0x6B1\n#define GFX_ENTRY(x,y,w,h,data) (u_long*)((x) | ((y) << 16)), (u_long*)((w) | ((h) << 16)), (u_long*)data\n#define DescRC 0xf2000000\n#define FNBLOCK 0x0004\n#define setaddr(p,_addr) (((P_TAG*)(p))->addr = (u_long)(_addr))\n#define FLAG_DESTROY_IF_BARELY_OUT_OF_CAMERA 0x40000000\n#define SE_BOSS_DEFEATED 0x7D2\n#define DescTH DescMask\n#define setWH(p,_w,_h) (p)->w = _w, (p)->h = _h\n#define SPU_OFF 0\n#define LIBSPU_H \n#define FLAG_UNK_20000000 0x20000000\n#define PAL_COPY_INFO() MAKE_PAL_OP(PAL_COPY, 0)\n#define SFX_UNK_6E7 0x6E7\n#define PAD_CROSS 0x0040\n#define SCRIPT(...) {}\n#define gte_SetTransMatrix(r0) \n#define NA_VO_SU_GRUNT_1 0x870\n#define CdlModeRT 0x40\n#define CdlMAXDIR 128\n#define PLAYER_STATUS_UNK80000 0x80000\n#define JP_VO_SHIINA_HEKIRU_MESSAGE 0x345\n#define SET_UNK_12 0x12\n#define LOHU(x) (*(u16*)&(x))\n#define FLAG_UNK_1000 0x1000\n#define NA_SE_EN_ZOMBIE_EXPLODE 0x65E\n#define USE_CD_SPEED_DOUBLE 0\n#define NA_SE_EV_SWITCH_CLICK 0x676\n#define PAL_COPY 1\n#define SEEK_CUR 1\n#define OVL_EXPORT(x) ST0_ ##x\n#define NA_SE_VO_DR_HURT_1 0x853\n#define NA_SE_VO_DR_HURT_2 0x85B\n#define NA_SE_VO_DR_HURT_3 0x85C\n#define NA_SE_VO_DR_HURT_4 0x85D\n#define PLAYER_STATUS_UNK40000000 0x40000000\n#define addPrim(ot,p) setaddr(p, getaddr(ot)), setaddr(ot, p)\n#define PAD_R3 0x0400\n#define FALL_TERMINAL_VELOCITY 0x60000\n#define PLAYER_STATUS_UNK20000 0x20000\n#define __SPU_IRQCALLBACK_PROC \n#define MU_PROLOGUE 0x321\n#define ANIMSET_DRA(x) (x)\n#define SS_TICK240 2\n#define NA_SE_EN_SLOGRA_FLOOR_STOMP 0x64F\n#define setPolyF3(p) setlen(p, 4), setcode(p, 0x20)\n#define setPolyF4(p) setlen(p, 5), setcode(p, 0x28)\n#define FRCOM 0x2000\n#define MU_ENCHANTED_BANQUET 0x330\n#define DRAW_UNK02 0x02\n#define ELEMENT_FIRE 0x8000\n#define MAX_PRIM_COUNT 0x500\n#define setPolyG3(p) setlen(p, 6), setcode(p, 0x30)\n#define setPolyG4(p) setlen(p, 8), setcode(p, 0x38)\n#define FLAG_UNK_400 0x400\n#define SFX_UNK_689 0x689\n#define FLAG_UNK_10 0x10\n#define CdlModeDA 0x01\n#define DescMask 0xff000000\n#define NA_VO_SU_GRUNT_3 0x874\n#define LAYER_WRAP_BG 0x1000\n#define MU_BLOOD_RELATIONS 0x336\n#define NA_SE_VO_WO_BARK 0x706\n#define DISP_STAGE_H DISP_ALL_H\n#define DISP_STAGE_W 256\n#define SET_SOUNDMODE_STEREO 6\n#define STRINGIFY(x) STRINGIFY_(x)\n#define isendprim(p) ((((P_TAG*)(p))->addr) == 0xffffff)\n#define MU_TOWER_OF_MIST_LOOP_POINT 0x314\n#define MU_DANCE_OF_PALES 0x317\n#define MU_FESTIVAL_OF_SERVANTS 0x31D\n#define TOTAL_ENTITY_COUNT 256\n#define NA_VO_MA_IF_YOU_WEAR 0x3CE\n#define setUV3(p,_u0,_v0,_u1,_v1,_u2,_v2) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2)\n#define setUV4(p,_u0,_v0,_u1,_v1,_u2,_v2,_u3,_v3) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2), (p)->u3 = (_u3), (p)->v3 = (_v3)\n#define CdlNoIntr 0x00\n#define JP_VO_AKUMAJO 0x343\n#define CdlSetloc 0x02\n#define SE_INTRO_WIND_LOOP_POINT 0x32B\n#define PLAYER_STATUS_TRANSFORM (PLAYER_STATUS_BAT_FORM | PLAYER_STATUS_MIST_FORM | PLAYER_STATUS_WOLF_FORM)\n#define SE_WPN_PENTAGRAM 0x6E4\n#define LOWU(x) (*(u32*)&(x))\n#define NA_SE_EN_BLOOD_SKELETON_REASSEMBLES 0x6CC\n#define NA_SE_VO_DR_TAUNT_2 0x850\n#define DISP_MENU_W 384\n#define PLAYER_MARIA 2\n#define MU_I_AM_THE_WIND 0x33C\n#define CdlPause 0x09\n#define NA_VO_SU_LAUGH 0x86E\n#define SPRITESHEET_PTR 0x8013C020\n#define PLAYER_STATUS_CURSE 0x00008000\n#define DRAW_UNK_200 0x200\n#define FLAG_UNK_4000 0x4000\n#define SS_TICK50 4\n#define FLAG_UNK_02000000 0x02000000\n#define SFX_UNK_6FF 0x6FF\n#define SS_TICK60 1\n#define HwRTC0 (DescHW | 0x05)\n#define HwRTC1 (DescHW | 0x06)\n#define HwRTC2 (DescHW | 0x07)\n#define ANIMSET_OVL(x) ((x) | ANIMSET_OVL_FLAG)\n#define FRLOCK 0x0010\n#define NA_SE_VO_AL_PUNCH 0x6F1\n#define PLAYER_STATUS_UNK400000 0x400000\n#define NA_VO_RI_IMPRESSIVE_WHIP 0x3DA\n#define MAX_POLY_GT3_COUNT 0x30\n#define SS_REV_TYPE_DELAY 8\n#define F3DEX_GBI_2 1\n#define COLOR_BPP (16)\n#define CdlModeSF 0x08\n#define FLAG_UNK_20000 0x20000\n#define PAL_GLOW_DATA(data) (u_long*)(data)\n#define STAGE_ENTITY_START 64\n#define SS_REV_TYPE_STUDIO_A 2\n#define SS_REV_TYPE_STUDIO_C 4\n#define SS_WAIT_COMPLETED 1\n#define NA_SE_EN_COG_CLICK 0x642\n#define STRCPY(dst,src) __builtin_memcpy(dst, src, sizeof(src))\n#define PAL_COPY_DATA_(dst,data,len) (dst), (u_long*)(len), (u_long*)(data)\n#define ELEMENT_THUNDER 0x4000\n#define CdlPlay 0x03\n#define M2CTX 1\n#define DRAW_MENU 0x80\n#define TEST_BITS(x,y) ((x & y) == y)\n#define termPrim(p) setaddr(p, 0xffffffff)\n#define SFX_UNK_69D 0x69D\n#define SET_STOP_MUSIC 0xA\n#define FIX_TO_I(x) ((s32)((x) >> 16))\n#define MU_JP_FAIRY_SONG 0x33F\n#define NA_VO_SU_GRUNT_2 0x872\n#define SPU_REV_MODE (0x01 << 0)\n#define ELEMENT_DARK 0x800\n#define DRAW_COLORS 0x04\n#define PLAYER_RICHTER 1\n#define MAX_PRIM_ALLOC_COUNT 0x400\n#define NOT_IMPLEMENTED WARNF("not implemented")\n#define NA_SE_PL_MAX_HP_MP_INCREASED 0x687\n#define NA_VO_RI_ONLY_THE_COUNT 0x3DC\n#define O_NOBUF FNBUF\n#define WEAPON_0_START 0xE0\n#define DIAG_EOL 0xFF\n#define MAX_POLY_G4_COUNT 0x100\n#define MU_REQUIEM_FOR_THE_GODS 0x305\n#define SFX_UNK_8BB 0x8BB\n#define FLAG_DEAD 0x100\n#define PLAYER_STATUS_UNK2000 0x2000\n#define SPU_VOICE_ADSR_SL (0x01 << 15)\n#define NA_SE_VO_AXE_KNIGHT_THROW 0x766\n#define DISP_TITLE_W 512\n#define FLAG_UNK_800000 0x800000\n#define EvSpERANGE 0x0302\n#define SPU_VOICE_ADSR_SR (0x01 << 13)\n#define PAL_OVL_FLAG 0x8000\n#define setXY3(p,_x0,_y0,_x1,_y1,_x2,_y2) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2)\n#define HwDMAC (DescHW | 0x04)\n#define GAME_H \n#define NA_SE_SU_CREATE_CLONES 0x6D5\n#define SS_REV_TYPE_ECHO 7\n#define CdlMAXLEVEL 8\n#define NA_VO_SU_BLANK 0x86F\n#define CLAMP_MAX(v,max) ((v) > (max) ? (max) : (v))\n#define DISP_MENU_H DISP_ALL_H\n#define SPU_VOICE_ADSR_SMODE (0x01 << 9)\n#define LAYER_SHOW 1\n#define MU_RAINBOW_CEMETERY 0x307\n#define DRAW_TPAGE 0x10\n#define SIM_PTR 0x80280000\n#define setPolyGT3(p) setlen(p, 9), setcode(p, 0x34)\n#define setPolyGT4(p) setlen(p, 12), setcode(p, 0x3c)\n#define INCLUDE_ASM_H \n#define EvSpEDOM 0x0301\n#define NA_SE_SU_FLAPPING_WINGS 0x6C6\n#define PLAYER_ALUCARD 0\n#define JP_VO_KONAMI_1 0x34C\n#define JP_VO_KONAMI_2 0x34D\n#define RCntCNT1 (DescRC | 0x01)\n#define RCntCNT2 (DescRC | 0x02)\n#define RCntCNT3 (DescRC | 0x03)\n#define JP_VO_KONAMI_8 0x353\n#define JP_VO_KONAMI_9 0x354\n#define ERRORF(...) _log(LOG_LEVEL_E, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define JP_VO_KONAMI_12 0x357\n#define MU_DOOR_OF_HOLY_SPIRITS_LOOP_POINT 0x316\n#define SIZEOF_MENUCONTEXT (0x1E)\n#define JP_VO_KONAMI_3 0x34E\n#define HwGPU (DescHW | 0x02)\n#define SPU_VOICE_VOLL (0x01 << 0)\n#define SS_SON 1\n#define SPU_VOICE_VOLR (0x01 << 1)\n#define MU_LAND_OF_BENEDICTION 0x33E\n#define MAX_GOLD 999999\n#define INFOF(...) _log(LOG_LEVEL_I, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define OFF(type,field) ((size_t)(&((type*)0)->field))\n#define CdlBackward 0x05\n#define MU_WANDERING_GHOSTS 0x323\n#define SS_REV_TYPE_HALL 5\n#define NA_SE_EN_SLOGRA_HISSING 0x709\n#define STAGE STAGE_ST0\n#define NA_SE_PL_BT_FIREBALL 0x680\n#define SFX_UNK_661 0x661\n#define O_RDWR FREAD | FWRITE\n#define setTile(p) setlen(p, 3), setcode(p, 0x60)\n#define NA_SE_EN_SLOGRA_DEATH_EXPLOSION 0x697\n#define NA_SE_EV_WINDOW_LATCH 0x79D\n#define FLAG_HAS_PRIMS 0x00800000\n#define CdlAcknowledge 0x03\n#define SwMATH (DescSW | 0x02)\n#define NA_SE_PL_RIC_UNK_6E2 0x6E2\n#define SOUND_BAT_SCREECH 0x64E\n#define gte_SetGeomScreen(r0) \n#define DRAW_DEFAULT 0x00\n#define PLAYER_STATUS_ABSORB_BLOOD 0x02000000\n#define NA_SE_SY_MOVE_MENU_CURSOR 0x67B\n#define SE_UI_OVERWRITE_SELECT 0x6A4\n#define NA_VO_SU_SUCK_YOU_DRY 0x876\n#define gte_stszotz(r0) \n#define setShadeTex(p,tge) ((tge) ? setcode(p, getcode(p) | 0x01) : setcode(p, getcode(p) & ~0x01))\n#define CD_SOUND_COMMAND_12 12\n#define PAL_COPY_DATA(dst,data) (dst), (u_long*)LEN(data), (u_long*)(data)\n#define SE_DRE_FADE_TO_WHITE 0x65A\n#define NA_SE_EN_BLOODY_ZOMBIE_INJURED_SCREAM 0x746\n#define NA_SE_VO_DR_GRANT_ME_POWER 0x857\n#define RCntMdINTR 0x1000\n#define MU_LOST_PAINTING_LOOP_POINT 0x302\n#define FALL_GRAVITY 0x4000\n#define MU_PRAYER_LOOP_POINT 0x333\n#define NA_SE_CS_BURNING_PHOTOGRAPH 0x8BE\n#define PAD_SQUARE 0x0080\n#define RIC_PRG_PTR 0x8013C000\n#define MU_CURSE_ZONE 0x303\n#define SE_UI_SELECT 0x67B\n#define getlen(p) (u_char)(((P_TAG*)(p))->len)\n#define GET_PAL_OP_FREQ(x) (HIH(x))\n#define PAD_UP 0x1000\n#define MU_CURSE_ZONE_LOOP_POINT 0x304\n#define SS_REV_TYPE_SPACE 6\n#define FLAG_DRAW_ROTX 0x01\n#define FLAG_DRAW_ROTY 0x02\n#define FLAG_DRAW_ROTZ 0x04\n#define EvSpDE 0x0080\n#define LIBGPU_H \n#define O_RDONLY FREAD\n#define PAL_BULK_COPY 5\n#define SS_REV_TYPE_PIPE 9\n#define PAD_L2 0x0001\n#define PLAYER_STATUS_UNK80000000 0x80000000\n#define REBOUND_STONE_BOUNCE 0x6A4\n#define ELEMENT_HIT 0x20\n#define nextPrim(p) (void*)((u_long)(((P_TAG*)(p))->addr) | 0x80000000)\n#define FWRITE 0x0002\n#define SS_REV_TYPE_OFF 0\n#define PLAYER_STATUS_UNK40000 0x40000\n#define PLAYER_STATUS_STONE 0x00000080\n#define setUV0(p,_u0,_v0) (p)->u0 = (_u0), (p)->v0 = (_v0)\n#define NA_SE_EN_SLOGRA_SPEAR_SLASH 0x6C6\n#define HIH(x) (((s16*)&(x))[1])\n#define NA_VO_SU_HURT_1 0x879\n#define SS_NOTICK0 0\n#define MU_DANCE_OF_ILLUSIONS_LOOP_POINT 0x320\n#define MU_HEAVENLY_DOORWAY 0x31B\n#define CdlStatStandby 0x02\n#define MU_DANCE_OF_GOLD_LOOP_POINT 0x32F\n#define SE_UI_OVERWRITE_MSG 0x6AD\n#define MAX_TILE_COUNT 0x100\n#define MU_THE_TRAGIC_PRINCE_LOOP_POINT 0x312\n#define setSprt(p) setlen(p, 4), setcode(p, 0x64)\n#define DRAW_UNK_800 0x800\n#define setLineF2(p) setlen(p, 3), setcode(p, 0x40)\n#define setLineF3(p) setlen(p, 5), setcode(p, 0x48), (p)->pad = 0x55555555\n#define setLineF4(p) setlen(p, 6), setcode(p, 0x4c), (p)->pad = 0x55555555\n#define BUTTON_COUNT 8\n#define EvSpTRAP 0x1000\n#define setLineG2(p) setlen(p, 4), setcode(p, 0x50)\n#define setLineG3(p) setlen(p, 7), setcode(p, 0x58), (p)->pad = 0x55555555\n#define NA_SE_EN_GAIBON_SCREAM 0x70B\n#define SFX_KARMA_COIN 0x682\n#define NA_SE_VO_AL_WHAT 0x6F2\n#define DRAW_UNK_1000 0x1000\n#define SEEK_SET 0\n#define SS_SERIAL_A 0\n#define SS_SERIAL_B 1\n#define FLAG_DESTROY_IF_OUT_OF_CAMERA 0x80000000\n#define gte_rtps() \n#define gte_rtpt() \n#define N_VERTI_TILES 16\n#define NA_SE_EN_GAIBON_FLAME_OUT 0x65E\n#define FSCAN 0x1000\n#define gte_stsxy2(r0) \n#define gte_stsxy3(r0,r1,r2) \n#define CdlDiskError 0x05\n#define PLAYER_STATUS_UNK10000 0x10000\n#define TILE_MASK 0x0F\n#define setTile16(p) setlen(p, 2), setcode(p, 0x78)\n#define NA_SE_EN_AXE_KNIGHT_BREAK_AXE 0x66B\n#define EvSpTIMOUT 0x0100\n#define NA_SE_VO_DR_HERE_IS_TRUE_POWER 0x855\n#define O_CREAT FCREAT\n#define SPELL_FLAG_KNOWN 0x80\n#define FLAG_UNK_00200000 0x00200000\n#define NA_SE_EN_GAIBON_COLLAPSE 0x672\n#define PAL_BULK(dst,data) (u_long*)(dst), (u_long*)LEN(data), (u_long*)(data)\n#define FNBUF 0x4000\n#define MU_THE_DOOR_TO_THE_ABYSS 0x325\n#define NA_SE_BREAK_GLASS 0x68B\n#define NULL (0)\n#define LAYER_TPAGE_ID (0x20 | 0x40)\n#define CD_SOUND_COMMAND_FADE_OUT_1 3\n#define CD_SOUND_COMMAND_FADE_OUT_2 2\n#define MU_THE_DOOR_TO_THE_ABYSS_LOOP_POINT 0x326\n#define CdlSetmode 0x0e\n#define NA_VO_SU_DELICIOUS 0x8D1\n#define setUVWH(p,_u0,_v0,_w,_h) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u0) + (_w), (p)->v1 = (_v0), (p)->u2 = (_u0), (p)->v2 = (_v0) + (_h), (p)->u3 = (_u0) + (_w), (p)->v3 = (_v0) + (_h)\n#define SE_UI_ERROR 0x686\n#define CdlStatRead 0x20\n#define MAKE_PAL_OP(kind,freq) ((kind) | ((freq) << 0x10))\n#define CASTLE_MAP_PTR 0x801E0000\n#define NA_SE_EN_GAIBON_BIG_FIREBALL 0x655\n#define ELEMENT_HOLY 0x1000\n#define __attribute__(...) \n#define EvSpIOE 0x0004\n#define CD_SOUND_COMMAND_6 6\n#define NA_VO_MAR_AIM_HEAD 0x87F\n#define CdlStop 0x08\n#define SPU_VOICE_NOTE (0x01 << 5)\n#define SE_INTRO_WIND_QUIET_LOOP_POINT 0x32D\n#define SE_UI_DEBUG_SELECT 0x688\n#define DRAW_HIDE 0x08\n#define SE_HEALTH_REGAINED 0x68E\n#define TcbStACTIVE 0x4000\n#define CdlStandby 0x07\n#define SPU_VOICE_ADSR_RMODE (0x01 << 10)\n#define MU_PRAYER 0x332\n#define NA_SE_PL_MP_GAUGE 0x67D\n#define CdlMAXFILE 64\n#define PAL_GLOW_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define JP_VO_FUKAMI_RIKA_MESSAGE 0x344\n#define FLAG_UNK_80000 0x80000\n#define NA_VO_RI_TRIBUTE 0x35A\n#define SFX_UNK_6EA 0x6EA\n#define MU_FINAL_TOCATTA_LOOP_POINT 0x339\n#define MAX_BG_LAYER_COUNT 16\n#define MU_METAMORPHOSIS_II 0x328\n#define PAL_OVL(x) ((x) | ANIMSET_OVL_FLAG)\n#define PLAYER_STATUS_MIST_FORM 0x00000002\n#define SPU_VOICE_VOLMODEL (0x01 << 2)\n#define SPU_VOICE_VOLMODER (0x01 << 3)\n#define NA_SE_EN_SLOGRA_HURT_2 0x70A\n#define PLAYER_STATUS_BAT_FORM 0x00000001\n#define WEAPON1_PTR 0x8017D000\n#define SE_WPN_POWER_OF_SIRE 0x66A\n#define CdlStatSeek 0x40\n#define MU_ABANDONED_PIT 0x319\n#define CdlModeStream2 0x120\n#define SE_WPN_ALUCARD_SWORD_SWING 0x6A8\n#define NA_SE_EN_GAIBON_FLAP_WINGS 0x68D\n#define ELEMENT_WATER 0x400\n#define SS_REV_TYPE_ROOM 1\n#define SE_DEATH_TAKES_ITEMS 0x7A0\n#define SPU_VOICE_ADSR_ADSR1 (0x01 << 17)\n#define FLAG_UNK_01000000 0x01000000\n#define LOH(x) (*(s16*)&(x))\n#define HwCdRom (DescHW | 0x03)\n#define PLAYER_STATUS_UNK4000000 0x04000000\n#define NA_SE_EN_BLOODY_ZOMBIE_INJURED 0x748\n#define DRA_PRG_PTR 0x800A0000\n#define RELIC_FLAG_ACTIVE 2\n#define MAX_LINE_G2_COUNT 0x100\n#define SE_UNK_TE3_667 0x667\n#define MAX_ENV_COUNT 0x10\n#define NA_SE_VO_DR_PLAYTIME_IS_OVER 0x858\n#define O_NBLOCK FNBLOCK\n#define SE_UNK_TE3_679 0x679\n#define MAX_DRAW_MODES 0x400\n#define SET_STOP_SEQ 7\n#define PAD_RIGHT 0x2000\n#define MEMCARD_ID "BASLUS-00067DRAX00"\n#define N_HORIZ_TILES 17\n#define RCntMdNOINTR 0x2000\n#define HwVBLANK (DescHW | 0x01)\n#define STAGE_INVERTEDCASTLE_MASK 0x1F\n#define CdlModeStream 0x100\n#define HwSIO (DescHW | 0x0b)\n#define MU_DANCE_OF_ILLUSIONS 0x31F\n#define PLAYER_STATUS_UNK400 0x400\n#define MU_DRACULAS_CASTLE_LOOP_POINT 0x310\n#define gte_stopz(r0) \n#define NA_SE_SU_PETAL_ATTACK 0x6B0\n#define SE_TREE_BRANCH_SNAP 0x7A4\n#define CdlModeRept 0x04\n#define NA_SE_EN_SKELETON_THROW_BONE 0x6C8\n#define HwPIO (DescHW | 0x0a)\n#define SPU_REV_FEEDBACK (0x01 << 4)\n#define PAL_UNK_OP2_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define EvStWAIT 0x1000\n#define EvSpCOMP 0x0020\n#define FLAG_UNK_100000 0x100000\n#define O_NOWAIT FASYNC\n#define MU_DEATH_BALLAD_LOOP_POINT 0x335\n#define SE_UNK_TE3_6B8 0x6B8\n#define WEAPON0_PTR 0x8017A000\n#define NA_SE_EN_EXPLOSIVE_DEATH 0x693\n#define JP_VO_KONAMI_10 0x355\n#define JP_VO_KONAMI_11 0x356\n#define FLAG_UNK_200 0x200\n#define HwSPU (DescHW | 0x09)\n#define TYPES_H \n#define FCREAT 0x0200\n#define setSemiTrans(p,abe) ((abe) ? setcode(p, getcode(p) | 0x02) : setcode(p, getcode(p) & ~0x02))\n#define SS_IMMEDIATE 0\n#define DescUEV 0xf3000000\n#define CdlGetparam 0x0f\n#define DEMO_KEY_LEN 3\n#define SFX_UNK_6F0 0x6F0\n#define FLAG_UNK_8000 0x8000\n#define FONT_H 8\n#define FONT_W 8\n#define NA_SE_EN_BLOODY_ZOMBIE_HEMORRHAGE 0x749\n#define LIBETC_H \n#define BIBLE_SUBWPN_SWOOSH 0x8C3\n#define FONT_GAP FONT_W\n#define MU_BLACK_BANQUET 0x33A\n#define TcbMdPRI 0x2000\n#define setClut(p,x,y) ((p)->clut = getClut(x, y))\n#define SE_UNK_TE2_6B4 0x6B4\n#define PALETTE_LEN ((COLORS_PER_PAL) * ((COLOR_BPP) / 8))\n#define MU_ENCHANTED_BANQUET_LOOP_POINT 0x331\n#define NA_VO_DR_IT_WAS_NOT 0x359\n#define FREAD 0x0001\n#define EvStALREADY 0x4000\n#define setRGB0(p,_r0,_g0,_b0) (p)->r0 = _r0, (p)->g0 = _g0, (p)->b0 = _b0\n#define setRGB1(p,_r1,_g1,_b1) (p)->r1 = _r1, (p)->g1 = _g1, (p)->b1 = _b1\n#define setRGB2(p,_r2,_g2,_b2) (p)->r2 = _r2, (p)->g2 = _g2, (p)->b2 = _b2\n#define MU_BLACK_BANQUET_LOOP_POINT 0x33B\n#define SEEK_END 2\n#define RCntCNT0 (DescRC | 0x00)\n#define ELEMENT_CURSE 0x100\n#define CdlMute 0x0b\n#define JP_VO_KONAMI_4 0x34F\n#define DRAW_TPAGE2 0x20\n#define JP_VO_KONAMI_6 0x351\n#define catPrim(p0,p1) setaddr(p0, p1)\n#define JP_VO_KONAMI_7 0x352\n#define NA_SE_VO_AL_SOUL_STEAL 0x6F4\n#define SS_MIX 0\n#define CdlModeSize1 0x20\n#define FLAG_DRAW_UNK100 0x100\n#define PLAYER_STATUS_UNK200 0x200\n#define NA_VO_SU_HURT_2 0x87A\n#define SFX_UNK_64B 0x64B\n#define SFX_UNK_64C 0x64C\n#define CdlStatError 0x01\n#define SE_ITEM_YOINK 0x7A2\n#define ALUCARD_DARK_METAMORPHOSIS 0x705\n#define STAGE_PRG_PTR 0x80180000\n#define COLORS_PER_PAL (16)\n#define SFX_UNK_664 0x664\n#define setRGB3(p,_r3,_g3,_b3) (p)->r3 = _r3, (p)->g3 = _g3, (p)->b3 = _b3\n#define SFX_UNK_669 0x669\n#define PAD_COUNT 2\n#define O_WRONLY FWRITE\n#define STAGE_INVERTEDCASTLE_FLAG 0x20\n#define PLAYER g_Entities[PLAYER_CHARACTER]\n#define MU_DRACULAS_CASTLE 0x30F\n#define SFX_UNK_683 0x683\n#define SE_UNK_TE2_6B6 0x6B6\n#define HEART_VESSEL_RICHTER 30\n#define FACTORY(A0,BLUEPRINTNUM) (A0 << 8 | BLUEPRINTNUM)\n#define NA_SE_VO_AL_DYING 0x6F6\n#define SFX_UNK_69A 0x69A\n#define PLAYER_STATUS_UNK800 0x800\n#define CdlStatShellOpen 0x10\n#define DRAW_TRANSP 0x01\n#define SPU_REV_DELAYTIME (0x01 << 3)\n#define addPrims(ot,p0,p1) setaddr(p1, getaddr(ot)), setaddr(ot, p0)\n#define ELEMENT_POISON 0x80\n#define CdlStatPlay 0x80\n#define SPU_ON 1\n#define SS_NOTICK 0x1000\n#define SE_UNK_TE1_651 0x651\n#define FLAG_UNK_2000 0x2000\n#define SPU_VOICE_WDSA (0x01 << 7)\n#define PAL_UNK_OP2_DATA(data) (u_long*)(data)\n#define EvSpSYSCALL 0x4000\n#define FAMILIAR_PTR 0x80170000\n#define LAYER_CLUT_ALT 0x200\n#define SP(x) (0x1F800000 + (x))\n#define SQ(x) ((x) * (x))\n#define SE_UNK_TE1_66F 0x66F\n#define FLAG_DRAW_UNK10 0x10\n#define STAGE_H \n#define MAX_POLY_GT4_COUNT 0x300\n#define HwCARD (DescHW | 0x11)\n#define MU_FESTIVAL_OF_SERVANTS_LOOP_POINT 0x31E\n#define FLAG_DRAW_UNK20 0x20\n#define CdlModeSpeedNormal 0\n#define RCntMdGATE 0x0010\n#define SAVE_FLAG_NORMAL (0)\n#define SFX_UNK_6A3 0x6A3\n#define SFX_UNK_6AD 0x6AD\n#define setTile1(p) setlen(p, 2), setcode(p, 0x68)\n#define setTile8(p) setlen(p, 2), setcode(p, 0x70)\n#define FLAG_DRAW_UNK40 0x40\n#define SFX_UNK_6B0 0x6B0\n#define CdlDemute 0x0c\n#define JP_VO_KATSUTE 0x341\n#define setBlockFill(p) setlen(p, 3), setcode(p, 0x02)\n#define EvSpIOER 0x0400\n#define SFX_UNK_6DF 0x6DF\n#define FLAG_DRAW_UNK8 0x08\n#define SFX_UNK_6E0 0x6E0\n#define NA_SE_VO_AL_DARK_METAMORPHOSIS 0x6F3\n#define SFX_UNK_6E8 0x6E8\n#define SFX_UNK_6E9 0x6E9\n#define SFX_UNK_6EB 0x6EB\n#define SFX_UNK_6EC 0x6EC\n#define SFX_UNK_6ED 0x6ED\n#define SFX_UNK_6EE 0x6EE\n#define SFX_UNK_6EF 0x6EF\n#define EvSpIOEW 0x0800\n#define PAD_CIRCLE 0x0020\n#define FLAG_DRAW_UNK80 0x80\n#define SFX_UNK_6F7 0x6F7\n#define DIAG_EOS 0x00\n#define PLAYER_STATUS_UNK_20 0x00000020\n#define SFX_H \n#define CLAMP_MIN(v,min) ((v) < (min) ? (min) : (v))\n#define LIBSND_H \n#define PAL_UNK_OP2 2\n#define O_TAG u_long tag\n#define GET_PAL_OP_KIND(x) (LOH(x))\n#define MU_PROLOGUE_LOOP_POINT 0x322\n#define _LANGUAGE_C 1\n#define DRAW_UNK_400 0x400\n#define _S(x) (x)\n#define SE_UNK_TE1_6B3 0x6B3\n#define FAPPEND 0x0100\n#define WEAPON_1_START 0xF0\n#define DescSW 0xf4000000\n#define RENDERFLAGS_NOSHADOW 2\n#define SIM_CHR0 0x80280000\n#define SIM_CHR1 0x80284000\n#define CdlGetTD 0x14\n#define NA_SE_VO_DR_TAUNT_1 0x84F\n#define CdlReadS 0x1B\n#define MAX(a,b) ((a) > (b) ? (b) : (a))\n#define setcode(p,_code) (((P_TAG*)(p))->code = (u_char)(_code))\n#define getClut(x,y) ((y << 6) | ((x >> 4) & 0x3f))\n#define PAL_BULK_COPY_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define MU_MARBLE_GALLERY_LOOP_POINT 0x30E\n#define NA_SE_EN_BLOODY_ZOMBIE_DEATH_SCREAM 0x747\n#define SE_INTRO_WIND 0x32A\n#define SwCARD (DescSW | 0x01)\n#define DRAW_ABSPOS 0x2000\n#define FASYNC 0x8000\n#define JP_VO_OKIAYU_RYOUTAROU_MESSAGE 0x347\n#define SPU_VOICE_PITCH (0x01 << 4)\n#define DEMO_KEY_PTR 0x801E8000\n#define setTPage(p,tp,abr,x,y) ((p)->tpage = getTPage(tp, abr, x, y))\n#define _MIPS_SZLONG 32\n#define CdlComplete 0x02\n#define CdlModeSpeed 0x80\n#define SE_CASTLE_GATE_RISE 0x7A5\n#define CD_SOUND_COMMAND_START_XA 4\n#define SPU_REV_DEPTHL (0x01 << 1)\n#define SPU_REV_DEPTHR (0x01 << 2)\n#define EvMdINTR 0x1000\n#define VERSION "us"\n#define EvSpDR 0x0040\n#define PAL_UNK_OP3_DATA(data) (u_long*)(data)\n#define MIN(a,b) ((a) > (b) ? (b) : (a))\n#define MAXSPRT16 0x280\n#define RELIC_FLAG_DISABLE 0\n#define NA_SE_EN_DR_FIREBALL 0x660\n#define INCLUDE_ASM(FOLDER,NAME) __asm__(".pushsection .text\\n" "\\t.align\\t2\\n" "\\t.globl\\t" #NAME "\\n" "\\t.ent\\t" #NAME "\\n" #NAME ":\\n" ".include \\"asm/" VERSION "/" FOLDER "/" #NAME ".s\\"\\n" "\\t.set reorder\\n" "\\t.set at\\n" "\\t.end\\t" #NAME "\\n" ".popsection");\n#define SET_UNK_0B 0xB\n#define SET_UNK_0E 0xE\n#define SET_UNK_0F 0xF\n#define ELEMENT_ICE 0x2000\n#define JP_VO_SH_SCREAM 0x52F\n#define SET_UNK_10 0x10\n#define SET_UNK_11 0x11\n#define SPU_VOICE_LSAX (0x01 << 16)\n#define LOG_H \n#define COLOR16(r,g,b,a) (r) + ((g) << 5) + ((b) << 10) + ((a) << 15)\n#define setXYWH(p,_x0,_y0,_w,_h) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x0) + (_w), (p)->y1 = (_y0), (p)->x2 = (_x0), (p)->y2 = (_y0) + (_h), (p)->x3 = (_x0) + (_w), (p)->y3 = (_y0) + (_h)\n#define MU_DANCE_OF_GOLD 0x32E\n#define MU_WANDERING_GHOSTS_LOOP_POINT 0x324\n#define FLAG_UNK_40000 0x40000\n#define FLAG_DRAW_DEFAULT 0x00\n#define JP_VO_WAKAMOTO_NORIO_MESSAGE 0x349\n#define PAD_DOWN 0x4000\n#define TcbMdRT 0x1000\n#define GFX_TERMINATE() ((u_long*)-1)\n#define NA_VO_SU_CRYSTAL_1 0x87C\n#define NA_VO_SU_CRYSTAL_2 0x6AF\n#define SS_REV_TYPE_STUDIO_B 3\n#define PAD_START 0x0800\n#define LOW(x) (*(s32*)&(x))\ntypedef char int8_t;\ntypedef short int16_t;\ntypedef int int32_t;\ntypedef long long int64_t;\ntypedef unsigned char uint8_t;\ntypedef unsigned short uint16_t;\ntypedef unsigned int uint32_t;\ntypedef unsigned long long uint64_t;\ntypedef unsigned char u_char;\ntypedef unsigned short u_short;\ntypedef unsigned long u_long;\ntypedef unsigned int size_t;\ntypedef signed char s8;\ntypedef signed short s16;\ntypedef signed int s32;\ntypedef signed long long s64;\ntypedef unsigned char u8;\ntypedef unsigned short u16;\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\ntypedef signed char byte;\ntypedef enum { false, true } bool;\ntypedef union {\n    s32 val;\n    struct {\n        s16 lo;\n        s16 hi;\n    } i;\n} f32;\ntypedef struct {\n              s16 x;\n              s16 y;\n} Point16;\ntypedef struct {\n    u8 u;\n    u8 v;\n} uvPair;\ntypedef struct {\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 pad;\n} rgb_set;\nint sprintf(char* dst, const char* fmt, ...);\ntypedef enum {\n    LOG_LEVEL_D,\n    LOG_LEVEL_I,\n    LOG_LEVEL_W,\n    LOG_LEVEL_E,\n} LOG_LEVEL;\nvoid SetMinLogLevel(LOG_LEVEL level);\nvoid _log(unsigned int level, const char* file, unsigned int line,\n          const char* func, const char* fmt, ...);\ntypedef enum {\n    PLAYER_CHARACTER,\n    UNK_ENTITY_1,\n    UNK_ENTITY_2,\n    UNK_ENTITY_3,\n    UNK_ENTITY_4,\n    UNK_ENTITY_5,\n    UNK_ENTITY_6,\n    UNK_ENTITY_7,\n    UNK_ENTITY_8,\n    E_WEAPON = 0x10,\n    UNK_ENTITY_11 = 0x11,\n    UNK_ENTITY_12 = 0x12,\n    UNK_ENTITY_13 = 0x13,\n    UNK_ENTITY_20 = 0x20,\n    UNK_ENTITY_51 = 0x51,\n    UNK_ENTITY_100 = 0x100\n} EntityTypes;\nstruct DIRENTRY {\n               char name[20];\n               long attr;\n               long size;\n               struct DIRENTRY* next;\n              long head;\n               char system[4];\n};\nvoid EnterCriticalSection(void);\nvoid ExitCriticalSection(void);\nlong _card_info(long chan);\nlong _card_clear(long chan);\nlong _card_load(long chan);\nvoid InitCARD(long val);\nlong StartCARD(void);\nstruct EXEC {\n    unsigned long pc0;\n    unsigned long gp0;\n    unsigned long t_addr;\n    unsigned long t_size;\n    unsigned long d_addr;\n    unsigned long d_size;\n    unsigned long b_addr;\n    unsigned long b_size;\n    unsigned long s_addr;\n    unsigned long s_size;\n    unsigned long sp, fp, gp, ret, base;\n};\nextern void InitHeap(void*, unsigned long);\nextern long Load(char*, struct EXEC*);\nextern long Exec(struct EXEC*, long, char**);\nextern void _bu_init(void);\nextern long open(char* devname,\n                 int flag\n);\nextern long lseek(long, long, long);\nextern long read(long fd,\n                 void* buf,\n                 long n\n);\nextern long write(long, void*, long);\nextern int close(int fd\n);\nextern long format(char* fs\n);\nextern struct DIRENTRY* firstfile(char*, struct DIRENTRY*);\nextern struct DIRENTRY* nextfile(struct DIRENTRY*);\nextern long erase(char*);\nextern long Krom2RawAdd(unsigned long);\nextern void ChangeClearPAD(long);\nextern void StopPAD(void);\nint PAD_init(s32 , s32* );\nextern void FlushCache(void);\nextern void DeliverEvent(unsigned long, unsigned long);\nextern long TestEvent(unsigned long event\n);\nextern long OpenEvent(unsigned long, long, long, long (*func)());\nextern long EnableEvent(long);\nextern void _96_remove(void);\nextern long SetRCnt(unsigned long, unsigned short, long);\nextern long StartRCnt(unsigned long);\nextern long GetRCnt(unsigned long);\nextern long StopRCnt(unsigned long);\nextern long ResetRCnt(unsigned long);\nextern void exit();\nextern void puts(char*);\nextern char* strcat(char*, char*);\nextern int strcmp(char*, char*);\nextern int strncmp(char*, char*);\nextern char* strcpy(char*, char*);\nextern int strlen(char*);\nextern void* memcpy(unsigned char*, unsigned char*, int);\nextern void* memset(unsigned char*, unsigned char, int);\nextern int rand(void);\nextern void srand(unsigned int);\nextern void* malloc(size_t\n);\nextern void free(void*);\nint printf(char*, ...);\nint abs(int x);\ntypedef struct {\n    u_char minute;\n    u_char second;\n    u_char sector;\n    u_char track;\n} CdlLOC;\ntypedef struct {\n    u_char val0;\n    u_char val1;\n    u_char val2;\n    u_char val3;\n} CdlATV;\ntypedef struct {\n    u_short id;\n    u_short type;\n    u_short secCount;\n    u_short nSectors;\n    u_long frameCount;\n    u_long frameSize;\n    u_short width;\n    u_short height;\n    u_long dummy1;\n    u_long dummy2;\n    CdlLOC loc;\n} StHEADER;\ntypedef struct {\n    CdlLOC pos;\n    u_long size;\n    char name[16];\n} CdlFILE;\ntypedef void (*CdlCB)(u_char, u_char*);\nvoid def_cbsync(u_char intr, u_char* result);\nvoid def_cbready(u_char intr, u_char* result);\nvoid def_cbread(u_char intr, u_char* result);\nint CdInit(void);\nint CdStatus(void);\nint CdMode(void);\nint CdLastCom(void);\nint CdReset(int mode);\nvoid CdFlush(void);\nint CdSetDebug(int level);\nchar* CdComstr(u_char com);\nchar* CdIntstr(u_char intr);\nint CdSync(int mode, u_char* result);\nint CdReady(int mode, u_char* result);\nCdlCB CdSyncCallback(CdlCB func);\nCdlCB CdReadyCallback(CdlCB func);\nint CdControl(u_char com, u_char* param, u_char* result);\nint CdControlB(u_char com, u_char* param, u_char* result);\nint CdControlF(u_char com, u_char* param);\nint CdMix(CdlATV* vol\n);\nint CdGetSector(void* madr, int size);\nvoid(*CdDataCallback(void (*func)()));\nCdlLOC* CdIntToPos(int i, CdlLOC* p);\nint CdPosToInt(CdlLOC* p);\nCdlFILE* CdSearchFile(CdlFILE* fp, char* name);\nint CdRead(int sectors, u_long* buf, int mode);\nint CdReadSync(int mode, u_char* result);\nCdlCB CdReadCallback(CdlCB func);\nint CdRead2(long mode);\nvoid StClearRing(void);\nvoid StSetStream(u_long mode, u_long start_frame, u_long end_frame,\n                 void (*func1)(), void (*func2)());\nvoid StSetMask(u_long mask, u_long start, u_long end);\nu_long StGetNext(u_long** addr, u_long** header);\nu_long StFreeRing(u_long* base);\nint StGetBackloc(CdlLOC* loc);\nvoid StSetRing(u_long* ring_addr, u_long ring_size1);\nvoid StUnSetRing(void);\nstruct Callbacks {\n    const char* rcsid;\n    void* (*DMACallback)(int dma, void (*func)());\n    void* (*InterruptCallback)(int irq, void (*f)());\n    int (*ResetCallback)(void);\n    int (*StopCallback)(void);\n    int (*VSyncCallbacks)(int ch, void (*f)());\n    int (*RestartCallback)(void);\n};\nextern unsigned short D_8002C2BA;\nextern struct Callbacks* D_8002D340;\nint VSync(int mode);\nint VSyncCallback(void (*f)());\nint VSyncCallbacks(int ch, void (*f)());\nvoid* DMACallback(int dma, void (*func)());\nint ResetCallback(void);\nint StopCallback(void);\nint RestartCallback(void);\nint CheckCallback(void);\nlong SetVideoMode(long mode);\nvoid PadInit(int mode);\nu_long PadRead(int id);\nvoid PadStop(void);\ntypedef struct {\n              short x;\n              short y;\n              short w;\n              short h;\n} RECT;\ntypedef struct {\n    unsigned addr : 24;\n    unsigned len : 8;\n    u_char r0, g0, b0, code;\n} P_TAG;\ntypedef struct {\n    u_char r0, g0, b0, code;\n} P_CODE;\ntypedef struct {\n    u_long tag;\n              u_long code[15];\n} DR_ENV;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n} POLY_F3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    short x3, y3;\n} POLY_F4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char u0, v0;\n    u_short clut;\n    short x1, y1;\n    u_char u1, v1;\n    u_short tpage;\n    short x2, y2;\n    u_char u2, v2;\n    u_short pad1;\n} POLY_FT3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char u0, v0;\n    u_short clut;\n    short x1, y1;\n    u_char u1, v1;\n    u_short tpage;\n    short x2, y2;\n    u_char u2, v2;\n    u_short pad1;\n    short x3, y3;\n    u_char u3, v3;\n    u_short pad2;\n} POLY_FT4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, pad1;\n    short x1, y1;\n    u_char r2, g2, b2, pad2;\n    short x2, y2;\n} POLY_G3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n} POLY_GT3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char pad1;\n               short x1;\n               short y1;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char pad2;\n               short x2;\n               short y2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char pad3;\n               short x3;\n               short y3;\n} POLY_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char p3;\n               short x3;\n               short y3;\n               u_char u3;\n               u_char v3;\n               u_short pad3;\n} POLY_GT4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n} LINE_F2;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n} LINE_G2;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    u_long pad;\n} LINE_F3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n    u_char r2, g2, b2, p2;\n    short x2, y2;\n    u_long pad;\n} LINE_G3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    short x3, y3;\n    u_long pad;\n} LINE_F4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n    u_char r2, g2, b2, p2;\n    short x2, y2;\n    u_char r3, g3, b3, p3;\n    short x3, y3;\n    u_long pad;\n} LINE_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               short w;\n               short h;\n} SPRT;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_16;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_8;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short w, h;\n} TILE;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_16;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_8;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_1;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short w, h;\n} BLK_FILL;\ntypedef struct {\n               RECT clip;\n               short ofs[2];\n               RECT tw;\n               u_short tpage;\n               u_char dtd;\n               u_char dfe;\n               u_char isbg;\n               u_char r0, g0, b0;\n               DR_ENV dr_env;\n} DRAWENV;\ntypedef struct {\n               RECT disp;\n               RECT screen;\n               u_char isinter;\n               u_char isrgb24;\n               u_char pad0;\n               u_char pad1;\n} DISPENV;\ntypedef struct {\n               u_long tag;\n               u_long code[2];\n} DR_MODE;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_TWIN;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_AREA;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_OFFSET;\ntypedef struct {\n    u_long tag;\n    u32 code[2];\n} DR_PRIO;\ntypedef struct PixPattern {\n    u8 w;\n    u8 h;\n    u8 x;\n    u8 y;\n} PixPattern;\nextern u_short LoadTPage(\n    u_long* pix,\n    int tp,\n    int abr,\n    int x, int y,\n    int w, int h\n);\nextern u_short LoadClut2(u_long* clut, int x, int y);\nu_short GetClut(int x,\n                int y\n);\nu_short GetTPage(int tp, int abr, int x, int y);\nvoid DumpTPage(u_short tpage);\nvoid DumpClut(u_short clut);\nextern void AddPrim(void* ot, void* p);\nextern void SetShadeTex(void* p, int tge);\nextern void SetLineG2(LINE_G2* p);\nextern void SetPolyGT3(POLY_GT3* p);\nextern void SetPolyG4(POLY_G4* p);\nextern void SetPolyGT4(POLY_GT4* p);\nextern void SetSemiTrans(void* p, int abe);\nextern void SetSprt(SPRT* p);\nextern void SetSprt16(SPRT_16* p);\nextern void SetSprt8(SPRT_8* p);\nextern void SetTile(TILE* p);\nextern int ResetGraph(int mode);\nint SetGraphDebug(int level);\nextern int SetGraphReverse(int mode);\nextern int SetGraphQueue(int mode);\nextern u_long DrawSyncCallback(void (*func)());\nextern void FntLoad(int tx, int ty);\nint FntPrint(const char* fmt, ...);\nextern void SetDispMask(int mask);\nextern void SetDrawMode(DR_MODE* p, int dfe, int dtd, int tpage, RECT* tw);\nextern void SetDumpFnt(int id);\nextern int ClearImage(RECT* rect, u_char r, u_char g, u_char b);\nextern int DrawSync(int mode);\nextern int FntOpen(int x, int y, int w, int h, int isbg, int n);\nextern u_long* FntFlush(int id);\nextern int LoadImage(RECT* rect, u_long* p);\nextern int StoreImage(RECT* rect, u_long* p);\nextern int MoveImage(RECT* rect, int x, int y);\nextern u_long* ClearOTag(u_long* ot, int n);\nextern u_long* ClearOTagR(u_long* ot, int n);\nextern void DrawOTag(u_long* p);\nextern DRAWENV* PutDrawEnv(DRAWENV* env);\nextern DISPENV* PutDispEnv(DISPENV* env);\nextern DISPENV* SetDefDispEnv(DISPENV* env, int x, int y, int w, int h);\nextern DRAWENV* SetDefDrawEnv(DRAWENV* env, int x, int y, int w, int h);\nextern void SetDrawEnv(DR_ENV* dr_env, DRAWENV* env);\nvoid GsClearVcount(void);\nlong GsGetVcount();\nvoid GsInitVcount();\nvoid InitGeom();\ntypedef struct {\n    short m[3][3];\n    long t[3];\n} MATRIX;\ntypedef struct {\n    long vx, vy, vz;\n    long pad;\n} VECTOR;\ntypedef struct {\n    short vx, vy, vz;\n    short pad;\n} SVECTOR;\ntypedef struct {\n    u_char r, g, b;\n    u_char cd;\n} CVECTOR;\nMATRIX* RotMatrix(SVECTOR* r, MATRIX* m);\nvoid SetGeomOffset(long ofx, long ofy);\nlong RotTransPers(SVECTOR*, long*, long*, long*);\nvoid SetGeomScreen(long h);\nvoid SetRotMatrix(MATRIX* m);\nMATRIX* RotMatrixX(long r, MATRIX* m);\nMATRIX* RotMatrixY(long r, MATRIX* m);\nMATRIX* RotMatrixZ(long r, MATRIX* m);\nMATRIX* TransMatrix(MATRIX* m, VECTOR* v);\nMATRIX* ScaleMatrix(MATRIX* m, VECTOR* v);\nvoid SetTransMatrix(MATRIX* m);\nlong RotTransPers4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* v10, long* v11, long* v12,\n    long* v13,\n    long* p,\n    long* flag\n);\nlong RotAverageNclip4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* sxy0, long* sxy1, long* sxy2,\n    long* sxy3,\n    long* p,\n    long* otz,\n    long* flag\n);\nvoid NormalColorCol(SVECTOR* v0,\n                    CVECTOR* v1,\n                    CVECTOR* v2\n);\nMATRIX* RotMatrixY(long r,\n                   MATRIX* m\n);\nvoid SetBackColor(long rbk, long gbk, long bbk);\nvoid SetColorMatrix(MATRIX* m);\nvoid SetLightMatrix(MATRIX* m);\nvoid SetTransMatrix(MATRIX* m);\nvoid SetFarColor(long rfc, long gfc, long bfc);\nvoid SetFogNear(long a, long h);\nextern long SquareRoot0(long a);\nextern long SquareRoot12(long a);\nextern int rcos(int a);\nextern int rsin(int a);\nextern long ratan2(long y, long x);\ntypedef void (*SpuIRQCallbackProc)(void);\ntypedef struct {\n    short left;\n    short right;\n} SpuVolume;\ntypedef struct {\n               unsigned long voice;\n               unsigned long mask;\n               SpuVolume volume;\n               SpuVolume volmode;\n               SpuVolume volumex;\n               unsigned short pitch;\n               unsigned short note;\n               unsigned short sample_note;\n               short envx;\n               unsigned long addr;\n               unsigned long loop_addr;\n               long a_mode;\n               long s_mode;\n               long r_mode;\n               unsigned short ar;\n               unsigned short dr;\n               unsigned short sr;\n               unsigned short rr;\n               unsigned short sl;\n               unsigned short adsr1;\n               unsigned short adsr2;\n} SpuVoiceAttr;\ntypedef struct {\n    unsigned long mask;\n    long mode;\n    SpuVolume depth;\n    long delay;\n    long feedback;\n} SpuReverbAttr;\nextern long SpuSetTransferMode(long mode);\nextern unsigned long SpuWrite(unsigned char* addr, unsigned long size);\nextern long SpuSetReverbModeParam(SpuReverbAttr* attr);\nextern void SpuSetVoiceAttr(SpuVoiceAttr* arg);\nextern void SpuSetKey(long on_off, unsigned long voice_bit);\nextern long SpuMallocWithStartAddr(unsigned long addr, long size);\nextern SpuIRQCallbackProc SpuSetIRQCallback(SpuIRQCallbackProc);\nextern void SsSeqClose(short seq_access_num);\nextern void SsSetMVol(short voll, short volr);\nextern void SsSetSerialAttr(char s_num, char attr, char mode);\nextern void SsSetSerialVol(short s_num, short voll, short volr);\nextern long SpuClearReverbWorkArea(long rev_mode\n);\nvoid SsInitHot(void);\nchar SsSetReservedVoice(char voices\n);\nvoid SsSetTickMode(long tick_mode\n);\nvoid SsStart(void);\nshort SsUtKeyOnV(\n    short voice,\n    short vabId,\n    short prog,\n    short tone,\n    short note,\n    short fine,\n    short voll,\n    short volr\n);\nshort SsUtSetVVol(short vc,\n                  short voll,\n                  short volr\n);\nvoid SpuGetAllKeysStatus(char* status);\nvoid SsSetTableSize(\n    char* table,\n    short s_max,\n    short t_max\n);\nvoid SsSeqStop(short seq_access_num\n);\nvoid SsSetMono(void);\nvoid SsSetStereo(void);\ns32 SsVabOpenHeadSticky(\n    u_char* addr,\n    u_long vabid,\n    u_long sbaddr\n);\ns32 SsVabTransBodyPartly(\n    u_char* addr,\n    u_long bufsize,\n    u_long vabid\n);\ns32 SsVabTransCompleted(\n    short immediateFlag\n);\nvoid SsUtSetReverbType(short type);\nvoid SsUtReverbOn(void);\nvoid SsUtSetReverbDepth(\n    short ldepth,\n    short rdepth\n);\nvoid SsUtSetReverbDelay(short delay);\ntypedef long Event;\ntypedef enum {\n    PRIM_NONE,\n    PRIM_TILE,\n    PRIM_LINE_G2,\n    PRIM_G4,\n    PRIM_GT4,\n    PRIM_GT3,\n    PRIM_SPRT,\n    PRIM_ENV,\n    PRIM_TILE_ALT = PRIM_TILE | 0x10,\n    PRIM_LINE_G2_ALT = PRIM_LINE_G2 | 0x10,\n    PRIM_G4_ALT = PRIM_G4 | 0x10\n} PrimitiveType;\ntypedef struct Vertex {\n              u8 r;\n              u8 g;\n              u8 b;\n              u8 p;\n              s16 x;\n              s16 y;\n              u8 u;\n              u8 v;\n              u16 param;\n} Vertex;\ntypedef struct {\n               SVECTOR* v0;\n               SVECTOR* v1;\n               SVECTOR* v2;\n               SVECTOR* v3;\n} SVEC4;\ntypedef struct {\n    s16 x;\n    s16 y;\n    u8 u;\n    u8 v;\n    u16 param;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 p;\n} VertexFake;\ntypedef struct Prim {\n    struct Prim* next;\n    struct Vertex v[4];\n} Prim;\ntypedef struct Primitive {\n               struct Primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               s16 x2;\n               s16 y2;\n               u8 u2;\n               u8 v2;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               s16 x3;\n               s16 y3;\n               u8 u3;\n               u8 v3;\n               u16 drawMode;\n} Primitive;\ntypedef struct FakePrim {\n    struct FakePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 w;\n               u8 h;\n               u16 clut;\n               f32 posX;\n               f32 posY;\n               f32 velocityX;\n               f32 velocityY;\n               s16 x2;\n               s16 y2;\n               s16 delay;\n               u16 priority;\n               f32 accelerationX;\n               f32 accelerationY;\n               s16 timer;\n               u16 drawMode;\n} FakePrim;\ntypedef struct PrimLineG2 {\n    struct PrimLineG2* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               s16 xLength;\n               s16 yLength;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               f32 velocityX;\n               f32 velocityY;\n               s32 angle;\n               s16 delay;\n               u16 priority;\n               f32 preciseX;\n               f32 preciseY;\n               s16 timer;\n               u16 drawMode;\n} PrimLineG2;\ntypedef struct {\n    struct primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               f32 y1_f32;\n               s16 unk24;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               f32 y1_f32_velocity;\n               s16 unk30;\n               u16 drawMode;\n} draculaPrimitive;\ntypedef struct AxePrim {\n    struct AxePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               s32 unk0C;\n               s32 unk10;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               s16 unk1C;\n              s16 unk1E;\n               s16 x2;\n               s16 y2;\n               u8 step;\n               u16 priority;\n               s32 pad;\n               s16 timer;\n               s16 unk2E;\n               s16 unk30;\n               u16 drawMode;\n} AxePrim;\nstruct Entity;\ntypedef void (*PfnEntityUpdate)(struct Entity*);\ntypedef union {\n    s32 unk;\n    void* ptr;\n    struct {\n        s8 unk0, unk1, unk2, unk3;\n    } S8;\n    struct {\n        u8 unk0, unk1, unk2, unk3;\n    } U8;\n    struct {\n        s16 unk0, unk2;\n    } S16;\n    struct {\n        u16 unk0, unk2;\n    } U16;\n} Multi;\ntypedef union {\n    s16 s;\n    u16 u;\n    struct {\n        s8 unk0, unk1;\n    } S8;\n    struct {\n        u8 unk0, unk1;\n    } U8;\n} Multi16;\nstruct Entity;\ntypedef struct ET_Generic {\n               Multi16 unk7C;\n    union {\n                   u16 modeU16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeU8;\n    } unk7E;\n    union {\n                   s32 modeS32;\n                   struct Entity* entityPtr;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeS8;\n    } unk80;\n               Multi unk84;\n               Multi unk88;\n    union {\n                   struct Entity* entityPtr;\n                   struct Primitive* primPtr;\n                   s32 modeS32;\n        struct {\n                       u16 unk0;\n                       u16 unk2;\n        } modeU16;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk8C;\n               s16 unk90;\n               s16 unk92;\n               u8 unk94;\n               u8 unk95;\n               s16 unk96;\n               s32 unk98;\n               struct Entity* unk9C;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               u8 unkAC;\n               s8 unkAD;\n               s8 unkAE;\n               s8 unkAF;\n               s16 unkB0;\n               s16 unkB2;\n               s16 unkB4;\n               s16 unkB6;\n    union {\n                   void (*unkFuncB8)(struct Entity*);\n                   struct Entity* entityPtr;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n                       u8 unk2;\n                       u8 unk3;\n        } modeU8;\n    } unkB8;\n} ET_Generic;\ntypedef struct {\n               u16 timer;\n               s16 unk7E;\n               u8 aliveTimer;\n               s8 unk81;\n               s16 unk82;\n               s32 fallSpeed;\n               s16 gravity;\n               s16 unk8A;\n               s16 iconSlot;\n               s16 unk8E;\n               s16 unk90;\n               s16 unk92;\n               s32 castleFlag;\n} ET_EquipItemDrop;\ntypedef struct {\n               u32 unk[14];\n               u16 unkB4;\n               s16 unkB6;\n               PfnEntityUpdate update;\n} ET_HeartDrop;\ntypedef struct {\n               u16 timer;\n               u16 size;\n               u32 speed;\n} ET_BloodDroplets;\ntypedef struct {\n               u16 nPrims;\n               u16 nDigits;\n               u8 digits[4];\n               u16 timer;\n               s16 unk86;\n               u16 unk88;\n               s16 unk8A;\n} ET_NumericDamage;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u16 sparkleCycle;\n    u16 sparkleAnim;\n    u32 unk84;\n    u32 unk88;\n    s16 iconSlot;\n    u16 unk8E;\n    u16 floatTimer;\n    u16 unk92;\n    s32 yFloatSpeed;\n} ET_RelicOrb;\ntypedef struct {\n               u32 unused7C;\n               s16 unused80;\n               s16 unk82;\n               s16 angle;\n               s16 unk86;\n               u8 sideToPlayer;\n               u8 showedMessage;\n} ET_Door;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               struct Primitive* unk84;\n               struct Primitive* unk88;\n               struct Primitive* unk8C;\n               s16 unk90;\n               s16 unk92;\n} ET_StagePopup;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               struct Primitive* unk84;\n               struct Primitive* unk88;\n               u8 unk8C;\n} ET_StagePopupJP;\ntypedef struct {\n               char* label;\n               u16 width;\n               u16 height;\n               s16 unk84;\n               u16 duration;\n} ET_MessageBox;\ntypedef struct {\n               s16 lifetime;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               struct Entity* some_ent;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s32 accelerationX;\n               s32 accelerationY;\n               s32 unkA4;\n               s32 unkA8;\n               u8 anim;\n               u8 unkAD;\n               s16 equipId;\n} ET_Weapon;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    s32 unk80;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n} ET_KarmaCoin;\ntypedef struct {\n    s16 angle;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 xPos;\n    s16 unk8A;\n    struct Entity* parent;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 accelerationX;\n    s32 accelerationY;\n    s32 unkA4;\n    s32 unkA8;\n    u8 anim;\n    u8 unkAD;\n    s16 equipId;\n} ET_HeavenSword;\ntypedef struct {\n    s16 angle;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s32 unk84;\n    s16 xPos;\n    s16 unk8A;\n    struct Entity* parent;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 accelerationX;\n    s32 accelerationY;\n    s32 unkA4;\n    s32 unkA8;\n    u8 anim;\n    u8 unkAD;\n    s16 equipId;\n} ET_HeavenSword2;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               byte pad[10];\n               u8 anim;\n               u8 padAD;\n               s16 unkAE;\n} ET_Shield;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               u16 unk80;\n               s16 pal;\n               s16* palettePtr;\n               u16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               byte pad[14];\n               u8 anim;\n               u8 padAD;\n               s16 unkAE;\n} ET_DarkShield;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               struct Entity* target;\n               s16 unk94;\n               s16 unk96;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               byte pad[6];\n               s16 unkAE;\n} ET_MedusaShieldLaser;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n} ET_ShamanShieldStar;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               u8 unk9C;\n               byte pad[14];\n               u8 anim;\n               s16 unkAE;\n} ET_HeraldShieldSwirlEffect;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    s32 unk80;\n    s16 pad[21];\n    s16 foodId;\n} ET_Food;\ntypedef struct {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 attackMode;\n               u8 flag;\n               u8 nearDeath;\n               s32 speed;\n               s16 angle;\n               char pad_8E[0xE];\n               u8 pickupFlag;\n               u8 grabedAscending;\n} ET_GaibonSlogra;\ntypedef struct {\n               u16 angle;\n               u16 unk7E;\n               u16 unk80;\n               s16 unk82;\n} ET_SoulStealOrb;\ntypedef struct {\n               Primitive* primBg;\n               s32 unused80;\n               Primitive* primFade;\n               s32 unk88;\n} ET_WarpRoom;\ntypedef struct {\n               char pad_0[0x8];\n               u8 timer;\n               char pad_85[0x1];\n               s8 timer2;\n               char pad_87[0x5];\n               u16 palette;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_0[0x6];\n               s8 timer;\n               char pad_87[0x5];\n               s16 rotation;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman_2;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               s16 unk8C;\n               s16 unk8E;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s32 unkA0;\n               struct Entity* target;\n               s16 unkA8;\n               s16 unkAA;\n               s16 cameraX;\n               s16 cameraY;\n               s16 unkB0;\n               s16 unkB2;\n               struct Entity* follow;\n} ET_Bat;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    struct Primitive* unk84;\n    s16 unk88;\n    s16 unk8A;\n} ET_BatEcho;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n               char pad_8A[0x3];\n               u8 unk8D;\n               char pad_8E[0xE];\n               s16 unk9C;\n               struct Entity* next;\n} ET_801CF254;\ntypedef struct {\n               char pad_0[0x4];\n               s16 unk80;\n               char pad_82[0xA];\n               u8 unk8C;\n               char pad_8D[0xF];\n               u16 unk9C;\n               char pad_9E[0x8];\n               s16 unkA6;\n} ET_GurkhaSword;\ntypedef struct ET_Dracula {\n               char pad_7C[4];\n               struct draculaPrimitive* unk80;\n               struct draculaPrimitive* unk84;\n               char pad_88[4];\n               s16 unk8C;\n               char pad_8E[0x2];\n               u8 unk90;\n               char pad91;\n               u8 unk92;\n               char pad93;\n               u8 unk94;\n               char pad_95[0x3];\n               s16 unk98;\n               char pad_9A[0x2];\n               s16 unk9C;\n               char pad_9E[0x2];\n               u8 unkA0;\n               u8 unkA1;\n               u8 unkA2;\n               char pad_A3[0x9];\n               struct Primitive* prim;\n} ET_Dracula;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               s32 unk84;\n               s16 unk88;\n               char pad_8A[0x2];\n               s16 unk8C;\n               s16 unk8E;\n} ET_StageTitleCard;\ntypedef struct ET_Succubus {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 facingLeft;\n               u8 unk85;\n               u8 nextAttack;\n               u8 unk87;\n               u16 nextStep;\n               char pad_8A[0x4];\n               s16 yOffset;\n               char pad_90[0xC];\n               struct Entity* real;\n               s16 clonePosX;\n               s16 unkA2;\n} ET_Succubus;\ntypedef struct {\n               u16 timer;\n               char pad_7E[2];\n               s32 unk80;\n} ET_RoomTransition2;\ntypedef struct {\n               u8 pad0[0x4];\n               s32 unk80;\n               s16 unk84;\n               u8 pad86[2];\n               u8 unk88;\n               u8 unk89;\n} ET_801B3C38;\ntypedef struct {\n               u16 unk7C;\n} ET_801BCC4C;\ntypedef struct ET_CastleDoor {\n               struct Primitive* prim;\n               s16 timer;\n               char pad_82[0x2];\n               s16 rotZ;\n} ET_CastleDoor;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               s16 unk82;\n               s16 timer;\n} ET_ShuttingWindow;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               u16 unk84;\n} ET_DeathSkySwirl;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s32 elevatorTarget;\n} ET_Elevator;\ntypedef struct {\n               s32 pad[8];\n               s16 unk84;\n               s16 unk86;\n               s16* unk88;\n} ET_801D0B40;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0xC];\n               u8 unk8C;\n               u8 unk8D;\n               char pad_8E[0xE];\n               u16 unk9C;\n} ET_801D1BB8;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n} ET_801D0B78;\ntypedef struct {\n               s32 unk7C;\n               s16 unk80;\n               s16 unk82;\n    union {\n                   s32 val;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk84;\n               u16 unk88;\n} ET_WaterEffects;\ntypedef struct {\n               char pad_0[4];\n               s16 unk80;\n               char pad_82[2];\n               u8 unk84;\n               char pad_85[3];\n               u16 unk88;\n               char pad_8A[2];\n               u8 unk8C;\n               u8 unk8D;\n               u8 unk8E;\n               char pad_8E[13];\n               s16 rotZ;\n               s16 unk9E;\n               struct Entity* parent;\n               s16 unkA4;\n               s16 unkA6;\n               u8 unkA8;\n               char pad_A9[0x7];\n               u16 unkB0[0x6];\n} ET_GurkhaHammer;\ntypedef struct {\n               char pad_0[0x20];\n               s16 unk9C;\n               char pad_A0[0x6];\n               s16 unkA4;\n               s16 unkA6;\n               char pad_A8[0xC];\n               u16 unkB4;\n} ET_801CDFD8;\ntypedef struct {\n               char pad_0[0x8];\n               u8 unk84;\n               char pad_85[0x9];\n               u8 unk8E;\n               char pad_8F[0x20];\n               s16 unkB0;\n} ET_801CE4CC;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n} ET_TransparentWater;\ntypedef struct {\n               struct Primitive* prim;\n               s32 timer;\n} ET_HeartRoomGoldDoor;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s8 unk84;\n               char pad_85[0x1];\n               s8 unk86;\n} ET_MermanWaterSplash;\ntypedef struct {\n               s32 playerVelocity;\n} ET_CastleDoorTransition;\ntypedef struct {\n               s8 unk7C;\n} ET_AlucardController;\ntypedef struct {\n               u16 unk7C;\n} ET_ForegroundTree;\ntypedef struct {\n               u16 unk7C;\n               u16 unk7E;\n               s16 unk80;\n} ET_FadeToWhite;\ntypedef struct {\n               u16 unk7C;\n} ET_DeathStolenItems;\ntypedef struct {\n               u16 unk7C;\n               char pad_7E[0x2];\n               s16 posX;\n               s16 posY;\n               u16 moveTimer;\n               u16 moveDirection;\n} ET_Death;\ntypedef struct {\n               u8 unk7C;\n               char pad_7D[0x3];\n               s16 unk80;\n               s16 unk82;\n               struct Entity* unk84;\n} ET_SpittleBone;\ntypedef struct {\n    Primitive* prim;\n    char pad[0x24];\n    s16 unkA4;\n    s16 unkA6;\n    char padd[4];\n    u8 anim;\n    char pad2[0x8];\n    struct Entity* unkB8;\n} ET_Player;\ntypedef struct {\n    u8 unk0;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n} ET_EntitySlot1;\ntypedef struct {\n    char pad[0x32];\n    s16 unkAE;\n} ET_EntitySlot16;\ntypedef struct {\n               s16 unk7C;\n} ET_Entity12;\ntypedef struct {\n    u8 fiveFrameCounter;\n    struct Entity* parent;\n    char pad[8];\n    u16 parentId;\n} ET_Entity13;\ntypedef struct {\n    s16 t;\n} ET_TimerOnly;\ntypedef struct {\n    char pad[8];\n    struct Primitive* prim;\n} ET_AxeKnight;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 childId;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               s16 unkAC;\n               s16 unkAE;\n               s16 unkB0;\n               s16 unkB2;\n} ET_EntFactory;\ntypedef struct {\n    char pad[8];\n    s32 unk8;\n} unk_sub_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    byte pad[14];\n    unk_sub_8011E4BC* unk8C;\n} ET_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_HellfireHandler;\ntypedef struct {\n    s16 stoneAngle;\n    s16 lifeTimer;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_ReboundStone;\ntypedef struct {\n    s16 timer;\n} ET_Vibhuti;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 pad[24];\n               s16 unkB0;\n} ET_GiantSpinningCross;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_8017091C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 pad[0x16];\n    s16 unkB0;\n} ET_80170F64;\ntypedef struct {\n    s16 timer;\n    s16 size;\n} ET_stopwatchCircle;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    f32 unk84;\n    s32 unk88;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 unk96;\n    struct Entity* unk98;\n    s32 pad[5];\n    s16 unkB0;\n} ET_801719A4;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 unk96;\n    struct Entity* unk98;\n    s32 pad[5];\n    s16 unkB0;\n} ET_BibleSubwpn;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s32 unk84;\n    s32 unk88;\n    struct Entity* parent1;\n    s32 pad[10];\n    struct Entity* parent2;\n} ET_80128C2C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_80161FF0;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n} ET_80162870;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n} ET_8016E9E4;\ntypedef struct {\n    u8 unk7C;\n    u8 unk7D[3];\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_801CC820;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    struct Primitive* unk88;\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n} ET_stopwatchSparkle;\ntypedef struct {\n    s16 t;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    f32 unk84;\n    f32 unk88;\n    s16 unk8C;\n    s16 unk8E;\n} ET_stopwatch;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n} ET_RichterPowerUpRing;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n} ET_TransparentWhiteCircle;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n} ET_HitByIce;\ntypedef struct {\n    s16 unk7C;\n    s16 pad7E;\n    s16 unk80;\n    s16 unk82;\n    byte pad84[12];\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 pad96[3];\n    s16 unk9C;\n} ET_HitByLightning;\ntypedef struct {\n    s32 unk7C;\n    s32 unk80;\n    s32 unk84;\n    s32 unk88;\n    s32 unk8C;\n    s32 unk90;\n} ET_Teleport;\ntypedef struct {\n    s16 timer;\n    s16 angle;\n    s16 unk80;\n    s16 unk82;\n} ET_HolyWater;\ntypedef struct {\n    s16 timer;\n    s16 angle;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_HolyWaterFlame;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u8 unk80;\n    byte pad81;\n    u8 unk82;\n    byte pad83;\n    s32 unk84;\n} ET_CrashCross;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u8 unk80;\n    byte pad81;\n    u8 unk82;\n    byte pad83;\n    s32 unk84;\n} ET_RicRevivalColumn;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    u16 unk80;\n    u16 pad82;\n    Point16* unk84;\n} ET_CrossBoomerang;\ntypedef struct {\n    f32 unk7C;\n    f32 unk80;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n    s16 unk8C;\n    s16 unk8E;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 unk9C;\n    s32 unkA0;\n    s16 unkA4;\n    s16 unkA6;\n    s32 unkA8;\n    s32 unkAC;\n    s16 unkB0;\n    s32 unkB4;\n    s32 unkB8;\n} ET_80166784;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s8 unk8A;\n    u8 unk8B[12];\n    s32 unk98;\n} ET_AguneaCrash;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s8 unk8A;\n    u8 unk8B[12];\n    s32 unk98;\n    s32 unk9C;\n    u16 unkA0;\n} ET_AxeCrash;\ntypedef struct {\n    s32 pad7c;\n    Primitive* unk80;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    struct Entity* parent;\n    s16 unk90;\n} ET_801291C4;\ntypedef struct {\n    s16 timer;\n    u16 unk7E;\n    s16 unk80;\n    s16 pad82;\n    s32 unk84;\n    s32 unk88;\n    u16 unk8C;\n} ET_VibhutiCrash;\ntypedef struct {\n    PrimLineG2* lines[4];\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n} ET_8016D9C4;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_8016DF74;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    byte pad[46];\n    s16 unkB0;\n} ET_8016E46C;\ntypedef struct {\n    struct Primitive* prim1;\n    struct Primitive* prim2;\n    struct Primitive* prim3;\n    struct Primitive* prim4;\n    s16 unk8C;\n    s16 unk8E;\n} ET_801AF774;\ntypedef struct {\n    s32 unk7C;\n    s16 timer;\n    s16 unk82;\n    s16 unk84;\n} ET_DracFinal;\ntypedef struct {\n    byte pad[0x18];\n    s32 unk94;\n} ET_Drop;\ntypedef struct {\n               byte pad[4];\n               s16 angle;\n               byte pad2[2];\n               u8 switch_control;\n               u8 speed;\n} ET_BigRedFireball;\ntypedef struct {\n    s16 timer;\n    s16 spawnTimer;\n} ET_SummonSpirit;\ntypedef struct {\n    struct Primitive* prim;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_3DBackgroundhouse;\ntypedef struct {\n    struct Primitive* prim1;\n    struct Primitive* prim2;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n} ET_LifeUpSpawn;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    u16 unk88;\n    u16 unk8A;\n} ET_801B0AA4;\ntypedef struct {\n    byte pad[4];\n    u16 unk80;\n    u16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n    u8 unk8C;\n} ET_Owl;\ntypedef struct {\n    u16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    u16 unk88;\n    s16 unk8A;\n    s16 unk8C;\n    s16 unk8E;\n} ET_AlucardWaterEffect;\ntypedef struct {\n    s32 pad;\n    s16 timer;\n} ET_801B28E4;\ntypedef struct {\n    u32 unk24[10];\n    u8 unk28;\n    u8 unk29;\n} ET_80123B40;\ntypedef struct {\n    struct Entity* ent;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_80129864;\ntypedef struct {\n    s16 timer;\n    s16 pad;\n    s16 xCurrent;\n    s16 yCurrent;\n    s16 xTarget;\n    s16 yTarget;\n} ET_Mist;\ntypedef struct {\n    s32 unk7C;\n    s16 unk80;\n    s16 unk82;\n    s32 un84;\n    s16 unk88;\n    s16 unk8A;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s32 unk94;\n    s16 unk98;\n    s16 unk9A;\n    s16 unk9C;\n} ET_PlayerBlink;\ntypedef struct {\n    struct Primitive* prim;\n    s16 unk80;\n    s16 pad82;\n    s32 pad84;\n    s32 pad88;\n    struct Primitive* prim2;\n    struct Primitive* prim3;\n} ET_BloodSplatter;\ntypedef struct {\n    s32 pad7c;\n    s16 timer;\n    s16 pad82;\n    s32 pad84;\n    s32 pad88;\n    s32 pad8C;\n    s16 brightness;\n} ET_PlayerOutline;\ntypedef struct {\n    u8 digits[4];\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    u16 unk86;\n    u16 unk88;\n    u16 unk8A;\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n    s16 unk92;\n    s16 angleToMeter;\n    s16 distToMeter;\n    s16 unk98;\n} ET_HPNumberMove;\ntypedef struct {\n    s16 timer;\n    s16 pad1;\n    s16 halfWidth;\n    s16 halfHeight;\n    s32 pad2;\n    s16 angle;\n    s16 pad3;\n    s32 pad4;\n    s32 str_x;\n    s32 str_y;\n    s32 unk98;\n} ET_GuardText;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_Dissolve;\ntypedef union {\n    struct Primitive* prim;\n    char stub[0x40];\n    ET_TimerOnly timer;\n    ET_EntFactory factory;\n    ET_Generic generic;\n    ET_EntitySlot1 entSlot1;\n    ET_EntitySlot16 entSlot16;\n    ET_Entity12 ent12;\n    ET_Entity13 ent13;\n    ET_8011E4BC et_8011E4BC;\n    ET_HellfireHandler hellfireHandler;\n    ET_ReboundStone reboundStone;\n    ET_8016D9C4 et_8016D9C4;\n    ET_8016E46C et_8016E46C;\n    ET_8016DF74 et_8016DF74;\n    ET_CrossBoomerang crossBoomerang;\n    ET_Vibhuti vibhuti;\n    ET_HolyWater holywater;\n    ET_HolyWaterFlame holywaterflame;\n    ET_CrashCross crashcross;\n    ET_AguneaCrash aguneaCrash;\n    ET_AxeCrash axeCrash;\n    ET_VibhutiCrash vibhutiCrash;\n    ET_RicRevivalColumn ricColumn;\n    ET_GiantSpinningCross giantcross;\n    ET_EquipItemDrop equipItemDrop;\n    ET_HeartDrop heartDrop;\n    ET_BloodDroplets bloodDroplets;\n    ET_BloodSplatter bloodSplatter;\n    ET_NumericDamage ndmg;\n    ET_RelicOrb relicOrb;\n    ET_Door door;\n    ET_StagePopup stpopup;\n    ET_StagePopupJP stpopupj;\n    ET_MessageBox messageBox;\n    ET_Weapon weapon;\n    ET_Shield shield;\n    ET_DarkShield darkShield;\n    ET_KarmaCoin karmacoin;\n    ET_HeavenSword heavenSword;\n    ET_HeavenSword2 heavenSword2;\n    ET_MedusaShieldLaser medshieldlaser;\n    ET_ShamanShieldStar shamanshieldstar;\n    ET_HeraldShieldSwirlEffect heraldSwirl;\n    ET_Food food;\n    ET_HitByIce hitbyice;\n    ET_HitByLightning hitbylightning;\n    ET_PlayerBlink playerBlink;\n    ET_Mist mist;\n    ET_Bat bat;\n    ET_BatEcho batEcho;\n    ET_SoulStealOrb soulStealOrb;\n    ET_GaibonSlogra GS_Props;\n    ET_WarpRoom warpRoom;\n    ET_Teleport teleport;\n    ET_Merman merman;\n    ET_Merman_2 merman2;\n    ET_MermanWaterSplash mermanWaterSplash;\n    ET_80128C2C et_80128C2C;\n    ET_801291C4 et_801291C4;\n    ET_8017091C et_8017091C;\n    ET_80170F64 et_80170F64;\n    ET_stopwatchCircle et_stopwatchCircle;\n    ET_stopwatchSparkle et_stopWatchSparkle;\n    ET_stopwatch stopwatch;\n    ET_80161FF0 et_80161FF0;\n    ET_80162870 et_80162870;\n    ET_80166784 et_80166784;\n    ET_RichterPowerUpRing ricPowerRing;\n    ET_TransparentWhiteCircle whiteCircle;\n    ET_8016E9E4 et_8016E9E4;\n    ET_801719A4 et_801719A4;\n    ET_BibleSubwpn et_BibleSubwpn;\n    ET_801CF254 et_801CF254;\n    ET_GurkhaSword gurkhaSword;\n    ET_Dracula dracula;\n    ET_DracFinal dracFinalForm;\n    ET_Succubus succubus;\n    ET_StageTitleCard stageTitleCard;\n    ET_RoomTransition2 roomTransition2;\n    ET_801B3C38 et38;\n    ET_801BCC4C et_801BCC4C;\n    ET_ShuttingWindow shuttingWindow;\n    ET_CastleDoor castleDoor;\n    ET_DeathSkySwirl deathSkySwirl;\n    ET_Elevator elevator;\n    ET_801D0B40 et_801D0B40;\n    ET_801D1BB8 et_801D1BB8;\n    ET_801D0B78 et_801D0B78;\n    ET_WaterEffects waterEffects;\n    ET_GurkhaHammer GH_Props;\n    ET_801CE4CC et_801CE4CC;\n    ET_801CDFD8 et_801CDFD8;\n    ET_TransparentWater transparentWater;\n    ET_HeartRoomGoldDoor heartRoomGoldDoor;\n    ET_CastleDoorTransition castleDoorTransition;\n    ET_AlucardController alucardController;\n    ET_ForegroundTree foregroundTree;\n    ET_FadeToWhite fadeToWhite;\n    ET_DeathStolenItems deathStolenItems;\n    ET_Death death;\n    ET_SpittleBone spittleBone;\n    ET_Player player;\n    ET_801CC820 et_801CC820;\n    ET_801AF774 et_801AF774;\n    ET_Drop drop;\n    ET_BigRedFireball bigredfireball;\n    ET_SummonSpirit summonspirit;\n    ET_3DBackgroundhouse bghouse;\n    ET_LifeUpSpawn lifeUpSpawn;\n    ET_AxeKnight axeknight;\n    ET_801B0AA4 et_801B0AA4;\n    ET_Owl owl;\n    ET_AlucardWaterEffect aluwater;\n    ET_80123B40 et_80123B40;\n    ET_80129864 et_80129864;\n    ET_801B28E4 et_801B28E4;\n    ET_PlayerOutline playerOutline;\n    ET_HPNumberMove hpNumMove;\n    ET_GuardText guardText;\n    ET_Dissolve dissolve;\n} Ext;\ntypedef enum {\n    Game_Init,\n    Game_Title,\n    Game_Play,\n    Game_GameOver,\n    Game_NowLoading,\n    Game_VideoPlayback,\n    Game_Unk6,\n    Game_PrologueEnd,\n    Game_MainMenu,\n    Game_Ending,\n    Game_Boot,\n    Game_99 = 99,\n} GameState;\ntypedef enum {\n    STAGE_NO0 = 0x00,\n    STAGE_NO1 = 0x01,\n    STAGE_LIB = 0x02,\n    STAGE_CAT = 0x03,\n    STAGE_NO2 = 0x04,\n    STAGE_CHI = 0x05,\n    STAGE_DAI = 0x06,\n    STAGE_NP3 = 0x07,\n    STAGE_CEN = 0x08,\n    STAGE_NO4 = 0x09,\n    STAGE_ARE = 0x0A,\n    STAGE_TOP = 0x0B,\n    STAGE_NZ0 = 0x0C,\n    STAGE_NZ1 = 0x0D,\n    STAGE_WRP = 0x0E,\n    STAGE_NO1_ALT = 0x0F,\n    STAGE_NO0_ALT = 0x10,\n    STAGE_DRE = 0x12,\n    STAGE_NZ0_DEMO = 0x13,\n    STAGE_NZ1_DEMO = 0x14,\n    STAGE_LIB_DEMO = 0x15,\n    STAGE_BO7 = 0x16,\n    STAGE_MAR = 0x17,\n    STAGE_BO6 = 0x18,\n    STAGE_BO5 = 0x19,\n    STAGE_BO4 = 0x1A,\n    STAGE_BO3 = 0x1B,\n    STAGE_BO2 = 0x1C,\n    STAGE_BO1 = 0x1D,\n    STAGE_BO0 = 0x1E,\n    STAGE_ST0 = 0x1F,\n    STAGE_RNO0 = STAGE_NO0 | 0x20,\n    STAGE_RNO1 = STAGE_NO1 | 0x20,\n    STAGE_RLIB = STAGE_LIB | 0x20,\n    STAGE_RCAT = STAGE_CAT | 0x20,\n    STAGE_RNO2 = STAGE_NO2 | 0x20,\n    STAGE_RCHI = STAGE_CHI | 0x20,\n    STAGE_RDAI = STAGE_DAI | 0x20,\n    STAGE_RNO3 = STAGE_NP3 | 0x20,\n    STAGE_RCEN = STAGE_CEN | 0x20,\n    STAGE_RNO4 = STAGE_NO4 | 0x20,\n    STAGE_RARE = STAGE_ARE | 0x20,\n    STAGE_RTOP = STAGE_TOP | 0x20,\n    STAGE_RNZ0 = STAGE_NZ0 | 0x20,\n    STAGE_RNZ1 = STAGE_NZ1 | 0x20,\n    STAGE_RWRP = STAGE_WRP | 0x20,\n    STAGE_RNZ1_DEMO = 0x35,\n    STAGE_RBO8 = 0x36,\n    STAGE_RBO7 = 0x37,\n    STAGE_RBO6 = 0x38,\n    STAGE_RBO5 = 0x39,\n    STAGE_RBO4 = 0x3A,\n    STAGE_RBO3 = 0x3B,\n    STAGE_RBO2 = 0x3C,\n    STAGE_RBO1 = 0x3D,\n    STAGE_RBO0 = 0x3E,\n    STAGE_MAD = 0x40,\n    STAGE_NO3 = 0x41,\n    STAGE_IWA_LOAD = 0x42,\n    STAGE_IGA_LOAD = 0x43,\n    STAGE_HAGI_LOAD = 0x44,\n    STAGE_SEL = 0x45,\n    STAGE_TE1 = 0x46,\n    STAGE_TE2 = 0x47,\n    STAGE_TE3 = 0x48,\n    STAGE_TE4 = 0x49,\n    STAGE_TE5 = 0x4A,\n    STAGE_TOP_ALT = 0x4B,\n    STAGE_EU_WARNING = 0x70,\n    STAGE_ENDING = 0xFE,\n    STAGE_MEMORYCARD = 0xFF,\n} Stages;\ntypedef enum {\n    Play_Reset = 0,\n    Play_Init,\n    Play_PrepareDemo,\n    Play_Default,\n    Play_PrepareNextStage,\n    Play_LoadStageChr,\n    Play_WaitStageChr,\n    Play_LoadStageSfx,\n    Play_WaitStageSfx,\n    Play_LoadStagePrg,\n    Play_WaitStagePrg,\n    Play_16 = 16,\n    Gameover_Init = 0,\n    Gameover_AllocResources,\n    Gameover_2,\n    Gameover_3,\n    Gameover_4,\n    Gameover_5,\n    Gameover_6,\n    Gameover_7,\n    Gameover_8,\n    Gameover_9,\n    Gameover_10,\n    Gameover_11,\n    Gameover_Alt = 99,\n    Gameover_Init_Alt,\n    Gameover_AllocResources_Alt,\n    Gameover_2_Alt,\n    Gameover_3_Alt,\n    Gameover_11_Alt = 111,\n    NowLoading_2 = 2,\n} GameSteps;\ntypedef enum {\n    Demo_None,\n    Demo_PlaybackInit,\n    Demo_Recording,\n    Demo_End,\n    Demo_Playback,\n} DemoMode;\ntypedef enum {\n    TIMEATTACK_INVALID = -1,\n    TIMEATTACK_GET_RECORD,\n    TIMEATTACK_SET_RECORD,\n    TIMEATTACK_SET_VISITED,\n} TimeAttackActions;\ntypedef enum {\n    TIMEATTACK_EVENT_DRACULA_DEFEAT,\n    TIMEATTACK_EVENT_ORLOX_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_10_DEFEAT,\n    TIMEATTACK_EVENT_GRANFALOON_DEFEAT,\n    TIMEATTACK_EVENT_MINOTAUR_WEREWOLF_DEFEAT,\n    TIMEATTACK_EVENT_SCYLLA_DEFEAT,\n    TIMEATTACK_EVENT_SLOGRA_GAIBON_DEFEAT,\n    TIMEATTACK_EVENT_HYPPOGRYPH_DEFEAT,\n    TIMEATTACK_EVENT_BEELZEBUB_DEFEAT,\n    TIMEATTACK_EVENT_SUCCUBUS_DEFEAT,\n    TIMEATTACK_EVENT_KARASUMAN_DEFEAT,\n    TIMEATTACK_EVENT_RALPH_GRANT_SYPHA_DEFEAT,\n    TIMEATTACK_EVENT_DEATH_DEFEAT,\n    TIMEATTACK_EVENT_CERBERUS_DEFEAT,\n    TIMEATTACK_EVENT_SAVE_RICHTER,\n    TIMEATTACK_EVENT_MEDUSA_DEFEAT,\n    TIMEATTACK_EVENT_THE_CREATURE_DEFEAT,\n    TIMEATTACK_EVENT_LESSER_DEMON_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_40_DEFEAT,\n    TIMEATTACK_EVENT_AKMODAN_II_DEFEAT,\n    TIMEATTACK_EVENT_DARKWING_BAT_DEFEAT,\n    TIMEATTACK_EVENT_GALAMOTH_DEFEAT,\n    TIMEATTACK_EVENT_FINAL_SAVEPOINT,\n    TIMEATTACK_EVENT_MEET_DEATH,\n    TIMEATTACK_EVENT_GET_HOLYGLASSES,\n    TIMEATTACK_EVENT_MEET_MASTER_LIBRARIAN,\n    TIMEATTACK_EVENT_FIRST_MARIA_MEET,\n    NUM_TIMEATTACK_EVENTS,\n    TIMEATTACK_EVENT_UNUSED_28,\n    TIMEATTACK_EVENT_UNUSED_29,\n    TIMEATTACK_EVENT_UNUSED_30,\n    TIMEATTACK_EVENT_UNUSED_31,\n    TIMEATTACK_EVENT_END,\n    TIMEATTACK_EVENT_INVALID = 0xFF,\n} TimeAttackEvents;\nstruct Entity;\ntypedef struct {\n              s32 x;\n              s32 y;\n} Point32;\ntypedef struct {\n               u8 vabid;\n               u8 prog;\n               u8 note;\n               s8 volume;\n               u8 unk4;\n               u8 tone;\n               u8 unk6;\n} Unkstruct_800BF554;\ntypedef struct {\n               u_long* desc;\n               u_long* data;\n               u16 unk8;\n               u16 index;\n               u16 unkC;\n               u16 unkE;\n               u8 unkArray[0x30];\n} Unkstruct_8006C3C4;\ntypedef struct {\n               char pad0[0x14];\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Unkstruct_8010BF64;\ntypedef struct {\n               s16 sndId;\n               u16 unk02;\n               s16 unk04;\n} SfxRingBufferItem;\ntypedef struct {\n               s32 unk0;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n} Unkstruct_800EA5E4;\ntypedef struct {\n    s32 unk0;\n    s32 unk4;\n    s32 unk8;\n    s32 unkC;\n} Unkstruct_800FDB18;\ntypedef struct Unkstruct_801C6C6C {\n    union {\n        struct {\n            u16 w;\n            u16 x;\n        } c;\n        s32 p;\n    } x;\n    union {\n        struct {\n            u16 h;\n            u16 y;\n        } c;\n        s32 p;\n    } y;\n} Unkstruct_801C6C6C;\ntypedef struct {\n    u16 start;\n    s16 current;\n    s16* coords;\n    s16 unk8;\n} Unkstruct_80102CD8;\ntypedef struct {\n              s16 animSet;\n              s16 unk2;\n              u16 palette;\n              s8 drawMode;\n              char pad_7;\n              s32 unk8;\n} Unkstruct_80180FE0;\ntypedef struct Unkstruct_801C7954 {\n               u16 x1;\n               u16 x0;\n               u16 y2;\n               u16 y0;\n               u16 y3;\n               u16 y1;\n               u16 x3;\n               u16 x2;\n} Unkstruct_801C7954;\ntypedef struct {\n    u8 unk0[7];\n    u8 unk8;\n    u8 pad2[8];\n    u8 unk16[1];\n    u8 pad3[5];\n    u32 unk18;\n} Unkstruct_800ADEF0;\ntypedef struct {\n    u16 palette;\n    u8 unk2;\n} Unkstruct_800AE180;\ntypedef struct {\n                     s32 D_800973F8;\n                     s32 D_800973FC;\n                     s32 unk0;\n                     s32 unk4;\n                     Multi g_zEntityCenter;\n                     s32 unkC;\n                     s32 BottomCornerTextTimer;\n                     s32 BottomCornerTextPrims;\n                     s32 unk18;\n                     s32 unk1C;\n                     s32 unk20;\n                     s32 unk24;\n                     s32 D_80097428[8];\n} unkGraphicsStruct;\ntypedef struct {\n    u8 count;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 w;\n    u8 h;\n    u16 priority;\n    u16 drawMode;\n    s16 unkA;\n    u32 flags;\n} unkStr_8011E4BC;\ntypedef struct {\n    s32 : 32;\n    s16 unk4;\n    s16 unk6;\n    s16 unk8;\n    s16 unkA;\n    s16 unkC;\n    s32 unk10;\n    s32 unk14;\n    s32 unk18;\n} Unkstruct_8012BEF8;\ntypedef struct {\n    u8 childId;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n    u8 unk4;\n    u8 unk5;\n} FactoryBlueprint;\ntypedef struct {\n    s16 xOffset;\n    s16 yOffset;\n    s32 velocityX;\n    s32 velocityY;\n    s16 timerInit;\n    s16 tpage;\n    s16 clut;\n    u8 uBase;\n    u8 vBase;\n} unkStr80154E5C;\ntypedef struct {\n    s32 unk0;\n    s16 unk4;\n} unkstr_800cfe48;\ntypedef struct {\n    f32 x;\n    f32 y;\n} Pos;\ntypedef struct {\n    f32 posX;\n    f32 posY;\n} Camera;\ntypedef struct {\n    unsigned char width;\n    unsigned char height;\n    unsigned short unk2;\n    unsigned char data[0];\n} ImgSrc;\ntypedef struct {\n             u32 gfxOff;\n             u32 ovlOff;\n             u32 ovlLen;\n             u32 vhOff;\n             u32 vhLen;\n             u32 vbLen;\n             u32 unk18;\n             const char* gfxName;\n             const char* ovlName;\n             const char* name;\n             u8 unk28;\n             s8 seqIdx;\n             u16 unk2A;\n} Lba;\ntypedef struct {\n               s16 cursorX;\n               s16 cursorY;\n               s16 cursorW;\n               s16 cursorH;\n               RECT unk1;\n               s16 w;\n               s16 h;\n               s16 unk14;\n               s16 unk16;\n               s16 otIdx;\n               s16 unk1A;\n               u8 unk1C;\n               u8 unk1D;\n} MenuContext;\ntypedef struct {\n              u8 tileLayoutId;\n              u8 tilesetId;\n              u8 objGfxId;\n              u8 objLayoutId;\n} RoomLoadDef;\ntypedef struct {\n    RoomLoadDef* def;\n} RoomLoadDefHolder;\ntypedef struct {\n              u8 left;\n              u8 top;\n              u8 right;\n              u8 bottom;\n              RoomLoadDef load;\n} RoomHeader;\ntypedef struct {\n              u16 x;\n              u16 y;\n              u16 roomId;\n              u16 unk6;\n              u16 stageId;\n} RoomTeleport;\ntypedef struct {\n               s32 x;\n               s32 y;\n               Stages stageId;\n               TimeAttackEvents eventId;\n               s32 unk10;\n} RoomBossTeleport;\ntypedef struct {\n              u16 pressed;\n              s16 previous;\n              u16 tapped;\n              u16 repeat;\n} Pad;\ntypedef struct {\n    u16 duration;\n    u16 unk2;\n} AnimationFrame;\ntypedef struct {\n    s8 unk0;\n    s8 unk2;\n    s8 hitboxWidth;\n    s8 hitboxHeight;\n} FrameProperty;\ntypedef enum {\n    Player_Stand,\n    Player_Walk,\n    Player_Crouch,\n    Player_Fall,\n    Player_Jump,\n    Player_MorphBat,\n    Player_AlucardStuck,\n    Player_MorphMist,\n    Player_HighJump,\n    Player_UnmorphBat,\n    Player_Hit,\n    Player_StatusStone,\n    Player_BossGrab,\n    Player_KillWater,\n    Player_UnmorphMist,\n    Player_SwordWarp,\n    Player_Kill,\n    Player_Unk17,\n    Player_Teleport,\n    Player_FlameWhip,\n    Player_Hydrostorm,\n    Player_ThousandBlades,\n    Player_RichterFourHolyBeasts,\n    Player_Slide,\n    Player_MorphWolf,\n    Player_UnmorphWolf,\n    Player_SlideKick,\n    Player_Unk27,\n    Player_SpellDarkMetamorphosis = 32,\n    Player_SpellSummonSpirit,\n    Player_SpellHellfire,\n    Player_SpellTetraSpirit,\n    Player_Spell36,\n    Player_SpellSoulSteal,\n    Player_Unk38,\n    Player_SpellSwordBrothers,\n    Player_AxearmorStand,\n    Player_AxearmorWalk,\n    Player_AxearmorJump,\n    Player_AxearmorHit,\n    Player_Unk48 = 48,\n    Player_Unk49,\n    Player_Unk50\n} PlayerSteps;\ntypedef struct Entity {\n               f32 posX;\n               f32 posY;\n               s32 velocityX;\n               s32 velocityY;\n               s16 hitboxOffX;\n               s16 hitboxOffY;\n               u16 facingLeft;\n               u16 palette;\n               u8 drawMode;\n               u8 drawFlags;\n               s16 rotX;\n               s16 rotY;\n               s16 rotZ;\n               s16 rotPivotX;\n               s16 rotPivotY;\n               u16 zPriority;\n               u16 entityId;\n               PfnEntityUpdate pfnUpdate;\n               u16 step;\n               u16 step_s;\n               u16 params;\n               u16 entityRoomIndex;\n               s32 flags;\n               s16 unk38;\n               u16 enemyId;\n               u16 hitboxState;\n               s16 hitPoints;\n               s16 attack;\n               s16 attackElement;\n               u16 unk44;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               u8 hitFlags;\n               u8 nFramesInvincibility;\n               s16 unk4A;\n               AnimationFrame* unk4C;\n               u16 animFrameIdx;\n               s16 animFrameDuration;\n               s16 animSet;\n               s16 animCurFrame;\n               s16 stunFrames;\n               u16 unk5A;\n               struct Entity* unk5C;\n               struct Entity* unk60;\n               s32 primIndex;\n               u16 unk68;\n               u16 hitEffect;\n               u8 unk6C;\n               u8 unk6D[11];\n               s32 unk78;\n               Ext ext;\n} Entity;\ntypedef struct {\n               u16 animSet;\n               u16 zPriority;\n               Multi16 unk4;\n               u16 palette;\n               u16 drawFlags;\n               u16 drawMode;\n               u32 unkC;\n               u8* unk10;\n} ObjInit2;\ntypedef struct GpuBuffer {\n                  struct GpuBuffer* next;\n                  DRAWENV draw;\n                  DISPENV disp;\n                  DR_ENV env[0x10];\n                  u_long ot[0x200];\n                  DR_MODE drawModes[0x400];\n                  POLY_GT4 polyGT4[0x300];\n                  POLY_G4 polyG4[0x100];\n                  POLY_GT3 polyGT3[0x30];\n                  LINE_G2 lineG2[0x100];\n                  SPRT_16 sprite16[0x280];\n                  TILE tiles[0x100];\n                  SPRT sprite[0x200];\n} GpuBuffer;\ntypedef struct {\n               u32 drawModes;\n               u32 gt4;\n               u32 g4;\n               u32 gt3;\n               u32 line;\n               u32 sp16;\n               u32 tile;\n               u32 sp;\n               u32 env;\n} GpuUsage;\ntypedef enum {\n    GFX_BANK_NONE,\n    GFX_BANK_4BPP,\n    GFX_BANK_8BPP,\n    GFX_BANK_16BPP,\n    GFX_BANK_COMPRESSED,\n} GfxBankKind;\ntypedef struct {\n               u_long* xy;\n               u_long* wh;\n               u_long* data;\n} GfxEntry;\ntypedef struct {\n    GfxBankKind kind;\n    GfxEntry entries[0];\n} GfxBank;\ntypedef struct {\n              GfxEntry* next;\n              u16 kind;\n              s16 unk6;\n              s16 unk8;\n              s16 unkA;\n} GfxLoad;\ntypedef enum EquipKind {\n    EQUIP_HAND,\n    EQUIP_HEAD,\n    EQUIP_ARMOR,\n    EQUIP_CAPE,\n    EQUIP_ACCESSORY,\n    NUM_EQUIP_KINDS,\n} EquipKind;\ntypedef enum {\n    ITEM_S_SWORD,\n    ITEM_SWORD,\n    ITEM_THROW_1,\n    ITEM_FIST,\n    ITEM_CLUB,\n    ITEM_TWOHAND,\n    ITEM_FOOD,\n    ITEM_BOMB,\n    ITEM_THROW_2,\n    ITEM_SHIELD,\n    ITEM_MEDICINE,\n    ITEM_END,\n} ItemCategory;\ntypedef enum {\n    SUBWPN_NONE,\n    SUBWPN_DAGGER,\n    SUBWPN_AXE,\n    SUBWPN_HOLYWATER,\n    SUBWPN_CROSS,\n    SUBWPN_BIBLE,\n    SUBWPN_STOPWATCH,\n    SUBWPN_REBNDSTONE,\n    SUBWPN_VIBHUTI,\n    SUBWPN_AGUNEA\n} SubWpnID;\ntypedef enum { STAT_STR, STAT_CON, STAT_INT, STAT_LCK } Stats;\ntypedef struct {\n    s32 level;\n    s32 exp;\n    s32 unk8;\n} FamiliarStats;\ntypedef enum {\n    RELIC_SOUL_OF_BAT,\n    RELIC_FIRE_OF_BAT,\n    RELIC_ECHO_OF_BAT,\n    RELIC_FORCE_OF_ECHO,\n    RELIC_SOUL_OF_WOLF,\n    RELIC_POWER_OF_WOLF,\n    RELIC_SKILL_OF_WOLF,\n    RELIC_FORM_OF_MIST,\n    RELIC_POWER_OF_MIST,\n    RELIC_GAS_CLOUD,\n    RELIC_CUBE_OF_ZOE,\n    RELIC_SPIRIT_ORB,\n    RELIC_GRAVITY_BOOTS,\n    RELIC_LEAP_STONE,\n    RELIC_HOLY_SYMBOL,\n    RELIC_FAERIE_SCROLL,\n    RELIC_JEWEL_OF_OPEN,\n    RELIC_MERMAN_STATUE,\n    RELIC_BAT_CARD,\n    RELIC_GHOST_CARD,\n    RELIC_FAERIE_CARD,\n    RELIC_DEMON_CARD,\n    RELIC_SWORD_CARD,\n    RELIC_JP_0,\n    RELIC_JP_1,\n    RELIC_HEART_OF_VLAD,\n    RELIC_TOOTH_OF_VLAD,\n    RELIC_RIB_OF_VLAD,\n    RELIC_RING_OF_VLAD,\n    RELIC_EYE_OF_VLAD,\n    NUM_RELICS,\n} RelicIds;\ntypedef enum {\n    SPELL_DARK_METAMORPHOSIS,\n    SPELL_SUMMON_SPIRIT,\n    SPELL_HELLFIRE,\n    SPELL_TETRA_SPIRIT,\n    SPELL_WOLF_CHARGE,\n    SPELL_SOUL_STEAL,\n    SPELL_WING_SMASH,\n    SPELL_SWORD_BROTHERS,\n    NUM_SPELLS,\n} SpellIds;\ntypedef enum {\n    FAM_STATS_BAT,\n    FAM_STATS_GHOST,\n    FAM_STATS_FAERIE,\n    FAM_STATS_DEMON,\n    FAM_STATS_SWORD,\n    FAM_STATS_YOUSEI,\n    FAM_STATS_NOSE_DEMON,\n    NUM_FAMILIARS\n} FamiliarStatsIds;\ntypedef enum {\n    FAM_ACTIVE_NONE,\n    FAM_ACTIVE_BAT = FAM_STATS_BAT + 1,\n    FAM_ACTIVE_GHOST = FAM_STATS_GHOST + 1,\n    FAM_ACTIVE_FAERIE = FAM_STATS_FAERIE + 1,\n    FAM_ACTIVE_DEMON = FAM_STATS_DEMON + 1,\n    FAM_ACTIVE_SWORD = FAM_STATS_SWORD + 1,\n    FAM_ACTIVE_YOUSEI = FAM_STATS_YOUSEI + 1,\n    FAM_ACTIVE_NOSE_DEMON = FAM_STATS_NOSE_DEMON + 1,\n} FamiliarActiveIds;\ntypedef struct {\n                   u8 relics[30];\n                   u8 spells[NUM_SPELLS];\n                   u8 equipHandCount[169];\n                   u8 equipBodyCount[90];\n                   u8 equipHandOrder[169];\n                   u8 equipBodyOrder[90];\n                   u8 saveName[12];\n                   u32 spellsLearnt;\n                   s32 hp;\n                   s32 hpMax;\n                   s32 hearts;\n                   s32 heartsMax;\n                   s32 mp;\n                   s32 mpMax;\n                   s32 statsBase[4];\n                   s32 statsEquip[4];\n                   s32 statsTotal[4];\n                   u32 level;\n                   u32 exp;\n                   s32 gold;\n                   s32 killCount;\n                   u32 D_80097BF8;\n                   u32 subWeapon;\n                   u32 equipment[7];\n                   u32 attackHands[2];\n                   s32 defenseEquip;\n                   u16 defenseElement;\n                   u16 D_80097C2A;\n                   u16 D_80097C2C;\n                   u16 D_80097C2E;\n                   s32 timerHours;\n                   s32 timerMinutes;\n                   s32 timerSeconds;\n                   s32 timerFrames;\n                   u32 D_80097C40;\n                   FamiliarStats statsFamiliars[NUM_FAMILIARS];\n} PlayerStatus;\ntypedef struct {\n                         s32 cursorMain;\n                         s32 cursorRelic;\n                         s32 cursorEquip;\n                         s32 cursorEquipType[NUM_EQUIP_KINDS];\n                         s32 scrollEquipType[NUM_EQUIP_KINDS];\n                         s32 cursorSpells;\n                         s32 cursorSettings;\n                         s32 cursorCloak;\n                         s32 cursorButtons;\n                         s32 cursorWindowColors;\n                         s32 cursorTimeAttack;\n} MenuNavigation;\ntypedef struct {\n                            u32 buttonConfig[8];\n                            u16 buttonMask[8];\n                            s32 timeAttackRecords[TIMEATTACK_EVENT_END];\n                            s32 cloakColors[6];\n                            s32 windowColors[3];\n                            s32 equipOrderTypes[ITEM_END];\n                            s32 isCloakLiningReversed;\n                            s32 isSoundMono;\n                            s32 D_8003CB00;\n                            s32 D_8003CB04;\n} GameSettings;\ntypedef struct {\n               u8 Magic[2];\n               u8 Type;\n               u8 BlockEntry;\n               u8 Title[64];\n               u8 reserve[28];\n               u8 Clut[32];\n               u8 Icon[3][128];\n} MemcardHeader;\ntypedef struct {\n               char name[12];\n               s32 level;\n               s32 gold;\n               s32 playHours;\n               s32 playMinutes;\n               s32 playSeconds;\n               s32 cardIcon;\n               s32 endGameFlags;\n               s16 stage;\n               u16 nRoomsExplored;\n               u16 roomX;\n               u16 roomY;\n               s32 character;\n               s32 saveSize;\n} SaveInfo;\ntypedef struct {\n                MemcardHeader header;\n                SaveInfo info;\n                PlayerStatus status;\n                MenuNavigation menuNavigation;\n                GameSettings settings;\n                u8 castleFlags[0x300];\n                u8 castleMap[0x800];\n                 s32 rng;\n} SaveData;\ntypedef struct {\n               u8* gfxPage;\n               u8* gfxIndex;\n               u8* clut;\n               u8* collision;\n} TileDefinition;\ntypedef struct {\n               u32 left : 6;\n               u32 top : 6;\n               u32 right : 6;\n               u32 bottom : 6;\n               u8 params : 8;\n} LayoutRect;\ntypedef struct {\n               u16* layout;\n               TileDefinition* tileDef;\n               LayoutRect rect;\n               u16 zPriority;\n               u16 flags;\n} LayerDef;\ntypedef struct {\n    LayerDef* fg;\n    LayerDef* bg;\n} RoomDef;\ntypedef struct {\n               s16 x;\n               s16 y;\n               s16 width;\n               s16 height;\n               s16 clut;\n               s16 tpage;\n               s16 texLeft;\n               s16 texTop;\n               s16 texRight;\n               s16 texBottom;\n} Sprite;\ntypedef struct {\n             s16 flags;\n             s16 offsetx;\n             s16 offsety;\n             s16 width;\n             s16 height;\n             s16 clut;\n             s16 tileset;\n             s16 left;\n             s16 top;\n             s16 right;\n             s16 bottom;\n} SpritePart;\ntypedef struct {\n             u16 count;\n             SpritePart parts[0];\n} SpriteParts;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*HitDetection)(void);\n                   void (*UpdateRoomPosition)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   SpriteParts** spriteBanks;\n                   u_long** cluts;\n                   void* objLayoutHorizontal;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*UpdateStageEntities)(void);\n                   u8** unk2c;\n                   u8** unk30;\n                   s32* unk34;\n                   s32* unk38;\n                   void (*StageEndCutScene)(void);\n} Overlay;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*HitDetection)(void);\n                   void (*UpdateRoomPosition)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   SpriteParts** spriteBanks;\n                   u_long** cluts;\n                   void* objLayoutHorizontal;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*UpdateStageEntities)(void);\n} AbbreviatedOverlay;\ntypedef enum {\n    EFFECT_SOLID = 1 << 0,\n    EFFECT_UNK_0002 = 1 << 1,\n    EFFECT_QUICKSAND = 1 << 2,\n    EFFECT_WATER = 1 << 3,\n    EFFECT_MIST_ONLY = 1 << 4,\n    EFFECT_UNK_0020 = 1 << 5,\n    EFFECT_SOLID_FROM_ABOVE = 1 << 6,\n    EFFECT_SOLID_FROM_BELOW = 1 << 7,\n    EFFECT_UNK_0100 = 1 << 8,\n    EFFECT_UNK_0200 = 1 << 9,\n    EFFECT_UNK_0400 = 1 << 10,\n    EFFECT_UNK_0800 = 1 << 11,\n    EFFECT_UNK_1000 = 1 << 12,\n    EFFECT_UNK_2000 = 1 << 13,\n    EFFECT_UNK_4000 = 1 << 14,\n    EFFECT_UNK_8000 = 1 << 15,\n    EFFECT_NOTHROUGH = EFFECT_SOLID | EFFECT_QUICKSAND,\n    EFFECT_NOTHROUGH_PLUS = EFFECT_SOLID | EFFECT_UNK_0002 | EFFECT_QUICKSAND,\n    EFFECT_UNK_C000 = EFFECT_UNK_8000 | EFFECT_UNK_4000\n} ColliderEffectFlags;\ntypedef struct Collider {\n               u32 effects;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n               s32 unk10;\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Collider;\ntypedef struct XaMusicConfig {\n    u32 cd_addr;\n    s32 unk228;\n    u8 filter_file;\n    u8 filter_channel_id;\n    u8 volume;\n    u8 unk22f;\n    u8 unk230;\n    u8 pad[3];\n} XaMusicConfig;\ntypedef struct {\n               const char* name;\n               s16 hitPoints;\n               s16 attack;\n               u16 attackElement;\n               s16 defense;\n               u16 hitboxState;\n               u16 weaknesses;\n               u16 strengths;\n               u16 immunes;\n               u16 absorbs;\n               u16 level;\n               u16 exp;\n               u16 rareItemId;\n               u16 uncommonItemId;\n               u16 rareItemDropRate;\n               u16 uncommonItemDropRate;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               s32 flags;\n} EnemyDef;\ntypedef struct {\n               s16 attack;\n               s16 heartCost;\n               u16 attackElement;\n               u8 unk6;\n               u8 nFramesInvincibility;\n               u16 stunFrames;\n               u8 anim;\n               u8 blueprintNum;\n               u16 hitboxState;\n               u16 hitEffect;\n               u8 crashId;\n               u8 unk11;\n               u16 entityRoomIndex;\n} SubweaponDef;\ntypedef struct {\n               const char* name;\n               const char* description;\n               s16 attack;\n               s16 defense;\n               u16 element;\n               u8 itemCategory;\n               u8 weaponId;\n               u8 palette;\n               u8 unk11;\n               u8 playerAnim;\n               u8 unk13;\n               u8 unk14;\n               u8 lockDuration;\n               u8 chainLimit;\n               u8 unk17;\n               u8 specialMove;\n               u8 isConsumable;\n               u8 enemyInvincibilityFrames;\n               u8 unk1B;\n               u32 comboSub;\n               u32 comboMain;\n               u16 mpUsage;\n               u16 stunFrames;\n               u16 hitType;\n               u16 hitEffect;\n               u16 icon;\n               u16 iconPalette;\n               u16 criticalRate;\n               u16 unk32;\n} Equipment;\ntypedef struct {\n             const char* name;\n             const char* description;\n             s16 attBonus;\n             s16 defBonus;\n             u8 statsBonus[4];\n             u16 unk10;\n             u16 unk12;\n             u16 unk14;\n             u16 unk16;\n             u16 icon;\n             u16 iconPalette;\n             u16 equipType;\n             u16 unk1E;\n} Accessory;\ntypedef struct {\n               const char* name;\n               const char* combo;\n               const char* description;\n               u8 mpUsage;\n               s8 nFramesInvincibility;\n               s16 stunFrames;\n               s16 hitboxState;\n               s16 hitEffect;\n               s16 entityRoomIndex;\n               u16 attackElement;\n               s16 attack;\n               s16 unk1A;\n} SpellDef;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 unk08;\n               u16 unk0A;\n               s32 unk0C;\n} RelicDesc;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 icon;\n               u16 iconPalette;\n               u16 unk0C;\n               u16 unk0E;\n} RelicOrb;\ntypedef struct {\n               const char* nextCharDialogue;\n               s16 startX;\n               s16 nextLineY;\n               s16 startY;\n               s16 nextCharX;\n               s16 nextLineX;\n               s16 nextCharY;\n               s16 portraitAnimTimer;\n               u16 unk12;\n               u16 clutIndex;\n               u8 nextCharTimer;\n               u8 unk17;\n               Primitive* prim[6];\n               s32 primIndex[3];\n               u16 unk3C;\n               u16 timer;\n               const char* unk40;\n} Dialogue;\ntypedef struct {\n    u32 effects;\n    u32 damageKind;\n    s32 damageTaken;\n    s32 unkC;\n} DamageParam;\ntypedef struct {\n                   Overlay o;\n                   void (*FreePrimitives)(s32);\n                   s16 (*AllocPrimitives)(PrimitiveType type, s32 count);\n                   void (*CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\n                   void (*func_80102CD8)(s32 arg0);\n                   void (*UpdateAnim)(\n        FrameProperty* frameProps, AnimationFrame** anims);\n                   void (*SetSpeedX)(s32 value);\n                   Entity* (*GetFreeEntity)(s16 start, s16 end);\n                   void (*GetEquipProperties)(\n        s32 handId, Equipment* res, s32 equipId);\n                   s32 (*func_800EA5E4)(u32);\n                   void (*LoadGfxAsync)(s32 gfxId);\n                   void (*PlaySfx)(s32 sfxId);\n                   s16 (*func_800EDB58)(s32, s32);\n                   void (*func_800EA538)(s32 arg0);\n                   void (*g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\n                   void (*func_801027C4)(u32 arg0);\n                   void (*func_800EB758)(\n        s16 pivotX, s16 pivotY, Entity* e, u16 flags, POLY_GT4* p, u8 flipX);\n                   Entity* (*CreateEntFactoryFromEntity)(\n        Entity* self, u32 flags, s32 arg2);\n                   bool (*func_80131F68)(void);\n                   DR_ENV* (*func_800EDB08)(POLY_GT4* poly);\n                   u16* (*func_80106A28)(u32 arg0, u16 kind);\n                   void (*func_80118894)(Entity*);\n                   EnemyDef* enemyDefs;\n                   Entity* (*func_80118970)(void);\n                   s16 (*func_80118B18)(\n        Entity* ent1, Entity* ent2, s32 facingLeft);\n                   s32 (*UpdateUnarmedAnim)(s8* frameProps, u16** frames);\n                   void (*PlayAnimation)(s8*, AnimationFrame** frames);\n                   void (*func_80118C28)(s32 arg0);\n                   void (*func_8010E168)(s32 arg0, s16 arg1);\n                   void (*func_8010DFF0)(s32 arg0, s32 arg1);\n                   u16 (*DealDamage)(\n        Entity* enemyEntity, Entity* attackerEntity);\n                   void (*LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\n                   Equipment* equipDefs;\n                   Accessory* accessoryDefs;\n                   void (*AddHearts)(s32 value);\n                   bool (*LoadMonsterLibrarianPreview)(s32 monsterId);\n                   s32 (*TimeAttackController)(\n        TimeAttackEvents eventId, TimeAttackActions action);\n                   void* (*func_8010E0A8)(void);\n                   void (*func_800FE044)(s32, s32);\n                   void (*AddToInventory)(u32 id, EquipKind kind);\n                   RelicOrb* relicDefs;\n                   void (*InitStatsAndGear)(bool debugMode);\n                   s32 (*func_80134714)(s32 arg0, s32 arg1, s32 arg2);\n                   s32 (*func_80134678)(s16 arg0, u16 arg1);\n                   void (*func_800F53A4)(void);\n                   u32 (*CheckEquipmentItemCount)(u32 itemId, u32 equipType);\n                   void (*func_8010BF64)(Unkstruct_8010BF64* arg0);\n                   void (*func_800F1FC4)(s32 arg0);\n                   void (*func_800F2288)(s32 arg0);\n                   void (*func_8011A3AC)(\n        Entity* entity, s32 spellId, s32 arg2, FamiliarStats* out);\n                   s32 (*func_800FF460)(s32 arg0);\n                   s32 (*func_800FF494)(EnemyDef* arg0);\n                   bool (*CdSoundCommandQueueEmpty)(void);\n                   bool (*func_80133950)(void);\n                   bool (*func_800F27F4)(s32 arg0);\n                   s32 (*func_800FF110)(s32 arg0);\n                   s32 (*func_800FD664)(s32 arg0);\n                   s32 (*func_800FD5BC)(DamageParam* arg0);\n                   void (*LearnSpell)(s32 spellId);\n                   void (*DebugInputWait)(const char* str);\n                   void* unused12C;\n                   void* unused130;\n                   void* unused134;\n                   void* unused138;\n                   void* unused13C;\n} GameApi;\ntypedef struct {\n    void (*D_8013C000)(void);\n    void (*D_8013C004)(void);\n    void (*D_8013C008)(void);\n    void (*D_8013C00C)(void);\n} PlayerOvl;\nextern PlayerOvl g_PlOvl;\nextern u8** g_PlOvlAluBatSpritesheet[1];\nextern u8* g_PlOvlSpritesheet[];\nextern void (*g_api_FreePrimitives)(s32);\nextern s16 (*g_api_AllocPrimitives)(PrimitiveType type, s32 count);\nextern void (*g_api_CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\nextern void (*g_api_func_80102CD8)(s32 arg0);\nextern void (*g_api_UpdateAnim)(FrameProperty* frameProps, s32* arg1);\nextern void (*g_api_SetSpeedX)(s32 value);\nextern Entity* (*g_api_GetFreeEntity)(s16 start, s16 end);\nextern void (*g_api_GetEquipProperties)(\n    s32 handId, Equipment* res, s32 equipId);\nextern s32 (*g_api_func_800EA5E4)(u32);\nextern void (*g_api_LoadGfxAsync)(s32);\nextern void (*g_api_PlaySfx)(s32 sfxId);\nextern s16 (*g_api_func_800EDB58)(s32, s32);\nextern void (*g_api_func_800EA538)(s32 arg0);\nextern void (*g_api_g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\nextern Entity* (*g_api_CreateEntFactoryFromEntity)(\n    Entity* self, u32 flags, s32 arg2);\nextern bool (*g_api_func_80131F68)(void);\nextern DR_ENV* (*g_api_func_800EDB08)(POLY_GT4* poly);\nextern u16* (*g_api_func_80106A28)(u16 arg0, u16 kind);\nextern void (*g_api_func_80118894)(Entity*);\nextern EnemyDef* g_api_enemyDefs;\nextern u32 (*g_api_UpdateUnarmedAnim)(s8* frameProps, u16** frames);\nextern void (*g_api_PlayAnimation)(s8*, AnimationFrame** frames);\nextern void (*g_api_func_8010E168)(s32 arg0, s16 arg1);\nextern void (*g_api_func_8010DFF0)(s32 arg0, s32 arg1);\nextern u16 (*g_api_DealDamage)(Entity* enemyEntity, Entity* attackerEntity);\nextern void (*g_api_LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\nextern Equipment* g_api_equipDefs;\nextern Accessory* g_api_g_AccessoryDefs;\nextern void (*g_api_AddHearts)(s32 value);\nextern s32 (*g_api_TimeAttackController)(\n    TimeAttackEvents eventId, TimeAttackActions action);\nextern void* (*g_api_func_8010E0A8)(void);\nextern void (*g_api_func_800FE044)(s32, s32);\nextern void (*g_api_AddToInventory)(u16 id, EquipKind kind);\nextern RelicOrb* g_api_relicDefs;\nextern s32 (*g_api_func_80134714)(s32 arg0, s32 arg1, s32 arg2);\nextern s32 (*g_api_func_80134678)(s16 arg0, u16 arg1);\nextern void (*g_api_func_800F53A4)(void);\nextern u32 (*g_api_CheckEquipmentItemCount)(u32 itemId, u32 equipType);\nextern void (*g_api_func_8010BF64)(Unkstruct_8010BF64* arg0);\nextern void (*g_api_func_800F1FC4)(s32 arg0);\nextern void (*g_api_func_800F2288)(s32 arg0);\nextern void (*g_api_func_8011A3AC)(\n    Entity* entity, s32 spellId, s32 arg2, FamiliarStats* out);\nextern s32 (*g_api_func_800FF460)(s32 arg0);\nextern s32 (*g_api_func_800FF494)(EnemyDef* arg0);\nextern bool (*g_api_CdSoundCommandQueueEmpty)(void);\nextern bool (*g_api_func_80133950)(void);\nextern bool (*g_api_func_800F27F4)(s32 arg0);\nextern s32 (*g_api_func_800FF110)(s32 arg0);\nextern s32 (*g_api_func_800FD664)(s32 arg0);\nextern s32 (*g_api_func_800FD5BC)(DamageParam* arg0);\nextern void (*g_api_LearnSpell)(s32 spellId);\nextern void (*g_api_func_800E2438)(const char* str);\ntypedef struct {\n               u16** frames;\n               s8* frameProps;\n               u16 palette;\n               u16 soundId;\n               u8 frameStart;\n               u8 soundFrame;\n               s16 unused;\n} WeaponAnimation;\ntypedef struct {\n                        u16* layout;\n                        TileDefinition* tileDef;\n                        f32 scrollX;\n                        f32 scrollY;\n                        u32 unused10;\n                        u32 unused14;\n                        u32 order;\n                        u32 flags;\n                        u32 w;\n                        u32 h;\n                        u32 hideTimer;\n                        u32 scrollKind;\n} BgLayer;\ntypedef struct {\n                   u16* fg;\n                   TileDefinition* tileDef;\n                   f32 scrollX;\n                   f32 scrollY;\n                   s32 unused10;\n                   s32 unused14;\n                   s32 order;\n                   u32 flags;\n                   s32 hSize;\n                   s32 vSize;\n                   u32 hideTimer;\n                   s32 left;\n                   s32 top;\n                   s32 right;\n                   s32 bottom;\n                   s32 x;\n                   s32 y;\n                   s32 width;\n                   s32 height;\n                   s32 unk30;\n                   s32 D_800730D4;\n                   BgLayer bg[16];\n} Tilemap;\ntypedef struct {\n                     u16 flags;\n                     u16 unk2;\n                     u16 unk4;\n                     s16 zPriority;\n} FgLayer;\ntypedef struct {\n                   Collider colliders[4];\n                   Collider colliders2[4];\n                   Collider colliders3[14];\n                   s32 padPressed;\n                   s32 padTapped;\n                   s32 padHeld;\n                   u32 padSim;\n                   s32 D_80072EF8;\n                   s32 D_80072EFC;\n                   s16 D_80072F00[16];\n                   s32 pl_vram_flag;\n                   s32 unk04;\n                   s32 unk08;\n                   u32 unk0C;\n                   s32 unk10;\n                   u32 unk14;\n                   s32 unk18;\n                   s32 unk1C;\n                   s32 unk20;\n                   s32 unk24;\n                   s32 unk28;\n                   s32 unk2C;\n                   s32 unk30;\n                   s32 unk34;\n                   s32 unk38;\n                   s32 unk3C;\n                   u16 unk40;\n                   u16 pl_high_jump_timer;\n                   u16 unk44;\n                   u16 unk46;\n                   u16 unk48;\n                   s16 unk4A;\n                   u16 unk4C;\n                   u16 unk4E;\n                   u16 unk50;\n                   u16 unk52;\n                   u16 unk54;\n                   u16 unk56;\n                   u16 unk58;\n                   u16 damageTaken;\n                   u16 unk5C;\n                   u16 unk5E;\n                   u16 unk60;\n                   u16 unk62;\n                   u16 unk64;\n                   u16 unk66;\n                   u16 unk68;\n                   u16 unk6A;\n                   u16 unk6C;\n                   u16 unk6E;\n                   u16 unk70;\n                   u16 unk72;\n                   u32 unk74;\n                   u16 unk78;\n                   u16 unk7A;\n                   u16 unk7C;\n                   u16 unk7E;\n} PlayerState;\ntypedef struct {\n               RECT rect0;\n               RECT rect1;\n               RECT rect2;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 enableColorBlend;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 flipX;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 unk27;\n} PlayerDraw;\ntypedef struct {\n    s16 buttonsCorrect;\n    s16 timer;\n} ButtonComboState;\nextern s32 D_8003925C;\nextern s32 g_IsTimeAttackUnlocked;\nextern u8 g_CastleFlags[0x300];\nextern s32 D_8003C0EC[4];\nextern s32 D_8003C0F8;\nextern s32 D_8003C100;\nextern u16 g_ClutIds[];\nextern s32 D_8003C704;\nextern FgLayer D_8003C708;\nextern s16 D_8003C710;\nextern s16 D_8003C712;\nextern s32 D_8003C728;\nextern s32 D_8003C730;\nextern GameState g_GameState;\nextern s32 D_8003C738;\nextern s32 D_8003C73C;\nextern u32 D_8003C744;\nextern u32 g_RoomCount;\nextern GameApi g_api;\nextern s32 D_8003C8B8;\nextern u32 g_GameTimer;\nextern bool D_8003C908;\nextern s32 g_EquippedWeaponIds[2];\nextern u32 g_Timer;\nextern s32 g_MapCursorTimer;\n                 extern s32 g_PlayableCharacter;\n                 extern u32 D_8003C9A4;\n                 extern MenuNavigation g_MenuNavigation;\n                 extern GameSettings g_Settings;\nextern GpuBuffer g_GpuBuffers[2];\nextern s16 g_GpuBuffers_1_buf_draw_clip_y;\nextern const char g_MemcardSavePath[];\nextern const char aBaslus00067dra[19];\nextern const char g_strMemcardRootPath[];\nextern s32 g_LoadFile;\nextern s32 D_8006BB00;\nextern u8 g_CastleMap[0x800];\nextern s32 D_8006C374;\nextern s32 D_8006C378;\nextern GpuBuffer* g_CurrentBuffer;\nextern Point32 D_8006C384;\nextern Point32 D_8006C38C;\nextern u32 g_CdStep;\nextern s32 D_8006C3AC;\nextern s32 g_backbufferX;\nextern s32 g_backbufferY;\nextern s32 g_IsUsingCd;\nextern Entity* g_CurrentEntity;\nextern Unkstruct_8006C3C4 D_8006C3C4[32];\nextern s32 g_Servant;\nextern u16 g_Clut[0x3000];\nextern u16 D_8006EBCC[0x1000];\nextern u16 D_8006EBE0;\nextern s16 D_800705CC[];\nextern u32 D_80070BCC;\nextern PlayerState g_Player;\nextern Entity* D_psp_091CF3A0;\nextern s32 D_psp_091CF3A4;\nextern void (*D_psp_091CF3A8)(Entity*);\nextern s32 D_psp_091CF3AC;\nextern u16 D_psp_091CF3DC;\nextern GfxLoad g_GfxLoad[0x10];\nextern u32 g_GameStep;\nextern s32 g_ServantLoaded;\nextern Event g_EvSwCardEnd;\nextern Event g_EvSwCardErr;\nextern Event g_EvSwCardTmo;\nextern s32 g_PrevScrollX;\nextern Event g_EvSwCardNew;\nextern s32 g_PrevScrollY;\nextern s32 D_80073080;\nextern Tilemap g_Tilemap;\nextern Entity g_Entities[256];\nextern s32 g_entityDestroyed[18];\nextern Event g_EvHwCardEnd;\nextern Event g_EvHwCardErr;\nextern Event g_EvHwCardTmo;\nextern Event g_EvHwCardNew;\nextern u8 g_Pix[4][128 * 128 / 2];\nextern Primitive g_PrimBuf[0x500];\nextern s32 g_PlayerX;\nextern s32 g_PlayerY;\nextern u32 g_randomNext;\nextern s32 D_80096ED8[];\nextern s8 D_80097B98;\nextern s8 D_80097B99;\nextern s32 D_800973EC;\nextern unkGraphicsStruct g_unkGraphicsStruct;\nextern s32 D_80097448[];\nextern s32 D_80097450;\nextern Pos D_80097488;\nextern Pad g_pads[2];\nextern Stages g_StageId;\nextern s32 D_800974A4;\nextern DR_ENV D_800974AC[16];\nextern s32 g_UseDisk;\nextern s32 D_800978B4;\nextern s32 D_800978C4;\nextern u32 g_MenuStep;\nextern char D_80097902[];\nextern s32 D_80097904;\nextern s32 g_ScrollDeltaX;\nextern s32 g_ScrollDeltaY;\nextern s32 D_80097910;\nextern DemoMode g_DemoMode;\nextern s32 g_LoadOvlIdx;\nextern s32 D_8009791C;\nextern s32 D_80097920;\nextern s32 D_80097924;\nextern s32 D_80097928;\nextern GpuUsage g_GpuUsage;\nextern PlayerStatus g_Status;\nextern s32 D_80097C98;\nextern s32 subWeapon;\nextern u8 g_SaveName[12] ;\nextern u32 D_80097C40[];\nextern PlayerDraw g_PlayerDraw[0x10];\nextern s32 D_800987B4;\nextern s32 D_800987C8;\nextern s32 g_DebugPlayer;\nextern s32 D_80098894;\ntypedef enum ItemSlots {\n    LEFT_HAND_SLOT,\n    RIGHT_HAND_SLOT,\n    HEAD_SLOT,\n    ARMOR_SLOT,\n    CAPE_SLOT,\n    ACCESSORY_1_SLOT,\n    ACCESSORY_2_SLOT,\n    NUM_ITEM_SLOTS,\n} ItemSlots;\ntypedef enum HandItems {\n                ITEM_EMPTY_HAND,\n                ITEM_MONSTER_VIAL_1,\n                ITEM_MONSTER_VIAL_2,\n                ITEM_MONSTER_VIAL_3,\n                ITEM_SHIELD_ROD,\n                ITEM_LEATHER_SHIELD,\n                ITEM_KNIGHT_SHIELD,\n                ITEM_IRON_SHIELD,\n                ITEM_AXELORD_SHIELD,\n                ITEM_HERALD_SHIELD,\n                ITEM_DARK_SHIELD,\n                ITEM_GODDESS_SHIELD,\n                ITEM_SHAMAN_SHIELD,\n                ITEM_MEDUSA_SHIELD,\n                ITEM_SKULL_SHIELD,\n                ITEM_FIRE_SHIELD,\n                ITEM_ALUCARD_SHIELD,\n                ITEM_SWORD_OF_DAWN,\n                ITEM_BASILARD,\n                ITEM_SHORT_SWORD,\n                ITEM_COMBAT_KNIFE,\n                ITEM_NUNCHAKU,\n                ITEM_WERE_BANE,\n                ITEM_RAPIER,\n                ITEM_KARMA_COIN,\n                ITEM_MAGIC_MISSILE,\n                ITEM_RED_RUST,\n                ITEM_TAKEMITSU,\n                ITEM_SHOTEL,\n                ITEM_ORANGE,\n                ITEM_APPLE,\n                ITEM_BANANA,\n                ITEM_GRAPES,\n                ITEM_STRAWBERRY,\n                ITEM_PINEAPPLE,\n                ITEM_PEANUTS,\n                ITEM_TOADSTOOL,\n                ITEM_SHIITAKE,\n                ITEM_CHEESECAKE,\n                ITEM_SHORTCAKE,\n                ITEM_TART,\n                ITEM_PARFAIT,\n                ITEM_PUDDING,\n                ITEM_ICE_CREAM,\n                ITEM_FRANKFURTER,\n                ITEM_HAMBURGER,\n                ITEM_PIZZA,\n                ITEM_CHEESE,\n                ITEM_HAM_AND_EGGS,\n                ITEM_OMELETTE,\n                ITEM_MORNING_SET,\n                ITEM_LUNCH_A,\n                ITEM_LUNCH_B,\n                ITEM_CURRY_RICE,\n                ITEM_GYROS_PLATE,\n                ITEM_SPAGHETTI,\n                ITEM_GRAPE_JUICE,\n                ITEM_BARLEY_TEA,\n                ITEM_GREEN_TEA,\n                ITEM_NATOU,\n                ITEM_RAMEN,\n                ITEM_MISO_SOUP,\n                ITEM_SUSHI,\n                ITEM_PORK_BUN,\n                ITEM_RED_BEAN_BUN,\n                ITEM_CHINESE_BUN,\n                ITEM_DIM_SUM_SET,\n                ITEM_POT_ROAST,\n                ITEM_SIRLION,\n                ITEM_TURKEY,\n                ITEM_MEAL_TICKET,\n                ITEM_NEUTRON_BOMB,\n                ITEM_POWER_OF_SIRE,\n                ITEM_PENTAGRAM,\n                ITEM_BAT_PENTAGRAM,\n                ITEM_SHURIKEN,\n                ITEM_CROSS_SHURIKEN,\n                ITEM_BUFFALO_STAR,\n                ITEM_FLAME_STAR,\n                ITEM_TNT,\n                ITEM_BWAKA_KNIFE,\n                ITEM_BOOMERANG,\n                ITEM_JAVELIN,\n                ITEM_TYRFING,\n                ITEM_NAMAKURA,\n                ITEM_KNUCKLE_DUSTER,\n                ITEM_GLADIUS,\n                ITEM_SCIMITAR,\n                ITEM_CUTLASS,\n                ITEM_SABER,\n                ITEM_FALCHION,\n                ITEM_BROADSWORD,\n                ITEM_BEKATOWA,\n                ITEM_DAMASCUS_SWORD,\n                ITEM_HUNTER_SWORD,\n                ITEM_ESTOC,\n                ITEM_BASTARD_SWORD,\n                ITEM_JEWEL_KNUCKLES,\n                ITEM_CLAYMORE,\n                ITEM_TALWAR,\n                ITEM_KATANA,\n                ITEM_FLAMBERGE,\n                ITEM_IRON_FIST,\n                ITEM_ZWEIHANDER,\n                ITEM_SWORD_OF_HADOR,\n                ITEM_LUMINUS,\n                ITEM_HARPER,\n                ITEM_OBSIDIAN_SWORD,\n                ITEM_GRAM,\n                ITEM_JEWEL_SWORD,\n                ITEM_MORMEGIL,\n                ITEM_FIREBRAND,\n                ITEM_THUNDERBRAND,\n                ITEM_ICEBRAND,\n                ITEM_STONE_SWORD,\n                ITEM_HOLY_SWORD,\n                ITEM_TERMINUS_EST,\n                ITEM_MARSIL,\n                ITEM_DARK_BLADE,\n                ITEM_HEAVEN_SWORD,\n                ITEM_FIST_OF_TULKAS,\n                ITEM_GURTHANG,\n                ITEM_MOURNEBLADE,\n                ITEM_ALUCARD_SWORD,\n                ITEM_MABLUNG_SWORD,\n                ITEM_BADELAIRE,\n                ITEM_SWORD_FAMILIAR,\n                ITEM_GREAT_SWORD,\n                ITEM_MACE,\n                ITEM_MORNINGSTAR,\n                ITEM_HOLY_ROD,\n                ITEM_STAR_FLAIL,\n                ITEM_MOON_ROD,\n                ITEM_CHAKRAM,\n                ITEM_FIRE_BOOMERANG,\n                ITEM_IRON_BALL,\n                ITEM_HOLBEIN_DAGGER,\n                ITEM_BLUE_KNUCKLES,\n                ITEM_DYNAMITE,\n                ITEM_OSAFUNE_KATANA,\n                ITEM_MASAMUNE,\n                ITEM_MURAMASA,\n                ITEM_HEART_REFRESH,\n                ITEM_RUNESWORD,\n                ITEM_ANTIVENOM,\n                ITEM_UNCURSE,\n                ITEM_LIFE_APPLE,\n                ITEM_HAMMER,\n                ITEM_STR_POTION,\n                ITEM_LUCK_POTION,\n                ITEM_SMART_POTION,\n                ITEM_ATTACK_POTION,\n                ITEM_SHIELD_POTION,\n                ITEM_RESIST_FIRE,\n                ITEM_RESIST_THUNDER,\n                ITEM_RESIST_ICE,\n                ITEM_RESIST_STONE,\n                ITEM_RESIST_HOLY,\n                ITEM_RESIST_DARK,\n                ITEM_POTION,\n                ITEM_HIGH_POTION,\n                ITEM_ELIXIR,\n                ITEM_MANNA_PRISM,\n                ITEM_VORPAL_BLADE,\n                ITEM_CRISSAEGRIM,\n                ITEM_YASUTSUNA,\n                ITEM_LIBRARY_CARD,\n                ITEM_ALUCART_SHIELD,\n                ITEM_ALUCART_SWORD,\n                NUM_HAND_ITEMS,\n} HandItems;\ntypedef enum BodyItems {\n               ITEM_NO_ARMOR,\n               ITEM_CLOTH_TUNIC,\n               ITEM_HIDE_CUIRASS,\n               ITEM_BRONZE_CUIRASS,\n               ITEM_IRON_CUIRASS,\n               ITEM_STEEL_CUIRASS,\n               ITEM_SILVER_PLATE,\n               ITEM_GOLD_PLATE,\n               ITEM_PLATINUM_MAIL,\n               ITEM_DIAMOND_PLATE,\n               ITEM_FIRE_MAIL,\n               ITEM_LIGHTNING_MAIL,\n               ITEM_ICE_MAIL,\n               ITEM_MIRROR_CUIRASS,\n               ITEM_SPIKE_BREAKER,\n               ITEM_ALUCARD_MAIL,\n               ITEM_DARK_ARMOR,\n               ITEM_HEALING_MAIL,\n               ITEM_HOLY_MAIL,\n               ITEM_WALK_ARMOR,\n               ITEM_BRILLIANT_MAIL,\n               ITEM_MOJO_MAIL,\n               ITEM_FURY_PLATE,\n               ITEM_DRACULA_TUNIC,\n               ITEM_GODS_GARB,\n               ITEM_AXE_LORD_ARMOR,\n               ITEM_EMPTY_HEAD,\n               ITEM_SUNGLASSES,\n               ITEM_BALLROOM_MASK,\n               ITEM_BANDANNA,\n               ITEM_FELT_HAT,\n               ITEM_VELVET_HAT,\n               ITEM_GOGGLES,\n               ITEM_LEATHER_HAT,\n               ITEM_HOLY_GLASSES,\n               ITEM_STEEL_HELM,\n               ITEM_STONE_MASK,\n               ITEM_CIRCLET,\n               ITEM_GOLD_CIRCLET,\n               ITEM_RUBY_CIRCLET,\n               ITEM_OPAL_CIRCLET,\n               ITEM_TOPAZ_CIRCLET,\n               ITEM_BERYL_CIRCLET,\n               ITEM_CAT_EYE_CIRCLET,\n               ITEM_CORAL_CIRCLET,\n               ITEM_DRAGON_HELM,\n               ITEM_SILVER_CROWN,\n               ITEM_WIZARD_HAT,\n               ITEM_NO_CAPE,\n               ITEM_CLOTH_CAPE,\n               ITEM_REVERSE_CLOAK,\n               ITEM_ELVEN_CLOAK,\n               ITEM_CRYSTAL_CLOAK,\n               ITEM_ROYAL_CLOAK,\n               ITEM_BLOOD_CLOAK,\n               ITEM_JOSEPHS_CLOAK,\n               ITEM_TWILIGHT_CLOAK,\n               ITEM_NO_ACCESSORY,\n               ITEM_MOONSTONE,\n               ITEM_SUNSTONE,\n               ITEM_BLOODSTONE,\n               ITEM_STAUROLITE,\n               ITEM_RING_OF_PALES,\n               ITEM_ZIRCON,\n               ITEM_AQUAMARINE,\n               ITEM_TURQUOISE,\n               ITEM_ONYX,\n               ITEM_GARNET,\n               ITEM_OPAL,\n               ITEM_DIAMOND,\n               ITEM_LAPIS_LAZULI,\n               ITEM_RING_OF_ARES,\n               ITEM_GOLD_RING,\n               ITEM_SILVER_RING,\n               ITEM_RING_OF_VARDA,\n               ITEM_RING_OF_ARCANA,\n               ITEM_MYSTIC_PENDANT,\n               ITEM_HEART_BROACH,\n               ITEM_NECKLACE_OF_J,\n               ITEM_GAUNTLET,\n               ITEM_ANKH_OF_LIFE,\n               ITEM_RING_OF_FEANOR,\n               ITEM_MEDAL,\n               ITEM_TALISMAN,\n               ITEM_DUPLICATOR,\n               ITEM_KINGS_STONE,\n               ITEM_COVENANT_STONE,\n               ITEM_NAUGLAMIR,\n               ITEM_SECRET_BOOTS,\n               ITEM_ALUCART_MAIL,\n               NUM_BODY_ITEMS,\n} BodyItems;\nvoid EntityBreakable(Entity*);\nvoid EntityExplosion(Entity*);\nvoid EntityPrizeDrop(Entity*);\nvoid EntityDamageDisplay(Entity*);\nvoid EntityRedDoor(Entity*);\nvoid EntityIntenseExplosion(Entity*);\nvoid EntitySoulStealOrb(Entity*);\nvoid EntityRoomForeground(Entity*);\nvoid EntityStageNamePopup(Entity*);\nvoid EntityEquipItemDrop(Entity*);\nvoid EntityRelicOrb(Entity*);\nvoid EntityHeartDrop(Entity*);\nvoid EntityEnemyBlood(Entity*);\nvoid EntityMessageBox(Entity*);\nvoid EntityDummy(Entity*);\ntypedef enum { MONO_SOUND, STEREO_SOUND } soundMode;\nenum Sfx {\n    SFX_HARPY_WING_FLAP = 0x601,\n    SFX_RIC_WHIP_RATTLE_A,\n    SFX_RIC_WHIP_RATTLE_B,\n    SFX_RIC_WHIP_RATTLE_C,\n    SFX_RIC_WHIP_RATTLE_D,\n    SFX_RIC_WHIP_RATTLE_E,\n    SFX_STONE_MOVE_A,\n    SFX_STONE_MOVE_B,\n    SFX_STONE_MOVE_C,\n    SFX_WEAPON_SWISH_A,\n    SFX_WEAPON_SWISH_B,\n    SFX_WEAPON_SWISH_C,\n    SFX_METAL_CLANG_A,\n    SFX_METAL_CLANG_B,\n    SFX_METAL_CLANG_C,\n    SFX_METAL_CLANG_D,\n    SFX_METAL_CLANG_E,\n    SFX_METAL_CLANG_F,\n    SFX_UNK_CROW,\n    SFX_ELECTRICITY,\n    SFX_SCRAPE_A,\n    SFX_SCRAPE_B,\n    SFX_SCRAPE_C,\n    SFX_UNK_618,\n    SFX_GLASS_BREAK_A,\n    SFX_GLASS_BREAK_B,\n    SFX_GLASS_BREAK_C,\n    SFX_GLASS_BREAK_D,\n    SFX_GLASS_BREAK_E,\n    SFX_BAT_ECHO_A,\n    SFX_BAT_ECHO_B,\n    SFX_BAT_ECHO_C,\n    SFX_BAT_ECHO_D,\n    SFX_SKULL_BONK,\n    SFX_RIC_RSTONE_TINK,\n    SFX_SMALL_BURST,\n    SFX_ARROW_SHOT_A,\n    SFX_ARROW_SHOT_B,\n    SFX_ARROW_SHOT_C,\n    SFX_ARROW_SHOT_D,\n    SFX_SKELETON_DEATH_A,\n    SFX_SKELETON_DEATH_B,\n    SFX_SKELETON_DEATH_C,\n    SFX_FIRE_SHOT,\n    SFX_WEAPON_STAB_A,\n    SFX_WEAPON_STAB_B,\n    SFX_WEAPON_APPEAR,\n    SFX_UNK_BETA_630,\n    SFX_DEATH_AMBIENCE,\n    SFX_MAGIC_GLASS_BREAK,\n    SFX_UI_CONFIRM,\n    SFX_CANDLE_HIT,\n    SFX_TELEPORT_BANG_A,\n    SFX_TELEPORT_BANG_B,\n    SFX_SUC_APPEAR,\n    SFX_UNK_SCRAPE_A,\n    SFX_UNK_SCRAPE_B,\n    SFX_UNK_SCRAPE_C,\n    SFX_UNK_UI_SELECT,\n    SFX_START_SLAM_A,\n    SFX_START_SLAM_B,\n    SFX_START_SLAM_C,\n    SFX_ANIME_SWORD_A,\n    SFX_ANIME_SWORD_B,\n    SFX_ANIME_SWORD_C,\n    SFX_DOOR_OPEN,\n    SFX_WALL_DEBRIS_A,\n    SFX_WALL_DEBRIS_B,\n    SFX_WALL_DEBRIS_C,\n    SFX_STOMP_HARD_A,\n    SFX_STOMP_HARD_B,\n    SFX_STOMP_HARD_C,\n    SFX_STOMP_HARD_D,\n    SFX_STOMP_HARD_E,\n    SFX_STOMP_SOFT_A,\n    SFX_STOMP_SOFT_B,\n    SFX_SAVE_HEARTBEAT,\n    SFX_BAT_SCREECH,\n    SFX_DOOR_CLOSE_A,\n    SFX_DOOR_CLOSE_B,\n    SFX_UNK_UI_ERROR,\n    SFX_EXPLODE_FAST_A,\n    SFX_EXPLODE_FAST_B,\n    SFX_EXPLODE_A,\n    SFX_EXPLODE_B,\n    SFX_EXPLODE_C,\n    SFX_EXPLODE_D,\n    SFX_EXPLODE_E,\n    SFX_EXPLODE_F,\n    SFX_FM_EXPLODE_A,\n    SFX_FM_EXPLODE_B,\n    SFX_FM_EXPLODE_C,\n    SFX_FM_EXPLODE_D,\n    SFX_EXPLODE_SMALL,\n    SFX_WEAPON_HIT = 0x678,\n    SFX_HEART_PICKUP = 0x67A,\n    SFX_ITEM_PICKUP = 0x67C,\n    SFX_GOLD_PICKUP = 0x6A9,\n};\ntypedef struct {\n              u16 posX;\n              u16 posY;\n              u16 entityId;\n              u16 entityRoomIndex;\n              u16 params;\n} LayoutEntity;\ntypedef struct {\n    u16* layout;\n    TileDefinition* tileDef;\n    u32 params;\n    u16 zPriority;\n    u8 unkE;\n    u8 unkF;\n} MyLayer;\ntypedef struct {\n    MyLayer* fg;\n    MyLayer* bg;\n} MyRoomDef;\nextern LayoutEntity* g_pStObjLayoutHorizontal[];\nextern LayoutEntity* g_pStObjLayoutVertical[];\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern u16 g_ItemIconSlots[0x20];\nvoid InitRoomEntities(s32 objLayoutId);\nvoid UpdateRoomPosition();\nvoid Update(void);\nvoid HitDetection(void);\ns32 Random();\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\nvoid CreateEntityFromLayout(Entity* entity, LayoutEntity* initDesc);\nvoid DestroyEntity(Entity*);\nvoid DestroyEntitiesFromIndex(s16 index);\nvoid MoveEntity();\nvoid FallEntity(void);\nEntity* AllocEntity(Entity* start, Entity* end);\ntypedef struct EntityInit {\n    u16 animSet;\n    u16 animCurFrame;\n    u16 unk5A;\n    u16 palette;\n    u16 enemyId;\n    u16 : 16;\n} EntityInit;\nvoid InitializeEntity(u16 arg0[]);\ntypedef enum {\n    E_NONE,\n    E_BREAKABLE,\n    E_EXPLOSION,\n    E_PRIZE_DROP,\n    E_NUMERIC_DAMAGE,\n    E_RED_DOOR,\n    E_INTENSE_EXPLOSION,\n    E_SOUL_STEAL_ORB,\n    E_ROOM_FOREGROUND,\n    E_DUMMY_09,\n    E_EQUIP_ITEM_DROP,\n    E_DUMMY_0B,\n    E_DUMMY_0C,\n    E_DUMMY_0D,\n    E_DUMMY_0E,\n    E_DUMMY_0F,\n    E_DUMMY_10,\n    E_ID_14 = 0x14,\n    E_ID_15,\n    E_ID_26 = 0x26,\n    E_SECRET_BUTTON = 0x28,\n    E_SECRET_STAIRS = 0x29,\n} EntityIDs;\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\ns32 GetSideToPlayer();\nvoid MoveEntity();\nvoid SetStep(u8);\nvoid EntityExplosion(Entity*);\nvoid EntityUnkId14(Entity* entity);\nvoid EntityUnkId15(Entity* entity);\nextern const char* D_801A7984;\nextern const char* D_801A7990;\nextern const char* D_801A799C;\nextern s8 c_HeartPrizes[10];\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern bool g_isSecretStairsButtonPressed;\nextern bool g_isDraculaFirstFormDefeated;\nextern u16 D_80180574[];\nextern u16 g_InitializeEntityData0[];\nextern u16 D_80180598[];\nextern u16 g_eInitGeneric2[];\nextern u16 D_801805D4[];\nextern u16 D_801805E0[];\nextern u16 D_801805EC[];\nextern u16 D_80180604[];\nextern u16 D_80180610[];\nextern u16 D_8018061C[];\nextern u16 D_80180628[];\nextern ObjInit2 D_80180638[];\nextern s32 D_801806D0[];\nextern u8 D_801806F8[];\nextern u8 D_80180704[];\nextern u16 D_80180710[];\nextern s16 D_80180724[];\nextern s16 D_80180738[];\nextern s8 D_8018074C[];\nextern s16 D_80180758[];\nextern u8 D_80180770[];\nextern u8 D_80180830[];\nextern u8 D_8018083C[];\nextern u8 D_8018084C[];\nextern u8 D_8018085C[];\nextern u8 D_80180864[];\nextern u8 D_8018086C[];\nextern u8 D_8018087C[];\nextern u8 D_80180884[];\nextern u8 D_8018088C[];\nextern u8 D_80180894[];\nextern Point16 D_801808A0[];\nextern u16 D_801808B0[];\nextern s16 D_801808F8[];\nextern s32 D_80180908;\nextern s32 D_80180910;\nextern u8 D_80180914[];\nextern u8 D_80180924[];\nextern u8 D_80180934[];\nextern u8 D_80180944[];\nextern u8 D_80180954[];\nextern u8 D_80180964[];\nextern u8 D_8018097C[];\nextern u8 D_801809A4[];\nextern u8 D_80180A0C[];\nextern u8 D_80180A20[];\nextern u8 D_80180A2C[];\nextern u8 D_80180AA4[];\nextern u8 D_80180AB0[];\nextern u8 D_80180AC8[];\nextern u8 D_80180AD4[];\nextern u8 D_80180AEC[];\nextern u8 D_80180AFC[];\nextern u8 D_80180B20[];\nextern u8 D_80180B48[];\nextern u8 D_80180B58[];\nextern u8 D_80180B60[];\nextern u8 D_80180B80[];\nextern u8 D_80180BA0[];\nextern u8 D_80180BB8[];\nextern u8 D_80180BCC[];\nextern u8 D_80180BDC[];\nextern u16 D_80180A48[];\nextern Point16 D_80180A58[];\nextern u16 D_80180BE4[];\nextern s16 D_801810F4[];\nextern Point16 D_80181108[];\nextern s32 D_80181148;\nextern u32 D_8018114C;\nextern s16 D_80181150[];\nextern s16 D_8018129C[];\nextern u8 D_801813E8;\nextern u8 D_801814A8;\nextern u16 g_testCollEnemyLookup[];\nextern u8 g_testColluCoords[];\nextern u8 g_testCollvCoords[];\nextern u16 g_testCollElementLookup[10];\nextern u8 g_testColliFrames[10];\nextern u16 D_80181CAC[];\nextern u16 D_80181CDC[];\nextern u32 D_80181CF0[];\nextern s8 D_801A7B7C;\nextern Point32 D_801BEB64[];\nextern s32 D_801C2578;\nextern u32 D_801C257C;\nextern s32 D_801C2578;\nextern s16 D_80181990[];\nextern u16 g_InitializeData0[];\nextern u16 D_80181D74[];\nextern s16 D_80181E3C[];\nextern s16 D_80181E3E[];\nextern s16 D_80181EB0[];\nextern u32 D_80181EC0[];\nextern u16 D_80181F04[];\nextern u8 D_801824CC[];\nextern s8 D_801A7BDC;\nextern Point32 D_801BEB64[];\nextern s32 D_801C24C8;\nextern s16 D_801C24D4;\nextern s16 D_801C24D6;\nextern s16 D_801C24D8;\nextern s16 D_801C24DA;\nextern s16 D_801C24DC;\nextern s8 D_801C24DE;\nextern s8 D_801C24DF;\nextern Primitive* D_801C24E0;\nextern s32 D_801C24E4[];\nextern s32 D_801C2578;\nextern s32 D_801C2580;\nextern u16 g_ESoulStealOrbAngles[];\nextern s16 g_ESoulStealOrbSprt[];\nextern u8 g_ESoulStealOrbAnim[];\nextern u8 D_80180784[];\nextern u8 D_80180788[];\nextern u16 D_8018078C[];\nextern u16 D_80180790[];\nextern u16 D_80180794[];\nextern s16 D_80180798[];\nextern const char D_801829D8[];\nextern s32 D_801C24C8;\nextern s32 D_801C2504;\nextern u32 D_801C257C;\nextern s32 D_801C2580;\nextern Dialogue g_Dialogue;\n\nvoid SetWeaponProperties(Entity* sel, s32 kind);\nvoid SetSpriteBank1(SpriteParts* animset);\nvoid SetSpriteBank2(SpriteParts* animset);\nvoid EntityWeaponAttack(Entity* self);\nvoid DestroyEntityWeapon(bool arg0);\n\nvoid LoadWeaponPalette(s32 clutIndex);\ns32 func_ptr_80170004(Entity* self);\nvoid func_ptr_80170008(Entity* self);\nvoid func_ptr_8017000C(Entity* self);\ns32 func_ptr_80170010(Entity* self);\ns32 func_ptr_80170014(Entity* self);\nint GetWeaponId(void);\nvoid EntityWeaponShieldSpell(Entity* self);\nvoid func_ptr_80170024(Entity* self);\nvoid func_ptr_80170028(Entity* self);\nvoid WeaponUnused2C(void);\nvoid WeaponUnused30(void);\nvoid WeaponUnused34(void);\nvoid WeaponUnused38(void);\nvoid WeaponUnused3C(void);\n\nvoid DestroyEntity(Entity* entity);\nvoid DecelerateX(s32 amount);\nvoid DecelerateY(s32 amount);\nvoid SetSpeedX(s32 speed);\n\nextern SpriteParts g_Animset[];\nextern s32 g_HandId;\n\n#define NUM_SPU_CHANNELS 24\n\nvoid InterruptCallback(s32, s32);\nvoid _SpuInit(s32);\ns32 _spu_read(s32 arg0, s32 arg1);\nvoid _spu_FiDMA();\n\nextern s32 D_80033098;\nextern s32 _spu_EVdma;\nextern s32 _spu_isCalled;\nextern s32 _spu_inTransfer;\n\nextern s32 D_8003355C;\nextern s32 D_80033560;\nextern s8* D_80033564;\nextern s32 _spu_mem_mode_plus;\n\ntypedef struct tagSpuMalloc {\n    u32 addr;\n    u32 size;\n} SPU_MALLOC;\n\nextern s32 D_80033550;\nextern void (* volatile _spu_transferCallback)();\nextern s32 _spu_inTransfer;\n\nvoid _SpuCallback(s32 arg0);\nextern void (* volatile _spu_IRQCallback)();\n\ns32 SpuSetAnyVoice(s32 on_off, u32 bits, s32 addr1, s32 addr2);\n\ns32 _spu_t(s32, ...);\ns32 _spu_writeByIO(u8*, s32);\nextern s32 _spu_transMode;\nextern u16 _spu_tsa;\n\nu32 _spu_FsetRXXa(s32 arg0, u32 arg1);\ns32 _spu_write(u8*, u32);\nextern s32 _spu_inTransfer;\n\nvoid _SpuSetVoiceAttr(SpuVoiceAttr* arg, s32, s32, s32);\n\nstruct rev_param_entry {\n    u32 flags;\n    u16 dAPF1;\n    u16 dAPF2;\n    u16 vIIR;\n    u16 vCOMB1;\n    u16 vCOMB2;\n    u16 vCOMB3;\n    u16 vCOMB4;\n    u16 vWALL;\n    u16 vAPF1;\n    u16 vAPF2;\n    u16 mLSAME;\n    u16 mRSAME;\n    u16 mLCOMB1;\n    u16 mRCOMB1;\n    u16 mLCOMB2;\n    u16 mRCOMB2;\n    u16 dLSAME;\n    u16 dRSAME;\n    u16 mLDIFF;\n    u16 mRDIFF;\n    u16 mLCOMB3;\n    u16 mRCOMB3;\n    u16 mLCOMB4;\n    u16 mRCOMB4;\n    u16 dLDIFF;\n    u16 dRDIFF;\n    u16 mLAPF1;\n    u16 mRAPF1;\n    u16 mLAPF2;\n    u16 mRAPF2;\n    u16 vLIN;\n    u16 vRIN;\n};\n\ntypedef struct tagSpuVoiceRegister {\n    SpuVolume volume; // 0-2\n    u16 pitch;        // 4\n    u16 addr;         // 6\n    u16 adsr[2];      // 8-A\n    u16 volumex;      // C\n    u16 loop_addr;    // E\n} SPU_VOICE_REG;      // 16 bytes\n\ntypedef struct tagSpuControl {\n    SPU_VOICE_REG voice[24];\n    SpuVolume main_vol; // 180\n    SpuVolume rev_vol;  // 184\n    // bit flags\n    u16 key_on[2];       // 188\n    u16 key_off[2];      // 18C\n    u16 chan_fm[2];      // 190\n    u16 noise_mode[2];   // 194\n    u16 rev_mode[2];     // 198\n    u32 chan_on;         // 19C\n    u16 unk;             // 1A0\n    u16 rev_work_addr;   // 1A2\n    u16 irq_addr;        // 1A4\n    u16 trans_addr;      // 1A6\n    u16 trans_fifo;      // 1A8\n    u16 spucnt;          // 1AA SPUCNT\n    u16 data_trans;      // 1AC\n    u16 spustat;         // 1AE SPUSTAT\n    SpuVolume cd_vol;    // 1B0\n    SpuVolume ex_vol;    // 1B4\n    SpuVolume main_volx; // 1B8\n    SpuVolume unk_vol;   // 1BC\n\n    u16 dAPF1; // Starting at 0x1F801DC0\n    u16 dAPF2;\n    u16 vIIR;\n    u16 vCOMB1;\n    u16 vCOMB2;\n    u16 vCOMB3;\n    u16 vCOMB4;\n    u16 vWALL;\n    u16 vAPF1;\n    u16 vAPF2;\n    u16 mLSAME;\n    u16 mRSAME;\n    u16 mLCOMB1;\n    u16 mRCOMB1;\n    u16 mLCOMB2;\n    u16 mRCOMB2;\n    u16 dLSAME;\n    u16 dRSAME;\n    u16 mLDIFF;\n    u16 mRDIFF;\n    u16 mLCOMB3;\n    u16 mRCOMB3;\n    u16 mLCOMB4;\n    u16 mRCOMB4;\n    u16 dLDIFF;\n    u16 dRDIFF;\n    u16 mLAPF1;\n    u16 mRAPF1;\n    u16 mLAPF2;\n    u16 mRAPF2;\n    u16 vLIN;\n    u16 vRIN;\n} SPU_RXX;\nunion SpuUnion {      \n    SPU_RXX rxxnv;    \n    volatile SPU_RXX rxx;\n    volatile u16 raw[0x100];  \n};\n\nextern u16 _spu_voice_centerNote[];	1	\N	c873c26f9624a0e8b478018547a2bac9eb252acc5c843a242e63fed31b65c129	SpuGetVoiceAttr	ps1	9610		SpuGetVoiceAttr	24600	[]	f	[]	\N	\N
cY7cP	2024-08-20 22:15:16.202318+00	2024-08-20 22:16:04.41329+00	gcc2.6.3-psx	-O2 -G0 -funsigned-char -gcoff -Wa,--expand-div --no-builtin	extern u8 PLAYER_drawFlags;\nextern u8 PLAYER_ext_generic_unkAC;\nextern u16 PLAYER_facingLeft;\nextern u16 PLAYER_posX_i_hi;\nextern u16 PLAYER_posY_i_hi;\nextern u16 PLAYER_zPriority;\nextern u16 g_Player_unk46;\n\nvoid func_ptr_80170008(Entity* self) {\n    Primitive* var_s2;\n    Primitive* var_s2_2;\n    s16 temp_s0_2;\n    s16 temp_s0_4;\n    s16 temp_s3;\n    s16 temp_v0;\n    s16 temp_v0_2;\n    s16 temp_v0_3;\n    s16 temp_v1_2;\n    s32 temp_s0;\n    s32 temp_s0_3;\n    s32 var_s0;\n    s32 var_s0_2;\n    s32 var_s1;\n    s32 var_s1_2;\n    s32 var_v1;\n    u16 temp_s4;\n    u16 temp_s5;\n    u16 temp_v1;\n    u32 temp_s7;\n    u8 var_s6;\n\n    if (((u32) (PLAYER_ext_generic_unkAC - 0x41) < 7U) && (g_Player_unk46 != 0)) {\n        var_v1 = 0xC;\n        if (PLAYER_facingLeft != 0) {\n            var_v1 = -0xC;\n        }\n        self->posX.i.hi = var_v1 + PLAYER_posX_i_hi;\n        self->posY.i.hi = PLAYER_posY_i_hi - 0x1A;\n        if (PLAYER_drawFlags & 2) {\n            self->posY.i.hi = PLAYER_posY_i_hi - 0x1F;\n        }\n        temp_v1 = self->step;\n        switch (temp_v1) {                          /* irregular */\n        case 0:\n            temp_v0 = g_api_AllocPrimitives(PRIM_LINE_G2, 0x10);\n            self->primIndex = (s32) temp_v0;\n            if (temp_v0 != -1) {\n                var_s1 = 0;\n                self->flags = 0x860000;\n                var_s2 = &g_PrimBuf[self->primIndex];\n                var_s0 = 0 << 0x18;\n                do {\n                    temp_s0 = var_s0 >> 0x10;\n                    var_s2->u0 = ((s32) (rcos(temp_s0) * 2) >> 8) + 0x20;\n                    var_s1 += 1;\n                    temp_s0_2 = var_s1 << 8;\n                    var_s2->v0 = -0x20 - ((s32) (rsin(temp_s0) * 2) >> 8);\n                    var_s2->u1 = ((s32) (rcos((s32) temp_s0_2) * 2) >> 8) + 0x20;\n                    var_s2->v1 = -0x20 - ((s32) (rsin((s32) temp_s0_2) * 2) >> 8);\n                    if ((u8) var_s2->v0 < 4U) {\n                        var_s2->v0 = 0xFF;\n                    }\n                    if ((u8) var_s2->v1 < 4U) {\n                        var_s2->v1 = 0xFF;\n                    }\n                    var_s2->u3 = 0x20;\n                    var_s2->u2 = 0x20;\n                    var_s2->v3 = 0xE0;\n                    var_s2->v2 = 0xE0;\n                    var_s2->g2 = 0x7F;\n                    var_s2->g3 = 0x7F;\n                    var_s2->clut = 0x15F;\n                    var_s2->tpage = 0x1A;\n                    var_s2->g1 = 0;\n                    var_s2->b1 = 0;\n                    var_s2->r1 = 0;\n                    var_s2->g0 = 0;\n                    var_s2->b0 = 0;\n                    var_s2->r0 = 0;\n                    var_s2->r3 = 0xFF;\n                    var_s2->r2 = 0xFF;\n                    var_s2->b3 = 0;\n                    var_s2->b2 = 0;\n                    var_s2->type = 4;\n                    var_s2->drawMode = 0x335;\n                    var_s2->priority = PLAYER_zPriority + 2;\n                    var_s2 = var_s2->next;\n                    var_s0 = var_s1 << 0x18;\n                } while (var_s1 < 0x10);\n                self->ext.timer.t = 4;\n                self->ext.factory.unk7E = 0x19;\n                if (self->params & 0x7F00) {\n                    self->ext.factory.unk7E = 0x28;\n                }\n                self->step += 1;\n            default:\nblock_23:\n                temp_v1_2 = self->ext.factory.unk7E;\n                var_s6 = 0x80;\n                if (temp_v1_2 < 8) {\n                    var_s6 = temp_v1_2 * 0x10;\n                }\n                var_s1_2 = 0;\n                temp_s7 = (u32) (var_s6 & 0xFF) >> 1;\n                temp_s5 = (u16) self->posX.i.hi;\n                temp_s4 = (u16) self->posY.i.hi;\n                temp_s3 = self->ext.timer.t;\n                var_s2_2 = &g_PrimBuf[self->primIndex];\n                var_s0_2 = 0 << 0x18;\n                do {\n                    temp_s0_3 = var_s0_2 >> 0x10;\n                    var_s2_2->x3 = (s16) temp_s5;\n                    var_s2_2->x2 = (s16) temp_s5;\n                    var_s2_2->y3 = (s16) temp_s4;\n                    var_s2_2->y2 = (s16) temp_s4;\n                    var_s2_2->r3 = var_s6;\n                    var_s2_2->r2 = var_s6;\n                    var_s2_2->g3 = (u8) temp_s7;\n                    var_s2_2->g2 = (u8) temp_s7;\n                    var_s2_2->x0 = temp_s5 + ((s32) ((rcos(temp_s0_3) >> 4) * temp_s3) >> 8);\n                    var_s1_2 += 1;\n                    temp_s0_4 = var_s1_2 << 8;\n                    var_s2_2->y0 = temp_s4 - ((s32) ((rsin(temp_s0_3) >> 4) * temp_s3) >> 8);\n                    var_s2_2->x1 = temp_s5 + ((s32) ((rcos((s32) temp_s0_4) >> 4) * temp_s3) >> 8);\n                    var_s2_2->y1 = temp_s4 - ((s32) ((rsin((s32) temp_s0_4) >> 4) * temp_s3) >> 8);\n                    var_s2_2 = var_s2_2->next;\n                    var_s0_2 = var_s1_2 << 0x18;\n                } while (var_s1_2 < 0x10);\n                return;\n            }\n            goto block_22;\n        case 1:\n            temp_v0_2 = self->ext.timer.t;\n            if (temp_v0_2 < 0x28) {\n                self->ext.timer.t = temp_v0_2 + 6;\n            }\n            temp_v0_3 = (u16) self->ext.factory.unk7E - 1;\n            self->ext.factory.unk7E = temp_v0_3;\n            if ((temp_v0_3 << 0x10) == 0) {\n                goto block_22;\n            }\n            goto block_23;\n        }\n    } else {\nblock_22:\n        DestroyEntity(self);\n    }\n}\n/* Warning: struct draculaPrimitive is not defined (only forward-declared) */\n	#define MU_DEATH_BALLAD 0x334\n#define NA_VO_DEATH_LAUGH 0x7A1\n#define PAL_DRA(x) (x)\n#define EvSpNEW 0x2000\n#define EvSpINT 0x0002\n#define PLAYER_STATUS_AXEARMOR 0x01000000\n#define CdlModeSpeedDouble 1\n#define CdlDataEnd 0x04\n#define PLAYER_STATUS_UNK1000 0x1000\n#define HwCARD_0 (DescHW | 0x12)\n#define HwCARD_1 (DescHW | 0x13)\n#define FWLOCK 0x0020\n#define SPU_VOICE_ADSR_DR (0x01 << 12)\n#define SAVE_FLAG_REPLAY (2)\n#define SE_INTRO_WIND_QUIET 0x32C\n#define MU_MOONLIGHT_NOCTURNE 0x340\n#define gte_stsxy(r0) \n#define KERNEL_H \n#define MU_SILENCE 0x33D\n#define RCntMdFR 0x0000\n#define SS_IMEDIATE 0\n#define PAL_TERMINATE() ((u_long*)-1)\n#define VERSION_US \n#define SFX_UNK_647 0x647\n#define PAD_LEFT 0x8000\n#define setlen(p,_len) (((P_TAG*)(p))->len = (u_char)(_len))\n#define MU_CRYSTAL_TEARDROPS_LOOP_POINT 0x30C\n#define EvSpACK 0x0010\n#define NA_VO_SU_NO_SCREAM 0x87B\n#define SS_TICK120 3\n#define MU_ABANDONED_PIT_LOOP_POINT 0x31A\n#define NA_SE_SU_CHARGE_PINKBALLS 0x6E2\n#define CdlForward 0x04\n#define SPAD(x) ((s32*)SP(x * sizeof(s32)))\n#define CD_SOUND_COMMAND_8 8\n#define FLAG_UNK_10000000 0x10000000\n#define NA_SE_EN_SPITTLEBONE_ACID_SPLAT 0x73C\n#define getaddr(p) (u_long)(((P_TAG*)(p))->addr)\n#define CdlGetTN 0x13\n#define MU_MARBLE_GALLERY 0x30D\n#define FIX(x) ((s32)((x) * 65536.0))\n#define HEART_VESSEL_INCREASE 5\n#define PLAYER_STATUS_UNK800000 0x800000\n#define JP_VO_YANAMI_JYOUJI_MESSAGE 0x34B\n#define OTSIZE 0x200\n#define EvStACTIVE 0x2000\n#define LIBAPI_H \n#define PRIMITIVE_H \n#define SFX_UNK_6B1 0x6B1\n#define SFX_UNK_6B2 0x6B2\n#define FLAG_UNK_400000 0x400000\n#define EvSpERROR 0x8000\n#define WEAPON_0_END (WEAPON_1_START - 1)\n#define NAMEOF(var) #var\n#define FLAG_UNK_800 0x800\n#define SPU_VOICE_ADSR_RR (0x01 << 14)\n#define JP_VO_SATOU_MASAHARU_MESSAGE 0x348\n#define blendMode drawMode\n#define SPU_VOICE_ADSR_AMODE (0x01 << 8)\n#define NA_SE_PL_TELEPORT 0x8BA\n#define RCntMdSC 0x0001\n#define SFX_UNK_6A0 0x6A0\n#define RCntMdSP 0x0000\n#define PLAYER_STATUS_UNK10 0x10\n#define COLOR_LEN ((COLOR_BPP) / 8)\n#define NA_SE_EN_BONE_SCIMITAR_SWORD_SLASH 0x66D\n#define MU_FINAL_TOCATTA 0x338\n#define SS_TICKMODE_MAX 6\n#define DRAW_UNK_100 0x100\n#define JP_VO_YOKOYAMA_CHISA_MESSAGE 0x34A\n#define CD_SOUND_COMMAND_14 14\n#define COMMON_H \n#define CD_SOUND_COMMAND_16 16\n#define PLAYER_STATUS_UNK40 0x40\n#define SPU_VOICE_SAMPLE_NOTE (0x01 << 6)\n#define CdlReadN 0x06\n#define MaxEntityCount 32\n#define PLAYER_STATUS_POISON 0x00004000\n#define CdlNop 0x01\n#define JP_VO_SH_GROAN 0x52E\n#define ALIGNED4 \n#define FLAG_UNK_4 0x4\n#define NA_VO_RI_IMPRESSIVE_ESCAPE 0x3DB\n#define JP_VO_YANADA_KIYOYUKI_MESSAGE 0x346\n#define HwCPU (DescHW | 0x10)\n#define MU_RAINBOW_CEMETERY_LOOP_POINT 0x308\n#define getcode(p) (u_char)(((P_TAG*)(p))->code)\n#define FIX_FRAC(x) (*(s16*)&(x))\n#define WARNF(...) _log(LOG_LEVEL_W, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define gte_ldv0(r0) \n#define gte_ldv3(r0,r1,r2) \n#define NA_SE_EV_WATER_SPLASH 0x7C2\n#define PAD_TRIANGLE 0x0010\n#define MU_THE_TRAGIC_PRINCE 0x311\n#define FONT_SPACE 4\n#define DISP_ALL_H 240\n#define EvSpPERROR 0x8001\n#define NA_SE_EN_GAIBON_FLAME 0x691\n#define EvMdNOINTR 0x2000\n#define MEMCPY memcpy\n#define gte_SetRotMatrix(r0) \n#define HwCNTL (DescHW | 0x08)\n#define OT_TYPE u_long\n#define DEMO_MAX_LEN 0x2000\n#define MU_CRYSTAL_TEARDROPS 0x30B\n#define MU_REQUIEM_FOR_THE_GODS_LOOP_POINT 0x306\n#define LIBGS_H \n#define DRAW_UNK_40 0x40\n#define MU_METAMORPHOSIS 0x327\n#define FLAG_UNK_08000000 0x08000000\n#define SFX_RICHTER_ATTACK_HIT 0x705\n#define getTPage(tp,abr,x,y) ((GetGraphType() == 1 || GetGraphType() == 2) ? ((((tp) & 0x3) << 9) | (((abr) & 0x3) << 7) | (((y) & 0x300) >> 3) | (((x) & 0x3ff) >> 6)) : ((((tp) & 0x3) << 7) | (((abr) & 0x3) << 5) | (((y) & 0x100) >> 4) | (((x) & 0x3ff) >> 6) | (((y) & 0x200) << 2)))\n#define __asm__(...) \n#define USE_MICRO_OPTIMIZATIONS 0\n#define LAYER_SEMI_TRANS 0x80\n#define JP_VO_SOSHITE 0x342\n#define PAL_UNK_OP3 3\n#define CdlSeekL 0x15\n#define CdlSeekP 0x16\n#define PAD_L1 0x0004\n#define PAD_L3 0x0200\n#define MU_DOOR_OF_HOLY_SPIRITS 0x315\n#define NA_SE_EN_SLOGRA_HURT 0x70C\n#define DISP_TITLE_H DISP_ALL_H\n#define LAYER_TPAGE_ALT 0x100\n#define setLineG4(p) setlen(p, 9), setcode(p, 0x5c), (p)->pad = 0x55555555\n#define JP_VO_KONAMI_5 0x350\n#define SET_SOUNDMODE_MONO 5\n#define MU_LOST_PAINTING 0x301\n#define setSprt8(p) setlen(p, 3), setcode(p, 0x74)\n#define TILE_SIZE 16\n#define STRINGIFY_(x) #x\n#define SFX_THUNDER 0x665\n#define MU_TOWER_OF_MIST 0x313\n#define NA_SE_EN_SLOGRA_SPEAR_PROJECTILE 0x690\n#define SS_SOFF 0\n#define NA_SE_EN_SLOGRA_BEAK_ATTACK 0x6C8\n#define FLT(x) ((s32)((x) * 4096.0))\n#define PAD_SELECT 0x0100\n#define EvSpUNKNOWN 0x0200\n#define PAD_R1 0x0008\n#define PAD_R2 0x0002\n#define GAMEBUTTONS (~(PAD_START | PAD_SELECT))\n#define SE_UNK_TE1_692 0x692\n#define SFX_UNK_668 0x668\n#define SS_REV 1\n#define NA_SE_VO_AXE_KNIGHT_SCREAM 0x767\n#define FLAG_UNK_04000000 0x04000000\n#define MENUCHAR(x) ((x) - 0x20)\n#define setXY0(p,_x0,_y0) (p)->x0 = (_x0), (p)->y0 = (_y0)\n#define setXY2(p,_x0,_y0,_x1,_y1) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1)\n#define setXY4(p,_x0,_y0,_x1,_y1,_x2,_y2,_x3,_y3) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2), (p)->x3 = (_x3), (p)->y3 = (_y3)\n#define ASM_RODATA __asm__(".section .rodata")\n#define EvSpCZ 0x0001\n#define SS_TICKVSYNC 5\n#define NA_VO_RI_DIE_MONSTER 0x358\n#define SPU_VOICE_ADSR_ADSR2 (0x01 << 18)\n#define gte_nclip() \n#define setPolyFT3(p) setlen(p, 7), setcode(p, 0x24)\n#define setPolyFT4(p) setlen(p, 9), setcode(p, 0x2c)\n#define FLAG_UNK_10000 0x10000\n#define LIBGTE_H \n#define MAX_SPRT_COUNT 0x200\n#define MU_WOOD_CARVING_PARTITA 0x309\n#define STAGE_WIDTH 256\n#define CdlModeSize0 0x10\n#define ELEMENT_STONE 0x200\n#define NUM_AVAIL_RELICS (NUM_RELICS - 2)\n#define SS_SEQ_TABSIZ 176\n#define DescEV 0xf1000000\n#define EvStUNUSED 0x0000\n#define NA_SE_EV_CLOCK_TICK 0x6A1\n#define setSprt16(p) setlen(p, 3), setcode(p, 0x7c)\n#define JP_VO_SH_SONO_TEIDO 0x530\n#define SE_UI_MAIN_MENU_SELECT 0x67D\n#define CdlModeAP 0x02\n#define SFX_UNK_641 0x641\n#define DescHW 0xf0000000\n#define MU_BLOOD_RELATIONS_LOOP_POINT 0x337\n#define SAVE_FLAG_CLEAR (1)\n#define NA_SE_EN_GAIBON_SMALL_FIREBALL 0x652\n#define DEBUGF(...) _log(LOG_LEVEL_D, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define CdlDataReady 0x01\n#define ANIMSET_OVL_FLAG 0x8000\n#define PAL_GLOW_ANIM 4\n#define NA_VO_AL_DEATH_DREAM_WORLD 0x391\n#define _ROMIO_H \n#define SE_SAVE_HEARTBEAT 0x64D\n#define FTRUNC 0x0400\n#define LEN(x) ((s32)(sizeof(x) / sizeof(*(x))))\n#define SPU_VOICE_ADSR_AR (0x01 << 11)\n#define CD_SOUND_COMMAND_10 10\n#define LIFE_VESSEL_INCREASE 5\n#define CdlStatSeekError 0x04\n#define CdlGetlocP 0x11\n#define NA_SE_EN_BLOOD_SKELETON_DISASSEMBLES 0x6CB\n#define PLAYER_STATUS_WOLF_FORM 0x00000004\n#define MU_DANCE_OF_PALES_LOOP_POINT 0x318\n#define PAL_UNK_OP3_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define RELIC_FLAG_FOUND 1\n#define EvSpCLOSE 0x0008\n#define CdlSetfilter 0x0d\n#define ELEMENT_CUT 0x40\n#define CdlGetlocL 0x10\n#define TcbStUNUSED 0x1000\n#define SFX_KARMA_COIN_HEADS 0x6B1\n#define GFX_ENTRY(x,y,w,h,data) (u_long*)((x) | ((y) << 16)), (u_long*)((w) | ((h) << 16)), (u_long*)data\n#define DescRC 0xf2000000\n#define FNBLOCK 0x0004\n#define setaddr(p,_addr) (((P_TAG*)(p))->addr = (u_long)(_addr))\n#define FLAG_DESTROY_IF_BARELY_OUT_OF_CAMERA 0x40000000\n#define SE_BOSS_DEFEATED 0x7D2\n#define DescTH DescMask\n#define setWH(p,_w,_h) (p)->w = _w, (p)->h = _h\n#define SPU_OFF 0\n#define LIBSPU_H \n#define FLAG_UNK_20000000 0x20000000\n#define PAL_COPY_INFO() MAKE_PAL_OP(PAL_COPY, 0)\n#define SFX_UNK_6E7 0x6E7\n#define PAD_CROSS 0x0040\n#define SCRIPT(...) {}\n#define gte_SetTransMatrix(r0) \n#define NA_VO_SU_GRUNT_1 0x870\n#define CdlModeRT 0x40\n#define CdlMAXDIR 128\n#define PLAYER_STATUS_UNK80000 0x80000\n#define JP_VO_SHIINA_HEKIRU_MESSAGE 0x345\n#define SET_UNK_12 0x12\n#define LOHU(x) (*(u16*)&(x))\n#define FLAG_UNK_1000 0x1000\n#define NA_SE_EN_ZOMBIE_EXPLODE 0x65E\n#define USE_CD_SPEED_DOUBLE 0\n#define NA_SE_EV_SWITCH_CLICK 0x676\n#define PAL_COPY 1\n#define SEEK_CUR 1\n#define OVL_EXPORT(x) ST0_ ##x\n#define NA_SE_VO_DR_HURT_1 0x853\n#define NA_SE_VO_DR_HURT_2 0x85B\n#define NA_SE_VO_DR_HURT_3 0x85C\n#define NA_SE_VO_DR_HURT_4 0x85D\n#define PLAYER_STATUS_UNK40000000 0x40000000\n#define addPrim(ot,p) setaddr(p, getaddr(ot)), setaddr(ot, p)\n#define PAD_R3 0x0400\n#define FALL_TERMINAL_VELOCITY 0x60000\n#define PLAYER_STATUS_UNK20000 0x20000\n#define __SPU_IRQCALLBACK_PROC \n#define MU_PROLOGUE 0x321\n#define ANIMSET_DRA(x) (x)\n#define SS_TICK240 2\n#define NA_SE_EN_SLOGRA_FLOOR_STOMP 0x64F\n#define setPolyF3(p) setlen(p, 4), setcode(p, 0x20)\n#define setPolyF4(p) setlen(p, 5), setcode(p, 0x28)\n#define FRCOM 0x2000\n#define MU_ENCHANTED_BANQUET 0x330\n#define DRAW_UNK02 0x02\n#define ELEMENT_FIRE 0x8000\n#define MAX_PRIM_COUNT 0x500\n#define setPolyG3(p) setlen(p, 6), setcode(p, 0x30)\n#define setPolyG4(p) setlen(p, 8), setcode(p, 0x38)\n#define FLAG_UNK_400 0x400\n#define SFX_UNK_689 0x689\n#define FLAG_UNK_10 0x10\n#define CdlModeDA 0x01\n#define DescMask 0xff000000\n#define NA_VO_SU_GRUNT_3 0x874\n#define LAYER_WRAP_BG 0x1000\n#define MU_BLOOD_RELATIONS 0x336\n#define NA_SE_VO_WO_BARK 0x706\n#define DISP_STAGE_H DISP_ALL_H\n#define DISP_STAGE_W 256\n#define SET_SOUNDMODE_STEREO 6\n#define STRINGIFY(x) STRINGIFY_(x)\n#define isendprim(p) ((((P_TAG*)(p))->addr) == 0xffffff)\n#define MU_TOWER_OF_MIST_LOOP_POINT 0x314\n#define MU_DANCE_OF_PALES 0x317\n#define MU_FESTIVAL_OF_SERVANTS 0x31D\n#define TOTAL_ENTITY_COUNT 256\n#define NA_VO_MA_IF_YOU_WEAR 0x3CE\n#define setUV3(p,_u0,_v0,_u1,_v1,_u2,_v2) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2)\n#define setUV4(p,_u0,_v0,_u1,_v1,_u2,_v2,_u3,_v3) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2), (p)->u3 = (_u3), (p)->v3 = (_v3)\n#define CdlNoIntr 0x00\n#define JP_VO_AKUMAJO 0x343\n#define CdlSetloc 0x02\n#define SE_INTRO_WIND_LOOP_POINT 0x32B\n#define PLAYER_STATUS_TRANSFORM (PLAYER_STATUS_BAT_FORM | PLAYER_STATUS_MIST_FORM | PLAYER_STATUS_WOLF_FORM)\n#define SE_WPN_PENTAGRAM 0x6E4\n#define LOWU(x) (*(u32*)&(x))\n#define NA_SE_EN_BLOOD_SKELETON_REASSEMBLES 0x6CC\n#define NA_SE_VO_DR_TAUNT_2 0x850\n#define DISP_MENU_W 384\n#define PLAYER_MARIA 2\n#define MU_I_AM_THE_WIND 0x33C\n#define CdlPause 0x09\n#define NA_VO_SU_LAUGH 0x86E\n#define SPRITESHEET_PTR 0x8013C020\n#define PLAYER_STATUS_CURSE 0x00008000\n#define DRAW_UNK_200 0x200\n#define FLAG_UNK_4000 0x4000\n#define SS_TICK50 4\n#define FLAG_UNK_02000000 0x02000000\n#define SFX_UNK_6FF 0x6FF\n#define SS_TICK60 1\n#define HwRTC0 (DescHW | 0x05)\n#define HwRTC1 (DescHW | 0x06)\n#define HwRTC2 (DescHW | 0x07)\n#define ANIMSET_OVL(x) ((x) | ANIMSET_OVL_FLAG)\n#define FRLOCK 0x0010\n#define NA_SE_VO_AL_PUNCH 0x6F1\n#define PLAYER_STATUS_UNK400000 0x400000\n#define NA_VO_RI_IMPRESSIVE_WHIP 0x3DA\n#define MAX_POLY_GT3_COUNT 0x30\n#define SS_REV_TYPE_DELAY 8\n#define F3DEX_GBI_2 1\n#define COLOR_BPP (16)\n#define CdlModeSF 0x08\n#define FLAG_UNK_20000 0x20000\n#define PAL_GLOW_DATA(data) (u_long*)(data)\n#define STAGE_ENTITY_START 64\n#define SS_REV_TYPE_STUDIO_A 2\n#define SS_REV_TYPE_STUDIO_C 4\n#define SS_WAIT_COMPLETED 1\n#define NA_SE_EN_COG_CLICK 0x642\n#define STRCPY(dst,src) __builtin_memcpy(dst, src, sizeof(src))\n#define PAL_COPY_DATA_(dst,data,len) (dst), (u_long*)(len), (u_long*)(data)\n#define ELEMENT_THUNDER 0x4000\n#define CdlPlay 0x03\n#define M2CTX 1\n#define DRAW_MENU 0x80\n#define TEST_BITS(x,y) ((x & y) == y)\n#define termPrim(p) setaddr(p, 0xffffffff)\n#define SFX_UNK_69D 0x69D\n#define SET_STOP_MUSIC 0xA\n#define FIX_TO_I(x) ((s32)((x) >> 16))\n#define MU_JP_FAIRY_SONG 0x33F\n#define NA_VO_SU_GRUNT_2 0x872\n#define SPU_REV_MODE (0x01 << 0)\n#define ELEMENT_DARK 0x800\n#define DRAW_COLORS 0x04\n#define PLAYER_RICHTER 1\n#define MAX_PRIM_ALLOC_COUNT 0x400\n#define NOT_IMPLEMENTED WARNF("not implemented")\n#define NA_SE_PL_MAX_HP_MP_INCREASED 0x687\n#define NA_VO_RI_ONLY_THE_COUNT 0x3DC\n#define O_NOBUF FNBUF\n#define WEAPON_0_START 0xE0\n#define DIAG_EOL 0xFF\n#define MAX_POLY_G4_COUNT 0x100\n#define MU_REQUIEM_FOR_THE_GODS 0x305\n#define SFX_UNK_8BB 0x8BB\n#define FLAG_DEAD 0x100\n#define PLAYER_STATUS_UNK2000 0x2000\n#define SPU_VOICE_ADSR_SL (0x01 << 15)\n#define NA_SE_VO_AXE_KNIGHT_THROW 0x766\n#define DISP_TITLE_W 512\n#define FLAG_UNK_800000 0x800000\n#define EvSpERANGE 0x0302\n#define SPU_VOICE_ADSR_SR (0x01 << 13)\n#define PAL_OVL_FLAG 0x8000\n#define setXY3(p,_x0,_y0,_x1,_y1,_x2,_y2) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2)\n#define HwDMAC (DescHW | 0x04)\n#define GAME_H \n#define NA_SE_SU_CREATE_CLONES 0x6D5\n#define SS_REV_TYPE_ECHO 7\n#define CdlMAXLEVEL 8\n#define NA_VO_SU_BLANK 0x86F\n#define CLAMP_MAX(v,max) ((v) > (max) ? (max) : (v))\n#define DISP_MENU_H DISP_ALL_H\n#define SPU_VOICE_ADSR_SMODE (0x01 << 9)\n#define LAYER_SHOW 1\n#define MU_RAINBOW_CEMETERY 0x307\n#define DRAW_TPAGE 0x10\n#define SIM_PTR 0x80280000\n#define setPolyGT3(p) setlen(p, 9), setcode(p, 0x34)\n#define setPolyGT4(p) setlen(p, 12), setcode(p, 0x3c)\n#define INCLUDE_ASM_H \n#define EvSpEDOM 0x0301\n#define NA_SE_SU_FLAPPING_WINGS 0x6C6\n#define PLAYER_ALUCARD 0\n#define JP_VO_KONAMI_1 0x34C\n#define JP_VO_KONAMI_2 0x34D\n#define RCntCNT1 (DescRC | 0x01)\n#define RCntCNT2 (DescRC | 0x02)\n#define RCntCNT3 (DescRC | 0x03)\n#define JP_VO_KONAMI_8 0x353\n#define JP_VO_KONAMI_9 0x354\n#define ERRORF(...) _log(LOG_LEVEL_E, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define JP_VO_KONAMI_12 0x357\n#define MU_DOOR_OF_HOLY_SPIRITS_LOOP_POINT 0x316\n#define SIZEOF_MENUCONTEXT (0x1E)\n#define JP_VO_KONAMI_3 0x34E\n#define HwGPU (DescHW | 0x02)\n#define SPU_VOICE_VOLL (0x01 << 0)\n#define SS_SON 1\n#define SPU_VOICE_VOLR (0x01 << 1)\n#define MU_LAND_OF_BENEDICTION 0x33E\n#define MAX_GOLD 999999\n#define INFOF(...) _log(LOG_LEVEL_I, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define OFF(type,field) ((size_t)(&((type*)0)->field))\n#define CdlBackward 0x05\n#define MU_WANDERING_GHOSTS 0x323\n#define SS_REV_TYPE_HALL 5\n#define NA_SE_EN_SLOGRA_HISSING 0x709\n#define STAGE STAGE_ST0\n#define NA_SE_PL_BT_FIREBALL 0x680\n#define SFX_UNK_661 0x661\n#define O_RDWR FREAD | FWRITE\n#define setTile(p) setlen(p, 3), setcode(p, 0x60)\n#define NA_SE_EN_SLOGRA_DEATH_EXPLOSION 0x697\n#define NA_SE_EV_WINDOW_LATCH 0x79D\n#define FLAG_HAS_PRIMS 0x00800000\n#define CdlAcknowledge 0x03\n#define SwMATH (DescSW | 0x02)\n#define NA_SE_PL_RIC_UNK_6E2 0x6E2\n#define SOUND_BAT_SCREECH 0x64E\n#define gte_SetGeomScreen(r0) \n#define DRAW_DEFAULT 0x00\n#define PLAYER_STATUS_ABSORB_BLOOD 0x02000000\n#define NA_SE_SY_MOVE_MENU_CURSOR 0x67B\n#define SE_UI_OVERWRITE_SELECT 0x6A4\n#define NA_VO_SU_SUCK_YOU_DRY 0x876\n#define gte_stszotz(r0) \n#define setShadeTex(p,tge) ((tge) ? setcode(p, getcode(p) | 0x01) : setcode(p, getcode(p) & ~0x01))\n#define CD_SOUND_COMMAND_12 12\n#define PAL_COPY_DATA(dst,data) (dst), (u_long*)LEN(data), (u_long*)(data)\n#define SE_DRE_FADE_TO_WHITE 0x65A\n#define NA_SE_EN_BLOODY_ZOMBIE_INJURED_SCREAM 0x746\n#define NA_SE_VO_DR_GRANT_ME_POWER 0x857\n#define RCntMdINTR 0x1000\n#define MU_LOST_PAINTING_LOOP_POINT 0x302\n#define FALL_GRAVITY 0x4000\n#define MU_PRAYER_LOOP_POINT 0x333\n#define NA_SE_CS_BURNING_PHOTOGRAPH 0x8BE\n#define PAD_SQUARE 0x0080\n#define RIC_PRG_PTR 0x8013C000\n#define MU_CURSE_ZONE 0x303\n#define SE_UI_SELECT 0x67B\n#define getlen(p) (u_char)(((P_TAG*)(p))->len)\n#define GET_PAL_OP_FREQ(x) (HIH(x))\n#define PAD_UP 0x1000\n#define MU_CURSE_ZONE_LOOP_POINT 0x304\n#define SS_REV_TYPE_SPACE 6\n#define FLAG_DRAW_ROTX 0x01\n#define FLAG_DRAW_ROTY 0x02\n#define FLAG_DRAW_ROTZ 0x04\n#define EvSpDE 0x0080\n#define LIBGPU_H \n#define O_RDONLY FREAD\n#define PAL_BULK_COPY 5\n#define SS_REV_TYPE_PIPE 9\n#define PAD_L2 0x0001\n#define PLAYER_STATUS_UNK80000000 0x80000000\n#define REBOUND_STONE_BOUNCE 0x6A4\n#define ELEMENT_HIT 0x20\n#define nextPrim(p) (void*)((u_long)(((P_TAG*)(p))->addr) | 0x80000000)\n#define FWRITE 0x0002\n#define SS_REV_TYPE_OFF 0\n#define PLAYER_STATUS_UNK40000 0x40000\n#define PLAYER_STATUS_STONE 0x00000080\n#define setUV0(p,_u0,_v0) (p)->u0 = (_u0), (p)->v0 = (_v0)\n#define NA_SE_EN_SLOGRA_SPEAR_SLASH 0x6C6\n#define HIH(x) (((s16*)&(x))[1])\n#define NA_VO_SU_HURT_1 0x879\n#define SS_NOTICK0 0\n#define MU_DANCE_OF_ILLUSIONS_LOOP_POINT 0x320\n#define MU_HEAVENLY_DOORWAY 0x31B\n#define CdlStatStandby 0x02\n#define MU_DANCE_OF_GOLD_LOOP_POINT 0x32F\n#define SE_UI_OVERWRITE_MSG 0x6AD\n#define MAX_TILE_COUNT 0x100\n#define MU_THE_TRAGIC_PRINCE_LOOP_POINT 0x312\n#define setSprt(p) setlen(p, 4), setcode(p, 0x64)\n#define DRAW_UNK_800 0x800\n#define setLineF2(p) setlen(p, 3), setcode(p, 0x40)\n#define setLineF3(p) setlen(p, 5), setcode(p, 0x48), (p)->pad = 0x55555555\n#define setLineF4(p) setlen(p, 6), setcode(p, 0x4c), (p)->pad = 0x55555555\n#define BUTTON_COUNT 8\n#define EvSpTRAP 0x1000\n#define setLineG2(p) setlen(p, 4), setcode(p, 0x50)\n#define setLineG3(p) setlen(p, 7), setcode(p, 0x58), (p)->pad = 0x55555555\n#define NA_SE_EN_GAIBON_SCREAM 0x70B\n#define SFX_KARMA_COIN 0x682\n#define NA_SE_VO_AL_WHAT 0x6F2\n#define DRAW_UNK_1000 0x1000\n#define SEEK_SET 0\n#define SS_SERIAL_A 0\n#define SS_SERIAL_B 1\n#define FLAG_DESTROY_IF_OUT_OF_CAMERA 0x80000000\n#define gte_rtps() \n#define gte_rtpt() \n#define N_VERTI_TILES 16\n#define NA_SE_EN_GAIBON_FLAME_OUT 0x65E\n#define FSCAN 0x1000\n#define gte_stsxy2(r0) \n#define gte_stsxy3(r0,r1,r2) \n#define CdlDiskError 0x05\n#define PLAYER_STATUS_UNK10000 0x10000\n#define TILE_MASK 0x0F\n#define setTile16(p) setlen(p, 2), setcode(p, 0x78)\n#define NA_SE_EN_AXE_KNIGHT_BREAK_AXE 0x66B\n#define EvSpTIMOUT 0x0100\n#define NA_SE_VO_DR_HERE_IS_TRUE_POWER 0x855\n#define O_CREAT FCREAT\n#define SPELL_FLAG_KNOWN 0x80\n#define FLAG_UNK_00200000 0x00200000\n#define NA_SE_EN_GAIBON_COLLAPSE 0x672\n#define PAL_BULK(dst,data) (u_long*)(dst), (u_long*)LEN(data), (u_long*)(data)\n#define FNBUF 0x4000\n#define MU_THE_DOOR_TO_THE_ABYSS 0x325\n#define NA_SE_BREAK_GLASS 0x68B\n#define NULL (0)\n#define LAYER_TPAGE_ID (0x20 | 0x40)\n#define CD_SOUND_COMMAND_FADE_OUT_1 3\n#define CD_SOUND_COMMAND_FADE_OUT_2 2\n#define MU_THE_DOOR_TO_THE_ABYSS_LOOP_POINT 0x326\n#define CdlSetmode 0x0e\n#define NA_VO_SU_DELICIOUS 0x8D1\n#define setUVWH(p,_u0,_v0,_w,_h) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u0) + (_w), (p)->v1 = (_v0), (p)->u2 = (_u0), (p)->v2 = (_v0) + (_h), (p)->u3 = (_u0) + (_w), (p)->v3 = (_v0) + (_h)\n#define SE_UI_ERROR 0x686\n#define CdlStatRead 0x20\n#define MAKE_PAL_OP(kind,freq) ((kind) | ((freq) << 0x10))\n#define CASTLE_MAP_PTR 0x801E0000\n#define NA_SE_EN_GAIBON_BIG_FIREBALL 0x655\n#define ELEMENT_HOLY 0x1000\n#define __attribute__(...) \n#define EvSpIOE 0x0004\n#define CD_SOUND_COMMAND_6 6\n#define NA_VO_MAR_AIM_HEAD 0x87F\n#define CdlStop 0x08\n#define SPU_VOICE_NOTE (0x01 << 5)\n#define SE_INTRO_WIND_QUIET_LOOP_POINT 0x32D\n#define SE_UI_DEBUG_SELECT 0x688\n#define DRAW_HIDE 0x08\n#define SE_HEALTH_REGAINED 0x68E\n#define TcbStACTIVE 0x4000\n#define CdlStandby 0x07\n#define SPU_VOICE_ADSR_RMODE (0x01 << 10)\n#define MU_PRAYER 0x332\n#define NA_SE_PL_MP_GAUGE 0x67D\n#define CdlMAXFILE 64\n#define PAL_GLOW_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define JP_VO_FUKAMI_RIKA_MESSAGE 0x344\n#define FLAG_UNK_80000 0x80000\n#define NA_VO_RI_TRIBUTE 0x35A\n#define SFX_UNK_6EA 0x6EA\n#define MU_FINAL_TOCATTA_LOOP_POINT 0x339\n#define MAX_BG_LAYER_COUNT 16\n#define MU_METAMORPHOSIS_II 0x328\n#define PAL_OVL(x) ((x) | ANIMSET_OVL_FLAG)\n#define PLAYER_STATUS_MIST_FORM 0x00000002\n#define SPU_VOICE_VOLMODEL (0x01 << 2)\n#define SPU_VOICE_VOLMODER (0x01 << 3)\n#define NA_SE_EN_SLOGRA_HURT_2 0x70A\n#define PLAYER_STATUS_BAT_FORM 0x00000001\n#define WEAPON1_PTR 0x8017D000\n#define SE_WPN_POWER_OF_SIRE 0x66A\n#define CdlStatSeek 0x40\n#define MU_ABANDONED_PIT 0x319\n#define CdlModeStream2 0x120\n#define SE_WPN_ALUCARD_SWORD_SWING 0x6A8\n#define NA_SE_EN_GAIBON_FLAP_WINGS 0x68D\n#define ELEMENT_WATER 0x400\n#define SS_REV_TYPE_ROOM 1\n#define SE_DEATH_TAKES_ITEMS 0x7A0\n#define SPU_VOICE_ADSR_ADSR1 (0x01 << 17)\n#define FLAG_UNK_01000000 0x01000000\n#define LOH(x) (*(s16*)&(x))\n#define HwCdRom (DescHW | 0x03)\n#define PLAYER_STATUS_UNK4000000 0x04000000\n#define NA_SE_EN_BLOODY_ZOMBIE_INJURED 0x748\n#define DRA_PRG_PTR 0x800A0000\n#define RELIC_FLAG_ACTIVE 2\n#define MAX_LINE_G2_COUNT 0x100\n#define SE_UNK_TE3_667 0x667\n#define MAX_ENV_COUNT 0x10\n#define NA_SE_VO_DR_PLAYTIME_IS_OVER 0x858\n#define O_NBLOCK FNBLOCK\n#define SE_UNK_TE3_679 0x679\n#define MAX_DRAW_MODES 0x400\n#define SET_STOP_SEQ 7\n#define PAD_RIGHT 0x2000\n#define MEMCARD_ID "BASLUS-00067DRAX00"\n#define N_HORIZ_TILES 17\n#define RCntMdNOINTR 0x2000\n#define HwVBLANK (DescHW | 0x01)\n#define STAGE_INVERTEDCASTLE_MASK 0x1F\n#define CdlModeStream 0x100\n#define HwSIO (DescHW | 0x0b)\n#define MU_DANCE_OF_ILLUSIONS 0x31F\n#define PLAYER_STATUS_UNK400 0x400\n#define MU_DRACULAS_CASTLE_LOOP_POINT 0x310\n#define gte_stopz(r0) \n#define NA_SE_SU_PETAL_ATTACK 0x6B0\n#define SE_TREE_BRANCH_SNAP 0x7A4\n#define CdlModeRept 0x04\n#define NA_SE_EN_SKELETON_THROW_BONE 0x6C8\n#define HwPIO (DescHW | 0x0a)\n#define SPU_REV_FEEDBACK (0x01 << 4)\n#define PAL_UNK_OP2_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define EvStWAIT 0x1000\n#define EvSpCOMP 0x0020\n#define FLAG_UNK_100000 0x100000\n#define O_NOWAIT FASYNC\n#define MU_DEATH_BALLAD_LOOP_POINT 0x335\n#define SE_UNK_TE3_6B8 0x6B8\n#define WEAPON0_PTR 0x8017A000\n#define NA_SE_EN_EXPLOSIVE_DEATH 0x693\n#define JP_VO_KONAMI_10 0x355\n#define JP_VO_KONAMI_11 0x356\n#define FLAG_UNK_200 0x200\n#define HwSPU (DescHW | 0x09)\n#define TYPES_H \n#define FCREAT 0x0200\n#define setSemiTrans(p,abe) ((abe) ? setcode(p, getcode(p) | 0x02) : setcode(p, getcode(p) & ~0x02))\n#define SS_IMMEDIATE 0\n#define DescUEV 0xf3000000\n#define CdlGetparam 0x0f\n#define DEMO_KEY_LEN 3\n#define SFX_UNK_6F0 0x6F0\n#define FLAG_UNK_8000 0x8000\n#define FONT_H 8\n#define FONT_W 8\n#define NA_SE_EN_BLOODY_ZOMBIE_HEMORRHAGE 0x749\n#define LIBETC_H \n#define BIBLE_SUBWPN_SWOOSH 0x8C3\n#define FONT_GAP FONT_W\n#define MU_BLACK_BANQUET 0x33A\n#define TcbMdPRI 0x2000\n#define setClut(p,x,y) ((p)->clut = getClut(x, y))\n#define SE_UNK_TE2_6B4 0x6B4\n#define PALETTE_LEN ((COLORS_PER_PAL) * ((COLOR_BPP) / 8))\n#define MU_ENCHANTED_BANQUET_LOOP_POINT 0x331\n#define NA_VO_DR_IT_WAS_NOT 0x359\n#define FREAD 0x0001\n#define EvStALREADY 0x4000\n#define setRGB0(p,_r0,_g0,_b0) (p)->r0 = _r0, (p)->g0 = _g0, (p)->b0 = _b0\n#define setRGB1(p,_r1,_g1,_b1) (p)->r1 = _r1, (p)->g1 = _g1, (p)->b1 = _b1\n#define setRGB2(p,_r2,_g2,_b2) (p)->r2 = _r2, (p)->g2 = _g2, (p)->b2 = _b2\n#define MU_BLACK_BANQUET_LOOP_POINT 0x33B\n#define SEEK_END 2\n#define RCntCNT0 (DescRC | 0x00)\n#define ELEMENT_CURSE 0x100\n#define CdlMute 0x0b\n#define JP_VO_KONAMI_4 0x34F\n#define DRAW_TPAGE2 0x20\n#define JP_VO_KONAMI_6 0x351\n#define catPrim(p0,p1) setaddr(p0, p1)\n#define JP_VO_KONAMI_7 0x352\n#define NA_SE_VO_AL_SOUL_STEAL 0x6F4\n#define SS_MIX 0\n#define CdlModeSize1 0x20\n#define FLAG_DRAW_UNK100 0x100\n#define PLAYER_STATUS_UNK200 0x200\n#define NA_VO_SU_HURT_2 0x87A\n#define SFX_UNK_64B 0x64B\n#define SFX_UNK_64C 0x64C\n#define CdlStatError 0x01\n#define SE_ITEM_YOINK 0x7A2\n#define ALUCARD_DARK_METAMORPHOSIS 0x705\n#define STAGE_PRG_PTR 0x80180000\n#define COLORS_PER_PAL (16)\n#define SFX_UNK_664 0x664\n#define setRGB3(p,_r3,_g3,_b3) (p)->r3 = _r3, (p)->g3 = _g3, (p)->b3 = _b3\n#define SFX_UNK_669 0x669\n#define PAD_COUNT 2\n#define O_WRONLY FWRITE\n#define STAGE_INVERTEDCASTLE_FLAG 0x20\n#define PLAYER g_Entities[PLAYER_CHARACTER]\n#define MU_DRACULAS_CASTLE 0x30F\n#define SFX_UNK_683 0x683\n#define SE_UNK_TE2_6B6 0x6B6\n#define HEART_VESSEL_RICHTER 30\n#define FACTORY(A0,BLUEPRINTNUM) (A0 << 8 | BLUEPRINTNUM)\n#define NA_SE_VO_AL_DYING 0x6F6\n#define SFX_UNK_69A 0x69A\n#define PLAYER_STATUS_UNK800 0x800\n#define CdlStatShellOpen 0x10\n#define DRAW_TRANSP 0x01\n#define SPU_REV_DELAYTIME (0x01 << 3)\n#define addPrims(ot,p0,p1) setaddr(p1, getaddr(ot)), setaddr(ot, p0)\n#define ELEMENT_POISON 0x80\n#define CdlStatPlay 0x80\n#define SPU_ON 1\n#define SS_NOTICK 0x1000\n#define SE_UNK_TE1_651 0x651\n#define FLAG_UNK_2000 0x2000\n#define SPU_VOICE_WDSA (0x01 << 7)\n#define PAL_UNK_OP2_DATA(data) (u_long*)(data)\n#define EvSpSYSCALL 0x4000\n#define FAMILIAR_PTR 0x80170000\n#define LAYER_CLUT_ALT 0x200\n#define SP(x) (0x1F800000 + (x))\n#define SQ(x) ((x) * (x))\n#define SE_UNK_TE1_66F 0x66F\n#define FLAG_DRAW_UNK10 0x10\n#define STAGE_H \n#define MAX_POLY_GT4_COUNT 0x300\n#define HwCARD (DescHW | 0x11)\n#define MU_FESTIVAL_OF_SERVANTS_LOOP_POINT 0x31E\n#define FLAG_DRAW_UNK20 0x20\n#define CdlModeSpeedNormal 0\n#define RCntMdGATE 0x0010\n#define SAVE_FLAG_NORMAL (0)\n#define SFX_UNK_6A3 0x6A3\n#define SFX_UNK_6AD 0x6AD\n#define setTile1(p) setlen(p, 2), setcode(p, 0x68)\n#define setTile8(p) setlen(p, 2), setcode(p, 0x70)\n#define FLAG_DRAW_UNK40 0x40\n#define SFX_UNK_6B0 0x6B0\n#define CdlDemute 0x0c\n#define JP_VO_KATSUTE 0x341\n#define setBlockFill(p) setlen(p, 3), setcode(p, 0x02)\n#define EvSpIOER 0x0400\n#define SFX_UNK_6DF 0x6DF\n#define FLAG_DRAW_UNK8 0x08\n#define SFX_UNK_6E0 0x6E0\n#define NA_SE_VO_AL_DARK_METAMORPHOSIS 0x6F3\n#define SFX_UNK_6E8 0x6E8\n#define SFX_UNK_6E9 0x6E9\n#define SFX_UNK_6EB 0x6EB\n#define SFX_UNK_6EC 0x6EC\n#define SFX_UNK_6ED 0x6ED\n#define SFX_UNK_6EE 0x6EE\n#define SFX_UNK_6EF 0x6EF\n#define EvSpIOEW 0x0800\n#define PAD_CIRCLE 0x0020\n#define FLAG_DRAW_UNK80 0x80\n#define SFX_UNK_6F7 0x6F7\n#define DIAG_EOS 0x00\n#define PLAYER_STATUS_UNK_20 0x00000020\n#define SFX_H \n#define CLAMP_MIN(v,min) ((v) < (min) ? (min) : (v))\n#define LIBSND_H \n#define PAL_UNK_OP2 2\n#define O_TAG u_long tag\n#define GET_PAL_OP_KIND(x) (LOH(x))\n#define MU_PROLOGUE_LOOP_POINT 0x322\n#define _LANGUAGE_C 1\n#define DRAW_UNK_400 0x400\n#define _S(x) (x)\n#define SE_UNK_TE1_6B3 0x6B3\n#define FAPPEND 0x0100\n#define WEAPON_1_START 0xF0\n#define DescSW 0xf4000000\n#define RENDERFLAGS_NOSHADOW 2\n#define SIM_CHR0 0x80280000\n#define SIM_CHR1 0x80284000\n#define CdlGetTD 0x14\n#define NA_SE_VO_DR_TAUNT_1 0x84F\n#define CdlReadS 0x1B\n#define MAX(a,b) ((a) > (b) ? (b) : (a))\n#define setcode(p,_code) (((P_TAG*)(p))->code = (u_char)(_code))\n#define getClut(x,y) ((y << 6) | ((x >> 4) & 0x3f))\n#define PAL_BULK_COPY_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define MU_MARBLE_GALLERY_LOOP_POINT 0x30E\n#define NA_SE_EN_BLOODY_ZOMBIE_DEATH_SCREAM 0x747\n#define SE_INTRO_WIND 0x32A\n#define SwCARD (DescSW | 0x01)\n#define DRAW_ABSPOS 0x2000\n#define FASYNC 0x8000\n#define JP_VO_OKIAYU_RYOUTAROU_MESSAGE 0x347\n#define SPU_VOICE_PITCH (0x01 << 4)\n#define DEMO_KEY_PTR 0x801E8000\n#define setTPage(p,tp,abr,x,y) ((p)->tpage = getTPage(tp, abr, x, y))\n#define _MIPS_SZLONG 32\n#define CdlComplete 0x02\n#define CdlModeSpeed 0x80\n#define SE_CASTLE_GATE_RISE 0x7A5\n#define CD_SOUND_COMMAND_START_XA 4\n#define SPU_REV_DEPTHL (0x01 << 1)\n#define SPU_REV_DEPTHR (0x01 << 2)\n#define EvMdINTR 0x1000\n#define VERSION "us"\n#define EvSpDR 0x0040\n#define PAL_UNK_OP3_DATA(data) (u_long*)(data)\n#define MIN(a,b) ((a) > (b) ? (b) : (a))\n#define MAXSPRT16 0x280\n#define RELIC_FLAG_DISABLE 0\n#define NA_SE_EN_DR_FIREBALL 0x660\n#define INCLUDE_ASM(FOLDER,NAME) __asm__(".pushsection .text\\n" "\\t.align\\t2\\n" "\\t.globl\\t" #NAME "\\n" "\\t.ent\\t" #NAME "\\n" #NAME ":\\n" ".include \\"asm/" VERSION "/" FOLDER "/" #NAME ".s\\"\\n" "\\t.set reorder\\n" "\\t.set at\\n" "\\t.end\\t" #NAME "\\n" ".popsection");\n#define SET_UNK_0B 0xB\n#define SET_UNK_0E 0xE\n#define SET_UNK_0F 0xF\n#define ELEMENT_ICE 0x2000\n#define JP_VO_SH_SCREAM 0x52F\n#define SET_UNK_10 0x10\n#define SET_UNK_11 0x11\n#define SPU_VOICE_LSAX (0x01 << 16)\n#define LOG_H \n#define COLOR16(r,g,b,a) (r) + ((g) << 5) + ((b) << 10) + ((a) << 15)\n#define setXYWH(p,_x0,_y0,_w,_h) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x0) + (_w), (p)->y1 = (_y0), (p)->x2 = (_x0), (p)->y2 = (_y0) + (_h), (p)->x3 = (_x0) + (_w), (p)->y3 = (_y0) + (_h)\n#define MU_DANCE_OF_GOLD 0x32E\n#define MU_WANDERING_GHOSTS_LOOP_POINT 0x324\n#define FLAG_UNK_40000 0x40000\n#define FLAG_DRAW_DEFAULT 0x00\n#define JP_VO_WAKAMOTO_NORIO_MESSAGE 0x349\n#define PAD_DOWN 0x4000\n#define TcbMdRT 0x1000\n#define GFX_TERMINATE() ((u_long*)-1)\n#define NA_VO_SU_CRYSTAL_1 0x87C\n#define NA_VO_SU_CRYSTAL_2 0x6AF\n#define SS_REV_TYPE_STUDIO_B 3\n#define PAD_START 0x0800\n#define LOW(x) (*(s32*)&(x))\ntypedef char int8_t;\ntypedef short int16_t;\ntypedef int int32_t;\ntypedef long long int64_t;\ntypedef unsigned char uint8_t;\ntypedef unsigned short uint16_t;\ntypedef unsigned int uint32_t;\ntypedef unsigned long long uint64_t;\ntypedef unsigned char u_char;\ntypedef unsigned short u_short;\ntypedef unsigned long u_long;\ntypedef unsigned int size_t;\ntypedef signed char s8;\ntypedef signed short s16;\ntypedef signed int s32;\ntypedef signed long long s64;\ntypedef unsigned char u8;\ntypedef unsigned short u16;\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\ntypedef signed char byte;\ntypedef enum { false, true } bool;\ntypedef union {\n    s32 val;\n    struct {\n        s16 lo;\n        s16 hi;\n    } i;\n} f32;\ntypedef struct {\n              s16 x;\n              s16 y;\n} Point16;\ntypedef struct {\n    u8 u;\n    u8 v;\n} uvPair;\ntypedef struct {\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 pad;\n} rgb_set;\nint sprintf(char* dst, const char* fmt, ...);\ntypedef enum {\n    LOG_LEVEL_D,\n    LOG_LEVEL_I,\n    LOG_LEVEL_W,\n    LOG_LEVEL_E,\n} LOG_LEVEL;\nvoid SetMinLogLevel(LOG_LEVEL level);\nvoid _log(unsigned int level, const char* file, unsigned int line,\n          const char* func, const char* fmt, ...);\ntypedef enum {\n    PLAYER_CHARACTER,\n    UNK_ENTITY_1,\n    UNK_ENTITY_2,\n    UNK_ENTITY_3,\n    UNK_ENTITY_4,\n    UNK_ENTITY_5,\n    UNK_ENTITY_6,\n    UNK_ENTITY_7,\n    UNK_ENTITY_8,\n    E_WEAPON = 0x10,\n    UNK_ENTITY_11 = 0x11,\n    UNK_ENTITY_12 = 0x12,\n    UNK_ENTITY_13 = 0x13,\n    UNK_ENTITY_20 = 0x20,\n    UNK_ENTITY_51 = 0x51,\n    UNK_ENTITY_100 = 0x100\n} EntityTypes;\nstruct DIRENTRY {\n               char name[20];\n               long attr;\n               long size;\n               struct DIRENTRY* next;\n              long head;\n               char system[4];\n};\nvoid EnterCriticalSection(void);\nvoid ExitCriticalSection(void);\nlong _card_info(long chan);\nlong _card_clear(long chan);\nlong _card_load(long chan);\nvoid InitCARD(long val);\nlong StartCARD(void);\nstruct EXEC {\n    unsigned long pc0;\n    unsigned long gp0;\n    unsigned long t_addr;\n    unsigned long t_size;\n    unsigned long d_addr;\n    unsigned long d_size;\n    unsigned long b_addr;\n    unsigned long b_size;\n    unsigned long s_addr;\n    unsigned long s_size;\n    unsigned long sp, fp, gp, ret, base;\n};\nextern void InitHeap(void*, unsigned long);\nextern long Load(char*, struct EXEC*);\nextern long Exec(struct EXEC*, long, char**);\nextern void _bu_init(void);\nextern long open(char* devname,\n                 int flag\n);\nextern long lseek(long, long, long);\nextern long read(long fd,\n                 void* buf,\n                 long n\n);\nextern long write(long, void*, long);\nextern int close(int fd\n);\nextern long format(char* fs\n);\nextern struct DIRENTRY* firstfile(char*, struct DIRENTRY*);\nextern struct DIRENTRY* nextfile(struct DIRENTRY*);\nextern long erase(char*);\nextern long Krom2RawAdd(unsigned long);\nextern void ChangeClearPAD(long);\nextern void StopPAD(void);\nint PAD_init(s32 , s32* );\nextern void FlushCache(void);\nextern void DeliverEvent(unsigned long, unsigned long);\nextern long TestEvent(unsigned long event\n);\nextern long OpenEvent(unsigned long, long, long, long (*func)());\nextern long EnableEvent(long);\nextern void _96_remove(void);\nextern long SetRCnt(unsigned long, unsigned short, long);\nextern long StartRCnt(unsigned long);\nextern long GetRCnt(unsigned long);\nextern long StopRCnt(unsigned long);\nextern long ResetRCnt(unsigned long);\nextern void exit();\nextern void puts(char*);\nextern char* strcat(char*, char*);\nextern int strcmp(char*, char*);\nextern int strncmp(char*, char*);\nextern char* strcpy(char*, char*);\nextern int strlen(char*);\nextern void* memcpy(unsigned char*, unsigned char*, int);\nextern void* memset(unsigned char*, unsigned char, int);\nextern int rand(void);\nextern void srand(unsigned int);\nextern void* malloc(size_t\n);\nextern void free(void*);\nint printf(char*, ...);\nint abs(int x);\ntypedef struct {\n    u_char minute;\n    u_char second;\n    u_char sector;\n    u_char track;\n} CdlLOC;\ntypedef struct {\n    u_char val0;\n    u_char val1;\n    u_char val2;\n    u_char val3;\n} CdlATV;\ntypedef struct {\n    u_short id;\n    u_short type;\n    u_short secCount;\n    u_short nSectors;\n    u_long frameCount;\n    u_long frameSize;\n    u_short width;\n    u_short height;\n    u_long dummy1;\n    u_long dummy2;\n    CdlLOC loc;\n} StHEADER;\ntypedef struct {\n    CdlLOC pos;\n    u_long size;\n    char name[16];\n} CdlFILE;\ntypedef void (*CdlCB)(u_char, u_char*);\nvoid def_cbsync(u_char intr, u_char* result);\nvoid def_cbready(u_char intr, u_char* result);\nvoid def_cbread(u_char intr, u_char* result);\nint CdInit(void);\nint CdStatus(void);\nint CdMode(void);\nint CdLastCom(void);\nint CdReset(int mode);\nvoid CdFlush(void);\nint CdSetDebug(int level);\nchar* CdComstr(u_char com);\nchar* CdIntstr(u_char intr);\nint CdSync(int mode, u_char* result);\nint CdReady(int mode, u_char* result);\nCdlCB CdSyncCallback(CdlCB func);\nCdlCB CdReadyCallback(CdlCB func);\nint CdControl(u_char com, u_char* param, u_char* result);\nint CdControlB(u_char com, u_char* param, u_char* result);\nint CdControlF(u_char com, u_char* param);\nint CdMix(CdlATV* vol\n);\nint CdGetSector(void* madr, int size);\nvoid(*CdDataCallback(void (*func)()));\nCdlLOC* CdIntToPos(int i, CdlLOC* p);\nint CdPosToInt(CdlLOC* p);\nCdlFILE* CdSearchFile(CdlFILE* fp, char* name);\nint CdRead(int sectors, u_long* buf, int mode);\nint CdReadSync(int mode, u_char* result);\nCdlCB CdReadCallback(CdlCB func);\nint CdRead2(long mode);\nvoid StClearRing(void);\nvoid StSetStream(u_long mode, u_long start_frame, u_long end_frame,\n                 void (*func1)(), void (*func2)());\nvoid StSetMask(u_long mask, u_long start, u_long end);\nu_long StGetNext(u_long** addr, u_long** header);\nu_long StFreeRing(u_long* base);\nint StGetBackloc(CdlLOC* loc);\nvoid StSetRing(u_long* ring_addr, u_long ring_size1);\nvoid StUnSetRing(void);\nstruct Callbacks {\n    const char* rcsid;\n    void* (*DMACallback)(int dma, void (*func)());\n    void* (*InterruptCallback)(int irq, void (*f)());\n    int (*ResetCallback)(void);\n    int (*StopCallback)(void);\n    int (*VSyncCallbacks)(int ch, void (*f)());\n    int (*RestartCallback)(void);\n};\nextern unsigned short D_8002C2BA;\nextern struct Callbacks* D_8002D340;\nint VSync(int mode);\nint VSyncCallback(void (*f)());\nint VSyncCallbacks(int ch, void (*f)());\nvoid* DMACallback(int dma, void (*func)());\nint ResetCallback(void);\nint StopCallback(void);\nint RestartCallback(void);\nint CheckCallback(void);\nlong SetVideoMode(long mode);\nvoid PadInit(int mode);\nu_long PadRead(int id);\nvoid PadStop(void);\ntypedef struct {\n              short x;\n              short y;\n              short w;\n              short h;\n} RECT;\ntypedef struct {\n    unsigned addr : 24;\n    unsigned len : 8;\n    u_char r0, g0, b0, code;\n} P_TAG;\ntypedef struct {\n    u_char r0, g0, b0, code;\n} P_CODE;\ntypedef struct {\n    u_long tag;\n              u_long code[15];\n} DR_ENV;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n} POLY_F3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    short x3, y3;\n} POLY_F4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char u0, v0;\n    u_short clut;\n    short x1, y1;\n    u_char u1, v1;\n    u_short tpage;\n    short x2, y2;\n    u_char u2, v2;\n    u_short pad1;\n} POLY_FT3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char u0, v0;\n    u_short clut;\n    short x1, y1;\n    u_char u1, v1;\n    u_short tpage;\n    short x2, y2;\n    u_char u2, v2;\n    u_short pad1;\n    short x3, y3;\n    u_char u3, v3;\n    u_short pad2;\n} POLY_FT4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, pad1;\n    short x1, y1;\n    u_char r2, g2, b2, pad2;\n    short x2, y2;\n} POLY_G3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n} POLY_GT3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char pad1;\n               short x1;\n               short y1;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char pad2;\n               short x2;\n               short y2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char pad3;\n               short x3;\n               short y3;\n} POLY_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char p3;\n               short x3;\n               short y3;\n               u_char u3;\n               u_char v3;\n               u_short pad3;\n} POLY_GT4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n} LINE_F2;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n} LINE_G2;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    u_long pad;\n} LINE_F3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n    u_char r2, g2, b2, p2;\n    short x2, y2;\n    u_long pad;\n} LINE_G3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    short x3, y3;\n    u_long pad;\n} LINE_F4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n    u_char r2, g2, b2, p2;\n    short x2, y2;\n    u_char r3, g3, b3, p3;\n    short x3, y3;\n    u_long pad;\n} LINE_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               short w;\n               short h;\n} SPRT;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_16;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_8;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short w, h;\n} TILE;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_16;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_8;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_1;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short w, h;\n} BLK_FILL;\ntypedef struct {\n               RECT clip;\n               short ofs[2];\n               RECT tw;\n               u_short tpage;\n               u_char dtd;\n               u_char dfe;\n               u_char isbg;\n               u_char r0, g0, b0;\n               DR_ENV dr_env;\n} DRAWENV;\ntypedef struct {\n               RECT disp;\n               RECT screen;\n               u_char isinter;\n               u_char isrgb24;\n               u_char pad0;\n               u_char pad1;\n} DISPENV;\ntypedef struct {\n               u_long tag;\n               u_long code[2];\n} DR_MODE;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_TWIN;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_AREA;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_OFFSET;\ntypedef struct {\n    u_long tag;\n    u32 code[2];\n} DR_PRIO;\ntypedef struct PixPattern {\n    u8 w;\n    u8 h;\n    u8 x;\n    u8 y;\n} PixPattern;\nextern u_short LoadTPage(\n    u_long* pix,\n    int tp,\n    int abr,\n    int x, int y,\n    int w, int h\n);\nextern u_short LoadClut2(u_long* clut, int x, int y);\nu_short GetClut(int x,\n                int y\n);\nu_short GetTPage(int tp, int abr, int x, int y);\nvoid DumpTPage(u_short tpage);\nvoid DumpClut(u_short clut);\nextern void AddPrim(void* ot, void* p);\nextern void SetShadeTex(void* p, int tge);\nextern void SetLineG2(LINE_G2* p);\nextern void SetPolyGT3(POLY_GT3* p);\nextern void SetPolyG4(POLY_G4* p);\nextern void SetPolyGT4(POLY_GT4* p);\nextern void SetSemiTrans(void* p, int abe);\nextern void SetSprt(SPRT* p);\nextern void SetSprt16(SPRT_16* p);\nextern void SetSprt8(SPRT_8* p);\nextern void SetTile(TILE* p);\nextern int ResetGraph(int mode);\nint SetGraphDebug(int level);\nextern int SetGraphReverse(int mode);\nextern int SetGraphQueue(int mode);\nextern u_long DrawSyncCallback(void (*func)());\nextern void FntLoad(int tx, int ty);\nint FntPrint(const char* fmt, ...);\nextern void SetDispMask(int mask);\nextern void SetDrawMode(DR_MODE* p, int dfe, int dtd, int tpage, RECT* tw);\nextern void SetDumpFnt(int id);\nextern int ClearImage(RECT* rect, u_char r, u_char g, u_char b);\nextern int DrawSync(int mode);\nextern int FntOpen(int x, int y, int w, int h, int isbg, int n);\nextern u_long* FntFlush(int id);\nextern int LoadImage(RECT* rect, u_long* p);\nextern int StoreImage(RECT* rect, u_long* p);\nextern int MoveImage(RECT* rect, int x, int y);\nextern u_long* ClearOTag(u_long* ot, int n);\nextern u_long* ClearOTagR(u_long* ot, int n);\nextern void DrawOTag(u_long* p);\nextern DRAWENV* PutDrawEnv(DRAWENV* env);\nextern DISPENV* PutDispEnv(DISPENV* env);\nextern DISPENV* SetDefDispEnv(DISPENV* env, int x, int y, int w, int h);\nextern DRAWENV* SetDefDrawEnv(DRAWENV* env, int x, int y, int w, int h);\nextern void SetDrawEnv(DR_ENV* dr_env, DRAWENV* env);\nvoid GsClearVcount(void);\nlong GsGetVcount();\nvoid GsInitVcount();\nvoid InitGeom();\ntypedef struct {\n    short m[3][3];\n    long t[3];\n} MATRIX;\ntypedef struct {\n    long vx, vy, vz;\n    long pad;\n} VECTOR;\ntypedef struct {\n    short vx, vy, vz;\n    short pad;\n} SVECTOR;\ntypedef struct {\n    u_char r, g, b;\n    u_char cd;\n} CVECTOR;\nMATRIX* RotMatrix(SVECTOR* r, MATRIX* m);\nvoid SetGeomOffset(long ofx, long ofy);\nlong RotTransPers(SVECTOR*, long*, long*, long*);\nvoid SetGeomScreen(long h);\nvoid SetRotMatrix(MATRIX* m);\nMATRIX* RotMatrixX(long r, MATRIX* m);\nMATRIX* RotMatrixY(long r, MATRIX* m);\nMATRIX* RotMatrixZ(long r, MATRIX* m);\nMATRIX* TransMatrix(MATRIX* m, VECTOR* v);\nMATRIX* ScaleMatrix(MATRIX* m, VECTOR* v);\nvoid SetTransMatrix(MATRIX* m);\nlong RotTransPers4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* v10, long* v11, long* v12,\n    long* v13,\n    long* p,\n    long* flag\n);\nlong RotAverageNclip4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* sxy0, long* sxy1, long* sxy2,\n    long* sxy3,\n    long* p,\n    long* otz,\n    long* flag\n);\nvoid NormalColorCol(SVECTOR* v0,\n                    CVECTOR* v1,\n                    CVECTOR* v2\n);\nMATRIX* RotMatrixY(long r,\n                   MATRIX* m\n);\nvoid SetBackColor(long rbk, long gbk, long bbk);\nvoid SetColorMatrix(MATRIX* m);\nvoid SetLightMatrix(MATRIX* m);\nvoid SetTransMatrix(MATRIX* m);\nvoid SetFarColor(long rfc, long gfc, long bfc);\nvoid SetFogNear(long a, long h);\nextern long SquareRoot0(long a);\nextern long SquareRoot12(long a);\nextern int rcos(int a);\nextern int rsin(int a);\nextern long ratan2(long y, long x);\ntypedef void (*SpuIRQCallbackProc)(void);\ntypedef struct {\n    short left;\n    short right;\n} SpuVolume;\ntypedef struct {\n               unsigned long voice;\n               unsigned long mask;\n               SpuVolume volume;\n               SpuVolume volmode;\n               SpuVolume volumex;\n               unsigned short pitch;\n               unsigned short note;\n               unsigned short sample_note;\n               short envx;\n               unsigned long addr;\n               unsigned long loop_addr;\n               long a_mode;\n               long s_mode;\n               long r_mode;\n               unsigned short ar;\n               unsigned short dr;\n               unsigned short sr;\n               unsigned short rr;\n               unsigned short sl;\n               unsigned short adsr1;\n               unsigned short adsr2;\n} SpuVoiceAttr;\ntypedef struct {\n    unsigned long mask;\n    long mode;\n    SpuVolume depth;\n    long delay;\n    long feedback;\n} SpuReverbAttr;\nextern long SpuSetTransferMode(long mode);\nextern unsigned long SpuWrite(unsigned char* addr, unsigned long size);\nextern long SpuSetReverbModeParam(SpuReverbAttr* attr);\nextern void SpuSetVoiceAttr(SpuVoiceAttr* arg);\nextern void SpuSetKey(long on_off, unsigned long voice_bit);\nextern long SpuMallocWithStartAddr(unsigned long addr, long size);\nextern SpuIRQCallbackProc SpuSetIRQCallback(SpuIRQCallbackProc);\nextern void SsSeqClose(short seq_access_num);\nextern void SsSetMVol(short voll, short volr);\nextern void SsSetSerialAttr(char s_num, char attr, char mode);\nextern void SsSetSerialVol(short s_num, short voll, short volr);\nextern long SpuClearReverbWorkArea(long rev_mode\n);\nvoid SsInitHot(void);\nchar SsSetReservedVoice(char voices\n);\nvoid SsSetTickMode(long tick_mode\n);\nvoid SsStart(void);\nshort SsUtKeyOnV(\n    short voice,\n    short vabId,\n    short prog,\n    short tone,\n    short note,\n    short fine,\n    short voll,\n    short volr\n);\nshort SsUtSetVVol(short vc,\n                  short voll,\n                  short volr\n);\nvoid SpuGetAllKeysStatus(char* status);\nvoid SsSetTableSize(\n    char* table,\n    short s_max,\n    short t_max\n);\nvoid SsSeqStop(short seq_access_num\n);\nvoid SsSetMono(void);\nvoid SsSetStereo(void);\ns32 SsVabOpenHeadSticky(\n    u_char* addr,\n    u_long vabid,\n    u_long sbaddr\n);\ns32 SsVabTransBodyPartly(\n    u_char* addr,\n    u_long bufsize,\n    u_long vabid\n);\ns32 SsVabTransCompleted(\n    short immediateFlag\n);\nvoid SsUtSetReverbType(short type);\nvoid SsUtReverbOn(void);\nvoid SsUtSetReverbDepth(\n    short ldepth,\n    short rdepth\n);\nvoid SsUtSetReverbDelay(short delay);\ntypedef long Event;\ntypedef enum {\n    PRIM_NONE,\n    PRIM_TILE,\n    PRIM_LINE_G2,\n    PRIM_G4,\n    PRIM_GT4,\n    PRIM_GT3,\n    PRIM_SPRT,\n    PRIM_ENV,\n    PRIM_TILE_ALT = PRIM_TILE | 0x10,\n    PRIM_LINE_G2_ALT = PRIM_LINE_G2 | 0x10,\n    PRIM_G4_ALT = PRIM_G4 | 0x10\n} PrimitiveType;\ntypedef struct Vertex {\n              u8 r;\n              u8 g;\n              u8 b;\n              u8 p;\n              s16 x;\n              s16 y;\n              u8 u;\n              u8 v;\n              u16 param;\n} Vertex;\ntypedef struct {\n               SVECTOR* v0;\n               SVECTOR* v1;\n               SVECTOR* v2;\n               SVECTOR* v3;\n} SVEC4;\ntypedef struct {\n    s16 x;\n    s16 y;\n    u8 u;\n    u8 v;\n    u16 param;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 p;\n} VertexFake;\ntypedef struct Prim {\n    struct Prim* next;\n    struct Vertex v[4];\n} Prim;\ntypedef struct Primitive {\n               struct Primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               s16 x2;\n               s16 y2;\n               u8 u2;\n               u8 v2;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               s16 x3;\n               s16 y3;\n               u8 u3;\n               u8 v3;\n               u16 drawMode;\n} Primitive;\ntypedef struct FakePrim {\n    struct FakePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 w;\n               u8 h;\n               u16 clut;\n               f32 posX;\n               f32 posY;\n               f32 velocityX;\n               f32 velocityY;\n               s16 x2;\n               s16 y2;\n               s16 delay;\n               u16 priority;\n               f32 accelerationX;\n               f32 accelerationY;\n               s16 timer;\n               u16 drawMode;\n} FakePrim;\ntypedef struct PrimLineG2 {\n    struct PrimLineG2* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               s16 xLength;\n               s16 yLength;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               f32 velocityX;\n               f32 velocityY;\n               s32 angle;\n               s16 delay;\n               u16 priority;\n               f32 preciseX;\n               f32 preciseY;\n               s16 timer;\n               u16 drawMode;\n} PrimLineG2;\ntypedef struct {\n    struct primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               f32 y1_f32;\n               s16 unk24;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               f32 y1_f32_velocity;\n               s16 unk30;\n               u16 drawMode;\n} draculaPrimitive;\ntypedef struct AxePrim {\n    struct AxePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               s32 unk0C;\n               s32 unk10;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               s16 unk1C;\n              s16 unk1E;\n               s16 x2;\n               s16 y2;\n               u8 step;\n               u16 priority;\n               s32 pad;\n               s16 timer;\n               s16 unk2E;\n               s16 unk30;\n               u16 drawMode;\n} AxePrim;\nstruct Entity;\ntypedef void (*PfnEntityUpdate)(struct Entity*);\ntypedef union {\n    s32 unk;\n    void* ptr;\n    struct {\n        s8 unk0, unk1, unk2, unk3;\n    } S8;\n    struct {\n        u8 unk0, unk1, unk2, unk3;\n    } U8;\n    struct {\n        s16 unk0, unk2;\n    } S16;\n    struct {\n        u16 unk0, unk2;\n    } U16;\n} Multi;\ntypedef union {\n    s16 s;\n    u16 u;\n    struct {\n        s8 unk0, unk1;\n    } S8;\n    struct {\n        u8 unk0, unk1;\n    } U8;\n} Multi16;\nstruct Entity;\ntypedef struct ET_Generic {\n               Multi16 unk7C;\n    union {\n                   u16 modeU16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeU8;\n    } unk7E;\n    union {\n                   s32 modeS32;\n                   struct Entity* entityPtr;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeS8;\n    } unk80;\n               Multi unk84;\n               Multi unk88;\n    union {\n                   struct Entity* entityPtr;\n                   struct Primitive* primPtr;\n                   s32 modeS32;\n        struct {\n                       u16 unk0;\n                       u16 unk2;\n        } modeU16;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk8C;\n               s16 unk90;\n               s16 unk92;\n               u8 unk94;\n               u8 unk95;\n               s16 unk96;\n               s32 unk98;\n               struct Entity* unk9C;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               u8 unkAC;\n               s8 unkAD;\n               s8 unkAE;\n               s8 unkAF;\n               s16 unkB0;\n               s16 unkB2;\n               s16 unkB4;\n               s16 unkB6;\n    union {\n                   void (*unkFuncB8)(struct Entity*);\n                   struct Entity* entityPtr;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n                       u8 unk2;\n                       u8 unk3;\n        } modeU8;\n    } unkB8;\n} ET_Generic;\ntypedef struct {\n               u16 timer;\n               s16 unk7E;\n               u8 aliveTimer;\n               s8 unk81;\n               s16 unk82;\n               s32 fallSpeed;\n               s16 gravity;\n               s16 unk8A;\n               s16 iconSlot;\n               s16 unk8E;\n               s16 unk90;\n               s16 unk92;\n               s32 castleFlag;\n} ET_EquipItemDrop;\ntypedef struct {\n               u32 unk[14];\n               u16 unkB4;\n               s16 unkB6;\n               PfnEntityUpdate update;\n} ET_HeartDrop;\ntypedef struct {\n               u16 timer;\n               u16 size;\n               u32 speed;\n} ET_BloodDroplets;\ntypedef struct {\n               u16 nPrims;\n               u16 nDigits;\n               u8 digits[4];\n               u16 timer;\n               s16 unk86;\n               u16 unk88;\n               s16 unk8A;\n} ET_NumericDamage;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u16 sparkleCycle;\n    u16 sparkleAnim;\n    u32 unk84;\n    u32 unk88;\n    s16 iconSlot;\n    u16 unk8E;\n    u16 floatTimer;\n    u16 unk92;\n    s32 yFloatSpeed;\n} ET_RelicOrb;\ntypedef struct {\n               u32 unused7C;\n               s16 unused80;\n               s16 unk82;\n               s16 angle;\n               s16 unk86;\n               u8 sideToPlayer;\n               u8 showedMessage;\n} ET_Door;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               struct Primitive* unk84;\n               struct Primitive* unk88;\n               struct Primitive* unk8C;\n               s16 unk90;\n               s16 unk92;\n} ET_StagePopup;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               struct Primitive* unk84;\n               struct Primitive* unk88;\n               u8 unk8C;\n} ET_StagePopupJP;\ntypedef struct {\n               char* label;\n               u16 width;\n               u16 height;\n               s16 unk84;\n               u16 duration;\n} ET_MessageBox;\ntypedef struct {\n               s16 lifetime;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               struct Entity* some_ent;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s32 accelerationX;\n               s32 accelerationY;\n               s32 unkA4;\n               s32 unkA8;\n               u8 anim;\n               u8 unkAD;\n               s16 equipId;\n} ET_Weapon;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    s32 unk80;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n} ET_KarmaCoin;\ntypedef struct {\n    s16 angle;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 xPos;\n    s16 unk8A;\n    struct Entity* parent;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 accelerationX;\n    s32 accelerationY;\n    s32 unkA4;\n    s32 unkA8;\n    u8 anim;\n    u8 unkAD;\n    s16 equipId;\n} ET_HeavenSword;\ntypedef struct {\n    s16 angle;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s32 unk84;\n    s16 xPos;\n    s16 unk8A;\n    struct Entity* parent;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 accelerationX;\n    s32 accelerationY;\n    s32 unkA4;\n    s32 unkA8;\n    u8 anim;\n    u8 unkAD;\n    s16 equipId;\n} ET_HeavenSword2;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               byte pad[10];\n               u8 anim;\n               u8 padAD;\n               s16 unkAE;\n} ET_Shield;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               u16 unk80;\n               s16 pal;\n               s16* palettePtr;\n               u16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               byte pad[14];\n               u8 anim;\n               u8 padAD;\n               s16 unkAE;\n} ET_DarkShield;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               struct Entity* target;\n               s16 unk94;\n               s16 unk96;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               byte pad[6];\n               s16 unkAE;\n} ET_MedusaShieldLaser;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n} ET_ShamanShieldStar;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               u8 unk9C;\n               byte pad[14];\n               u8 anim;\n               s16 unkAE;\n} ET_HeraldShieldSwirlEffect;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    s32 unk80;\n    s16 pad[21];\n    s16 foodId;\n} ET_Food;\ntypedef struct {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 attackMode;\n               u8 flag;\n               u8 nearDeath;\n               s32 speed;\n               s16 angle;\n               char pad_8E[0xE];\n               u8 pickupFlag;\n               u8 grabedAscending;\n} ET_GaibonSlogra;\ntypedef struct {\n               u16 angle;\n               u16 unk7E;\n               u16 unk80;\n               s16 unk82;\n} ET_SoulStealOrb;\ntypedef struct {\n               Primitive* primBg;\n               s32 unused80;\n               Primitive* primFade;\n               s32 unk88;\n} ET_WarpRoom;\ntypedef struct {\n               char pad_0[0x8];\n               u8 timer;\n               char pad_85[0x1];\n               s8 timer2;\n               char pad_87[0x5];\n               u16 palette;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_0[0x6];\n               s8 timer;\n               char pad_87[0x5];\n               s16 rotation;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman_2;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               s16 unk8C;\n               s16 unk8E;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s32 unkA0;\n               struct Entity* target;\n               s16 unkA8;\n               s16 unkAA;\n               s16 cameraX;\n               s16 cameraY;\n               s16 unkB0;\n               s16 unkB2;\n               struct Entity* follow;\n} ET_Bat;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    struct Primitive* unk84;\n    s16 unk88;\n    s16 unk8A;\n} ET_BatEcho;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n               char pad_8A[0x3];\n               u8 unk8D;\n               char pad_8E[0xE];\n               s16 unk9C;\n               struct Entity* next;\n} ET_801CF254;\ntypedef struct {\n               char pad_0[0x4];\n               s16 unk80;\n               char pad_82[0xA];\n               u8 unk8C;\n               char pad_8D[0xF];\n               u16 unk9C;\n               char pad_9E[0x8];\n               s16 unkA6;\n} ET_GurkhaSword;\ntypedef struct ET_Dracula {\n               char pad_7C[4];\n               struct draculaPrimitive* unk80;\n               struct draculaPrimitive* unk84;\n               char pad_88[4];\n               s16 unk8C;\n               char pad_8E[0x2];\n               u8 unk90;\n               char pad91;\n               u8 unk92;\n               char pad93;\n               u8 unk94;\n               char pad_95[0x3];\n               s16 unk98;\n               char pad_9A[0x2];\n               s16 unk9C;\n               char pad_9E[0x2];\n               u8 unkA0;\n               u8 unkA1;\n               u8 unkA2;\n               char pad_A3[0x9];\n               struct Primitive* prim;\n} ET_Dracula;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               s32 unk84;\n               s16 unk88;\n               char pad_8A[0x2];\n               s16 unk8C;\n               s16 unk8E;\n} ET_StageTitleCard;\ntypedef struct ET_Succubus {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 facingLeft;\n               u8 unk85;\n               u8 nextAttack;\n               u8 unk87;\n               u16 nextStep;\n               char pad_8A[0x4];\n               s16 yOffset;\n               char pad_90[0xC];\n               struct Entity* real;\n               s16 clonePosX;\n               s16 unkA2;\n} ET_Succubus;\ntypedef struct {\n               u16 timer;\n               char pad_7E[2];\n               s32 unk80;\n} ET_RoomTransition2;\ntypedef struct {\n               u8 pad0[0x4];\n               s32 unk80;\n               s16 unk84;\n               u8 pad86[2];\n               u8 unk88;\n               u8 unk89;\n} ET_801B3C38;\ntypedef struct {\n               u16 unk7C;\n} ET_801BCC4C;\ntypedef struct ET_CastleDoor {\n               struct Primitive* prim;\n               s16 timer;\n               char pad_82[0x2];\n               s16 rotZ;\n} ET_CastleDoor;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               s16 unk82;\n               s16 timer;\n} ET_ShuttingWindow;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               u16 unk84;\n} ET_DeathSkySwirl;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s32 elevatorTarget;\n} ET_Elevator;\ntypedef struct {\n               s32 pad[8];\n               s16 unk84;\n               s16 unk86;\n               s16* unk88;\n} ET_801D0B40;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0xC];\n               u8 unk8C;\n               u8 unk8D;\n               char pad_8E[0xE];\n               u16 unk9C;\n} ET_801D1BB8;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n} ET_801D0B78;\ntypedef struct {\n               s32 unk7C;\n               s16 unk80;\n               s16 unk82;\n    union {\n                   s32 val;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk84;\n               u16 unk88;\n} ET_WaterEffects;\ntypedef struct {\n               char pad_0[4];\n               s16 unk80;\n               char pad_82[2];\n               u8 unk84;\n               char pad_85[3];\n               u16 unk88;\n               char pad_8A[2];\n               u8 unk8C;\n               u8 unk8D;\n               u8 unk8E;\n               char pad_8E[13];\n               s16 rotZ;\n               s16 unk9E;\n               struct Entity* parent;\n               s16 unkA4;\n               s16 unkA6;\n               u8 unkA8;\n               char pad_A9[0x7];\n               u16 unkB0[0x6];\n} ET_GurkhaHammer;\ntypedef struct {\n               char pad_0[0x20];\n               s16 unk9C;\n               char pad_A0[0x6];\n               s16 unkA4;\n               s16 unkA6;\n               char pad_A8[0xC];\n               u16 unkB4;\n} ET_801CDFD8;\ntypedef struct {\n               char pad_0[0x8];\n               u8 unk84;\n               char pad_85[0x9];\n               u8 unk8E;\n               char pad_8F[0x20];\n               s16 unkB0;\n} ET_801CE4CC;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n} ET_TransparentWater;\ntypedef struct {\n               struct Primitive* prim;\n               s32 timer;\n} ET_HeartRoomGoldDoor;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s8 unk84;\n               char pad_85[0x1];\n               s8 unk86;\n} ET_MermanWaterSplash;\ntypedef struct {\n               s32 playerVelocity;\n} ET_CastleDoorTransition;\ntypedef struct {\n               s8 unk7C;\n} ET_AlucardController;\ntypedef struct {\n               u16 unk7C;\n} ET_ForegroundTree;\ntypedef struct {\n               u16 unk7C;\n               u16 unk7E;\n               s16 unk80;\n} ET_FadeToWhite;\ntypedef struct {\n               u16 unk7C;\n} ET_DeathStolenItems;\ntypedef struct {\n               u16 unk7C;\n               char pad_7E[0x2];\n               s16 posX;\n               s16 posY;\n               u16 moveTimer;\n               u16 moveDirection;\n} ET_Death;\ntypedef struct {\n               u8 unk7C;\n               char pad_7D[0x3];\n               s16 unk80;\n               s16 unk82;\n               struct Entity* unk84;\n} ET_SpittleBone;\ntypedef struct {\n    Primitive* prim;\n    char pad[0x24];\n    s16 unkA4;\n    s16 unkA6;\n    char padd[4];\n    u8 anim;\n    char pad2[0x8];\n    struct Entity* unkB8;\n} ET_Player;\ntypedef struct {\n    u8 unk0;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n} ET_EntitySlot1;\ntypedef struct {\n    char pad[0x32];\n    s16 unkAE;\n} ET_EntitySlot16;\ntypedef struct {\n               s16 unk7C;\n} ET_Entity12;\ntypedef struct {\n    u8 fiveFrameCounter;\n    struct Entity* parent;\n    char pad[8];\n    u16 parentId;\n} ET_Entity13;\ntypedef struct {\n    s16 t;\n} ET_TimerOnly;\ntypedef struct {\n    char pad[8];\n    struct Primitive* prim;\n} ET_AxeKnight;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 childId;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               s16 unkAC;\n               s16 unkAE;\n               s16 unkB0;\n               s16 unkB2;\n} ET_EntFactory;\ntypedef struct {\n    char pad[8];\n    s32 unk8;\n} unk_sub_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    byte pad[14];\n    unk_sub_8011E4BC* unk8C;\n} ET_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_HellfireHandler;\ntypedef struct {\n    s16 stoneAngle;\n    s16 lifeTimer;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_ReboundStone;\ntypedef struct {\n    s16 timer;\n} ET_Vibhuti;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 pad[24];\n               s16 unkB0;\n} ET_GiantSpinningCross;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_8017091C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 pad[0x16];\n    s16 unkB0;\n} ET_80170F64;\ntypedef struct {\n    s16 timer;\n    s16 size;\n} ET_stopwatchCircle;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    f32 unk84;\n    s32 unk88;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 unk96;\n    struct Entity* unk98;\n    s32 pad[5];\n    s16 unkB0;\n} ET_801719A4;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 unk96;\n    struct Entity* unk98;\n    s32 pad[5];\n    s16 unkB0;\n} ET_BibleSubwpn;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s32 unk84;\n    s32 unk88;\n    struct Entity* parent1;\n    s32 pad[10];\n    struct Entity* parent2;\n} ET_80128C2C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_80161FF0;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n} ET_80162870;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n} ET_8016E9E4;\ntypedef struct {\n    u8 unk7C;\n    u8 unk7D[3];\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_801CC820;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    struct Primitive* unk88;\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n} ET_stopwatchSparkle;\ntypedef struct {\n    s16 t;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    f32 unk84;\n    f32 unk88;\n    s16 unk8C;\n    s16 unk8E;\n} ET_stopwatch;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n} ET_RichterPowerUpRing;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n} ET_TransparentWhiteCircle;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n} ET_HitByIce;\ntypedef struct {\n    s16 unk7C;\n    s16 pad7E;\n    s16 unk80;\n    s16 unk82;\n    byte pad84[12];\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 pad96[3];\n    s16 unk9C;\n} ET_HitByLightning;\ntypedef struct {\n    s32 unk7C;\n    s32 unk80;\n    s32 unk84;\n    s32 unk88;\n    s32 unk8C;\n    s32 unk90;\n} ET_Teleport;\ntypedef struct {\n    s16 timer;\n    s16 angle;\n    s16 unk80;\n    s16 unk82;\n} ET_HolyWater;\ntypedef struct {\n    s16 timer;\n    s16 angle;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_HolyWaterFlame;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u8 unk80;\n    byte pad81;\n    u8 unk82;\n    byte pad83;\n    s32 unk84;\n} ET_CrashCross;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u8 unk80;\n    byte pad81;\n    u8 unk82;\n    byte pad83;\n    s32 unk84;\n} ET_RicRevivalColumn;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    u16 unk80;\n    u16 pad82;\n    Point16* unk84;\n} ET_CrossBoomerang;\ntypedef struct {\n    f32 unk7C;\n    f32 unk80;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n    s16 unk8C;\n    s16 unk8E;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 unk9C;\n    s32 unkA0;\n    s16 unkA4;\n    s16 unkA6;\n    s32 unkA8;\n    s32 unkAC;\n    s16 unkB0;\n    s32 unkB4;\n    s32 unkB8;\n} ET_80166784;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s8 unk8A;\n    u8 unk8B[12];\n    s32 unk98;\n} ET_AguneaCrash;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s8 unk8A;\n    u8 unk8B[12];\n    s32 unk98;\n    s32 unk9C;\n    u16 unkA0;\n} ET_AxeCrash;\ntypedef struct {\n    s32 pad7c;\n    Primitive* unk80;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    struct Entity* parent;\n    s16 unk90;\n} ET_801291C4;\ntypedef struct {\n    s16 timer;\n    u16 unk7E;\n    s16 unk80;\n    s16 pad82;\n    s32 unk84;\n    s32 unk88;\n    u16 unk8C;\n} ET_VibhutiCrash;\ntypedef struct {\n    PrimLineG2* lines[4];\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n} ET_8016D9C4;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_8016DF74;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    byte pad[46];\n    s16 unkB0;\n} ET_8016E46C;\ntypedef struct {\n    struct Primitive* prim1;\n    struct Primitive* prim2;\n    struct Primitive* prim3;\n    struct Primitive* prim4;\n    s16 unk8C;\n    s16 unk8E;\n} ET_801AF774;\ntypedef struct {\n    s32 unk7C;\n    s16 timer;\n    s16 unk82;\n    s16 unk84;\n} ET_DracFinal;\ntypedef struct {\n    byte pad[0x18];\n    s32 unk94;\n} ET_Drop;\ntypedef struct {\n               byte pad[4];\n               s16 angle;\n               byte pad2[2];\n               u8 switch_control;\n               u8 speed;\n} ET_BigRedFireball;\ntypedef struct {\n    s16 timer;\n    s16 spawnTimer;\n} ET_SummonSpirit;\ntypedef struct {\n    struct Primitive* prim;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_3DBackgroundhouse;\ntypedef struct {\n    struct Primitive* prim1;\n    struct Primitive* prim2;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n} ET_LifeUpSpawn;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    u16 unk88;\n    u16 unk8A;\n} ET_801B0AA4;\ntypedef struct {\n    byte pad[4];\n    u16 unk80;\n    u16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n    u8 unk8C;\n} ET_Owl;\ntypedef struct {\n    u16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    u16 unk88;\n    s16 unk8A;\n    s16 unk8C;\n    s16 unk8E;\n} ET_AlucardWaterEffect;\ntypedef struct {\n    s32 pad;\n    s16 timer;\n} ET_801B28E4;\ntypedef struct {\n    u32 unk24[10];\n    u8 unk28;\n    u8 unk29;\n} ET_80123B40;\ntypedef struct {\n    struct Entity* ent;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_80129864;\ntypedef struct {\n    s16 timer;\n    s16 pad;\n    s16 xCurrent;\n    s16 yCurrent;\n    s16 xTarget;\n    s16 yTarget;\n} ET_Mist;\ntypedef struct {\n    s32 unk7C;\n    s16 unk80;\n    s16 unk82;\n    s32 un84;\n    s16 unk88;\n    s16 unk8A;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s32 unk94;\n    s16 unk98;\n    s16 unk9A;\n    s16 unk9C;\n} ET_PlayerBlink;\ntypedef struct {\n    struct Primitive* prim;\n    s16 unk80;\n    s16 pad82;\n    s32 pad84;\n    s32 pad88;\n    struct Primitive* prim2;\n    struct Primitive* prim3;\n} ET_BloodSplatter;\ntypedef struct {\n    s32 pad7c;\n    s16 timer;\n    s16 pad82;\n    s32 pad84;\n    s32 pad88;\n    s32 pad8C;\n    s16 brightness;\n} ET_PlayerOutline;\ntypedef struct {\n    u8 digits[4];\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    u16 unk86;\n    u16 unk88;\n    u16 unk8A;\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n    s16 unk92;\n    s16 angleToMeter;\n    s16 distToMeter;\n    s16 unk98;\n} ET_HPNumberMove;\ntypedef struct {\n    s16 timer;\n    s16 pad1;\n    s16 halfWidth;\n    s16 halfHeight;\n    s32 pad2;\n    s16 angle;\n    s16 pad3;\n    s32 pad4;\n    s32 str_x;\n    s32 str_y;\n    s32 unk98;\n} ET_GuardText;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_Dissolve;\ntypedef union {\n    struct Primitive* prim;\n    char stub[0x40];\n    ET_TimerOnly timer;\n    ET_EntFactory factory;\n    ET_Generic generic;\n    ET_EntitySlot1 entSlot1;\n    ET_EntitySlot16 entSlot16;\n    ET_Entity12 ent12;\n    ET_Entity13 ent13;\n    ET_8011E4BC et_8011E4BC;\n    ET_HellfireHandler hellfireHandler;\n    ET_ReboundStone reboundStone;\n    ET_8016D9C4 et_8016D9C4;\n    ET_8016E46C et_8016E46C;\n    ET_8016DF74 et_8016DF74;\n    ET_CrossBoomerang crossBoomerang;\n    ET_Vibhuti vibhuti;\n    ET_HolyWater holywater;\n    ET_HolyWaterFlame holywaterflame;\n    ET_CrashCross crashcross;\n    ET_AguneaCrash aguneaCrash;\n    ET_AxeCrash axeCrash;\n    ET_VibhutiCrash vibhutiCrash;\n    ET_RicRevivalColumn ricColumn;\n    ET_GiantSpinningCross giantcross;\n    ET_EquipItemDrop equipItemDrop;\n    ET_HeartDrop heartDrop;\n    ET_BloodDroplets bloodDroplets;\n    ET_BloodSplatter bloodSplatter;\n    ET_NumericDamage ndmg;\n    ET_RelicOrb relicOrb;\n    ET_Door door;\n    ET_StagePopup stpopup;\n    ET_StagePopupJP stpopupj;\n    ET_MessageBox messageBox;\n    ET_Weapon weapon;\n    ET_Shield shield;\n    ET_DarkShield darkShield;\n    ET_KarmaCoin karmacoin;\n    ET_HeavenSword heavenSword;\n    ET_HeavenSword2 heavenSword2;\n    ET_MedusaShieldLaser medshieldlaser;\n    ET_ShamanShieldStar shamanshieldstar;\n    ET_HeraldShieldSwirlEffect heraldSwirl;\n    ET_Food food;\n    ET_HitByIce hitbyice;\n    ET_HitByLightning hitbylightning;\n    ET_PlayerBlink playerBlink;\n    ET_Mist mist;\n    ET_Bat bat;\n    ET_BatEcho batEcho;\n    ET_SoulStealOrb soulStealOrb;\n    ET_GaibonSlogra GS_Props;\n    ET_WarpRoom warpRoom;\n    ET_Teleport teleport;\n    ET_Merman merman;\n    ET_Merman_2 merman2;\n    ET_MermanWaterSplash mermanWaterSplash;\n    ET_80128C2C et_80128C2C;\n    ET_801291C4 et_801291C4;\n    ET_8017091C et_8017091C;\n    ET_80170F64 et_80170F64;\n    ET_stopwatchCircle et_stopwatchCircle;\n    ET_stopwatchSparkle et_stopWatchSparkle;\n    ET_stopwatch stopwatch;\n    ET_80161FF0 et_80161FF0;\n    ET_80162870 et_80162870;\n    ET_80166784 et_80166784;\n    ET_RichterPowerUpRing ricPowerRing;\n    ET_TransparentWhiteCircle whiteCircle;\n    ET_8016E9E4 et_8016E9E4;\n    ET_801719A4 et_801719A4;\n    ET_BibleSubwpn et_BibleSubwpn;\n    ET_801CF254 et_801CF254;\n    ET_GurkhaSword gurkhaSword;\n    ET_Dracula dracula;\n    ET_DracFinal dracFinalForm;\n    ET_Succubus succubus;\n    ET_StageTitleCard stageTitleCard;\n    ET_RoomTransition2 roomTransition2;\n    ET_801B3C38 et38;\n    ET_801BCC4C et_801BCC4C;\n    ET_ShuttingWindow shuttingWindow;\n    ET_CastleDoor castleDoor;\n    ET_DeathSkySwirl deathSkySwirl;\n    ET_Elevator elevator;\n    ET_801D0B40 et_801D0B40;\n    ET_801D1BB8 et_801D1BB8;\n    ET_801D0B78 et_801D0B78;\n    ET_WaterEffects waterEffects;\n    ET_GurkhaHammer GH_Props;\n    ET_801CE4CC et_801CE4CC;\n    ET_801CDFD8 et_801CDFD8;\n    ET_TransparentWater transparentWater;\n    ET_HeartRoomGoldDoor heartRoomGoldDoor;\n    ET_CastleDoorTransition castleDoorTransition;\n    ET_AlucardController alucardController;\n    ET_ForegroundTree foregroundTree;\n    ET_FadeToWhite fadeToWhite;\n    ET_DeathStolenItems deathStolenItems;\n    ET_Death death;\n    ET_SpittleBone spittleBone;\n    ET_Player player;\n    ET_801CC820 et_801CC820;\n    ET_801AF774 et_801AF774;\n    ET_Drop drop;\n    ET_BigRedFireball bigredfireball;\n    ET_SummonSpirit summonspirit;\n    ET_3DBackgroundhouse bghouse;\n    ET_LifeUpSpawn lifeUpSpawn;\n    ET_AxeKnight axeknight;\n    ET_801B0AA4 et_801B0AA4;\n    ET_Owl owl;\n    ET_AlucardWaterEffect aluwater;\n    ET_80123B40 et_80123B40;\n    ET_80129864 et_80129864;\n    ET_801B28E4 et_801B28E4;\n    ET_PlayerOutline playerOutline;\n    ET_HPNumberMove hpNumMove;\n    ET_GuardText guardText;\n    ET_Dissolve dissolve;\n} Ext;\ntypedef enum {\n    Game_Init,\n    Game_Title,\n    Game_Play,\n    Game_GameOver,\n    Game_NowLoading,\n    Game_VideoPlayback,\n    Game_Unk6,\n    Game_PrologueEnd,\n    Game_MainMenu,\n    Game_Ending,\n    Game_Boot,\n    Game_99 = 99,\n} GameState;\ntypedef enum {\n    STAGE_NO0 = 0x00,\n    STAGE_NO1 = 0x01,\n    STAGE_LIB = 0x02,\n    STAGE_CAT = 0x03,\n    STAGE_NO2 = 0x04,\n    STAGE_CHI = 0x05,\n    STAGE_DAI = 0x06,\n    STAGE_NP3 = 0x07,\n    STAGE_CEN = 0x08,\n    STAGE_NO4 = 0x09,\n    STAGE_ARE = 0x0A,\n    STAGE_TOP = 0x0B,\n    STAGE_NZ0 = 0x0C,\n    STAGE_NZ1 = 0x0D,\n    STAGE_WRP = 0x0E,\n    STAGE_NO1_ALT = 0x0F,\n    STAGE_NO0_ALT = 0x10,\n    STAGE_DRE = 0x12,\n    STAGE_NZ0_DEMO = 0x13,\n    STAGE_NZ1_DEMO = 0x14,\n    STAGE_LIB_DEMO = 0x15,\n    STAGE_BO7 = 0x16,\n    STAGE_MAR = 0x17,\n    STAGE_BO6 = 0x18,\n    STAGE_BO5 = 0x19,\n    STAGE_BO4 = 0x1A,\n    STAGE_BO3 = 0x1B,\n    STAGE_BO2 = 0x1C,\n    STAGE_BO1 = 0x1D,\n    STAGE_BO0 = 0x1E,\n    STAGE_ST0 = 0x1F,\n    STAGE_RNO0 = STAGE_NO0 | 0x20,\n    STAGE_RNO1 = STAGE_NO1 | 0x20,\n    STAGE_RLIB = STAGE_LIB | 0x20,\n    STAGE_RCAT = STAGE_CAT | 0x20,\n    STAGE_RNO2 = STAGE_NO2 | 0x20,\n    STAGE_RCHI = STAGE_CHI | 0x20,\n    STAGE_RDAI = STAGE_DAI | 0x20,\n    STAGE_RNO3 = STAGE_NP3 | 0x20,\n    STAGE_RCEN = STAGE_CEN | 0x20,\n    STAGE_RNO4 = STAGE_NO4 | 0x20,\n    STAGE_RARE = STAGE_ARE | 0x20,\n    STAGE_RTOP = STAGE_TOP | 0x20,\n    STAGE_RNZ0 = STAGE_NZ0 | 0x20,\n    STAGE_RNZ1 = STAGE_NZ1 | 0x20,\n    STAGE_RWRP = STAGE_WRP | 0x20,\n    STAGE_RNZ1_DEMO = 0x35,\n    STAGE_RBO8 = 0x36,\n    STAGE_RBO7 = 0x37,\n    STAGE_RBO6 = 0x38,\n    STAGE_RBO5 = 0x39,\n    STAGE_RBO4 = 0x3A,\n    STAGE_RBO3 = 0x3B,\n    STAGE_RBO2 = 0x3C,\n    STAGE_RBO1 = 0x3D,\n    STAGE_RBO0 = 0x3E,\n    STAGE_MAD = 0x40,\n    STAGE_NO3 = 0x41,\n    STAGE_IWA_LOAD = 0x42,\n    STAGE_IGA_LOAD = 0x43,\n    STAGE_HAGI_LOAD = 0x44,\n    STAGE_SEL = 0x45,\n    STAGE_TE1 = 0x46,\n    STAGE_TE2 = 0x47,\n    STAGE_TE3 = 0x48,\n    STAGE_TE4 = 0x49,\n    STAGE_TE5 = 0x4A,\n    STAGE_TOP_ALT = 0x4B,\n    STAGE_EU_WARNING = 0x70,\n    STAGE_ENDING = 0xFE,\n    STAGE_MEMORYCARD = 0xFF,\n} Stages;\ntypedef enum {\n    Play_Reset = 0,\n    Play_Init,\n    Play_PrepareDemo,\n    Play_Default,\n    Play_PrepareNextStage,\n    Play_LoadStageChr,\n    Play_WaitStageChr,\n    Play_LoadStageSfx,\n    Play_WaitStageSfx,\n    Play_LoadStagePrg,\n    Play_WaitStagePrg,\n    Play_16 = 16,\n    Gameover_Init = 0,\n    Gameover_AllocResources,\n    Gameover_2,\n    Gameover_3,\n    Gameover_4,\n    Gameover_5,\n    Gameover_6,\n    Gameover_7,\n    Gameover_8,\n    Gameover_9,\n    Gameover_10,\n    Gameover_11,\n    Gameover_Alt = 99,\n    Gameover_Init_Alt,\n    Gameover_AllocResources_Alt,\n    Gameover_2_Alt,\n    Gameover_3_Alt,\n    Gameover_11_Alt = 111,\n    NowLoading_2 = 2,\n} GameSteps;\ntypedef enum {\n    Demo_None,\n    Demo_PlaybackInit,\n    Demo_Recording,\n    Demo_End,\n    Demo_Playback,\n} DemoMode;\ntypedef enum {\n    TIMEATTACK_INVALID = -1,\n    TIMEATTACK_GET_RECORD,\n    TIMEATTACK_SET_RECORD,\n    TIMEATTACK_SET_VISITED,\n} TimeAttackActions;\ntypedef enum {\n    TIMEATTACK_EVENT_DRACULA_DEFEAT,\n    TIMEATTACK_EVENT_ORLOX_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_10_DEFEAT,\n    TIMEATTACK_EVENT_GRANFALOON_DEFEAT,\n    TIMEATTACK_EVENT_MINOTAUR_WEREWOLF_DEFEAT,\n    TIMEATTACK_EVENT_SCYLLA_DEFEAT,\n    TIMEATTACK_EVENT_SLOGRA_GAIBON_DEFEAT,\n    TIMEATTACK_EVENT_HYPPOGRYPH_DEFEAT,\n    TIMEATTACK_EVENT_BEELZEBUB_DEFEAT,\n    TIMEATTACK_EVENT_SUCCUBUS_DEFEAT,\n    TIMEATTACK_EVENT_KARASUMAN_DEFEAT,\n    TIMEATTACK_EVENT_RALPH_GRANT_SYPHA_DEFEAT,\n    TIMEATTACK_EVENT_DEATH_DEFEAT,\n    TIMEATTACK_EVENT_CERBERUS_DEFEAT,\n    TIMEATTACK_EVENT_SAVE_RICHTER,\n    TIMEATTACK_EVENT_MEDUSA_DEFEAT,\n    TIMEATTACK_EVENT_THE_CREATURE_DEFEAT,\n    TIMEATTACK_EVENT_LESSER_DEMON_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_40_DEFEAT,\n    TIMEATTACK_EVENT_AKMODAN_II_DEFEAT,\n    TIMEATTACK_EVENT_DARKWING_BAT_DEFEAT,\n    TIMEATTACK_EVENT_GALAMOTH_DEFEAT,\n    TIMEATTACK_EVENT_FINAL_SAVEPOINT,\n    TIMEATTACK_EVENT_MEET_DEATH,\n    TIMEATTACK_EVENT_GET_HOLYGLASSES,\n    TIMEATTACK_EVENT_MEET_MASTER_LIBRARIAN,\n    TIMEATTACK_EVENT_FIRST_MARIA_MEET,\n    NUM_TIMEATTACK_EVENTS,\n    TIMEATTACK_EVENT_UNUSED_28,\n    TIMEATTACK_EVENT_UNUSED_29,\n    TIMEATTACK_EVENT_UNUSED_30,\n    TIMEATTACK_EVENT_UNUSED_31,\n    TIMEATTACK_EVENT_END,\n    TIMEATTACK_EVENT_INVALID = 0xFF,\n} TimeAttackEvents;\nstruct Entity;\ntypedef struct {\n              s32 x;\n              s32 y;\n} Point32;\ntypedef struct {\n               u8 vabid;\n               u8 prog;\n               u8 note;\n               s8 volume;\n               u8 unk4;\n               u8 tone;\n               u8 unk6;\n} Unkstruct_800BF554;\ntypedef struct {\n               u_long* desc;\n               u_long* data;\n               u16 unk8;\n               u16 index;\n               u16 unkC;\n               u16 unkE;\n               u8 unkArray[0x30];\n} Unkstruct_8006C3C4;\ntypedef struct {\n               char pad0[0x14];\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Unkstruct_8010BF64;\ntypedef struct {\n               s16 sndId;\n               u16 unk02;\n               s16 unk04;\n} SfxRingBufferItem;\ntypedef struct {\n               s32 unk0;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n} Unkstruct_800EA5E4;\ntypedef struct {\n    s32 unk0;\n    s32 unk4;\n    s32 unk8;\n    s32 unkC;\n} Unkstruct_800FDB18;\ntypedef struct Unkstruct_801C6C6C {\n    union {\n        struct {\n            u16 w;\n            u16 x;\n        } c;\n        s32 p;\n    } x;\n    union {\n        struct {\n            u16 h;\n            u16 y;\n        } c;\n        s32 p;\n    } y;\n} Unkstruct_801C6C6C;\ntypedef struct {\n    u16 start;\n    s16 current;\n    s16* coords;\n    s16 unk8;\n} Unkstruct_80102CD8;\ntypedef struct {\n              s16 animSet;\n              s16 unk2;\n              u16 palette;\n              s8 drawMode;\n              char pad_7;\n              s32 unk8;\n} Unkstruct_80180FE0;\ntypedef struct Unkstruct_801C7954 {\n               u16 x1;\n               u16 x0;\n               u16 y2;\n               u16 y0;\n               u16 y3;\n               u16 y1;\n               u16 x3;\n               u16 x2;\n} Unkstruct_801C7954;\ntypedef struct {\n    u8 unk0[7];\n    u8 unk8;\n    u8 pad2[8];\n    u8 unk16[1];\n    u8 pad3[5];\n    u32 unk18;\n} Unkstruct_800ADEF0;\ntypedef struct {\n    u16 palette;\n    u8 unk2;\n} Unkstruct_800AE180;\ntypedef struct {\n                     s32 D_800973F8;\n                     s32 D_800973FC;\n                     s32 unk0;\n                     s32 unk4;\n                     Multi g_zEntityCenter;\n                     s32 unkC;\n                     s32 BottomCornerTextTimer;\n                     s32 BottomCornerTextPrims;\n                     s32 unk18;\n                     s32 unk1C;\n                     s32 unk20;\n                     s32 unk24;\n                     s32 D_80097428[8];\n} unkGraphicsStruct;\ntypedef struct {\n    u8 count;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 w;\n    u8 h;\n    u16 priority;\n    u16 drawMode;\n    s16 unkA;\n    u32 flags;\n} unkStr_8011E4BC;\ntypedef struct {\n    s32 : 32;\n    s16 unk4;\n    s16 unk6;\n    s16 unk8;\n    s16 unkA;\n    s16 unkC;\n    s32 unk10;\n    s32 unk14;\n    s32 unk18;\n} Unkstruct_8012BEF8;\ntypedef struct {\n    u8 childId;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n    u8 unk4;\n    u8 unk5;\n} FactoryBlueprint;\ntypedef struct {\n    s16 xOffset;\n    s16 yOffset;\n    s32 velocityX;\n    s32 velocityY;\n    s16 timerInit;\n    s16 tpage;\n    s16 clut;\n    u8 uBase;\n    u8 vBase;\n} unkStr80154E5C;\ntypedef struct {\n    s32 unk0;\n    s16 unk4;\n} unkstr_800cfe48;\ntypedef struct {\n    f32 x;\n    f32 y;\n} Pos;\ntypedef struct {\n    f32 posX;\n    f32 posY;\n} Camera;\ntypedef struct {\n    unsigned char width;\n    unsigned char height;\n    unsigned short unk2;\n    unsigned char data[0];\n} ImgSrc;\ntypedef struct {\n             u32 gfxOff;\n             u32 ovlOff;\n             u32 ovlLen;\n             u32 vhOff;\n             u32 vhLen;\n             u32 vbLen;\n             u32 unk18;\n             const char* gfxName;\n             const char* ovlName;\n             const char* name;\n             u8 unk28;\n             s8 seqIdx;\n             u16 unk2A;\n} Lba;\ntypedef struct {\n               s16 cursorX;\n               s16 cursorY;\n               s16 cursorW;\n               s16 cursorH;\n               RECT unk1;\n               s16 w;\n               s16 h;\n               s16 unk14;\n               s16 unk16;\n               s16 otIdx;\n               s16 unk1A;\n               u8 unk1C;\n               u8 unk1D;\n} MenuContext;\ntypedef struct {\n              u8 tileLayoutId;\n              u8 tilesetId;\n              u8 objGfxId;\n              u8 objLayoutId;\n} RoomLoadDef;\ntypedef struct {\n    RoomLoadDef* def;\n} RoomLoadDefHolder;\ntypedef struct {\n              u8 left;\n              u8 top;\n              u8 right;\n              u8 bottom;\n              RoomLoadDef load;\n} RoomHeader;\ntypedef struct {\n              u16 x;\n              u16 y;\n              u16 roomId;\n              u16 unk6;\n              u16 stageId;\n} RoomTeleport;\ntypedef struct {\n               s32 x;\n               s32 y;\n               Stages stageId;\n               TimeAttackEvents eventId;\n               s32 unk10;\n} RoomBossTeleport;\ntypedef struct {\n              u16 pressed;\n              s16 previous;\n              u16 tapped;\n              u16 repeat;\n} Pad;\ntypedef struct {\n    u16 duration;\n    u16 unk2;\n} AnimationFrame;\ntypedef struct {\n    s8 unk0;\n    s8 unk2;\n    s8 hitboxWidth;\n    s8 hitboxHeight;\n} FrameProperty;\ntypedef enum {\n    Player_Stand,\n    Player_Walk,\n    Player_Crouch,\n    Player_Fall,\n    Player_Jump,\n    Player_MorphBat,\n    Player_AlucardStuck,\n    Player_MorphMist,\n    Player_HighJump,\n    Player_UnmorphBat,\n    Player_Hit,\n    Player_StatusStone,\n    Player_BossGrab,\n    Player_KillWater,\n    Player_UnmorphMist,\n    Player_SwordWarp,\n    Player_Kill,\n    Player_Unk17,\n    Player_Teleport,\n    Player_FlameWhip,\n    Player_Hydrostorm,\n    Player_ThousandBlades,\n    Player_RichterFourHolyBeasts,\n    Player_Slide,\n    Player_MorphWolf,\n    Player_UnmorphWolf,\n    Player_SlideKick,\n    Player_Unk27,\n    Player_SpellDarkMetamorphosis = 32,\n    Player_SpellSummonSpirit,\n    Player_SpellHellfire,\n    Player_SpellTetraSpirit,\n    Player_Spell36,\n    Player_SpellSoulSteal,\n    Player_Unk38,\n    Player_SpellSwordBrothers,\n    Player_AxearmorStand,\n    Player_AxearmorWalk,\n    Player_AxearmorJump,\n    Player_AxearmorHit,\n    Player_Unk48 = 48,\n    Player_Unk49,\n    Player_Unk50\n} PlayerSteps;\ntypedef struct Entity {\n               f32 posX;\n               f32 posY;\n               s32 velocityX;\n               s32 velocityY;\n               s16 hitboxOffX;\n               s16 hitboxOffY;\n               u16 facingLeft;\n               u16 palette;\n               u8 drawMode;\n               u8 drawFlags;\n               s16 rotX;\n               s16 rotY;\n               s16 rotZ;\n               s16 rotPivotX;\n               s16 rotPivotY;\n               u16 zPriority;\n               u16 entityId;\n               PfnEntityUpdate pfnUpdate;\n               u16 step;\n               u16 step_s;\n               u16 params;\n               u16 entityRoomIndex;\n               s32 flags;\n               s16 unk38;\n               u16 enemyId;\n               u16 hitboxState;\n               s16 hitPoints;\n               s16 attack;\n               s16 attackElement;\n               u16 unk44;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               u8 hitFlags;\n               u8 nFramesInvincibility;\n               s16 unk4A;\n               AnimationFrame* unk4C;\n               u16 animFrameIdx;\n               s16 animFrameDuration;\n               s16 animSet;\n               s16 animCurFrame;\n               s16 stunFrames;\n               u16 unk5A;\n               struct Entity* unk5C;\n               struct Entity* unk60;\n               s32 primIndex;\n               u16 unk68;\n               u16 hitEffect;\n               u8 unk6C;\n               u8 unk6D[11];\n               s32 unk78;\n               Ext ext;\n} Entity;\ntypedef struct {\n               u16 animSet;\n               u16 zPriority;\n               Multi16 unk4;\n               u16 palette;\n               u16 drawFlags;\n               u16 drawMode;\n               u32 unkC;\n               u8* unk10;\n} ObjInit2;\ntypedef struct GpuBuffer {\n                  struct GpuBuffer* next;\n                  DRAWENV draw;\n                  DISPENV disp;\n                  DR_ENV env[0x10];\n                  u_long ot[0x200];\n                  DR_MODE drawModes[0x400];\n                  POLY_GT4 polyGT4[0x300];\n                  POLY_G4 polyG4[0x100];\n                  POLY_GT3 polyGT3[0x30];\n                  LINE_G2 lineG2[0x100];\n                  SPRT_16 sprite16[0x280];\n                  TILE tiles[0x100];\n                  SPRT sprite[0x200];\n} GpuBuffer;\ntypedef struct {\n               u32 drawModes;\n               u32 gt4;\n               u32 g4;\n               u32 gt3;\n               u32 line;\n               u32 sp16;\n               u32 tile;\n               u32 sp;\n               u32 env;\n} GpuUsage;\ntypedef enum {\n    GFX_BANK_NONE,\n    GFX_BANK_4BPP,\n    GFX_BANK_8BPP,\n    GFX_BANK_16BPP,\n    GFX_BANK_COMPRESSED,\n} GfxBankKind;\ntypedef struct {\n               u_long* xy;\n               u_long* wh;\n               u_long* data;\n} GfxEntry;\ntypedef struct {\n    GfxBankKind kind;\n    GfxEntry entries[0];\n} GfxBank;\ntypedef struct {\n              GfxEntry* next;\n              u16 kind;\n              s16 unk6;\n              s16 unk8;\n              s16 unkA;\n} GfxLoad;\ntypedef enum EquipKind {\n    EQUIP_HAND,\n    EQUIP_HEAD,\n    EQUIP_ARMOR,\n    EQUIP_CAPE,\n    EQUIP_ACCESSORY,\n    NUM_EQUIP_KINDS,\n} EquipKind;\ntypedef enum {\n    ITEM_S_SWORD,\n    ITEM_SWORD,\n    ITEM_THROW_1,\n    ITEM_FIST,\n    ITEM_CLUB,\n    ITEM_TWOHAND,\n    ITEM_FOOD,\n    ITEM_BOMB,\n    ITEM_THROW_2,\n    ITEM_SHIELD,\n    ITEM_MEDICINE,\n    ITEM_END,\n} ItemCategory;\ntypedef enum {\n    SUBWPN_NONE,\n    SUBWPN_DAGGER,\n    SUBWPN_AXE,\n    SUBWPN_HOLYWATER,\n    SUBWPN_CROSS,\n    SUBWPN_BIBLE,\n    SUBWPN_STOPWATCH,\n    SUBWPN_REBNDSTONE,\n    SUBWPN_VIBHUTI,\n    SUBWPN_AGUNEA\n} SubWpnID;\ntypedef enum { STAT_STR, STAT_CON, STAT_INT, STAT_LCK } Stats;\ntypedef struct {\n    s32 level;\n    s32 exp;\n    s32 unk8;\n} FamiliarStats;\ntypedef enum {\n    RELIC_SOUL_OF_BAT,\n    RELIC_FIRE_OF_BAT,\n    RELIC_ECHO_OF_BAT,\n    RELIC_FORCE_OF_ECHO,\n    RELIC_SOUL_OF_WOLF,\n    RELIC_POWER_OF_WOLF,\n    RELIC_SKILL_OF_WOLF,\n    RELIC_FORM_OF_MIST,\n    RELIC_POWER_OF_MIST,\n    RELIC_GAS_CLOUD,\n    RELIC_CUBE_OF_ZOE,\n    RELIC_SPIRIT_ORB,\n    RELIC_GRAVITY_BOOTS,\n    RELIC_LEAP_STONE,\n    RELIC_HOLY_SYMBOL,\n    RELIC_FAERIE_SCROLL,\n    RELIC_JEWEL_OF_OPEN,\n    RELIC_MERMAN_STATUE,\n    RELIC_BAT_CARD,\n    RELIC_GHOST_CARD,\n    RELIC_FAERIE_CARD,\n    RELIC_DEMON_CARD,\n    RELIC_SWORD_CARD,\n    RELIC_JP_0,\n    RELIC_JP_1,\n    RELIC_HEART_OF_VLAD,\n    RELIC_TOOTH_OF_VLAD,\n    RELIC_RIB_OF_VLAD,\n    RELIC_RING_OF_VLAD,\n    RELIC_EYE_OF_VLAD,\n    NUM_RELICS,\n} RelicIds;\ntypedef enum {\n    SPELL_DARK_METAMORPHOSIS,\n    SPELL_SUMMON_SPIRIT,\n    SPELL_HELLFIRE,\n    SPELL_TETRA_SPIRIT,\n    SPELL_WOLF_CHARGE,\n    SPELL_SOUL_STEAL,\n    SPELL_WING_SMASH,\n    SPELL_SWORD_BROTHERS,\n    NUM_SPELLS,\n} SpellIds;\ntypedef enum {\n    FAM_STATS_BAT,\n    FAM_STATS_GHOST,\n    FAM_STATS_FAERIE,\n    FAM_STATS_DEMON,\n    FAM_STATS_SWORD,\n    FAM_STATS_YOUSEI,\n    FAM_STATS_NOSE_DEMON,\n    NUM_FAMILIARS\n} FamiliarStatsIds;\ntypedef enum {\n    FAM_ACTIVE_NONE,\n    FAM_ACTIVE_BAT = FAM_STATS_BAT + 1,\n    FAM_ACTIVE_GHOST = FAM_STATS_GHOST + 1,\n    FAM_ACTIVE_FAERIE = FAM_STATS_FAERIE + 1,\n    FAM_ACTIVE_DEMON = FAM_STATS_DEMON + 1,\n    FAM_ACTIVE_SWORD = FAM_STATS_SWORD + 1,\n    FAM_ACTIVE_YOUSEI = FAM_STATS_YOUSEI + 1,\n    FAM_ACTIVE_NOSE_DEMON = FAM_STATS_NOSE_DEMON + 1,\n} FamiliarActiveIds;\ntypedef struct {\n                   u8 relics[30];\n                   u8 spells[NUM_SPELLS];\n                   u8 equipHandCount[169];\n                   u8 equipBodyCount[90];\n                   u8 equipHandOrder[169];\n                   u8 equipBodyOrder[90];\n                   u8 saveName[12];\n                   u32 spellsLearnt;\n                   s32 hp;\n                   s32 hpMax;\n                   s32 hearts;\n                   s32 heartsMax;\n                   s32 mp;\n                   s32 mpMax;\n                   s32 statsBase[4];\n                   s32 statsEquip[4];\n                   s32 statsTotal[4];\n                   u32 level;\n                   u32 exp;\n                   s32 gold;\n                   s32 killCount;\n                   u32 D_80097BF8;\n                   u32 subWeapon;\n                   u32 equipment[7];\n                   u32 attackHands[2];\n                   s32 defenseEquip;\n                   u16 defenseElement;\n                   u16 D_80097C2A;\n                   u16 D_80097C2C;\n                   u16 D_80097C2E;\n                   s32 timerHours;\n                   s32 timerMinutes;\n                   s32 timerSeconds;\n                   s32 timerFrames;\n                   u32 D_80097C40;\n                   FamiliarStats statsFamiliars[NUM_FAMILIARS];\n} PlayerStatus;\ntypedef struct {\n                         s32 cursorMain;\n                         s32 cursorRelic;\n                         s32 cursorEquip;\n                         s32 cursorEquipType[NUM_EQUIP_KINDS];\n                         s32 scrollEquipType[NUM_EQUIP_KINDS];\n                         s32 cursorSpells;\n                         s32 cursorSettings;\n                         s32 cursorCloak;\n                         s32 cursorButtons;\n                         s32 cursorWindowColors;\n                         s32 cursorTimeAttack;\n} MenuNavigation;\ntypedef struct {\n                            u32 buttonConfig[8];\n                            u16 buttonMask[8];\n                            s32 timeAttackRecords[TIMEATTACK_EVENT_END];\n                            s32 cloakColors[6];\n                            s32 windowColors[3];\n                            s32 equipOrderTypes[ITEM_END];\n                            s32 isCloakLiningReversed;\n                            s32 isSoundMono;\n                            s32 D_8003CB00;\n                            s32 D_8003CB04;\n} GameSettings;\ntypedef struct {\n               u8 Magic[2];\n               u8 Type;\n               u8 BlockEntry;\n               u8 Title[64];\n               u8 reserve[28];\n               u8 Clut[32];\n               u8 Icon[3][128];\n} MemcardHeader;\ntypedef struct {\n               char name[12];\n               s32 level;\n               s32 gold;\n               s32 playHours;\n               s32 playMinutes;\n               s32 playSeconds;\n               s32 cardIcon;\n               s32 endGameFlags;\n               s16 stage;\n               u16 nRoomsExplored;\n               u16 roomX;\n               u16 roomY;\n               s32 character;\n               s32 saveSize;\n} SaveInfo;\ntypedef struct {\n                MemcardHeader header;\n                SaveInfo info;\n                PlayerStatus status;\n                MenuNavigation menuNavigation;\n                GameSettings settings;\n                u8 castleFlags[0x300];\n                u8 castleMap[0x800];\n                 s32 rng;\n} SaveData;\ntypedef struct {\n               u8* gfxPage;\n               u8* gfxIndex;\n               u8* clut;\n               u8* collision;\n} TileDefinition;\ntypedef struct {\n               u32 left : 6;\n               u32 top : 6;\n               u32 right : 6;\n               u32 bottom : 6;\n               u8 params : 8;\n} LayoutRect;\ntypedef struct {\n               u16* layout;\n               TileDefinition* tileDef;\n               LayoutRect rect;\n               u16 zPriority;\n               u16 flags;\n} LayerDef;\ntypedef struct {\n    LayerDef* fg;\n    LayerDef* bg;\n} RoomDef;\ntypedef struct {\n               s16 x;\n               s16 y;\n               s16 width;\n               s16 height;\n               s16 clut;\n               s16 tpage;\n               s16 texLeft;\n               s16 texTop;\n               s16 texRight;\n               s16 texBottom;\n} Sprite;\ntypedef struct {\n             s16 flags;\n             s16 offsetx;\n             s16 offsety;\n             s16 width;\n             s16 height;\n             s16 clut;\n             s16 tileset;\n             s16 left;\n             s16 top;\n             s16 right;\n             s16 bottom;\n} SpritePart;\ntypedef struct {\n             u16 count;\n             SpritePart parts[0];\n} SpriteParts;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*HitDetection)(void);\n                   void (*UpdateRoomPosition)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   SpriteParts** spriteBanks;\n                   u_long** cluts;\n                   void* objLayoutHorizontal;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*UpdateStageEntities)(void);\n                   u8** unk2c;\n                   u8** unk30;\n                   s32* unk34;\n                   s32* unk38;\n                   void (*StageEndCutScene)(void);\n} Overlay;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*HitDetection)(void);\n                   void (*UpdateRoomPosition)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   SpriteParts** spriteBanks;\n                   u_long** cluts;\n                   void* objLayoutHorizontal;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*UpdateStageEntities)(void);\n} AbbreviatedOverlay;\ntypedef enum {\n    EFFECT_SOLID = 1 << 0,\n    EFFECT_UNK_0002 = 1 << 1,\n    EFFECT_QUICKSAND = 1 << 2,\n    EFFECT_WATER = 1 << 3,\n    EFFECT_MIST_ONLY = 1 << 4,\n    EFFECT_UNK_0020 = 1 << 5,\n    EFFECT_SOLID_FROM_ABOVE = 1 << 6,\n    EFFECT_SOLID_FROM_BELOW = 1 << 7,\n    EFFECT_UNK_0100 = 1 << 8,\n    EFFECT_UNK_0200 = 1 << 9,\n    EFFECT_UNK_0400 = 1 << 10,\n    EFFECT_UNK_0800 = 1 << 11,\n    EFFECT_UNK_1000 = 1 << 12,\n    EFFECT_UNK_2000 = 1 << 13,\n    EFFECT_UNK_4000 = 1 << 14,\n    EFFECT_UNK_8000 = 1 << 15,\n    EFFECT_NOTHROUGH = EFFECT_SOLID | EFFECT_QUICKSAND,\n    EFFECT_NOTHROUGH_PLUS = EFFECT_SOLID | EFFECT_UNK_0002 | EFFECT_QUICKSAND,\n    EFFECT_UNK_C000 = EFFECT_UNK_8000 | EFFECT_UNK_4000\n} ColliderEffectFlags;\ntypedef struct Collider {\n               u32 effects;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n               s32 unk10;\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Collider;\ntypedef struct XaMusicConfig {\n    u32 cd_addr;\n    s32 unk228;\n    u8 filter_file;\n    u8 filter_channel_id;\n    u8 volume;\n    u8 unk22f;\n    u8 unk230;\n    u8 pad[3];\n} XaMusicConfig;\ntypedef struct {\n               const char* name;\n               s16 hitPoints;\n               s16 attack;\n               u16 attackElement;\n               s16 defense;\n               u16 hitboxState;\n               u16 weaknesses;\n               u16 strengths;\n               u16 immunes;\n               u16 absorbs;\n               u16 level;\n               u16 exp;\n               u16 rareItemId;\n               u16 uncommonItemId;\n               u16 rareItemDropRate;\n               u16 uncommonItemDropRate;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               s32 flags;\n} EnemyDef;\ntypedef struct {\n               s16 attack;\n               s16 heartCost;\n               u16 attackElement;\n               u8 unk6;\n               u8 nFramesInvincibility;\n               u16 stunFrames;\n               u8 anim;\n               u8 blueprintNum;\n               u16 hitboxState;\n               u16 hitEffect;\n               u8 crashId;\n               u8 unk11;\n               u16 entityRoomIndex;\n} SubweaponDef;\ntypedef struct {\n               const char* name;\n               const char* description;\n               s16 attack;\n               s16 defense;\n               u16 element;\n               u8 itemCategory;\n               u8 weaponId;\n               u8 palette;\n               u8 unk11;\n               u8 playerAnim;\n               u8 unk13;\n               u8 unk14;\n               u8 lockDuration;\n               u8 chainLimit;\n               u8 unk17;\n               u8 specialMove;\n               u8 isConsumable;\n               u8 enemyInvincibilityFrames;\n               u8 unk1B;\n               u32 comboSub;\n               u32 comboMain;\n               u16 mpUsage;\n               u16 stunFrames;\n               u16 hitType;\n               u16 hitEffect;\n               u16 icon;\n               u16 iconPalette;\n               u16 criticalRate;\n               u16 unk32;\n} Equipment;\ntypedef struct {\n             const char* name;\n             const char* description;\n             s16 attBonus;\n             s16 defBonus;\n             u8 statsBonus[4];\n             u16 unk10;\n             u16 unk12;\n             u16 unk14;\n             u16 unk16;\n             u16 icon;\n             u16 iconPalette;\n             u16 equipType;\n             u16 unk1E;\n} Accessory;\ntypedef struct {\n               const char* name;\n               const char* combo;\n               const char* description;\n               u8 mpUsage;\n               s8 nFramesInvincibility;\n               s16 stunFrames;\n               s16 hitboxState;\n               s16 hitEffect;\n               s16 entityRoomIndex;\n               u16 attackElement;\n               s16 attack;\n               s16 unk1A;\n} SpellDef;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 unk08;\n               u16 unk0A;\n               s32 unk0C;\n} RelicDesc;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 icon;\n               u16 iconPalette;\n               u16 unk0C;\n               u16 unk0E;\n} RelicOrb;\ntypedef struct {\n               const char* nextCharDialogue;\n               s16 startX;\n               s16 nextLineY;\n               s16 startY;\n               s16 nextCharX;\n               s16 nextLineX;\n               s16 nextCharY;\n               s16 portraitAnimTimer;\n               u16 unk12;\n               u16 clutIndex;\n               u8 nextCharTimer;\n               u8 unk17;\n               Primitive* prim[6];\n               s32 primIndex[3];\n               u16 unk3C;\n               u16 timer;\n               const char* unk40;\n} Dialogue;\ntypedef struct {\n    u32 effects;\n    u32 damageKind;\n    s32 damageTaken;\n    s32 unkC;\n} DamageParam;\ntypedef struct {\n                   Overlay o;\n                   void (*FreePrimitives)(s32);\n                   s16 (*AllocPrimitives)(PrimitiveType type, s32 count);\n                   void (*CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\n                   void (*func_80102CD8)(s32 arg0);\n                   void (*UpdateAnim)(\n        FrameProperty* frameProps, AnimationFrame** anims);\n                   void (*SetSpeedX)(s32 value);\n                   Entity* (*GetFreeEntity)(s16 start, s16 end);\n                   void (*GetEquipProperties)(\n        s32 handId, Equipment* res, s32 equipId);\n                   s32 (*func_800EA5E4)(u32);\n                   void (*LoadGfxAsync)(s32 gfxId);\n                   void (*PlaySfx)(s32 sfxId);\n                   s16 (*func_800EDB58)(s32, s32);\n                   void (*func_800EA538)(s32 arg0);\n                   void (*g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\n                   void (*func_801027C4)(u32 arg0);\n                   void (*func_800EB758)(\n        s16 pivotX, s16 pivotY, Entity* e, u16 flags, POLY_GT4* p, u8 flipX);\n                   Entity* (*CreateEntFactoryFromEntity)(\n        Entity* self, u32 flags, s32 arg2);\n                   bool (*func_80131F68)(void);\n                   DR_ENV* (*func_800EDB08)(POLY_GT4* poly);\n                   u16* (*func_80106A28)(u32 arg0, u16 kind);\n                   void (*func_80118894)(Entity*);\n                   EnemyDef* enemyDefs;\n                   Entity* (*func_80118970)(void);\n                   s16 (*func_80118B18)(\n        Entity* ent1, Entity* ent2, s32 facingLeft);\n                   s32 (*UpdateUnarmedAnim)(s8* frameProps, u16** frames);\n                   void (*PlayAnimation)(s8*, AnimationFrame** frames);\n                   void (*func_80118C28)(s32 arg0);\n                   void (*func_8010E168)(s32 arg0, s16 arg1);\n                   void (*func_8010DFF0)(s32 arg0, s32 arg1);\n                   u16 (*DealDamage)(\n        Entity* enemyEntity, Entity* attackerEntity);\n                   void (*LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\n                   Equipment* equipDefs;\n                   Accessory* accessoryDefs;\n                   void (*AddHearts)(s32 value);\n                   bool (*LoadMonsterLibrarianPreview)(s32 monsterId);\n                   s32 (*TimeAttackController)(\n        TimeAttackEvents eventId, TimeAttackActions action);\n                   void* (*func_8010E0A8)(void);\n                   void (*func_800FE044)(s32, s32);\n                   void (*AddToInventory)(u32 id, EquipKind kind);\n                   RelicOrb* relicDefs;\n                   void (*InitStatsAndGear)(bool debugMode);\n                   s32 (*func_80134714)(s32 arg0, s32 arg1, s32 arg2);\n                   s32 (*func_80134678)(s16 arg0, u16 arg1);\n                   void (*func_800F53A4)(void);\n                   u32 (*CheckEquipmentItemCount)(u32 itemId, u32 equipType);\n                   void (*func_8010BF64)(Unkstruct_8010BF64* arg0);\n                   void (*func_800F1FC4)(s32 arg0);\n                   void (*func_800F2288)(s32 arg0);\n                   void (*func_8011A3AC)(\n        Entity* entity, s32 spellId, s32 arg2, FamiliarStats* out);\n                   s32 (*func_800FF460)(s32 arg0);\n                   s32 (*func_800FF494)(EnemyDef* arg0);\n                   bool (*CdSoundCommandQueueEmpty)(void);\n                   bool (*func_80133950)(void);\n                   bool (*func_800F27F4)(s32 arg0);\n                   s32 (*func_800FF110)(s32 arg0);\n                   s32 (*func_800FD664)(s32 arg0);\n                   s32 (*func_800FD5BC)(DamageParam* arg0);\n                   void (*LearnSpell)(s32 spellId);\n                   void (*DebugInputWait)(const char* str);\n                   void* unused12C;\n                   void* unused130;\n                   void* unused134;\n                   void* unused138;\n                   void* unused13C;\n} GameApi;\ntypedef struct {\n    void (*D_8013C000)(void);\n    void (*D_8013C004)(void);\n    void (*D_8013C008)(void);\n    void (*D_8013C00C)(void);\n} PlayerOvl;\nextern PlayerOvl g_PlOvl;\nextern u8** g_PlOvlAluBatSpritesheet[1];\nextern u8* g_PlOvlSpritesheet[];\nextern void (*g_api_FreePrimitives)(s32);\nextern s16 (*g_api_AllocPrimitives)(PrimitiveType type, s32 count);\nextern void (*g_api_CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\nextern void (*g_api_func_80102CD8)(s32 arg0);\nextern void (*g_api_UpdateAnim)(FrameProperty* frameProps, s32* arg1);\nextern void (*g_api_SetSpeedX)(s32 value);\nextern Entity* (*g_api_GetFreeEntity)(s16 start, s16 end);\nextern void (*g_api_GetEquipProperties)(\n    s32 handId, Equipment* res, s32 equipId);\nextern s32 (*g_api_func_800EA5E4)(u32);\nextern void (*g_api_LoadGfxAsync)(s32);\nextern void (*g_api_PlaySfx)(s32 sfxId);\nextern s16 (*g_api_func_800EDB58)(s32, s32);\nextern void (*g_api_func_800EA538)(s32 arg0);\nextern void (*g_api_g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\nextern Entity* (*g_api_CreateEntFactoryFromEntity)(\n    Entity* self, u32 flags, s32 arg2);\nextern bool (*g_api_func_80131F68)(void);\nextern DR_ENV* (*g_api_func_800EDB08)(POLY_GT4* poly);\nextern u16* (*g_api_func_80106A28)(u16 arg0, u16 kind);\nextern void (*g_api_func_80118894)(Entity*);\nextern EnemyDef* g_api_enemyDefs;\nextern u32 (*g_api_UpdateUnarmedAnim)(s8* frameProps, u16** frames);\nextern void (*g_api_PlayAnimation)(s8*, AnimationFrame** frames);\nextern void (*g_api_func_8010E168)(s32 arg0, s16 arg1);\nextern void (*g_api_func_8010DFF0)(s32 arg0, s32 arg1);\nextern u16 (*g_api_DealDamage)(Entity* enemyEntity, Entity* attackerEntity);\nextern void (*g_api_LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\nextern Equipment* g_api_equipDefs;\nextern Accessory* g_api_g_AccessoryDefs;\nextern void (*g_api_AddHearts)(s32 value);\nextern s32 (*g_api_TimeAttackController)(\n    TimeAttackEvents eventId, TimeAttackActions action);\nextern void* (*g_api_func_8010E0A8)(void);\nextern void (*g_api_func_800FE044)(s32, s32);\nextern void (*g_api_AddToInventory)(u16 id, EquipKind kind);\nextern RelicOrb* g_api_relicDefs;\nextern s32 (*g_api_func_80134714)(s32 arg0, s32 arg1, s32 arg2);\nextern s32 (*g_api_func_80134678)(s16 arg0, u16 arg1);\nextern void (*g_api_func_800F53A4)(void);\nextern u32 (*g_api_CheckEquipmentItemCount)(u32 itemId, u32 equipType);\nextern void (*g_api_func_8010BF64)(Unkstruct_8010BF64* arg0);\nextern void (*g_api_func_800F1FC4)(s32 arg0);\nextern void (*g_api_func_800F2288)(s32 arg0);\nextern void (*g_api_func_8011A3AC)(\n    Entity* entity, s32 spellId, s32 arg2, FamiliarStats* out);\nextern s32 (*g_api_func_800FF460)(s32 arg0);\nextern s32 (*g_api_func_800FF494)(EnemyDef* arg0);\nextern bool (*g_api_CdSoundCommandQueueEmpty)(void);\nextern bool (*g_api_func_80133950)(void);\nextern bool (*g_api_func_800F27F4)(s32 arg0);\nextern s32 (*g_api_func_800FF110)(s32 arg0);\nextern s32 (*g_api_func_800FD664)(s32 arg0);\nextern s32 (*g_api_func_800FD5BC)(DamageParam* arg0);\nextern void (*g_api_LearnSpell)(s32 spellId);\nextern void (*g_api_func_800E2438)(const char* str);\ntypedef struct {\n               u16** frames;\n               s8* frameProps;\n               u16 palette;\n               u16 soundId;\n               u8 frameStart;\n               u8 soundFrame;\n               s16 unused;\n} WeaponAnimation;\ntypedef struct {\n                        u16* layout;\n                        TileDefinition* tileDef;\n                        f32 scrollX;\n                        f32 scrollY;\n                        u32 unused10;\n                        u32 unused14;\n                        u32 order;\n                        u32 flags;\n                        u32 w;\n                        u32 h;\n                        u32 hideTimer;\n                        u32 scrollKind;\n} BgLayer;\ntypedef struct {\n                   u16* fg;\n                   TileDefinition* tileDef;\n                   f32 scrollX;\n                   f32 scrollY;\n                   s32 unused10;\n                   s32 unused14;\n                   s32 order;\n                   u32 flags;\n                   s32 hSize;\n                   s32 vSize;\n                   u32 hideTimer;\n                   s32 left;\n                   s32 top;\n                   s32 right;\n                   s32 bottom;\n                   s32 x;\n                   s32 y;\n                   s32 width;\n                   s32 height;\n                   s32 unk30;\n                   s32 D_800730D4;\n                   BgLayer bg[16];\n} Tilemap;\ntypedef struct {\n                     u16 flags;\n                     u16 unk2;\n                     u16 unk4;\n                     s16 zPriority;\n} FgLayer;\ntypedef struct {\n                   Collider colliders[4];\n                   Collider colliders2[4];\n                   Collider colliders3[14];\n                   s32 padPressed;\n                   s32 padTapped;\n                   s32 padHeld;\n                   u32 padSim;\n                   s32 D_80072EF8;\n                   s32 D_80072EFC;\n                   s16 D_80072F00[16];\n                   s32 pl_vram_flag;\n                   s32 unk04;\n                   s32 unk08;\n                   u32 unk0C;\n                   s32 unk10;\n                   u32 unk14;\n                   s32 unk18;\n                   s32 unk1C;\n                   s32 unk20;\n                   s32 unk24;\n                   s32 unk28;\n                   s32 unk2C;\n                   s32 unk30;\n                   s32 unk34;\n                   s32 unk38;\n                   s32 unk3C;\n                   u16 unk40;\n                   u16 pl_high_jump_timer;\n                   u16 unk44;\n                   u16 unk46;\n                   u16 unk48;\n                   s16 unk4A;\n                   u16 unk4C;\n                   u16 unk4E;\n                   u16 unk50;\n                   u16 unk52;\n                   u16 unk54;\n                   u16 unk56;\n                   u16 unk58;\n                   u16 damageTaken;\n                   u16 unk5C;\n                   u16 unk5E;\n                   u16 unk60;\n                   u16 unk62;\n                   u16 unk64;\n                   u16 unk66;\n                   u16 unk68;\n                   u16 unk6A;\n                   u16 unk6C;\n                   u16 unk6E;\n                   u16 unk70;\n                   u16 unk72;\n                   u32 unk74;\n                   u16 unk78;\n                   u16 unk7A;\n                   u16 unk7C;\n                   u16 unk7E;\n} PlayerState;\ntypedef struct {\n               RECT rect0;\n               RECT rect1;\n               RECT rect2;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 enableColorBlend;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 flipX;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 unk27;\n} PlayerDraw;\ntypedef struct {\n    s16 buttonsCorrect;\n    s16 timer;\n} ButtonComboState;\nextern s32 D_8003925C;\nextern s32 g_IsTimeAttackUnlocked;\nextern u8 g_CastleFlags[0x300];\nextern s32 D_8003C0EC[4];\nextern s32 D_8003C0F8;\nextern s32 D_8003C100;\nextern u16 g_ClutIds[];\nextern s32 D_8003C704;\nextern FgLayer D_8003C708;\nextern s16 D_8003C710;\nextern s16 D_8003C712;\nextern s32 D_8003C728;\nextern s32 D_8003C730;\nextern GameState g_GameState;\nextern s32 D_8003C738;\nextern s32 D_8003C73C;\nextern u32 D_8003C744;\nextern u32 g_RoomCount;\nextern GameApi g_api;\nextern s32 D_8003C8B8;\nextern u32 g_GameTimer;\nextern bool D_8003C908;\nextern s32 g_EquippedWeaponIds[2];\nextern u32 g_Timer;\nextern s32 g_MapCursorTimer;\n                 extern s32 g_PlayableCharacter;\n                 extern u32 D_8003C9A4;\n                 extern MenuNavigation g_MenuNavigation;\n                 extern GameSettings g_Settings;\nextern GpuBuffer g_GpuBuffers[2];\nextern s16 g_GpuBuffers_1_buf_draw_clip_y;\nextern const char g_MemcardSavePath[];\nextern const char aBaslus00067dra[19];\nextern const char g_strMemcardRootPath[];\nextern s32 g_LoadFile;\nextern s32 D_8006BB00;\nextern u8 g_CastleMap[0x800];\nextern s32 D_8006C374;\nextern s32 D_8006C378;\nextern GpuBuffer* g_CurrentBuffer;\nextern Point32 D_8006C384;\nextern Point32 D_8006C38C;\nextern u32 g_CdStep;\nextern s32 D_8006C3AC;\nextern s32 g_backbufferX;\nextern s32 g_backbufferY;\nextern s32 g_IsUsingCd;\nextern Entity* g_CurrentEntity;\nextern Unkstruct_8006C3C4 D_8006C3C4[32];\nextern s32 g_Servant;\nextern u16 g_Clut[0x3000];\nextern u16 D_8006EBCC[0x1000];\nextern u16 D_8006EBE0;\nextern s16 D_800705CC[];\nextern u32 D_80070BCC;\nextern PlayerState g_Player;\nextern Entity* D_psp_091CF3A0;\nextern s32 D_psp_091CF3A4;\nextern void (*D_psp_091CF3A8)(Entity*);\nextern s32 D_psp_091CF3AC;\nextern u16 D_psp_091CF3DC;\nextern GfxLoad g_GfxLoad[0x10];\nextern u32 g_GameStep;\nextern s32 g_ServantLoaded;\nextern Event g_EvSwCardEnd;\nextern Event g_EvSwCardErr;\nextern Event g_EvSwCardTmo;\nextern s32 g_PrevScrollX;\nextern Event g_EvSwCardNew;\nextern s32 g_PrevScrollY;\nextern s32 D_80073080;\nextern Tilemap g_Tilemap;\nextern Entity g_Entities[256];\nextern s32 g_entityDestroyed[18];\nextern Event g_EvHwCardEnd;\nextern Event g_EvHwCardErr;\nextern Event g_EvHwCardTmo;\nextern Event g_EvHwCardNew;\nextern u8 g_Pix[4][128 * 128 / 2];\nextern Primitive g_PrimBuf[0x500];\nextern s32 g_PlayerX;\nextern s32 g_PlayerY;\nextern u32 g_randomNext;\nextern s32 D_80096ED8[];\nextern s8 D_80097B98;\nextern s8 D_80097B99;\nextern s32 D_800973EC;\nextern unkGraphicsStruct g_unkGraphicsStruct;\nextern s32 D_80097448[];\nextern s32 D_80097450;\nextern Pos D_80097488;\nextern Pad g_pads[2];\nextern Stages g_StageId;\nextern s32 D_800974A4;\nextern DR_ENV D_800974AC[16];\nextern s32 g_UseDisk;\nextern s32 D_800978B4;\nextern s32 D_800978C4;\nextern u32 g_MenuStep;\nextern char D_80097902[];\nextern s32 D_80097904;\nextern s32 g_ScrollDeltaX;\nextern s32 g_ScrollDeltaY;\nextern s32 D_80097910;\nextern DemoMode g_DemoMode;\nextern s32 g_LoadOvlIdx;\nextern s32 D_8009791C;\nextern s32 D_80097920;\nextern s32 D_80097924;\nextern s32 D_80097928;\nextern GpuUsage g_GpuUsage;\nextern PlayerStatus g_Status;\nextern s32 D_80097C98;\nextern s32 subWeapon;\nextern u8 g_SaveName[12] ;\nextern u32 D_80097C40[];\nextern PlayerDraw g_PlayerDraw[0x10];\nextern s32 D_800987B4;\nextern s32 D_800987C8;\nextern s32 g_DebugPlayer;\nextern s32 D_80098894;\ntypedef enum ItemSlots {\n    LEFT_HAND_SLOT,\n    RIGHT_HAND_SLOT,\n    HEAD_SLOT,\n    ARMOR_SLOT,\n    CAPE_SLOT,\n    ACCESSORY_1_SLOT,\n    ACCESSORY_2_SLOT,\n    NUM_ITEM_SLOTS,\n} ItemSlots;\ntypedef enum HandItems {\n                ITEM_EMPTY_HAND,\n                ITEM_MONSTER_VIAL_1,\n                ITEM_MONSTER_VIAL_2,\n                ITEM_MONSTER_VIAL_3,\n                ITEM_SHIELD_ROD,\n                ITEM_LEATHER_SHIELD,\n                ITEM_KNIGHT_SHIELD,\n                ITEM_IRON_SHIELD,\n                ITEM_AXELORD_SHIELD,\n                ITEM_HERALD_SHIELD,\n                ITEM_DARK_SHIELD,\n                ITEM_GODDESS_SHIELD,\n                ITEM_SHAMAN_SHIELD,\n                ITEM_MEDUSA_SHIELD,\n                ITEM_SKULL_SHIELD,\n                ITEM_FIRE_SHIELD,\n                ITEM_ALUCARD_SHIELD,\n                ITEM_SWORD_OF_DAWN,\n                ITEM_BASILARD,\n                ITEM_SHORT_SWORD,\n                ITEM_COMBAT_KNIFE,\n                ITEM_NUNCHAKU,\n                ITEM_WERE_BANE,\n                ITEM_RAPIER,\n                ITEM_KARMA_COIN,\n                ITEM_MAGIC_MISSILE,\n                ITEM_RED_RUST,\n                ITEM_TAKEMITSU,\n                ITEM_SHOTEL,\n                ITEM_ORANGE,\n                ITEM_APPLE,\n                ITEM_BANANA,\n                ITEM_GRAPES,\n                ITEM_STRAWBERRY,\n                ITEM_PINEAPPLE,\n                ITEM_PEANUTS,\n                ITEM_TOADSTOOL,\n                ITEM_SHIITAKE,\n                ITEM_CHEESECAKE,\n                ITEM_SHORTCAKE,\n                ITEM_TART,\n                ITEM_PARFAIT,\n                ITEM_PUDDING,\n                ITEM_ICE_CREAM,\n                ITEM_FRANKFURTER,\n                ITEM_HAMBURGER,\n                ITEM_PIZZA,\n                ITEM_CHEESE,\n                ITEM_HAM_AND_EGGS,\n                ITEM_OMELETTE,\n                ITEM_MORNING_SET,\n                ITEM_LUNCH_A,\n                ITEM_LUNCH_B,\n                ITEM_CURRY_RICE,\n                ITEM_GYROS_PLATE,\n                ITEM_SPAGHETTI,\n                ITEM_GRAPE_JUICE,\n                ITEM_BARLEY_TEA,\n                ITEM_GREEN_TEA,\n                ITEM_NATOU,\n                ITEM_RAMEN,\n                ITEM_MISO_SOUP,\n                ITEM_SUSHI,\n                ITEM_PORK_BUN,\n                ITEM_RED_BEAN_BUN,\n                ITEM_CHINESE_BUN,\n                ITEM_DIM_SUM_SET,\n                ITEM_POT_ROAST,\n                ITEM_SIRLION,\n                ITEM_TURKEY,\n                ITEM_MEAL_TICKET,\n                ITEM_NEUTRON_BOMB,\n                ITEM_POWER_OF_SIRE,\n                ITEM_PENTAGRAM,\n                ITEM_BAT_PENTAGRAM,\n                ITEM_SHURIKEN,\n                ITEM_CROSS_SHURIKEN,\n                ITEM_BUFFALO_STAR,\n                ITEM_FLAME_STAR,\n                ITEM_TNT,\n                ITEM_BWAKA_KNIFE,\n                ITEM_BOOMERANG,\n                ITEM_JAVELIN,\n                ITEM_TYRFING,\n                ITEM_NAMAKURA,\n                ITEM_KNUCKLE_DUSTER,\n                ITEM_GLADIUS,\n                ITEM_SCIMITAR,\n                ITEM_CUTLASS,\n                ITEM_SABER,\n                ITEM_FALCHION,\n                ITEM_BROADSWORD,\n                ITEM_BEKATOWA,\n                ITEM_DAMASCUS_SWORD,\n                ITEM_HUNTER_SWORD,\n                ITEM_ESTOC,\n                ITEM_BASTARD_SWORD,\n                ITEM_JEWEL_KNUCKLES,\n                ITEM_CLAYMORE,\n                ITEM_TALWAR,\n                ITEM_KATANA,\n                ITEM_FLAMBERGE,\n                ITEM_IRON_FIST,\n                ITEM_ZWEIHANDER,\n                ITEM_SWORD_OF_HADOR,\n                ITEM_LUMINUS,\n                ITEM_HARPER,\n                ITEM_OBSIDIAN_SWORD,\n                ITEM_GRAM,\n                ITEM_JEWEL_SWORD,\n                ITEM_MORMEGIL,\n                ITEM_FIREBRAND,\n                ITEM_THUNDERBRAND,\n                ITEM_ICEBRAND,\n                ITEM_STONE_SWORD,\n                ITEM_HOLY_SWORD,\n                ITEM_TERMINUS_EST,\n                ITEM_MARSIL,\n                ITEM_DARK_BLADE,\n                ITEM_HEAVEN_SWORD,\n                ITEM_FIST_OF_TULKAS,\n                ITEM_GURTHANG,\n                ITEM_MOURNEBLADE,\n                ITEM_ALUCARD_SWORD,\n                ITEM_MABLUNG_SWORD,\n                ITEM_BADELAIRE,\n                ITEM_SWORD_FAMILIAR,\n                ITEM_GREAT_SWORD,\n                ITEM_MACE,\n                ITEM_MORNINGSTAR,\n                ITEM_HOLY_ROD,\n                ITEM_STAR_FLAIL,\n                ITEM_MOON_ROD,\n                ITEM_CHAKRAM,\n                ITEM_FIRE_BOOMERANG,\n                ITEM_IRON_BALL,\n                ITEM_HOLBEIN_DAGGER,\n                ITEM_BLUE_KNUCKLES,\n                ITEM_DYNAMITE,\n                ITEM_OSAFUNE_KATANA,\n                ITEM_MASAMUNE,\n                ITEM_MURAMASA,\n                ITEM_HEART_REFRESH,\n                ITEM_RUNESWORD,\n                ITEM_ANTIVENOM,\n                ITEM_UNCURSE,\n                ITEM_LIFE_APPLE,\n                ITEM_HAMMER,\n                ITEM_STR_POTION,\n                ITEM_LUCK_POTION,\n                ITEM_SMART_POTION,\n                ITEM_ATTACK_POTION,\n                ITEM_SHIELD_POTION,\n                ITEM_RESIST_FIRE,\n                ITEM_RESIST_THUNDER,\n                ITEM_RESIST_ICE,\n                ITEM_RESIST_STONE,\n                ITEM_RESIST_HOLY,\n                ITEM_RESIST_DARK,\n                ITEM_POTION,\n                ITEM_HIGH_POTION,\n                ITEM_ELIXIR,\n                ITEM_MANNA_PRISM,\n                ITEM_VORPAL_BLADE,\n                ITEM_CRISSAEGRIM,\n                ITEM_YASUTSUNA,\n                ITEM_LIBRARY_CARD,\n                ITEM_ALUCART_SHIELD,\n                ITEM_ALUCART_SWORD,\n                NUM_HAND_ITEMS,\n} HandItems;\ntypedef enum BodyItems {\n               ITEM_NO_ARMOR,\n               ITEM_CLOTH_TUNIC,\n               ITEM_HIDE_CUIRASS,\n               ITEM_BRONZE_CUIRASS,\n               ITEM_IRON_CUIRASS,\n               ITEM_STEEL_CUIRASS,\n               ITEM_SILVER_PLATE,\n               ITEM_GOLD_PLATE,\n               ITEM_PLATINUM_MAIL,\n               ITEM_DIAMOND_PLATE,\n               ITEM_FIRE_MAIL,\n               ITEM_LIGHTNING_MAIL,\n               ITEM_ICE_MAIL,\n               ITEM_MIRROR_CUIRASS,\n               ITEM_SPIKE_BREAKER,\n               ITEM_ALUCARD_MAIL,\n               ITEM_DARK_ARMOR,\n               ITEM_HEALING_MAIL,\n               ITEM_HOLY_MAIL,\n               ITEM_WALK_ARMOR,\n               ITEM_BRILLIANT_MAIL,\n               ITEM_MOJO_MAIL,\n               ITEM_FURY_PLATE,\n               ITEM_DRACULA_TUNIC,\n               ITEM_GODS_GARB,\n               ITEM_AXE_LORD_ARMOR,\n               ITEM_EMPTY_HEAD,\n               ITEM_SUNGLASSES,\n               ITEM_BALLROOM_MASK,\n               ITEM_BANDANNA,\n               ITEM_FELT_HAT,\n               ITEM_VELVET_HAT,\n               ITEM_GOGGLES,\n               ITEM_LEATHER_HAT,\n               ITEM_HOLY_GLASSES,\n               ITEM_STEEL_HELM,\n               ITEM_STONE_MASK,\n               ITEM_CIRCLET,\n               ITEM_GOLD_CIRCLET,\n               ITEM_RUBY_CIRCLET,\n               ITEM_OPAL_CIRCLET,\n               ITEM_TOPAZ_CIRCLET,\n               ITEM_BERYL_CIRCLET,\n               ITEM_CAT_EYE_CIRCLET,\n               ITEM_CORAL_CIRCLET,\n               ITEM_DRAGON_HELM,\n               ITEM_SILVER_CROWN,\n               ITEM_WIZARD_HAT,\n               ITEM_NO_CAPE,\n               ITEM_CLOTH_CAPE,\n               ITEM_REVERSE_CLOAK,\n               ITEM_ELVEN_CLOAK,\n               ITEM_CRYSTAL_CLOAK,\n               ITEM_ROYAL_CLOAK,\n               ITEM_BLOOD_CLOAK,\n               ITEM_JOSEPHS_CLOAK,\n               ITEM_TWILIGHT_CLOAK,\n               ITEM_NO_ACCESSORY,\n               ITEM_MOONSTONE,\n               ITEM_SUNSTONE,\n               ITEM_BLOODSTONE,\n               ITEM_STAUROLITE,\n               ITEM_RING_OF_PALES,\n               ITEM_ZIRCON,\n               ITEM_AQUAMARINE,\n               ITEM_TURQUOISE,\n               ITEM_ONYX,\n               ITEM_GARNET,\n               ITEM_OPAL,\n               ITEM_DIAMOND,\n               ITEM_LAPIS_LAZULI,\n               ITEM_RING_OF_ARES,\n               ITEM_GOLD_RING,\n               ITEM_SILVER_RING,\n               ITEM_RING_OF_VARDA,\n               ITEM_RING_OF_ARCANA,\n               ITEM_MYSTIC_PENDANT,\n               ITEM_HEART_BROACH,\n               ITEM_NECKLACE_OF_J,\n               ITEM_GAUNTLET,\n               ITEM_ANKH_OF_LIFE,\n               ITEM_RING_OF_FEANOR,\n               ITEM_MEDAL,\n               ITEM_TALISMAN,\n               ITEM_DUPLICATOR,\n               ITEM_KINGS_STONE,\n               ITEM_COVENANT_STONE,\n               ITEM_NAUGLAMIR,\n               ITEM_SECRET_BOOTS,\n               ITEM_ALUCART_MAIL,\n               NUM_BODY_ITEMS,\n} BodyItems;\nvoid EntityBreakable(Entity*);\nvoid EntityExplosion(Entity*);\nvoid EntityPrizeDrop(Entity*);\nvoid EntityDamageDisplay(Entity*);\nvoid EntityRedDoor(Entity*);\nvoid EntityIntenseExplosion(Entity*);\nvoid EntitySoulStealOrb(Entity*);\nvoid EntityRoomForeground(Entity*);\nvoid EntityStageNamePopup(Entity*);\nvoid EntityEquipItemDrop(Entity*);\nvoid EntityRelicOrb(Entity*);\nvoid EntityHeartDrop(Entity*);\nvoid EntityEnemyBlood(Entity*);\nvoid EntityMessageBox(Entity*);\nvoid EntityDummy(Entity*);\ntypedef enum { MONO_SOUND, STEREO_SOUND } soundMode;\nenum Sfx {\n    SFX_HARPY_WING_FLAP = 0x601,\n    SFX_RIC_WHIP_RATTLE_A,\n    SFX_RIC_WHIP_RATTLE_B,\n    SFX_RIC_WHIP_RATTLE_C,\n    SFX_RIC_WHIP_RATTLE_D,\n    SFX_RIC_WHIP_RATTLE_E,\n    SFX_STONE_MOVE_A,\n    SFX_STONE_MOVE_B,\n    SFX_STONE_MOVE_C,\n    SFX_WEAPON_SWISH_A,\n    SFX_WEAPON_SWISH_B,\n    SFX_WEAPON_SWISH_C,\n    SFX_METAL_CLANG_A,\n    SFX_METAL_CLANG_B,\n    SFX_METAL_CLANG_C,\n    SFX_METAL_CLANG_D,\n    SFX_METAL_CLANG_E,\n    SFX_METAL_CLANG_F,\n    SFX_UNK_CROW,\n    SFX_ELECTRICITY,\n    SFX_SCRAPE_A,\n    SFX_SCRAPE_B,\n    SFX_SCRAPE_C,\n    SFX_UNK_618,\n    SFX_GLASS_BREAK_A,\n    SFX_GLASS_BREAK_B,\n    SFX_GLASS_BREAK_C,\n    SFX_GLASS_BREAK_D,\n    SFX_GLASS_BREAK_E,\n    SFX_BAT_ECHO_A,\n    SFX_BAT_ECHO_B,\n    SFX_BAT_ECHO_C,\n    SFX_BAT_ECHO_D,\n    SFX_SKULL_BONK,\n    SFX_RIC_RSTONE_TINK,\n    SFX_SMALL_BURST,\n    SFX_ARROW_SHOT_A,\n    SFX_ARROW_SHOT_B,\n    SFX_ARROW_SHOT_C,\n    SFX_ARROW_SHOT_D,\n    SFX_SKELETON_DEATH_A,\n    SFX_SKELETON_DEATH_B,\n    SFX_SKELETON_DEATH_C,\n    SFX_FIRE_SHOT,\n    SFX_WEAPON_STAB_A,\n    SFX_WEAPON_STAB_B,\n    SFX_WEAPON_APPEAR,\n    SFX_UNK_BETA_630,\n    SFX_DEATH_AMBIENCE,\n    SFX_MAGIC_GLASS_BREAK,\n    SFX_UI_CONFIRM,\n    SFX_CANDLE_HIT,\n    SFX_TELEPORT_BANG_A,\n    SFX_TELEPORT_BANG_B,\n    SFX_SUC_APPEAR,\n    SFX_UNK_SCRAPE_A,\n    SFX_UNK_SCRAPE_B,\n    SFX_UNK_SCRAPE_C,\n    SFX_UNK_UI_SELECT,\n    SFX_START_SLAM_A,\n    SFX_START_SLAM_B,\n    SFX_START_SLAM_C,\n    SFX_ANIME_SWORD_A,\n    SFX_ANIME_SWORD_B,\n    SFX_ANIME_SWORD_C,\n    SFX_DOOR_OPEN,\n    SFX_WALL_DEBRIS_A,\n    SFX_WALL_DEBRIS_B,\n    SFX_WALL_DEBRIS_C,\n    SFX_STOMP_HARD_A,\n    SFX_STOMP_HARD_B,\n    SFX_STOMP_HARD_C,\n    SFX_STOMP_HARD_D,\n    SFX_STOMP_HARD_E,\n    SFX_STOMP_SOFT_A,\n    SFX_STOMP_SOFT_B,\n    SFX_SAVE_HEARTBEAT,\n    SFX_BAT_SCREECH,\n    SFX_DOOR_CLOSE_A,\n    SFX_DOOR_CLOSE_B,\n    SFX_UNK_UI_ERROR,\n    SFX_EXPLODE_FAST_A,\n    SFX_EXPLODE_FAST_B,\n    SFX_EXPLODE_A,\n    SFX_EXPLODE_B,\n    SFX_EXPLODE_C,\n    SFX_EXPLODE_D,\n    SFX_EXPLODE_E,\n    SFX_EXPLODE_F,\n    SFX_FM_EXPLODE_A,\n    SFX_FM_EXPLODE_B,\n    SFX_FM_EXPLODE_C,\n    SFX_FM_EXPLODE_D,\n    SFX_EXPLODE_SMALL,\n    SFX_WEAPON_HIT = 0x678,\n    SFX_HEART_PICKUP = 0x67A,\n    SFX_ITEM_PICKUP = 0x67C,\n    SFX_GOLD_PICKUP = 0x6A9,\n};\ntypedef struct {\n              u16 posX;\n              u16 posY;\n              u16 entityId;\n              u16 entityRoomIndex;\n              u16 params;\n} LayoutEntity;\ntypedef struct {\n    u16* layout;\n    TileDefinition* tileDef;\n    u32 params;\n    u16 zPriority;\n    u8 unkE;\n    u8 unkF;\n} MyLayer;\ntypedef struct {\n    MyLayer* fg;\n    MyLayer* bg;\n} MyRoomDef;\nextern LayoutEntity* g_pStObjLayoutHorizontal[];\nextern LayoutEntity* g_pStObjLayoutVertical[];\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern u16 g_ItemIconSlots[0x20];\nvoid InitRoomEntities(s32 objLayoutId);\nvoid UpdateRoomPosition();\nvoid Update(void);\nvoid HitDetection(void);\ns32 Random();\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\nvoid CreateEntityFromLayout(Entity* entity, LayoutEntity* initDesc);\nvoid DestroyEntity(Entity*);\nvoid DestroyEntitiesFromIndex(s16 index);\nvoid MoveEntity();\nvoid FallEntity(void);\nEntity* AllocEntity(Entity* start, Entity* end);\ntypedef struct EntityInit {\n    u16 animSet;\n    u16 animCurFrame;\n    u16 unk5A;\n    u16 palette;\n    u16 enemyId;\n    u16 : 16;\n} EntityInit;\nvoid InitializeEntity(u16 arg0[]);\ntypedef enum {\n    E_NONE,\n    E_BREAKABLE,\n    E_EXPLOSION,\n    E_PRIZE_DROP,\n    E_NUMERIC_DAMAGE,\n    E_RED_DOOR,\n    E_INTENSE_EXPLOSION,\n    E_SOUL_STEAL_ORB,\n    E_ROOM_FOREGROUND,\n    E_DUMMY_09,\n    E_EQUIP_ITEM_DROP,\n    E_DUMMY_0B,\n    E_DUMMY_0C,\n    E_DUMMY_0D,\n    E_DUMMY_0E,\n    E_DUMMY_0F,\n    E_DUMMY_10,\n    E_ID_14 = 0x14,\n    E_ID_15,\n    E_ID_26 = 0x26,\n    E_SECRET_BUTTON = 0x28,\n    E_SECRET_STAIRS = 0x29,\n} EntityIDs;\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\ns32 GetSideToPlayer();\nvoid MoveEntity();\nvoid SetStep(u8);\nvoid EntityExplosion(Entity*);\nvoid EntityUnkId14(Entity* entity);\nvoid EntityUnkId15(Entity* entity);\nextern const char* D_801A7984;\nextern const char* D_801A7990;\nextern const char* D_801A799C;\nextern s8 c_HeartPrizes[10];\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern bool g_isSecretStairsButtonPressed;\nextern bool g_isDraculaFirstFormDefeated;\nextern u16 D_80180574[];\nextern u16 g_InitializeEntityData0[];\nextern u16 D_80180598[];\nextern u16 g_eInitGeneric2[];\nextern u16 D_801805D4[];\nextern u16 D_801805E0[];\nextern u16 D_801805EC[];\nextern u16 D_80180604[];\nextern u16 D_80180610[];\nextern u16 D_8018061C[];\nextern u16 D_80180628[];\nextern ObjInit2 D_80180638[];\nextern s32 D_801806D0[];\nextern u8 D_801806F8[];\nextern u8 D_80180704[];\nextern u16 D_80180710[];\nextern s16 D_80180724[];\nextern s16 D_80180738[];\nextern s8 D_8018074C[];\nextern s16 D_80180758[];\nextern u8 D_80180770[];\nextern u8 D_80180830[];\nextern u8 D_8018083C[];\nextern u8 D_8018084C[];\nextern u8 D_8018085C[];\nextern u8 D_80180864[];\nextern u8 D_8018086C[];\nextern u8 D_8018087C[];\nextern u8 D_80180884[];\nextern u8 D_8018088C[];\nextern u8 D_80180894[];\nextern Point16 D_801808A0[];\nextern u16 D_801808B0[];\nextern s16 D_801808F8[];\nextern s32 D_80180908;\nextern s32 D_80180910;\nextern u8 D_80180914[];\nextern u8 D_80180924[];\nextern u8 D_80180934[];\nextern u8 D_80180944[];\nextern u8 D_80180954[];\nextern u8 D_80180964[];\nextern u8 D_8018097C[];\nextern u8 D_801809A4[];\nextern u8 D_80180A0C[];\nextern u8 D_80180A20[];\nextern u8 D_80180A2C[];\nextern u8 D_80180AA4[];\nextern u8 D_80180AB0[];\nextern u8 D_80180AC8[];\nextern u8 D_80180AD4[];\nextern u8 D_80180AEC[];\nextern u8 D_80180AFC[];\nextern u8 D_80180B20[];\nextern u8 D_80180B48[];\nextern u8 D_80180B58[];\nextern u8 D_80180B60[];\nextern u8 D_80180B80[];\nextern u8 D_80180BA0[];\nextern u8 D_80180BB8[];\nextern u8 D_80180BCC[];\nextern u8 D_80180BDC[];\nextern u16 D_80180A48[];\nextern Point16 D_80180A58[];\nextern u16 D_80180BE4[];\nextern s16 D_801810F4[];\nextern Point16 D_80181108[];\nextern s32 D_80181148;\nextern u32 D_8018114C;\nextern s16 D_80181150[];\nextern s16 D_8018129C[];\nextern u8 D_801813E8;\nextern u8 D_801814A8;\nextern u16 g_testCollEnemyLookup[];\nextern u8 g_testColluCoords[];\nextern u8 g_testCollvCoords[];\nextern u16 g_testCollElementLookup[10];\nextern u8 g_testColliFrames[10];\nextern u16 D_80181CAC[];\nextern u16 D_80181CDC[];\nextern u32 D_80181CF0[];\nextern s8 D_801A7B7C;\nextern Point32 D_801BEB64[];\nextern s32 D_801C2578;\nextern u32 D_801C257C;\nextern s32 D_801C2578;\nextern s16 D_80181990[];\nextern u16 g_InitializeData0[];\nextern u16 D_80181D74[];\nextern s16 D_80181E3C[];\nextern s16 D_80181E3E[];\nextern s16 D_80181EB0[];\nextern u32 D_80181EC0[];\nextern u16 D_80181F04[];\nextern u8 D_801824CC[];\nextern s8 D_801A7BDC;\nextern Point32 D_801BEB64[];\nextern s32 D_801C24C8;\nextern s16 D_801C24D4;\nextern s16 D_801C24D6;\nextern s16 D_801C24D8;\nextern s16 D_801C24DA;\nextern s16 D_801C24DC;\nextern s8 D_801C24DE;\nextern s8 D_801C24DF;\nextern Primitive* D_801C24E0;\nextern s32 D_801C24E4[];\nextern s32 D_801C2578;\nextern s32 D_801C2580;\nextern u16 g_ESoulStealOrbAngles[];\nextern s16 g_ESoulStealOrbSprt[];\nextern u8 g_ESoulStealOrbAnim[];\nextern u8 D_80180784[];\nextern u8 D_80180788[];\nextern u16 D_8018078C[];\nextern u16 D_80180790[];\nextern u16 D_80180794[];\nextern s16 D_80180798[];\nextern const char D_801829D8[];\nextern s32 D_801C24C8;\nextern s32 D_801C2504;\nextern u32 D_801C257C;\nextern s32 D_801C2580;\nextern Dialogue g_Dialogue;\n\nvoid SetWeaponProperties(Entity* self, s32 kind);\nvoid SetSpriteBank1(SpriteParts* animset);\nvoid SetSpriteBank2(SpriteParts* animset);\nvoid EntityWeaponAttack(Entity* self);\nvoid DestroyEntityWeapon(bool arg0);\n\nvoid LoadWeaponPalette(s32 clutIndex);\ns32 func_ptr_80170004(Entity* self);\nvoid func_ptr_80170008(Entity* self);\nvoid func_ptr_8017000C(Entity* self);\ns32 func_ptr_80170010(Entity* self);\ns32 func_ptr_80170014(Entity* self);\nint GetWeaponId(void);\nvoid EntityWeaponShieldSpell(Entity* self);\nvoid func_ptr_80170024(Entity* self);\nvoid func_ptr_80170028(Entity* self);\nvoid WeaponUnused2C(void);\nvoid WeaponUnused30(void);\nvoid WeaponUnused34(void);\nvoid WeaponUnused38(void);\nvoid WeaponUnused3C(void);\n\nvoid DestroyEntity(Entity* entity);\nvoid DecelerateX(s32 amount);\nvoid DecelerateY(s32 amount);\nvoid SetSpeedX(s32 speed);\n\nextern SpriteParts g_Animset[];\nextern s32 g_HandId;\n\nextern SpriteParts D_17E000_8017A040[];\nextern WeaponAnimation D_17E000_8017AEC4[];\nextern u16 D_17E000_8017AEF4[];\nextern u16 D_17E000_8017AEFC[];	1	\N	2d153150e021989d12341e8a3d925d779f4a3d1a544a44f35688ba9865507185	func_ptr_80170008	ps1	6120		func_ptr_80170008	26400	[]	f	[]	\N	\N
6FCW5	2024-08-20 22:13:58.881428+00	2024-08-20 22:19:27.847803+00	gcc2.6.3-psx	-O2 -G0 -funsigned-char -gcoff -Wa,--expand-div --no-builtin	extern SpriteParts D_17E000_8017A040[];\nextern WeaponAnimation D_17E000_8017AEC4[];\nextern u16 D_17E000_8017AEF4[];\nextern u16 D_17E000_8017AEFC[];\n\nvoid EntityWeaponAttack(Entity* self) {\n    WeaponAnimation* anim;\n    s16 animIndex;\n    Primitive* prim;\n    s32 i;\n    s16 x;\n    s32 y;\n    s32 x2;\n    s32 offsetIndex;\n    u8 brightness;\n    u16* xValues;\n    s32 primIndex;\n\n    // var_s4 = saved_reg_s4;\n    self->posX.val = PLAYER.posX.val;\n    self->posY.val = PLAYER.posY.val;\n    self->facingLeft = PLAYER.facingLeft;\n\n    animIndex = (self->params >> 8) & 0x7F;\n\n    if (g_Player.D_80072F00[11] != 0) {\n        animIndex = 2;\n    }\n\n    anim = &D_17E000_8017AEC4[animIndex];\n\n    if ((PLAYER.ext.player.anim < anim->frameStart) ||\n        (PLAYER.ext.player.anim >= (anim->frameStart + 7)) ||\n        (g_Player.unk46 == 0)) {\n        DestroyEntity(self);\n        return;\n    }\n\n    if (self->step == 0) {\n        SetSpriteBank1(D_17E000_8017A040);\n        self->animSet = -0x7FF0;\n        self->palette = 0x110;\n        self->unk5A = 0x64;\n        if (g_HandId != 0) {\n            self->animSet = (u16) self->animSet + 2;\n            self->palette += 0x18;\n            self->unk5A += 2;\n        }\n        self->palette += anim->palette;\n        self->flags = 0x60000;\n\n        primIndex = g_api.AllocPrimitives(PRIM_LINE_G2, 0xC);\n\n        self->primIndex = primIndex;\n        if (primIndex != -1) {\n            self->flags |= 0x800000;\n            prim = &g_PrimBuf[self->primIndex];\n            for (i = 0; i < 12; i++) {\n                if (i <= 3) {\n                    prim->r2 = rand() & 3;\n                    do { prim->b2 = 1; } while (0);\n                }\n                if (i >= 7 && (i & 1)) {\n                    prim->r2 = rand() & 0xF;\n                    prim->b2 = 2;\n                } else {\n                    prim->r2 = rand() & 7;\n                    prim->b2 = 1;\n                }\n                prim->r3 = i / 6;\n                if (i == 11) {\n                    prim->r2 = 0x18;\n                    prim->r3 = 2;\n                    prim->b2 = 3;\n                }\n                prim->r0 = prim->r1 = 255;\n                prim->b0 = prim->b1 = prim->g0 = prim->g1 = rand() & 0x1F;\n                \n                prim->priority = PLAYER.zPriority;\n                prim->drawMode = 0x308;\n                prim = prim->next;\n            }\n        }\n\n        self->zPriority = PLAYER.zPriority - 2;\n        self->drawMode = DRAW_TPAGE2 | DRAW_TPAGE;\n        SetWeaponProperties(self, 0);\n\n        if (animIndex != 0) {\n            if (g_Player.D_80072F00[11] != 0) {\n                self->attack *= 2;\n            }\n            if (g_Player.D_80072F00[11] < 0x38) {\n                g_Player.D_80072F00[11] = 0x38;\n                if (animIndex == 1) {\n                    g_api.CreateEntFactoryFromEntity(self, 0x11003DU, 0);\n                }\n            }\n        }\n        self->step++;\n    }\n\n    self->ext.weapon.anim = PLAYER.ext.player.anim - anim->frameStart;\n\n    if (PLAYER.animFrameDuration == 1 &&\n        PLAYER.animFrameIdx == anim->soundFrame) {\n        g_api.PlaySfx((s32) anim->soundId);\n    }\n\n    if (g_api.UpdateUnarmedAnim(anim->frameProps, anim->frames) < 0) {\n        DestroyEntity(self);\n        return;\n    }\n\n    self->drawFlags = PLAYER.drawFlags;\n    self->rotY = PLAYER.rotY;\n    self->rotPivotY = PLAYER.rotPivotY;\n    \n    if (self->animCurFrame != 0xD &&\n        self->animCurFrame != 0x22 &&\n        self->animCurFrame != 0x2C &&\n        self->animCurFrame != 0x3E) {\n        return;\n    }\n\n    if (self->primIndex != -1) {\n        i = 0;\n\n        xValues = D_17E000_8017AEF4;\n        self->flags |= 0x800000;\n        prim = &g_PrimBuf[self->primIndex];\n        \n        for (; i < 12; i++) {\n            switch (self->animCurFrame) {\n            case 0xD:\n                offsetIndex = 0;\n                break;\n            case 0x22:\n                offsetIndex = 1;\n                break;\n            case 0x2C:\n                offsetIndex = 2;\n                break;\n            case 0x3E:\n                offsetIndex = 3;\n                break;\n            }\n\n            x2 = -1;\n            x = xValues[offsetIndex] - i;\n            if (self->facingLeft != 0) {\n                x = -x;\n                x2 = 1;\n            }\n            prim->x2 = x2 + prim->x2;\n\n            y = D_17E000_8017AEFC[offsetIndex] + (i / 6);\n\n            prim->x0 = x + self->posX.i.hi;\n            prim->x1 = prim->x0 + prim->x2;\n            \n            prim->y0 = y + self->posY.i.hi;\n            prim->y1 = y + self->posY.i.hi + prim->r3;\n\n            if (prim->r2 > prim->r3) {\n                prim->r3 += prim->b2;\n            }\n\n            prim->drawMode &= 0xFFF7;\n            prim = prim->next;\n        }\n    }\n\n}	#define MU_DEATH_BALLAD 0x334\n#define NA_VO_DEATH_LAUGH 0x7A1\n#define PAL_DRA(x) (x)\n#define EvSpNEW 0x2000\n#define EvSpINT 0x0002\n#define PLAYER_STATUS_AXEARMOR 0x01000000\n#define CdlModeSpeedDouble 1\n#define CdlDataEnd 0x04\n#define PLAYER_STATUS_UNK1000 0x1000\n#define HwCARD_0 (DescHW | 0x12)\n#define HwCARD_1 (DescHW | 0x13)\n#define FWLOCK 0x0020\n#define SPU_VOICE_ADSR_DR (0x01 << 12)\n#define SAVE_FLAG_REPLAY (2)\n#define SE_INTRO_WIND_QUIET 0x32C\n#define MU_MOONLIGHT_NOCTURNE 0x340\n#define gte_stsxy(r0) \n#define KERNEL_H \n#define MU_SILENCE 0x33D\n#define RCntMdFR 0x0000\n#define SS_IMEDIATE 0\n#define PAL_TERMINATE() ((u_long*)-1)\n#define VERSION_US \n#define SFX_UNK_647 0x647\n#define PAD_LEFT 0x8000\n#define setlen(p,_len) (((P_TAG*)(p))->len = (u_char)(_len))\n#define MU_CRYSTAL_TEARDROPS_LOOP_POINT 0x30C\n#define EvSpACK 0x0010\n#define NA_VO_SU_NO_SCREAM 0x87B\n#define SS_TICK120 3\n#define MU_ABANDONED_PIT_LOOP_POINT 0x31A\n#define NA_SE_SU_CHARGE_PINKBALLS 0x6E2\n#define CdlForward 0x04\n#define SPAD(x) ((s32*)SP(x * sizeof(s32)))\n#define CD_SOUND_COMMAND_8 8\n#define FLAG_UNK_10000000 0x10000000\n#define NA_SE_EN_SPITTLEBONE_ACID_SPLAT 0x73C\n#define getaddr(p) (u_long)(((P_TAG*)(p))->addr)\n#define CdlGetTN 0x13\n#define MU_MARBLE_GALLERY 0x30D\n#define FIX(x) ((s32)((x) * 65536.0))\n#define HEART_VESSEL_INCREASE 5\n#define PLAYER_STATUS_UNK800000 0x800000\n#define JP_VO_YANAMI_JYOUJI_MESSAGE 0x34B\n#define OTSIZE 0x200\n#define EvStACTIVE 0x2000\n#define LIBAPI_H \n#define PRIMITIVE_H \n#define SFX_UNK_6B1 0x6B1\n#define SFX_UNK_6B2 0x6B2\n#define FLAG_UNK_400000 0x400000\n#define EvSpERROR 0x8000\n#define WEAPON_0_END (WEAPON_1_START - 1)\n#define NAMEOF(var) #var\n#define FLAG_UNK_800 0x800\n#define SPU_VOICE_ADSR_RR (0x01 << 14)\n#define JP_VO_SATOU_MASAHARU_MESSAGE 0x348\n#define blendMode drawMode\n#define SPU_VOICE_ADSR_AMODE (0x01 << 8)\n#define NA_SE_PL_TELEPORT 0x8BA\n#define RCntMdSC 0x0001\n#define SFX_UNK_6A0 0x6A0\n#define RCntMdSP 0x0000\n#define PLAYER_STATUS_UNK10 0x10\n#define COLOR_LEN ((COLOR_BPP) / 8)\n#define NA_SE_EN_BONE_SCIMITAR_SWORD_SLASH 0x66D\n#define MU_FINAL_TOCATTA 0x338\n#define SS_TICKMODE_MAX 6\n#define DRAW_UNK_100 0x100\n#define JP_VO_YOKOYAMA_CHISA_MESSAGE 0x34A\n#define CD_SOUND_COMMAND_14 14\n#define COMMON_H \n#define CD_SOUND_COMMAND_16 16\n#define PLAYER_STATUS_UNK40 0x40\n#define SPU_VOICE_SAMPLE_NOTE (0x01 << 6)\n#define CdlReadN 0x06\n#define MaxEntityCount 32\n#define PLAYER_STATUS_POISON 0x00004000\n#define CdlNop 0x01\n#define JP_VO_SH_GROAN 0x52E\n#define ALIGNED4 \n#define FLAG_UNK_4 0x4\n#define NA_VO_RI_IMPRESSIVE_ESCAPE 0x3DB\n#define JP_VO_YANADA_KIYOYUKI_MESSAGE 0x346\n#define HwCPU (DescHW | 0x10)\n#define MU_RAINBOW_CEMETERY_LOOP_POINT 0x308\n#define getcode(p) (u_char)(((P_TAG*)(p))->code)\n#define FIX_FRAC(x) (*(s16*)&(x))\n#define WARNF(...) _log(LOG_LEVEL_W, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define gte_ldv0(r0) \n#define gte_ldv3(r0,r1,r2) \n#define NA_SE_EV_WATER_SPLASH 0x7C2\n#define PAD_TRIANGLE 0x0010\n#define MU_THE_TRAGIC_PRINCE 0x311\n#define FONT_SPACE 4\n#define DISP_ALL_H 240\n#define EvSpPERROR 0x8001\n#define NA_SE_EN_GAIBON_FLAME 0x691\n#define EvMdNOINTR 0x2000\n#define MEMCPY memcpy\n#define gte_SetRotMatrix(r0) \n#define HwCNTL (DescHW | 0x08)\n#define OT_TYPE u_long\n#define DEMO_MAX_LEN 0x2000\n#define MU_CRYSTAL_TEARDROPS 0x30B\n#define MU_REQUIEM_FOR_THE_GODS_LOOP_POINT 0x306\n#define LIBGS_H \n#define DRAW_UNK_40 0x40\n#define MU_METAMORPHOSIS 0x327\n#define FLAG_UNK_08000000 0x08000000\n#define SFX_RICHTER_ATTACK_HIT 0x705\n#define getTPage(tp,abr,x,y) ((GetGraphType() == 1 || GetGraphType() == 2) ? ((((tp) & 0x3) << 9) | (((abr) & 0x3) << 7) | (((y) & 0x300) >> 3) | (((x) & 0x3ff) >> 6)) : ((((tp) & 0x3) << 7) | (((abr) & 0x3) << 5) | (((y) & 0x100) >> 4) | (((x) & 0x3ff) >> 6) | (((y) & 0x200) << 2)))\n#define __asm__(...) \n#define USE_MICRO_OPTIMIZATIONS 0\n#define LAYER_SEMI_TRANS 0x80\n#define JP_VO_SOSHITE 0x342\n#define PAL_UNK_OP3 3\n#define CdlSeekL 0x15\n#define CdlSeekP 0x16\n#define PAD_L1 0x0004\n#define PAD_L3 0x0200\n#define MU_DOOR_OF_HOLY_SPIRITS 0x315\n#define NA_SE_EN_SLOGRA_HURT 0x70C\n#define DISP_TITLE_H DISP_ALL_H\n#define LAYER_TPAGE_ALT 0x100\n#define setLineG4(p) setlen(p, 9), setcode(p, 0x5c), (p)->pad = 0x55555555\n#define JP_VO_KONAMI_5 0x350\n#define SET_SOUNDMODE_MONO 5\n#define MU_LOST_PAINTING 0x301\n#define setSprt8(p) setlen(p, 3), setcode(p, 0x74)\n#define TILE_SIZE 16\n#define STRINGIFY_(x) #x\n#define SFX_THUNDER 0x665\n#define MU_TOWER_OF_MIST 0x313\n#define NA_SE_EN_SLOGRA_SPEAR_PROJECTILE 0x690\n#define SS_SOFF 0\n#define NA_SE_EN_SLOGRA_BEAK_ATTACK 0x6C8\n#define FLT(x) ((s32)((x) * 4096.0))\n#define PAD_SELECT 0x0100\n#define EvSpUNKNOWN 0x0200\n#define PAD_R1 0x0008\n#define PAD_R2 0x0002\n#define GAMEBUTTONS (~(PAD_START | PAD_SELECT))\n#define SE_UNK_TE1_692 0x692\n#define SFX_UNK_668 0x668\n#define SS_REV 1\n#define NA_SE_VO_AXE_KNIGHT_SCREAM 0x767\n#define FLAG_UNK_04000000 0x04000000\n#define MENUCHAR(x) ((x) - 0x20)\n#define setXY0(p,_x0,_y0) (p)->x0 = (_x0), (p)->y0 = (_y0)\n#define setXY2(p,_x0,_y0,_x1,_y1) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1)\n#define setXY4(p,_x0,_y0,_x1,_y1,_x2,_y2,_x3,_y3) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2), (p)->x3 = (_x3), (p)->y3 = (_y3)\n#define ASM_RODATA __asm__(".section .rodata")\n#define EvSpCZ 0x0001\n#define SS_TICKVSYNC 5\n#define NA_VO_RI_DIE_MONSTER 0x358\n#define SPU_VOICE_ADSR_ADSR2 (0x01 << 18)\n#define gte_nclip() \n#define setPolyFT3(p) setlen(p, 7), setcode(p, 0x24)\n#define setPolyFT4(p) setlen(p, 9), setcode(p, 0x2c)\n#define FLAG_UNK_10000 0x10000\n#define LIBGTE_H \n#define MAX_SPRT_COUNT 0x200\n#define MU_WOOD_CARVING_PARTITA 0x309\n#define STAGE_WIDTH 256\n#define CdlModeSize0 0x10\n#define ELEMENT_STONE 0x200\n#define NUM_AVAIL_RELICS (NUM_RELICS - 2)\n#define SS_SEQ_TABSIZ 176\n#define DescEV 0xf1000000\n#define EvStUNUSED 0x0000\n#define NA_SE_EV_CLOCK_TICK 0x6A1\n#define setSprt16(p) setlen(p, 3), setcode(p, 0x7c)\n#define JP_VO_SH_SONO_TEIDO 0x530\n#define SE_UI_MAIN_MENU_SELECT 0x67D\n#define CdlModeAP 0x02\n#define SFX_UNK_641 0x641\n#define DescHW 0xf0000000\n#define MU_BLOOD_RELATIONS_LOOP_POINT 0x337\n#define SAVE_FLAG_CLEAR (1)\n#define NA_SE_EN_GAIBON_SMALL_FIREBALL 0x652\n#define DEBUGF(...) _log(LOG_LEVEL_D, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define CdlDataReady 0x01\n#define ANIMSET_OVL_FLAG 0x8000\n#define PAL_GLOW_ANIM 4\n#define NA_VO_AL_DEATH_DREAM_WORLD 0x391\n#define _ROMIO_H \n#define SE_SAVE_HEARTBEAT 0x64D\n#define FTRUNC 0x0400\n#define LEN(x) ((s32)(sizeof(x) / sizeof(*(x))))\n#define SPU_VOICE_ADSR_AR (0x01 << 11)\n#define CD_SOUND_COMMAND_10 10\n#define LIFE_VESSEL_INCREASE 5\n#define CdlStatSeekError 0x04\n#define CdlGetlocP 0x11\n#define NA_SE_EN_BLOOD_SKELETON_DISASSEMBLES 0x6CB\n#define PLAYER_STATUS_WOLF_FORM 0x00000004\n#define MU_DANCE_OF_PALES_LOOP_POINT 0x318\n#define PAL_UNK_OP3_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define RELIC_FLAG_FOUND 1\n#define EvSpCLOSE 0x0008\n#define CdlSetfilter 0x0d\n#define ELEMENT_CUT 0x40\n#define CdlGetlocL 0x10\n#define TcbStUNUSED 0x1000\n#define SFX_KARMA_COIN_HEADS 0x6B1\n#define GFX_ENTRY(x,y,w,h,data) (u_long*)((x) | ((y) << 16)), (u_long*)((w) | ((h) << 16)), (u_long*)data\n#define DescRC 0xf2000000\n#define FNBLOCK 0x0004\n#define setaddr(p,_addr) (((P_TAG*)(p))->addr = (u_long)(_addr))\n#define FLAG_DESTROY_IF_BARELY_OUT_OF_CAMERA 0x40000000\n#define SE_BOSS_DEFEATED 0x7D2\n#define DescTH DescMask\n#define setWH(p,_w,_h) (p)->w = _w, (p)->h = _h\n#define SPU_OFF 0\n#define LIBSPU_H \n#define FLAG_UNK_20000000 0x20000000\n#define PAL_COPY_INFO() MAKE_PAL_OP(PAL_COPY, 0)\n#define SFX_UNK_6E7 0x6E7\n#define PAD_CROSS 0x0040\n#define SCRIPT(...) {}\n#define gte_SetTransMatrix(r0) \n#define NA_VO_SU_GRUNT_1 0x870\n#define CdlModeRT 0x40\n#define CdlMAXDIR 128\n#define PLAYER_STATUS_UNK80000 0x80000\n#define JP_VO_SHIINA_HEKIRU_MESSAGE 0x345\n#define SET_UNK_12 0x12\n#define LOHU(x) (*(u16*)&(x))\n#define FLAG_UNK_1000 0x1000\n#define NA_SE_EN_ZOMBIE_EXPLODE 0x65E\n#define USE_CD_SPEED_DOUBLE 0\n#define NA_SE_EV_SWITCH_CLICK 0x676\n#define PAL_COPY 1\n#define SEEK_CUR 1\n#define OVL_EXPORT(x) ST0_ ##x\n#define NA_SE_VO_DR_HURT_1 0x853\n#define NA_SE_VO_DR_HURT_2 0x85B\n#define NA_SE_VO_DR_HURT_3 0x85C\n#define NA_SE_VO_DR_HURT_4 0x85D\n#define PLAYER_STATUS_UNK40000000 0x40000000\n#define addPrim(ot,p) setaddr(p, getaddr(ot)), setaddr(ot, p)\n#define PAD_R3 0x0400\n#define FALL_TERMINAL_VELOCITY 0x60000\n#define PLAYER_STATUS_UNK20000 0x20000\n#define __SPU_IRQCALLBACK_PROC \n#define MU_PROLOGUE 0x321\n#define ANIMSET_DRA(x) (x)\n#define SS_TICK240 2\n#define NA_SE_EN_SLOGRA_FLOOR_STOMP 0x64F\n#define setPolyF3(p) setlen(p, 4), setcode(p, 0x20)\n#define setPolyF4(p) setlen(p, 5), setcode(p, 0x28)\n#define FRCOM 0x2000\n#define MU_ENCHANTED_BANQUET 0x330\n#define DRAW_UNK02 0x02\n#define ELEMENT_FIRE 0x8000\n#define MAX_PRIM_COUNT 0x500\n#define setPolyG3(p) setlen(p, 6), setcode(p, 0x30)\n#define setPolyG4(p) setlen(p, 8), setcode(p, 0x38)\n#define FLAG_UNK_400 0x400\n#define SFX_UNK_689 0x689\n#define FLAG_UNK_10 0x10\n#define CdlModeDA 0x01\n#define DescMask 0xff000000\n#define NA_VO_SU_GRUNT_3 0x874\n#define LAYER_WRAP_BG 0x1000\n#define MU_BLOOD_RELATIONS 0x336\n#define NA_SE_VO_WO_BARK 0x706\n#define DISP_STAGE_H DISP_ALL_H\n#define DISP_STAGE_W 256\n#define SET_SOUNDMODE_STEREO 6\n#define STRINGIFY(x) STRINGIFY_(x)\n#define isendprim(p) ((((P_TAG*)(p))->addr) == 0xffffff)\n#define MU_TOWER_OF_MIST_LOOP_POINT 0x314\n#define MU_DANCE_OF_PALES 0x317\n#define MU_FESTIVAL_OF_SERVANTS 0x31D\n#define TOTAL_ENTITY_COUNT 256\n#define NA_VO_MA_IF_YOU_WEAR 0x3CE\n#define setUV3(p,_u0,_v0,_u1,_v1,_u2,_v2) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2)\n#define setUV4(p,_u0,_v0,_u1,_v1,_u2,_v2,_u3,_v3) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2), (p)->u3 = (_u3), (p)->v3 = (_v3)\n#define CdlNoIntr 0x00\n#define JP_VO_AKUMAJO 0x343\n#define CdlSetloc 0x02\n#define SE_INTRO_WIND_LOOP_POINT 0x32B\n#define PLAYER_STATUS_TRANSFORM (PLAYER_STATUS_BAT_FORM | PLAYER_STATUS_MIST_FORM | PLAYER_STATUS_WOLF_FORM)\n#define SE_WPN_PENTAGRAM 0x6E4\n#define LOWU(x) (*(u32*)&(x))\n#define NA_SE_EN_BLOOD_SKELETON_REASSEMBLES 0x6CC\n#define NA_SE_VO_DR_TAUNT_2 0x850\n#define DISP_MENU_W 384\n#define PLAYER_MARIA 2\n#define MU_I_AM_THE_WIND 0x33C\n#define CdlPause 0x09\n#define NA_VO_SU_LAUGH 0x86E\n#define SPRITESHEET_PTR 0x8013C020\n#define PLAYER_STATUS_CURSE 0x00008000\n#define DRAW_UNK_200 0x200\n#define FLAG_UNK_4000 0x4000\n#define SS_TICK50 4\n#define FLAG_UNK_02000000 0x02000000\n#define SFX_UNK_6FF 0x6FF\n#define SS_TICK60 1\n#define HwRTC0 (DescHW | 0x05)\n#define HwRTC1 (DescHW | 0x06)\n#define HwRTC2 (DescHW | 0x07)\n#define ANIMSET_OVL(x) ((x) | ANIMSET_OVL_FLAG)\n#define FRLOCK 0x0010\n#define NA_SE_VO_AL_PUNCH 0x6F1\n#define PLAYER_STATUS_UNK400000 0x400000\n#define NA_VO_RI_IMPRESSIVE_WHIP 0x3DA\n#define MAX_POLY_GT3_COUNT 0x30\n#define SS_REV_TYPE_DELAY 8\n#define F3DEX_GBI_2 1\n#define COLOR_BPP (16)\n#define CdlModeSF 0x08\n#define FLAG_UNK_20000 0x20000\n#define PAL_GLOW_DATA(data) (u_long*)(data)\n#define STAGE_ENTITY_START 64\n#define SS_REV_TYPE_STUDIO_A 2\n#define SS_REV_TYPE_STUDIO_C 4\n#define SS_WAIT_COMPLETED 1\n#define NA_SE_EN_COG_CLICK 0x642\n#define STRCPY(dst,src) __builtin_memcpy(dst, src, sizeof(src))\n#define PAL_COPY_DATA_(dst,data,len) (dst), (u_long*)(len), (u_long*)(data)\n#define ELEMENT_THUNDER 0x4000\n#define CdlPlay 0x03\n#define M2CTX 1\n#define DRAW_MENU 0x80\n#define TEST_BITS(x,y) ((x & y) == y)\n#define termPrim(p) setaddr(p, 0xffffffff)\n#define SFX_UNK_69D 0x69D\n#define SET_STOP_MUSIC 0xA\n#define FIX_TO_I(x) ((s32)((x) >> 16))\n#define MU_JP_FAIRY_SONG 0x33F\n#define NA_VO_SU_GRUNT_2 0x872\n#define SPU_REV_MODE (0x01 << 0)\n#define ELEMENT_DARK 0x800\n#define DRAW_COLORS 0x04\n#define PLAYER_RICHTER 1\n#define MAX_PRIM_ALLOC_COUNT 0x400\n#define NOT_IMPLEMENTED WARNF("not implemented")\n#define NA_SE_PL_MAX_HP_MP_INCREASED 0x687\n#define NA_VO_RI_ONLY_THE_COUNT 0x3DC\n#define O_NOBUF FNBUF\n#define WEAPON_0_START 0xE0\n#define DIAG_EOL 0xFF\n#define MAX_POLY_G4_COUNT 0x100\n#define MU_REQUIEM_FOR_THE_GODS 0x305\n#define SFX_UNK_8BB 0x8BB\n#define FLAG_DEAD 0x100\n#define PLAYER_STATUS_UNK2000 0x2000\n#define SPU_VOICE_ADSR_SL (0x01 << 15)\n#define NA_SE_VO_AXE_KNIGHT_THROW 0x766\n#define DISP_TITLE_W 512\n#define FLAG_UNK_800000 0x800000\n#define EvSpERANGE 0x0302\n#define SPU_VOICE_ADSR_SR (0x01 << 13)\n#define PAL_OVL_FLAG 0x8000\n#define setXY3(p,_x0,_y0,_x1,_y1,_x2,_y2) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2)\n#define HwDMAC (DescHW | 0x04)\n#define GAME_H \n#define NA_SE_SU_CREATE_CLONES 0x6D5\n#define SS_REV_TYPE_ECHO 7\n#define CdlMAXLEVEL 8\n#define NA_VO_SU_BLANK 0x86F\n#define CLAMP_MAX(v,max) ((v) > (max) ? (max) : (v))\n#define DISP_MENU_H DISP_ALL_H\n#define SPU_VOICE_ADSR_SMODE (0x01 << 9)\n#define LAYER_SHOW 1\n#define MU_RAINBOW_CEMETERY 0x307\n#define DRAW_TPAGE 0x10\n#define SIM_PTR 0x80280000\n#define setPolyGT3(p) setlen(p, 9), setcode(p, 0x34)\n#define setPolyGT4(p) setlen(p, 12), setcode(p, 0x3c)\n#define INCLUDE_ASM_H \n#define EvSpEDOM 0x0301\n#define NA_SE_SU_FLAPPING_WINGS 0x6C6\n#define PLAYER_ALUCARD 0\n#define JP_VO_KONAMI_1 0x34C\n#define JP_VO_KONAMI_2 0x34D\n#define RCntCNT1 (DescRC | 0x01)\n#define RCntCNT2 (DescRC | 0x02)\n#define RCntCNT3 (DescRC | 0x03)\n#define JP_VO_KONAMI_8 0x353\n#define JP_VO_KONAMI_9 0x354\n#define ERRORF(...) _log(LOG_LEVEL_E, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define JP_VO_KONAMI_12 0x357\n#define MU_DOOR_OF_HOLY_SPIRITS_LOOP_POINT 0x316\n#define SIZEOF_MENUCONTEXT (0x1E)\n#define JP_VO_KONAMI_3 0x34E\n#define HwGPU (DescHW | 0x02)\n#define SPU_VOICE_VOLL (0x01 << 0)\n#define SS_SON 1\n#define SPU_VOICE_VOLR (0x01 << 1)\n#define MU_LAND_OF_BENEDICTION 0x33E\n#define MAX_GOLD 999999\n#define INFOF(...) _log(LOG_LEVEL_I, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define OFF(type,field) ((size_t)(&((type*)0)->field))\n#define CdlBackward 0x05\n#define MU_WANDERING_GHOSTS 0x323\n#define SS_REV_TYPE_HALL 5\n#define NA_SE_EN_SLOGRA_HISSING 0x709\n#define STAGE STAGE_ST0\n#define NA_SE_PL_BT_FIREBALL 0x680\n#define SFX_UNK_661 0x661\n#define O_RDWR FREAD | FWRITE\n#define setTile(p) setlen(p, 3), setcode(p, 0x60)\n#define NA_SE_EN_SLOGRA_DEATH_EXPLOSION 0x697\n#define NA_SE_EV_WINDOW_LATCH 0x79D\n#define FLAG_HAS_PRIMS 0x00800000\n#define CdlAcknowledge 0x03\n#define SwMATH (DescSW | 0x02)\n#define NA_SE_PL_RIC_UNK_6E2 0x6E2\n#define SOUND_BAT_SCREECH 0x64E\n#define gte_SetGeomScreen(r0) \n#define DRAW_DEFAULT 0x00\n#define PLAYER_STATUS_ABSORB_BLOOD 0x02000000\n#define NA_SE_SY_MOVE_MENU_CURSOR 0x67B\n#define SE_UI_OVERWRITE_SELECT 0x6A4\n#define NA_VO_SU_SUCK_YOU_DRY 0x876\n#define gte_stszotz(r0) \n#define setShadeTex(p,tge) ((tge) ? setcode(p, getcode(p) | 0x01) : setcode(p, getcode(p) & ~0x01))\n#define CD_SOUND_COMMAND_12 12\n#define PAL_COPY_DATA(dst,data) (dst), (u_long*)LEN(data), (u_long*)(data)\n#define SE_DRE_FADE_TO_WHITE 0x65A\n#define NA_SE_EN_BLOODY_ZOMBIE_INJURED_SCREAM 0x746\n#define NA_SE_VO_DR_GRANT_ME_POWER 0x857\n#define RCntMdINTR 0x1000\n#define MU_LOST_PAINTING_LOOP_POINT 0x302\n#define FALL_GRAVITY 0x4000\n#define MU_PRAYER_LOOP_POINT 0x333\n#define NA_SE_CS_BURNING_PHOTOGRAPH 0x8BE\n#define PAD_SQUARE 0x0080\n#define RIC_PRG_PTR 0x8013C000\n#define MU_CURSE_ZONE 0x303\n#define SE_UI_SELECT 0x67B\n#define getlen(p) (u_char)(((P_TAG*)(p))->len)\n#define GET_PAL_OP_FREQ(x) (HIH(x))\n#define PAD_UP 0x1000\n#define MU_CURSE_ZONE_LOOP_POINT 0x304\n#define SS_REV_TYPE_SPACE 6\n#define FLAG_DRAW_ROTX 0x01\n#define FLAG_DRAW_ROTY 0x02\n#define FLAG_DRAW_ROTZ 0x04\n#define EvSpDE 0x0080\n#define LIBGPU_H \n#define O_RDONLY FREAD\n#define PAL_BULK_COPY 5\n#define SS_REV_TYPE_PIPE 9\n#define PAD_L2 0x0001\n#define PLAYER_STATUS_UNK80000000 0x80000000\n#define REBOUND_STONE_BOUNCE 0x6A4\n#define ELEMENT_HIT 0x20\n#define nextPrim(p) (void*)((u_long)(((P_TAG*)(p))->addr) | 0x80000000)\n#define FWRITE 0x0002\n#define SS_REV_TYPE_OFF 0\n#define PLAYER_STATUS_UNK40000 0x40000\n#define PLAYER_STATUS_STONE 0x00000080\n#define setUV0(p,_u0,_v0) (p)->u0 = (_u0), (p)->v0 = (_v0)\n#define NA_SE_EN_SLOGRA_SPEAR_SLASH 0x6C6\n#define HIH(x) (((s16*)&(x))[1])\n#define NA_VO_SU_HURT_1 0x879\n#define SS_NOTICK0 0\n#define MU_DANCE_OF_ILLUSIONS_LOOP_POINT 0x320\n#define MU_HEAVENLY_DOORWAY 0x31B\n#define CdlStatStandby 0x02\n#define MU_DANCE_OF_GOLD_LOOP_POINT 0x32F\n#define SE_UI_OVERWRITE_MSG 0x6AD\n#define MAX_TILE_COUNT 0x100\n#define MU_THE_TRAGIC_PRINCE_LOOP_POINT 0x312\n#define setSprt(p) setlen(p, 4), setcode(p, 0x64)\n#define DRAW_UNK_800 0x800\n#define setLineF2(p) setlen(p, 3), setcode(p, 0x40)\n#define setLineF3(p) setlen(p, 5), setcode(p, 0x48), (p)->pad = 0x55555555\n#define setLineF4(p) setlen(p, 6), setcode(p, 0x4c), (p)->pad = 0x55555555\n#define BUTTON_COUNT 8\n#define EvSpTRAP 0x1000\n#define setLineG2(p) setlen(p, 4), setcode(p, 0x50)\n#define setLineG3(p) setlen(p, 7), setcode(p, 0x58), (p)->pad = 0x55555555\n#define NA_SE_EN_GAIBON_SCREAM 0x70B\n#define SFX_KARMA_COIN 0x682\n#define NA_SE_VO_AL_WHAT 0x6F2\n#define DRAW_UNK_1000 0x1000\n#define SEEK_SET 0\n#define SS_SERIAL_A 0\n#define SS_SERIAL_B 1\n#define FLAG_DESTROY_IF_OUT_OF_CAMERA 0x80000000\n#define gte_rtps() \n#define gte_rtpt() \n#define N_VERTI_TILES 16\n#define NA_SE_EN_GAIBON_FLAME_OUT 0x65E\n#define FSCAN 0x1000\n#define gte_stsxy2(r0) \n#define gte_stsxy3(r0,r1,r2) \n#define CdlDiskError 0x05\n#define PLAYER_STATUS_UNK10000 0x10000\n#define TILE_MASK 0x0F\n#define setTile16(p) setlen(p, 2), setcode(p, 0x78)\n#define NA_SE_EN_AXE_KNIGHT_BREAK_AXE 0x66B\n#define EvSpTIMOUT 0x0100\n#define NA_SE_VO_DR_HERE_IS_TRUE_POWER 0x855\n#define O_CREAT FCREAT\n#define SPELL_FLAG_KNOWN 0x80\n#define FLAG_UNK_00200000 0x00200000\n#define NA_SE_EN_GAIBON_COLLAPSE 0x672\n#define PAL_BULK(dst,data) (u_long*)(dst), (u_long*)LEN(data), (u_long*)(data)\n#define FNBUF 0x4000\n#define MU_THE_DOOR_TO_THE_ABYSS 0x325\n#define NA_SE_BREAK_GLASS 0x68B\n#define NULL (0)\n#define LAYER_TPAGE_ID (0x20 | 0x40)\n#define CD_SOUND_COMMAND_FADE_OUT_1 3\n#define CD_SOUND_COMMAND_FADE_OUT_2 2\n#define MU_THE_DOOR_TO_THE_ABYSS_LOOP_POINT 0x326\n#define CdlSetmode 0x0e\n#define NA_VO_SU_DELICIOUS 0x8D1\n#define setUVWH(p,_u0,_v0,_w,_h) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u0) + (_w), (p)->v1 = (_v0), (p)->u2 = (_u0), (p)->v2 = (_v0) + (_h), (p)->u3 = (_u0) + (_w), (p)->v3 = (_v0) + (_h)\n#define SE_UI_ERROR 0x686\n#define CdlStatRead 0x20\n#define MAKE_PAL_OP(kind,freq) ((kind) | ((freq) << 0x10))\n#define CASTLE_MAP_PTR 0x801E0000\n#define NA_SE_EN_GAIBON_BIG_FIREBALL 0x655\n#define ELEMENT_HOLY 0x1000\n#define __attribute__(...) \n#define EvSpIOE 0x0004\n#define CD_SOUND_COMMAND_6 6\n#define NA_VO_MAR_AIM_HEAD 0x87F\n#define CdlStop 0x08\n#define SPU_VOICE_NOTE (0x01 << 5)\n#define SE_INTRO_WIND_QUIET_LOOP_POINT 0x32D\n#define SE_UI_DEBUG_SELECT 0x688\n#define DRAW_HIDE 0x08\n#define SE_HEALTH_REGAINED 0x68E\n#define TcbStACTIVE 0x4000\n#define CdlStandby 0x07\n#define SPU_VOICE_ADSR_RMODE (0x01 << 10)\n#define MU_PRAYER 0x332\n#define NA_SE_PL_MP_GAUGE 0x67D\n#define CdlMAXFILE 64\n#define PAL_GLOW_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define JP_VO_FUKAMI_RIKA_MESSAGE 0x344\n#define FLAG_UNK_80000 0x80000\n#define NA_VO_RI_TRIBUTE 0x35A\n#define SFX_UNK_6EA 0x6EA\n#define MU_FINAL_TOCATTA_LOOP_POINT 0x339\n#define MAX_BG_LAYER_COUNT 16\n#define MU_METAMORPHOSIS_II 0x328\n#define PAL_OVL(x) ((x) | ANIMSET_OVL_FLAG)\n#define PLAYER_STATUS_MIST_FORM 0x00000002\n#define SPU_VOICE_VOLMODEL (0x01 << 2)\n#define SPU_VOICE_VOLMODER (0x01 << 3)\n#define NA_SE_EN_SLOGRA_HURT_2 0x70A\n#define PLAYER_STATUS_BAT_FORM 0x00000001\n#define WEAPON1_PTR 0x8017D000\n#define SE_WPN_POWER_OF_SIRE 0x66A\n#define CdlStatSeek 0x40\n#define MU_ABANDONED_PIT 0x319\n#define CdlModeStream2 0x120\n#define SE_WPN_ALUCARD_SWORD_SWING 0x6A8\n#define NA_SE_EN_GAIBON_FLAP_WINGS 0x68D\n#define ELEMENT_WATER 0x400\n#define SS_REV_TYPE_ROOM 1\n#define SE_DEATH_TAKES_ITEMS 0x7A0\n#define SPU_VOICE_ADSR_ADSR1 (0x01 << 17)\n#define FLAG_UNK_01000000 0x01000000\n#define LOH(x) (*(s16*)&(x))\n#define HwCdRom (DescHW | 0x03)\n#define PLAYER_STATUS_UNK4000000 0x04000000\n#define NA_SE_EN_BLOODY_ZOMBIE_INJURED 0x748\n#define DRA_PRG_PTR 0x800A0000\n#define RELIC_FLAG_ACTIVE 2\n#define MAX_LINE_G2_COUNT 0x100\n#define SE_UNK_TE3_667 0x667\n#define MAX_ENV_COUNT 0x10\n#define NA_SE_VO_DR_PLAYTIME_IS_OVER 0x858\n#define O_NBLOCK FNBLOCK\n#define SE_UNK_TE3_679 0x679\n#define MAX_DRAW_MODES 0x400\n#define SET_STOP_SEQ 7\n#define PAD_RIGHT 0x2000\n#define MEMCARD_ID "BASLUS-00067DRAX00"\n#define N_HORIZ_TILES 17\n#define RCntMdNOINTR 0x2000\n#define HwVBLANK (DescHW | 0x01)\n#define STAGE_INVERTEDCASTLE_MASK 0x1F\n#define CdlModeStream 0x100\n#define HwSIO (DescHW | 0x0b)\n#define MU_DANCE_OF_ILLUSIONS 0x31F\n#define PLAYER_STATUS_UNK400 0x400\n#define MU_DRACULAS_CASTLE_LOOP_POINT 0x310\n#define gte_stopz(r0) \n#define NA_SE_SU_PETAL_ATTACK 0x6B0\n#define SE_TREE_BRANCH_SNAP 0x7A4\n#define CdlModeRept 0x04\n#define NA_SE_EN_SKELETON_THROW_BONE 0x6C8\n#define HwPIO (DescHW | 0x0a)\n#define SPU_REV_FEEDBACK (0x01 << 4)\n#define PAL_UNK_OP2_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define EvStWAIT 0x1000\n#define EvSpCOMP 0x0020\n#define FLAG_UNK_100000 0x100000\n#define O_NOWAIT FASYNC\n#define MU_DEATH_BALLAD_LOOP_POINT 0x335\n#define SE_UNK_TE3_6B8 0x6B8\n#define WEAPON0_PTR 0x8017A000\n#define NA_SE_EN_EXPLOSIVE_DEATH 0x693\n#define JP_VO_KONAMI_10 0x355\n#define JP_VO_KONAMI_11 0x356\n#define FLAG_UNK_200 0x200\n#define HwSPU (DescHW | 0x09)\n#define TYPES_H \n#define FCREAT 0x0200\n#define setSemiTrans(p,abe) ((abe) ? setcode(p, getcode(p) | 0x02) : setcode(p, getcode(p) & ~0x02))\n#define SS_IMMEDIATE 0\n#define DescUEV 0xf3000000\n#define CdlGetparam 0x0f\n#define DEMO_KEY_LEN 3\n#define SFX_UNK_6F0 0x6F0\n#define FLAG_UNK_8000 0x8000\n#define FONT_H 8\n#define FONT_W 8\n#define NA_SE_EN_BLOODY_ZOMBIE_HEMORRHAGE 0x749\n#define LIBETC_H \n#define BIBLE_SUBWPN_SWOOSH 0x8C3\n#define FONT_GAP FONT_W\n#define MU_BLACK_BANQUET 0x33A\n#define TcbMdPRI 0x2000\n#define setClut(p,x,y) ((p)->clut = getClut(x, y))\n#define SE_UNK_TE2_6B4 0x6B4\n#define PALETTE_LEN ((COLORS_PER_PAL) * ((COLOR_BPP) / 8))\n#define MU_ENCHANTED_BANQUET_LOOP_POINT 0x331\n#define NA_VO_DR_IT_WAS_NOT 0x359\n#define FREAD 0x0001\n#define EvStALREADY 0x4000\n#define setRGB0(p,_r0,_g0,_b0) (p)->r0 = _r0, (p)->g0 = _g0, (p)->b0 = _b0\n#define setRGB1(p,_r1,_g1,_b1) (p)->r1 = _r1, (p)->g1 = _g1, (p)->b1 = _b1\n#define setRGB2(p,_r2,_g2,_b2) (p)->r2 = _r2, (p)->g2 = _g2, (p)->b2 = _b2\n#define MU_BLACK_BANQUET_LOOP_POINT 0x33B\n#define SEEK_END 2\n#define RCntCNT0 (DescRC | 0x00)\n#define ELEMENT_CURSE 0x100\n#define CdlMute 0x0b\n#define JP_VO_KONAMI_4 0x34F\n#define DRAW_TPAGE2 0x20\n#define JP_VO_KONAMI_6 0x351\n#define catPrim(p0,p1) setaddr(p0, p1)\n#define JP_VO_KONAMI_7 0x352\n#define NA_SE_VO_AL_SOUL_STEAL 0x6F4\n#define SS_MIX 0\n#define CdlModeSize1 0x20\n#define FLAG_DRAW_UNK100 0x100\n#define PLAYER_STATUS_UNK200 0x200\n#define NA_VO_SU_HURT_2 0x87A\n#define SFX_UNK_64B 0x64B\n#define SFX_UNK_64C 0x64C\n#define CdlStatError 0x01\n#define SE_ITEM_YOINK 0x7A2\n#define ALUCARD_DARK_METAMORPHOSIS 0x705\n#define STAGE_PRG_PTR 0x80180000\n#define COLORS_PER_PAL (16)\n#define SFX_UNK_664 0x664\n#define setRGB3(p,_r3,_g3,_b3) (p)->r3 = _r3, (p)->g3 = _g3, (p)->b3 = _b3\n#define SFX_UNK_669 0x669\n#define PAD_COUNT 2\n#define O_WRONLY FWRITE\n#define STAGE_INVERTEDCASTLE_FLAG 0x20\n#define PLAYER g_Entities[PLAYER_CHARACTER]\n#define MU_DRACULAS_CASTLE 0x30F\n#define SFX_UNK_683 0x683\n#define SE_UNK_TE2_6B6 0x6B6\n#define HEART_VESSEL_RICHTER 30\n#define FACTORY(A0,BLUEPRINTNUM) (A0 << 8 | BLUEPRINTNUM)\n#define NA_SE_VO_AL_DYING 0x6F6\n#define SFX_UNK_69A 0x69A\n#define PLAYER_STATUS_UNK800 0x800\n#define CdlStatShellOpen 0x10\n#define DRAW_TRANSP 0x01\n#define SPU_REV_DELAYTIME (0x01 << 3)\n#define addPrims(ot,p0,p1) setaddr(p1, getaddr(ot)), setaddr(ot, p0)\n#define ELEMENT_POISON 0x80\n#define CdlStatPlay 0x80\n#define SPU_ON 1\n#define SS_NOTICK 0x1000\n#define SE_UNK_TE1_651 0x651\n#define FLAG_UNK_2000 0x2000\n#define SPU_VOICE_WDSA (0x01 << 7)\n#define PAL_UNK_OP2_DATA(data) (u_long*)(data)\n#define EvSpSYSCALL 0x4000\n#define FAMILIAR_PTR 0x80170000\n#define LAYER_CLUT_ALT 0x200\n#define SP(x) (0x1F800000 + (x))\n#define SQ(x) ((x) * (x))\n#define SE_UNK_TE1_66F 0x66F\n#define FLAG_DRAW_UNK10 0x10\n#define STAGE_H \n#define MAX_POLY_GT4_COUNT 0x300\n#define HwCARD (DescHW | 0x11)\n#define MU_FESTIVAL_OF_SERVANTS_LOOP_POINT 0x31E\n#define FLAG_DRAW_UNK20 0x20\n#define CdlModeSpeedNormal 0\n#define RCntMdGATE 0x0010\n#define SAVE_FLAG_NORMAL (0)\n#define SFX_UNK_6A3 0x6A3\n#define SFX_UNK_6AD 0x6AD\n#define setTile1(p) setlen(p, 2), setcode(p, 0x68)\n#define setTile8(p) setlen(p, 2), setcode(p, 0x70)\n#define FLAG_DRAW_UNK40 0x40\n#define SFX_UNK_6B0 0x6B0\n#define CdlDemute 0x0c\n#define JP_VO_KATSUTE 0x341\n#define setBlockFill(p) setlen(p, 3), setcode(p, 0x02)\n#define EvSpIOER 0x0400\n#define SFX_UNK_6DF 0x6DF\n#define FLAG_DRAW_UNK8 0x08\n#define SFX_UNK_6E0 0x6E0\n#define NA_SE_VO_AL_DARK_METAMORPHOSIS 0x6F3\n#define SFX_UNK_6E8 0x6E8\n#define SFX_UNK_6E9 0x6E9\n#define SFX_UNK_6EB 0x6EB\n#define SFX_UNK_6EC 0x6EC\n#define SFX_UNK_6ED 0x6ED\n#define SFX_UNK_6EE 0x6EE\n#define SFX_UNK_6EF 0x6EF\n#define EvSpIOEW 0x0800\n#define PAD_CIRCLE 0x0020\n#define FLAG_DRAW_UNK80 0x80\n#define SFX_UNK_6F7 0x6F7\n#define DIAG_EOS 0x00\n#define PLAYER_STATUS_UNK_20 0x00000020\n#define SFX_H \n#define CLAMP_MIN(v,min) ((v) < (min) ? (min) : (v))\n#define LIBSND_H \n#define PAL_UNK_OP2 2\n#define O_TAG u_long tag\n#define GET_PAL_OP_KIND(x) (LOH(x))\n#define MU_PROLOGUE_LOOP_POINT 0x322\n#define _LANGUAGE_C 1\n#define DRAW_UNK_400 0x400\n#define _S(x) (x)\n#define SE_UNK_TE1_6B3 0x6B3\n#define FAPPEND 0x0100\n#define WEAPON_1_START 0xF0\n#define DescSW 0xf4000000\n#define RENDERFLAGS_NOSHADOW 2\n#define SIM_CHR0 0x80280000\n#define SIM_CHR1 0x80284000\n#define CdlGetTD 0x14\n#define NA_SE_VO_DR_TAUNT_1 0x84F\n#define CdlReadS 0x1B\n#define MAX(a,b) ((a) > (b) ? (b) : (a))\n#define setcode(p,_code) (((P_TAG*)(p))->code = (u_char)(_code))\n#define getClut(x,y) ((y << 6) | ((x >> 4) & 0x3f))\n#define PAL_BULK_COPY_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define MU_MARBLE_GALLERY_LOOP_POINT 0x30E\n#define NA_SE_EN_BLOODY_ZOMBIE_DEATH_SCREAM 0x747\n#define SE_INTRO_WIND 0x32A\n#define SwCARD (DescSW | 0x01)\n#define DRAW_ABSPOS 0x2000\n#define FASYNC 0x8000\n#define JP_VO_OKIAYU_RYOUTAROU_MESSAGE 0x347\n#define SPU_VOICE_PITCH (0x01 << 4)\n#define DEMO_KEY_PTR 0x801E8000\n#define setTPage(p,tp,abr,x,y) ((p)->tpage = getTPage(tp, abr, x, y))\n#define _MIPS_SZLONG 32\n#define CdlComplete 0x02\n#define CdlModeSpeed 0x80\n#define SE_CASTLE_GATE_RISE 0x7A5\n#define CD_SOUND_COMMAND_START_XA 4\n#define SPU_REV_DEPTHL (0x01 << 1)\n#define SPU_REV_DEPTHR (0x01 << 2)\n#define EvMdINTR 0x1000\n#define VERSION "us"\n#define EvSpDR 0x0040\n#define PAL_UNK_OP3_DATA(data) (u_long*)(data)\n#define MIN(a,b) ((a) > (b) ? (b) : (a))\n#define MAXSPRT16 0x280\n#define RELIC_FLAG_DISABLE 0\n#define NA_SE_EN_DR_FIREBALL 0x660\n#define INCLUDE_ASM(FOLDER,NAME) __asm__(".pushsection .text\\n" "\\t.align\\t2\\n" "\\t.globl\\t" #NAME "\\n" "\\t.ent\\t" #NAME "\\n" #NAME ":\\n" ".include \\"asm/" VERSION "/" FOLDER "/" #NAME ".s\\"\\n" "\\t.set reorder\\n" "\\t.set at\\n" "\\t.end\\t" #NAME "\\n" ".popsection");\n#define SET_UNK_0B 0xB\n#define SET_UNK_0E 0xE\n#define SET_UNK_0F 0xF\n#define ELEMENT_ICE 0x2000\n#define JP_VO_SH_SCREAM 0x52F\n#define SET_UNK_10 0x10\n#define SET_UNK_11 0x11\n#define SPU_VOICE_LSAX (0x01 << 16)\n#define LOG_H \n#define COLOR16(r,g,b,a) (r) + ((g) << 5) + ((b) << 10) + ((a) << 15)\n#define setXYWH(p,_x0,_y0,_w,_h) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x0) + (_w), (p)->y1 = (_y0), (p)->x2 = (_x0), (p)->y2 = (_y0) + (_h), (p)->x3 = (_x0) + (_w), (p)->y3 = (_y0) + (_h)\n#define MU_DANCE_OF_GOLD 0x32E\n#define MU_WANDERING_GHOSTS_LOOP_POINT 0x324\n#define FLAG_UNK_40000 0x40000\n#define FLAG_DRAW_DEFAULT 0x00\n#define JP_VO_WAKAMOTO_NORIO_MESSAGE 0x349\n#define PAD_DOWN 0x4000\n#define TcbMdRT 0x1000\n#define GFX_TERMINATE() ((u_long*)-1)\n#define NA_VO_SU_CRYSTAL_1 0x87C\n#define NA_VO_SU_CRYSTAL_2 0x6AF\n#define SS_REV_TYPE_STUDIO_B 3\n#define PAD_START 0x0800\n#define LOW(x) (*(s32*)&(x))\ntypedef char int8_t;\ntypedef short int16_t;\ntypedef int int32_t;\ntypedef long long int64_t;\ntypedef unsigned char uint8_t;\ntypedef unsigned short uint16_t;\ntypedef unsigned int uint32_t;\ntypedef unsigned long long uint64_t;\ntypedef unsigned char u_char;\ntypedef unsigned short u_short;\ntypedef unsigned long u_long;\ntypedef unsigned int size_t;\ntypedef signed char s8;\ntypedef signed short s16;\ntypedef signed int s32;\ntypedef signed long long s64;\ntypedef unsigned char u8;\ntypedef unsigned short u16;\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\ntypedef signed char byte;\ntypedef enum { false, true } bool;\ntypedef union {\n    s32 val;\n    struct {\n        s16 lo;\n        s16 hi;\n    } i;\n} f32;\ntypedef struct {\n              s16 x;\n              s16 y;\n} Point16;\ntypedef struct {\n    u8 u;\n    u8 v;\n} uvPair;\ntypedef struct {\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 pad;\n} rgb_set;\nint sprintf(char* dst, const char* fmt, ...);\ntypedef enum {\n    LOG_LEVEL_D,\n    LOG_LEVEL_I,\n    LOG_LEVEL_W,\n    LOG_LEVEL_E,\n} LOG_LEVEL;\nvoid SetMinLogLevel(LOG_LEVEL level);\nvoid _log(unsigned int level, const char* file, unsigned int line,\n          const char* func, const char* fmt, ...);\ntypedef enum {\n    PLAYER_CHARACTER,\n    UNK_ENTITY_1,\n    UNK_ENTITY_2,\n    UNK_ENTITY_3,\n    UNK_ENTITY_4,\n    UNK_ENTITY_5,\n    UNK_ENTITY_6,\n    UNK_ENTITY_7,\n    UNK_ENTITY_8,\n    E_WEAPON = 0x10,\n    UNK_ENTITY_11 = 0x11,\n    UNK_ENTITY_12 = 0x12,\n    UNK_ENTITY_13 = 0x13,\n    UNK_ENTITY_20 = 0x20,\n    UNK_ENTITY_51 = 0x51,\n    UNK_ENTITY_100 = 0x100\n} EntityTypes;\nstruct DIRENTRY {\n               char name[20];\n               long attr;\n               long size;\n               struct DIRENTRY* next;\n              long head;\n               char system[4];\n};\nvoid EnterCriticalSection(void);\nvoid ExitCriticalSection(void);\nlong _card_info(long chan);\nlong _card_clear(long chan);\nlong _card_load(long chan);\nvoid InitCARD(long val);\nlong StartCARD(void);\nstruct EXEC {\n    unsigned long pc0;\n    unsigned long gp0;\n    unsigned long t_addr;\n    unsigned long t_size;\n    unsigned long d_addr;\n    unsigned long d_size;\n    unsigned long b_addr;\n    unsigned long b_size;\n    unsigned long s_addr;\n    unsigned long s_size;\n    unsigned long sp, fp, gp, ret, base;\n};\nextern void InitHeap(void*, unsigned long);\nextern long Load(char*, struct EXEC*);\nextern long Exec(struct EXEC*, long, char**);\nextern void _bu_init(void);\nextern long open(char* devname,\n                 int flag\n);\nextern long lseek(long, long, long);\nextern long read(long fd,\n                 void* buf,\n                 long n\n);\nextern long write(long, void*, long);\nextern int close(int fd\n);\nextern long format(char* fs\n);\nextern struct DIRENTRY* firstfile(char*, struct DIRENTRY*);\nextern struct DIRENTRY* nextfile(struct DIRENTRY*);\nextern long erase(char*);\nextern long Krom2RawAdd(unsigned long);\nextern void ChangeClearPAD(long);\nextern void StopPAD(void);\nint PAD_init(s32 , s32* );\nextern void FlushCache(void);\nextern void DeliverEvent(unsigned long, unsigned long);\nextern long TestEvent(unsigned long event\n);\nextern long OpenEvent(unsigned long, long, long, long (*func)());\nextern long EnableEvent(long);\nextern void _96_remove(void);\nextern long SetRCnt(unsigned long, unsigned short, long);\nextern long StartRCnt(unsigned long);\nextern long GetRCnt(unsigned long);\nextern long StopRCnt(unsigned long);\nextern long ResetRCnt(unsigned long);\nextern void exit();\nextern void puts(char*);\nextern char* strcat(char*, char*);\nextern int strcmp(char*, char*);\nextern int strncmp(char*, char*);\nextern char* strcpy(char*, char*);\nextern int strlen(char*);\nextern void* memcpy(unsigned char*, unsigned char*, int);\nextern void* memset(unsigned char*, unsigned char, int);\nextern int rand(void);\nextern void srand(unsigned int);\nextern void* malloc(size_t\n);\nextern void free(void*);\nint printf(char*, ...);\nint abs(int x);\ntypedef struct {\n    u_char minute;\n    u_char second;\n    u_char sector;\n    u_char track;\n} CdlLOC;\ntypedef struct {\n    u_char val0;\n    u_char val1;\n    u_char val2;\n    u_char val3;\n} CdlATV;\ntypedef struct {\n    u_short id;\n    u_short type;\n    u_short secCount;\n    u_short nSectors;\n    u_long frameCount;\n    u_long frameSize;\n    u_short width;\n    u_short height;\n    u_long dummy1;\n    u_long dummy2;\n    CdlLOC loc;\n} StHEADER;\ntypedef struct {\n    CdlLOC pos;\n    u_long size;\n    char name[16];\n} CdlFILE;\ntypedef void (*CdlCB)(u_char, u_char*);\nvoid def_cbsync(u_char intr, u_char* result);\nvoid def_cbready(u_char intr, u_char* result);\nvoid def_cbread(u_char intr, u_char* result);\nint CdInit(void);\nint CdStatus(void);\nint CdMode(void);\nint CdLastCom(void);\nint CdReset(int mode);\nvoid CdFlush(void);\nint CdSetDebug(int level);\nchar* CdComstr(u_char com);\nchar* CdIntstr(u_char intr);\nint CdSync(int mode, u_char* result);\nint CdReady(int mode, u_char* result);\nCdlCB CdSyncCallback(CdlCB func);\nCdlCB CdReadyCallback(CdlCB func);\nint CdControl(u_char com, u_char* param, u_char* result);\nint CdControlB(u_char com, u_char* param, u_char* result);\nint CdControlF(u_char com, u_char* param);\nint CdMix(CdlATV* vol\n);\nint CdGetSector(void* madr, int size);\nvoid(*CdDataCallback(void (*func)()));\nCdlLOC* CdIntToPos(int i, CdlLOC* p);\nint CdPosToInt(CdlLOC* p);\nCdlFILE* CdSearchFile(CdlFILE* fp, char* name);\nint CdRead(int sectors, u_long* buf, int mode);\nint CdReadSync(int mode, u_char* result);\nCdlCB CdReadCallback(CdlCB func);\nint CdRead2(long mode);\nvoid StClearRing(void);\nvoid StSetStream(u_long mode, u_long start_frame, u_long end_frame,\n                 void (*func1)(), void (*func2)());\nvoid StSetMask(u_long mask, u_long start, u_long end);\nu_long StGetNext(u_long** addr, u_long** header);\nu_long StFreeRing(u_long* base);\nint StGetBackloc(CdlLOC* loc);\nvoid StSetRing(u_long* ring_addr, u_long ring_size1);\nvoid StUnSetRing(void);\nstruct Callbacks {\n    const char* rcsid;\n    void* (*DMACallback)(int dma, void (*func)());\n    void* (*InterruptCallback)(int irq, void (*f)());\n    int (*ResetCallback)(void);\n    int (*StopCallback)(void);\n    int (*VSyncCallbacks)(int ch, void (*f)());\n    int (*RestartCallback)(void);\n};\nextern unsigned short D_8002C2BA;\nextern struct Callbacks* D_8002D340;\nint VSync(int mode);\nint VSyncCallback(void (*f)());\nint VSyncCallbacks(int ch, void (*f)());\nvoid* DMACallback(int dma, void (*func)());\nint ResetCallback(void);\nint StopCallback(void);\nint RestartCallback(void);\nint CheckCallback(void);\nlong SetVideoMode(long mode);\nvoid PadInit(int mode);\nu_long PadRead(int id);\nvoid PadStop(void);\ntypedef struct {\n              short x;\n              short y;\n              short w;\n              short h;\n} RECT;\ntypedef struct {\n    unsigned addr : 24;\n    unsigned len : 8;\n    u_char r0, g0, b0, code;\n} P_TAG;\ntypedef struct {\n    u_char r0, g0, b0, code;\n} P_CODE;\ntypedef struct {\n    u_long tag;\n              u_long code[15];\n} DR_ENV;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n} POLY_F3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    short x3, y3;\n} POLY_F4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char u0, v0;\n    u_short clut;\n    short x1, y1;\n    u_char u1, v1;\n    u_short tpage;\n    short x2, y2;\n    u_char u2, v2;\n    u_short pad1;\n} POLY_FT3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char u0, v0;\n    u_short clut;\n    short x1, y1;\n    u_char u1, v1;\n    u_short tpage;\n    short x2, y2;\n    u_char u2, v2;\n    u_short pad1;\n    short x3, y3;\n    u_char u3, v3;\n    u_short pad2;\n} POLY_FT4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, pad1;\n    short x1, y1;\n    u_char r2, g2, b2, pad2;\n    short x2, y2;\n} POLY_G3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n} POLY_GT3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char pad1;\n               short x1;\n               short y1;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char pad2;\n               short x2;\n               short y2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char pad3;\n               short x3;\n               short y3;\n} POLY_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char p3;\n               short x3;\n               short y3;\n               u_char u3;\n               u_char v3;\n               u_short pad3;\n} POLY_GT4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n} LINE_F2;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n} LINE_G2;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    u_long pad;\n} LINE_F3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n    u_char r2, g2, b2, p2;\n    short x2, y2;\n    u_long pad;\n} LINE_G3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    short x3, y3;\n    u_long pad;\n} LINE_F4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n    u_char r2, g2, b2, p2;\n    short x2, y2;\n    u_char r3, g3, b3, p3;\n    short x3, y3;\n    u_long pad;\n} LINE_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               short w;\n               short h;\n} SPRT;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_16;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_8;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short w, h;\n} TILE;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_16;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_8;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_1;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short w, h;\n} BLK_FILL;\ntypedef struct {\n               RECT clip;\n               short ofs[2];\n               RECT tw;\n               u_short tpage;\n               u_char dtd;\n               u_char dfe;\n               u_char isbg;\n               u_char r0, g0, b0;\n               DR_ENV dr_env;\n} DRAWENV;\ntypedef struct {\n               RECT disp;\n               RECT screen;\n               u_char isinter;\n               u_char isrgb24;\n               u_char pad0;\n               u_char pad1;\n} DISPENV;\ntypedef struct {\n               u_long tag;\n               u_long code[2];\n} DR_MODE;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_TWIN;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_AREA;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_OFFSET;\ntypedef struct {\n    u_long tag;\n    u32 code[2];\n} DR_PRIO;\ntypedef struct PixPattern {\n    u8 w;\n    u8 h;\n    u8 x;\n    u8 y;\n} PixPattern;\nextern u_short LoadTPage(\n    u_long* pix,\n    int tp,\n    int abr,\n    int x, int y,\n    int w, int h\n);\nextern u_short LoadClut2(u_long* clut, int x, int y);\nu_short GetClut(int x,\n                int y\n);\nu_short GetTPage(int tp, int abr, int x, int y);\nvoid DumpTPage(u_short tpage);\nvoid DumpClut(u_short clut);\nextern void AddPrim(void* ot, void* p);\nextern void SetShadeTex(void* p, int tge);\nextern void SetLineG2(LINE_G2* p);\nextern void SetPolyGT3(POLY_GT3* p);\nextern void SetPolyG4(POLY_G4* p);\nextern void SetPolyGT4(POLY_GT4* p);\nextern void SetSemiTrans(void* p, int abe);\nextern void SetSprt(SPRT* p);\nextern void SetSprt16(SPRT_16* p);\nextern void SetSprt8(SPRT_8* p);\nextern void SetTile(TILE* p);\nextern int ResetGraph(int mode);\nint SetGraphDebug(int level);\nextern int SetGraphReverse(int mode);\nextern int SetGraphQueue(int mode);\nextern u_long DrawSyncCallback(void (*func)());\nextern void FntLoad(int tx, int ty);\nint FntPrint(const char* fmt, ...);\nextern void SetDispMask(int mask);\nextern void SetDrawMode(DR_MODE* p, int dfe, int dtd, int tpage, RECT* tw);\nextern void SetDumpFnt(int id);\nextern int ClearImage(RECT* rect, u_char r, u_char g, u_char b);\nextern int DrawSync(int mode);\nextern int FntOpen(int x, int y, int w, int h, int isbg, int n);\nextern u_long* FntFlush(int id);\nextern int LoadImage(RECT* rect, u_long* p);\nextern int StoreImage(RECT* rect, u_long* p);\nextern int MoveImage(RECT* rect, int x, int y);\nextern u_long* ClearOTag(u_long* ot, int n);\nextern u_long* ClearOTagR(u_long* ot, int n);\nextern void DrawOTag(u_long* p);\nextern DRAWENV* PutDrawEnv(DRAWENV* env);\nextern DISPENV* PutDispEnv(DISPENV* env);\nextern DISPENV* SetDefDispEnv(DISPENV* env, int x, int y, int w, int h);\nextern DRAWENV* SetDefDrawEnv(DRAWENV* env, int x, int y, int w, int h);\nextern void SetDrawEnv(DR_ENV* dr_env, DRAWENV* env);\nvoid GsClearVcount(void);\nlong GsGetVcount();\nvoid GsInitVcount();\nvoid InitGeom();\ntypedef struct {\n    short m[3][3];\n    long t[3];\n} MATRIX;\ntypedef struct {\n    long vx, vy, vz;\n    long pad;\n} VECTOR;\ntypedef struct {\n    short vx, vy, vz;\n    short pad;\n} SVECTOR;\ntypedef struct {\n    u_char r, g, b;\n    u_char cd;\n} CVECTOR;\nMATRIX* RotMatrix(SVECTOR* r, MATRIX* m);\nvoid SetGeomOffset(long ofx, long ofy);\nlong RotTransPers(SVECTOR*, long*, long*, long*);\nvoid SetGeomScreen(long h);\nvoid SetRotMatrix(MATRIX* m);\nMATRIX* RotMatrixX(long r, MATRIX* m);\nMATRIX* RotMatrixY(long r, MATRIX* m);\nMATRIX* RotMatrixZ(long r, MATRIX* m);\nMATRIX* TransMatrix(MATRIX* m, VECTOR* v);\nMATRIX* ScaleMatrix(MATRIX* m, VECTOR* v);\nvoid SetTransMatrix(MATRIX* m);\nlong RotTransPers4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* v10, long* v11, long* v12,\n    long* v13,\n    long* p,\n    long* flag\n);\nlong RotAverageNclip4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* sxy0, long* sxy1, long* sxy2,\n    long* sxy3,\n    long* p,\n    long* otz,\n    long* flag\n);\nvoid NormalColorCol(SVECTOR* v0,\n                    CVECTOR* v1,\n                    CVECTOR* v2\n);\nMATRIX* RotMatrixY(long r,\n                   MATRIX* m\n);\nvoid SetBackColor(long rbk, long gbk, long bbk);\nvoid SetColorMatrix(MATRIX* m);\nvoid SetLightMatrix(MATRIX* m);\nvoid SetTransMatrix(MATRIX* m);\nvoid SetFarColor(long rfc, long gfc, long bfc);\nvoid SetFogNear(long a, long h);\nextern long SquareRoot0(long a);\nextern long SquareRoot12(long a);\nextern int rcos(int a);\nextern int rsin(int a);\nextern long ratan2(long y, long x);\ntypedef void (*SpuIRQCallbackProc)(void);\ntypedef struct {\n    short left;\n    short right;\n} SpuVolume;\ntypedef struct {\n               unsigned long voice;\n               unsigned long mask;\n               SpuVolume volume;\n               SpuVolume volmode;\n               SpuVolume volumex;\n               unsigned short pitch;\n               unsigned short note;\n               unsigned short sample_note;\n               short envx;\n               unsigned long addr;\n               unsigned long loop_addr;\n               long a_mode;\n               long s_mode;\n               long r_mode;\n               unsigned short ar;\n               unsigned short dr;\n               unsigned short sr;\n               unsigned short rr;\n               unsigned short sl;\n               unsigned short adsr1;\n               unsigned short adsr2;\n} SpuVoiceAttr;\ntypedef struct {\n    unsigned long mask;\n    long mode;\n    SpuVolume depth;\n    long delay;\n    long feedback;\n} SpuReverbAttr;\nextern long SpuSetTransferMode(long mode);\nextern unsigned long SpuWrite(unsigned char* addr, unsigned long size);\nextern long SpuSetReverbModeParam(SpuReverbAttr* attr);\nextern void SpuSetVoiceAttr(SpuVoiceAttr* arg);\nextern void SpuSetKey(long on_off, unsigned long voice_bit);\nextern long SpuMallocWithStartAddr(unsigned long addr, long size);\nextern SpuIRQCallbackProc SpuSetIRQCallback(SpuIRQCallbackProc);\nextern void SsSeqClose(short seq_access_num);\nextern void SsSetMVol(short voll, short volr);\nextern void SsSetSerialAttr(char s_num, char attr, char mode);\nextern void SsSetSerialVol(short s_num, short voll, short volr);\nextern long SpuClearReverbWorkArea(long rev_mode\n);\nvoid SsInitHot(void);\nchar SsSetReservedVoice(char voices\n);\nvoid SsSetTickMode(long tick_mode\n);\nvoid SsStart(void);\nshort SsUtKeyOnV(\n    short voice,\n    short vabId,\n    short prog,\n    short tone,\n    short note,\n    short fine,\n    short voll,\n    short volr\n);\nshort SsUtSetVVol(short vc,\n                  short voll,\n                  short volr\n);\nvoid SpuGetAllKeysStatus(char* status);\nvoid SsSetTableSize(\n    char* table,\n    short s_max,\n    short t_max\n);\nvoid SsSeqStop(short seq_access_num\n);\nvoid SsSetMono(void);\nvoid SsSetStereo(void);\ns32 SsVabOpenHeadSticky(\n    u_char* addr,\n    u_long vabid,\n    u_long sbaddr\n);\ns32 SsVabTransBodyPartly(\n    u_char* addr,\n    u_long bufsize,\n    u_long vabid\n);\ns32 SsVabTransCompleted(\n    short immediateFlag\n);\nvoid SsUtSetReverbType(short type);\nvoid SsUtReverbOn(void);\nvoid SsUtSetReverbDepth(\n    short ldepth,\n    short rdepth\n);\nvoid SsUtSetReverbDelay(short delay);\ntypedef long Event;\ntypedef enum {\n    PRIM_NONE,\n    PRIM_TILE,\n    PRIM_LINE_G2,\n    PRIM_G4,\n    PRIM_GT4,\n    PRIM_GT3,\n    PRIM_SPRT,\n    PRIM_ENV,\n    PRIM_TILE_ALT = PRIM_TILE | 0x10,\n    PRIM_LINE_G2_ALT = PRIM_LINE_G2 | 0x10,\n    PRIM_G4_ALT = PRIM_G4 | 0x10\n} PrimitiveType;\ntypedef struct Vertex {\n              u8 r;\n              u8 g;\n              u8 b;\n              u8 p;\n              s16 x;\n              s16 y;\n              u8 u;\n              u8 v;\n              u16 param;\n} Vertex;\ntypedef struct {\n               SVECTOR* v0;\n               SVECTOR* v1;\n               SVECTOR* v2;\n               SVECTOR* v3;\n} SVEC4;\ntypedef struct {\n    s16 x;\n    s16 y;\n    u8 u;\n    u8 v;\n    u16 param;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 p;\n} VertexFake;\ntypedef struct Prim {\n    struct Prim* next;\n    struct Vertex v[4];\n} Prim;\ntypedef struct Primitive {\n               struct Primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               s16 x2;\n               s16 y2;\n               u8 u2;\n               u8 v2;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               s16 x3;\n               s16 y3;\n               u8 u3;\n               u8 v3;\n               u16 drawMode;\n} Primitive;\ntypedef struct FakePrim {\n    struct FakePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 w;\n               u8 h;\n               u16 clut;\n               f32 posX;\n               f32 posY;\n               f32 velocityX;\n               f32 velocityY;\n               s16 x2;\n               s16 y2;\n               s16 delay;\n               u16 priority;\n               f32 accelerationX;\n               f32 accelerationY;\n               s16 timer;\n               u16 drawMode;\n} FakePrim;\ntypedef struct PrimLineG2 {\n    struct PrimLineG2* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               s16 xLength;\n               s16 yLength;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               f32 velocityX;\n               f32 velocityY;\n               s32 angle;\n               s16 delay;\n               u16 priority;\n               f32 preciseX;\n               f32 preciseY;\n               s16 timer;\n               u16 drawMode;\n} PrimLineG2;\ntypedef struct {\n    struct primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               f32 y1_f32;\n               s16 unk24;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               f32 y1_f32_velocity;\n               s16 unk30;\n               u16 drawMode;\n} draculaPrimitive;\ntypedef struct AxePrim {\n    struct AxePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               s32 unk0C;\n               s32 unk10;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               s16 unk1C;\n              s16 unk1E;\n               s16 x2;\n               s16 y2;\n               u8 step;\n               u16 priority;\n               s32 pad;\n               s16 timer;\n               s16 unk2E;\n               s16 unk30;\n               u16 drawMode;\n} AxePrim;\nstruct Entity;\ntypedef void (*PfnEntityUpdate)(struct Entity*);\ntypedef union {\n    s32 unk;\n    void* ptr;\n    struct {\n        s8 unk0, unk1, unk2, unk3;\n    } S8;\n    struct {\n        u8 unk0, unk1, unk2, unk3;\n    } U8;\n    struct {\n        s16 unk0, unk2;\n    } S16;\n    struct {\n        u16 unk0, unk2;\n    } U16;\n} Multi;\ntypedef union {\n    s16 s;\n    u16 u;\n    struct {\n        s8 unk0, unk1;\n    } S8;\n    struct {\n        u8 unk0, unk1;\n    } U8;\n} Multi16;\nstruct Entity;\ntypedef struct ET_Generic {\n               Multi16 unk7C;\n    union {\n                   u16 modeU16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeU8;\n    } unk7E;\n    union {\n                   s32 modeS32;\n                   struct Entity* entityPtr;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeS8;\n    } unk80;\n               Multi unk84;\n               Multi unk88;\n    union {\n                   struct Entity* entityPtr;\n                   struct Primitive* primPtr;\n                   s32 modeS32;\n        struct {\n                       u16 unk0;\n                       u16 unk2;\n        } modeU16;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk8C;\n               s16 unk90;\n               s16 unk92;\n               u8 unk94;\n               u8 unk95;\n               s16 unk96;\n               s32 unk98;\n               struct Entity* unk9C;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               u8 unkAC;\n               s8 unkAD;\n               s8 unkAE;\n               s8 unkAF;\n               s16 unkB0;\n               s16 unkB2;\n               s16 unkB4;\n               s16 unkB6;\n    union {\n                   void (*unkFuncB8)(struct Entity*);\n                   struct Entity* entityPtr;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n                       u8 unk2;\n                       u8 unk3;\n        } modeU8;\n    } unkB8;\n} ET_Generic;\ntypedef struct {\n               u16 timer;\n               s16 unk7E;\n               u8 aliveTimer;\n               s8 unk81;\n               s16 unk82;\n               s32 fallSpeed;\n               s16 gravity;\n               s16 unk8A;\n               s16 iconSlot;\n               s16 unk8E;\n               s16 unk90;\n               s16 unk92;\n               s32 castleFlag;\n} ET_EquipItemDrop;\ntypedef struct {\n               u32 unk[14];\n               u16 unkB4;\n               s16 unkB6;\n               PfnEntityUpdate update;\n} ET_HeartDrop;\ntypedef struct {\n               u16 timer;\n               u16 size;\n               u32 speed;\n} ET_BloodDroplets;\ntypedef struct {\n               u16 nPrims;\n               u16 nDigits;\n               u8 digits[4];\n               u16 timer;\n               s16 unk86;\n               u16 unk88;\n               s16 unk8A;\n} ET_NumericDamage;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u16 sparkleCycle;\n    u16 sparkleAnim;\n    u32 unk84;\n    u32 unk88;\n    s16 iconSlot;\n    u16 unk8E;\n    u16 floatTimer;\n    u16 unk92;\n    s32 yFloatSpeed;\n} ET_RelicOrb;\ntypedef struct {\n               u32 unused7C;\n               s16 unused80;\n               s16 unk82;\n               s16 angle;\n               s16 unk86;\n               u8 sideToPlayer;\n               u8 showedMessage;\n} ET_Door;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               struct Primitive* unk84;\n               struct Primitive* unk88;\n               struct Primitive* unk8C;\n               s16 unk90;\n               s16 unk92;\n} ET_StagePopup;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               struct Primitive* unk84;\n               struct Primitive* unk88;\n               u8 unk8C;\n} ET_StagePopupJP;\ntypedef struct {\n               char* label;\n               u16 width;\n               u16 height;\n               s16 unk84;\n               u16 duration;\n} ET_MessageBox;\ntypedef struct {\n               s16 lifetime;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               struct Entity* some_ent;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s32 accelerationX;\n               s32 accelerationY;\n               s32 unkA4;\n               s32 unkA8;\n               u8 anim;\n               u8 unkAD;\n               s16 equipId;\n} ET_Weapon;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    s32 unk80;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n} ET_KarmaCoin;\ntypedef struct {\n    s16 angle;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 xPos;\n    s16 unk8A;\n    struct Entity* parent;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 accelerationX;\n    s32 accelerationY;\n    s32 unkA4;\n    s32 unkA8;\n    u8 anim;\n    u8 unkAD;\n    s16 equipId;\n} ET_HeavenSword;\ntypedef struct {\n    s16 angle;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s32 unk84;\n    s16 xPos;\n    s16 unk8A;\n    struct Entity* parent;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 accelerationX;\n    s32 accelerationY;\n    s32 unkA4;\n    s32 unkA8;\n    u8 anim;\n    u8 unkAD;\n    s16 equipId;\n} ET_HeavenSword2;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               byte pad[10];\n               u8 anim;\n               u8 padAD;\n               s16 unkAE;\n} ET_Shield;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               u16 unk80;\n               s16 pal;\n               s16* palettePtr;\n               u16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               byte pad[14];\n               u8 anim;\n               u8 padAD;\n               s16 unkAE;\n} ET_DarkShield;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               struct Entity* target;\n               s16 unk94;\n               s16 unk96;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               byte pad[6];\n               s16 unkAE;\n} ET_MedusaShieldLaser;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n} ET_ShamanShieldStar;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               u8 unk9C;\n               byte pad[14];\n               u8 anim;\n               s16 unkAE;\n} ET_HeraldShieldSwirlEffect;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    s32 unk80;\n    s16 pad[21];\n    s16 foodId;\n} ET_Food;\ntypedef struct {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 attackMode;\n               u8 flag;\n               u8 nearDeath;\n               s32 speed;\n               s16 angle;\n               char pad_8E[0xE];\n               u8 pickupFlag;\n               u8 grabedAscending;\n} ET_GaibonSlogra;\ntypedef struct {\n               u16 angle;\n               u16 unk7E;\n               u16 unk80;\n               s16 unk82;\n} ET_SoulStealOrb;\ntypedef struct {\n               Primitive* primBg;\n               s32 unused80;\n               Primitive* primFade;\n               s32 unk88;\n} ET_WarpRoom;\ntypedef struct {\n               char pad_0[0x8];\n               u8 timer;\n               char pad_85[0x1];\n               s8 timer2;\n               char pad_87[0x5];\n               u16 palette;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_0[0x6];\n               s8 timer;\n               char pad_87[0x5];\n               s16 rotation;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman_2;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               s16 unk8C;\n               s16 unk8E;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s32 unkA0;\n               struct Entity* target;\n               s16 unkA8;\n               s16 unkAA;\n               s16 cameraX;\n               s16 cameraY;\n               s16 unkB0;\n               s16 unkB2;\n               struct Entity* follow;\n} ET_Bat;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    struct Primitive* unk84;\n    s16 unk88;\n    s16 unk8A;\n} ET_BatEcho;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n               char pad_8A[0x3];\n               u8 unk8D;\n               char pad_8E[0xE];\n               s16 unk9C;\n               struct Entity* next;\n} ET_801CF254;\ntypedef struct {\n               char pad_0[0x4];\n               s16 unk80;\n               char pad_82[0xA];\n               u8 unk8C;\n               char pad_8D[0xF];\n               u16 unk9C;\n               char pad_9E[0x8];\n               s16 unkA6;\n} ET_GurkhaSword;\ntypedef struct ET_Dracula {\n               char pad_7C[4];\n               struct draculaPrimitive* unk80;\n               struct draculaPrimitive* unk84;\n               char pad_88[4];\n               s16 unk8C;\n               char pad_8E[0x2];\n               u8 unk90;\n               char pad91;\n               u8 unk92;\n               char pad93;\n               u8 unk94;\n               char pad_95[0x3];\n               s16 unk98;\n               char pad_9A[0x2];\n               s16 unk9C;\n               char pad_9E[0x2];\n               u8 unkA0;\n               u8 unkA1;\n               u8 unkA2;\n               char pad_A3[0x9];\n               struct Primitive* prim;\n} ET_Dracula;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               s32 unk84;\n               s16 unk88;\n               char pad_8A[0x2];\n               s16 unk8C;\n               s16 unk8E;\n} ET_StageTitleCard;\ntypedef struct ET_Succubus {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 facingLeft;\n               u8 unk85;\n               u8 nextAttack;\n               u8 unk87;\n               u16 nextStep;\n               char pad_8A[0x4];\n               s16 yOffset;\n               char pad_90[0xC];\n               struct Entity* real;\n               s16 clonePosX;\n               s16 unkA2;\n} ET_Succubus;\ntypedef struct {\n               u16 timer;\n               char pad_7E[2];\n               s32 unk80;\n} ET_RoomTransition2;\ntypedef struct {\n               u8 pad0[0x4];\n               s32 unk80;\n               s16 unk84;\n               u8 pad86[2];\n               u8 unk88;\n               u8 unk89;\n} ET_801B3C38;\ntypedef struct {\n               u16 unk7C;\n} ET_801BCC4C;\ntypedef struct ET_CastleDoor {\n               struct Primitive* prim;\n               s16 timer;\n               char pad_82[0x2];\n               s16 rotZ;\n} ET_CastleDoor;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               s16 unk82;\n               s16 timer;\n} ET_ShuttingWindow;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               u16 unk84;\n} ET_DeathSkySwirl;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s32 elevatorTarget;\n} ET_Elevator;\ntypedef struct {\n               s32 pad[8];\n               s16 unk84;\n               s16 unk86;\n               s16* unk88;\n} ET_801D0B40;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0xC];\n               u8 unk8C;\n               u8 unk8D;\n               char pad_8E[0xE];\n               u16 unk9C;\n} ET_801D1BB8;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n} ET_801D0B78;\ntypedef struct {\n               s32 unk7C;\n               s16 unk80;\n               s16 unk82;\n    union {\n                   s32 val;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk84;\n               u16 unk88;\n} ET_WaterEffects;\ntypedef struct {\n               char pad_0[4];\n               s16 unk80;\n               char pad_82[2];\n               u8 unk84;\n               char pad_85[3];\n               u16 unk88;\n               char pad_8A[2];\n               u8 unk8C;\n               u8 unk8D;\n               u8 unk8E;\n               char pad_8E[13];\n               s16 rotZ;\n               s16 unk9E;\n               struct Entity* parent;\n               s16 unkA4;\n               s16 unkA6;\n               u8 unkA8;\n               char pad_A9[0x7];\n               u16 unkB0[0x6];\n} ET_GurkhaHammer;\ntypedef struct {\n               char pad_0[0x20];\n               s16 unk9C;\n               char pad_A0[0x6];\n               s16 unkA4;\n               s16 unkA6;\n               char pad_A8[0xC];\n               u16 unkB4;\n} ET_801CDFD8;\ntypedef struct {\n               char pad_0[0x8];\n               u8 unk84;\n               char pad_85[0x9];\n               u8 unk8E;\n               char pad_8F[0x20];\n               s16 unkB0;\n} ET_801CE4CC;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n} ET_TransparentWater;\ntypedef struct {\n               struct Primitive* prim;\n               s32 timer;\n} ET_HeartRoomGoldDoor;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s8 unk84;\n               char pad_85[0x1];\n               s8 unk86;\n} ET_MermanWaterSplash;\ntypedef struct {\n               s32 playerVelocity;\n} ET_CastleDoorTransition;\ntypedef struct {\n               s8 unk7C;\n} ET_AlucardController;\ntypedef struct {\n               u16 unk7C;\n} ET_ForegroundTree;\ntypedef struct {\n               u16 unk7C;\n               u16 unk7E;\n               s16 unk80;\n} ET_FadeToWhite;\ntypedef struct {\n               u16 unk7C;\n} ET_DeathStolenItems;\ntypedef struct {\n               u16 unk7C;\n               char pad_7E[0x2];\n               s16 posX;\n               s16 posY;\n               u16 moveTimer;\n               u16 moveDirection;\n} ET_Death;\ntypedef struct {\n               u8 unk7C;\n               char pad_7D[0x3];\n               s16 unk80;\n               s16 unk82;\n               struct Entity* unk84;\n} ET_SpittleBone;\ntypedef struct {\n    Primitive* prim;\n    char pad[0x24];\n    s16 unkA4;\n    s16 unkA6;\n    char padd[4];\n    u8 anim;\n    char pad2[0x8];\n    struct Entity* unkB8;\n} ET_Player;\ntypedef struct {\n    u8 unk0;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n} ET_EntitySlot1;\ntypedef struct {\n    char pad[0x32];\n    s16 unkAE;\n} ET_EntitySlot16;\ntypedef struct {\n               s16 unk7C;\n} ET_Entity12;\ntypedef struct {\n    u8 fiveFrameCounter;\n    struct Entity* parent;\n    char pad[8];\n    u16 parentId;\n} ET_Entity13;\ntypedef struct {\n    s16 t;\n} ET_TimerOnly;\ntypedef struct {\n    char pad[8];\n    struct Primitive* prim;\n} ET_AxeKnight;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 childId;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               s16 unkAC;\n               s16 unkAE;\n               s16 unkB0;\n               s16 unkB2;\n} ET_EntFactory;\ntypedef struct {\n    char pad[8];\n    s32 unk8;\n} unk_sub_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    byte pad[14];\n    unk_sub_8011E4BC* unk8C;\n} ET_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_HellfireHandler;\ntypedef struct {\n    s16 stoneAngle;\n    s16 lifeTimer;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_ReboundStone;\ntypedef struct {\n    s16 timer;\n} ET_Vibhuti;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 pad[24];\n               s16 unkB0;\n} ET_GiantSpinningCross;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_8017091C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 pad[0x16];\n    s16 unkB0;\n} ET_80170F64;\ntypedef struct {\n    s16 timer;\n    s16 size;\n} ET_stopwatchCircle;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    f32 unk84;\n    s32 unk88;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 unk96;\n    struct Entity* unk98;\n    s32 pad[5];\n    s16 unkB0;\n} ET_801719A4;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 unk96;\n    struct Entity* unk98;\n    s32 pad[5];\n    s16 unkB0;\n} ET_BibleSubwpn;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s32 unk84;\n    s32 unk88;\n    struct Entity* parent1;\n    s32 pad[10];\n    struct Entity* parent2;\n} ET_80128C2C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_80161FF0;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n} ET_80162870;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n} ET_8016E9E4;\ntypedef struct {\n    u8 unk7C;\n    u8 unk7D[3];\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_801CC820;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    struct Primitive* unk88;\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n} ET_stopwatchSparkle;\ntypedef struct {\n    s16 t;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    f32 unk84;\n    f32 unk88;\n    s16 unk8C;\n    s16 unk8E;\n} ET_stopwatch;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n} ET_RichterPowerUpRing;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n} ET_TransparentWhiteCircle;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n} ET_HitByIce;\ntypedef struct {\n    s16 unk7C;\n    s16 pad7E;\n    s16 unk80;\n    s16 unk82;\n    byte pad84[12];\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 pad96[3];\n    s16 unk9C;\n} ET_HitByLightning;\ntypedef struct {\n    s32 unk7C;\n    s32 unk80;\n    s32 unk84;\n    s32 unk88;\n    s32 unk8C;\n    s32 unk90;\n} ET_Teleport;\ntypedef struct {\n    s16 timer;\n    s16 angle;\n    s16 unk80;\n    s16 unk82;\n} ET_HolyWater;\ntypedef struct {\n    s16 timer;\n    s16 angle;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_HolyWaterFlame;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u8 unk80;\n    byte pad81;\n    u8 unk82;\n    byte pad83;\n    s32 unk84;\n} ET_CrashCross;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u8 unk80;\n    byte pad81;\n    u8 unk82;\n    byte pad83;\n    s32 unk84;\n} ET_RicRevivalColumn;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    u16 unk80;\n    u16 pad82;\n    Point16* unk84;\n} ET_CrossBoomerang;\ntypedef struct {\n    f32 unk7C;\n    f32 unk80;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n    s16 unk8C;\n    s16 unk8E;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 unk9C;\n    s32 unkA0;\n    s16 unkA4;\n    s16 unkA6;\n    s32 unkA8;\n    s32 unkAC;\n    s16 unkB0;\n    s32 unkB4;\n    s32 unkB8;\n} ET_80166784;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s8 unk8A;\n    u8 unk8B[12];\n    s32 unk98;\n} ET_AguneaCrash;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s8 unk8A;\n    u8 unk8B[12];\n    s32 unk98;\n    s32 unk9C;\n    u16 unkA0;\n} ET_AxeCrash;\ntypedef struct {\n    s32 pad7c;\n    Primitive* unk80;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    struct Entity* parent;\n    s16 unk90;\n} ET_801291C4;\ntypedef struct {\n    s16 timer;\n    u16 unk7E;\n    s16 unk80;\n    s16 pad82;\n    s32 unk84;\n    s32 unk88;\n    u16 unk8C;\n} ET_VibhutiCrash;\ntypedef struct {\n    PrimLineG2* lines[4];\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n} ET_8016D9C4;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_8016DF74;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    byte pad[46];\n    s16 unkB0;\n} ET_8016E46C;\ntypedef struct {\n    struct Primitive* prim1;\n    struct Primitive* prim2;\n    struct Primitive* prim3;\n    struct Primitive* prim4;\n    s16 unk8C;\n    s16 unk8E;\n} ET_801AF774;\ntypedef struct {\n    s32 unk7C;\n    s16 timer;\n    s16 unk82;\n    s16 unk84;\n} ET_DracFinal;\ntypedef struct {\n    byte pad[0x18];\n    s32 unk94;\n} ET_Drop;\ntypedef struct {\n               byte pad[4];\n               s16 angle;\n               byte pad2[2];\n               u8 switch_control;\n               u8 speed;\n} ET_BigRedFireball;\ntypedef struct {\n    s16 timer;\n    s16 spawnTimer;\n} ET_SummonSpirit;\ntypedef struct {\n    struct Primitive* prim;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_3DBackgroundhouse;\ntypedef struct {\n    struct Primitive* prim1;\n    struct Primitive* prim2;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n} ET_LifeUpSpawn;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    u16 unk88;\n    u16 unk8A;\n} ET_801B0AA4;\ntypedef struct {\n    byte pad[4];\n    u16 unk80;\n    u16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n    u8 unk8C;\n} ET_Owl;\ntypedef struct {\n    u16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    u16 unk88;\n    s16 unk8A;\n    s16 unk8C;\n    s16 unk8E;\n} ET_AlucardWaterEffect;\ntypedef struct {\n    s32 pad;\n    s16 timer;\n} ET_801B28E4;\ntypedef struct {\n    u32 unk24[10];\n    u8 unk28;\n    u8 unk29;\n} ET_80123B40;\ntypedef struct {\n    struct Entity* ent;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_80129864;\ntypedef struct {\n    s16 timer;\n    s16 pad;\n    s16 xCurrent;\n    s16 yCurrent;\n    s16 xTarget;\n    s16 yTarget;\n} ET_Mist;\ntypedef struct {\n    s32 unk7C;\n    s16 unk80;\n    s16 unk82;\n    s32 un84;\n    s16 unk88;\n    s16 unk8A;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s32 unk94;\n    s16 unk98;\n    s16 unk9A;\n    s16 unk9C;\n} ET_PlayerBlink;\ntypedef struct {\n    struct Primitive* prim;\n    s16 unk80;\n    s16 pad82;\n    s32 pad84;\n    s32 pad88;\n    struct Primitive* prim2;\n    struct Primitive* prim3;\n} ET_BloodSplatter;\ntypedef struct {\n    s32 pad7c;\n    s16 timer;\n    s16 pad82;\n    s32 pad84;\n    s32 pad88;\n    s32 pad8C;\n    s16 brightness;\n} ET_PlayerOutline;\ntypedef struct {\n    u8 digits[4];\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    u16 unk86;\n    u16 unk88;\n    u16 unk8A;\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n    s16 unk92;\n    s16 angleToMeter;\n    s16 distToMeter;\n    s16 unk98;\n} ET_HPNumberMove;\ntypedef struct {\n    s16 timer;\n    s16 pad1;\n    s16 halfWidth;\n    s16 halfHeight;\n    s32 pad2;\n    s16 angle;\n    s16 pad3;\n    s32 pad4;\n    s32 str_x;\n    s32 str_y;\n    s32 unk98;\n} ET_GuardText;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_Dissolve;\ntypedef union {\n    struct Primitive* prim;\n    char stub[0x40];\n    ET_TimerOnly timer;\n    ET_EntFactory factory;\n    ET_Generic generic;\n    ET_EntitySlot1 entSlot1;\n    ET_EntitySlot16 entSlot16;\n    ET_Entity12 ent12;\n    ET_Entity13 ent13;\n    ET_8011E4BC et_8011E4BC;\n    ET_HellfireHandler hellfireHandler;\n    ET_ReboundStone reboundStone;\n    ET_8016D9C4 et_8016D9C4;\n    ET_8016E46C et_8016E46C;\n    ET_8016DF74 et_8016DF74;\n    ET_CrossBoomerang crossBoomerang;\n    ET_Vibhuti vibhuti;\n    ET_HolyWater holywater;\n    ET_HolyWaterFlame holywaterflame;\n    ET_CrashCross crashcross;\n    ET_AguneaCrash aguneaCrash;\n    ET_AxeCrash axeCrash;\n    ET_VibhutiCrash vibhutiCrash;\n    ET_RicRevivalColumn ricColumn;\n    ET_GiantSpinningCross giantcross;\n    ET_EquipItemDrop equipItemDrop;\n    ET_HeartDrop heartDrop;\n    ET_BloodDroplets bloodDroplets;\n    ET_BloodSplatter bloodSplatter;\n    ET_NumericDamage ndmg;\n    ET_RelicOrb relicOrb;\n    ET_Door door;\n    ET_StagePopup stpopup;\n    ET_StagePopupJP stpopupj;\n    ET_MessageBox messageBox;\n    ET_Weapon weapon;\n    ET_Shield shield;\n    ET_DarkShield darkShield;\n    ET_KarmaCoin karmacoin;\n    ET_HeavenSword heavenSword;\n    ET_HeavenSword2 heavenSword2;\n    ET_MedusaShieldLaser medshieldlaser;\n    ET_ShamanShieldStar shamanshieldstar;\n    ET_HeraldShieldSwirlEffect heraldSwirl;\n    ET_Food food;\n    ET_HitByIce hitbyice;\n    ET_HitByLightning hitbylightning;\n    ET_PlayerBlink playerBlink;\n    ET_Mist mist;\n    ET_Bat bat;\n    ET_BatEcho batEcho;\n    ET_SoulStealOrb soulStealOrb;\n    ET_GaibonSlogra GS_Props;\n    ET_WarpRoom warpRoom;\n    ET_Teleport teleport;\n    ET_Merman merman;\n    ET_Merman_2 merman2;\n    ET_MermanWaterSplash mermanWaterSplash;\n    ET_80128C2C et_80128C2C;\n    ET_801291C4 et_801291C4;\n    ET_8017091C et_8017091C;\n    ET_80170F64 et_80170F64;\n    ET_stopwatchCircle et_stopwatchCircle;\n    ET_stopwatchSparkle et_stopWatchSparkle;\n    ET_stopwatch stopwatch;\n    ET_80161FF0 et_80161FF0;\n    ET_80162870 et_80162870;\n    ET_80166784 et_80166784;\n    ET_RichterPowerUpRing ricPowerRing;\n    ET_TransparentWhiteCircle whiteCircle;\n    ET_8016E9E4 et_8016E9E4;\n    ET_801719A4 et_801719A4;\n    ET_BibleSubwpn et_BibleSubwpn;\n    ET_801CF254 et_801CF254;\n    ET_GurkhaSword gurkhaSword;\n    ET_Dracula dracula;\n    ET_DracFinal dracFinalForm;\n    ET_Succubus succubus;\n    ET_StageTitleCard stageTitleCard;\n    ET_RoomTransition2 roomTransition2;\n    ET_801B3C38 et38;\n    ET_801BCC4C et_801BCC4C;\n    ET_ShuttingWindow shuttingWindow;\n    ET_CastleDoor castleDoor;\n    ET_DeathSkySwirl deathSkySwirl;\n    ET_Elevator elevator;\n    ET_801D0B40 et_801D0B40;\n    ET_801D1BB8 et_801D1BB8;\n    ET_801D0B78 et_801D0B78;\n    ET_WaterEffects waterEffects;\n    ET_GurkhaHammer GH_Props;\n    ET_801CE4CC et_801CE4CC;\n    ET_801CDFD8 et_801CDFD8;\n    ET_TransparentWater transparentWater;\n    ET_HeartRoomGoldDoor heartRoomGoldDoor;\n    ET_CastleDoorTransition castleDoorTransition;\n    ET_AlucardController alucardController;\n    ET_ForegroundTree foregroundTree;\n    ET_FadeToWhite fadeToWhite;\n    ET_DeathStolenItems deathStolenItems;\n    ET_Death death;\n    ET_SpittleBone spittleBone;\n    ET_Player player;\n    ET_801CC820 et_801CC820;\n    ET_801AF774 et_801AF774;\n    ET_Drop drop;\n    ET_BigRedFireball bigredfireball;\n    ET_SummonSpirit summonspirit;\n    ET_3DBackgroundhouse bghouse;\n    ET_LifeUpSpawn lifeUpSpawn;\n    ET_AxeKnight axeknight;\n    ET_801B0AA4 et_801B0AA4;\n    ET_Owl owl;\n    ET_AlucardWaterEffect aluwater;\n    ET_80123B40 et_80123B40;\n    ET_80129864 et_80129864;\n    ET_801B28E4 et_801B28E4;\n    ET_PlayerOutline playerOutline;\n    ET_HPNumberMove hpNumMove;\n    ET_GuardText guardText;\n    ET_Dissolve dissolve;\n} Ext;\ntypedef enum {\n    Game_Init,\n    Game_Title,\n    Game_Play,\n    Game_GameOver,\n    Game_NowLoading,\n    Game_VideoPlayback,\n    Game_Unk6,\n    Game_PrologueEnd,\n    Game_MainMenu,\n    Game_Ending,\n    Game_Boot,\n    Game_99 = 99,\n} GameState;\ntypedef enum {\n    STAGE_NO0 = 0x00,\n    STAGE_NO1 = 0x01,\n    STAGE_LIB = 0x02,\n    STAGE_CAT = 0x03,\n    STAGE_NO2 = 0x04,\n    STAGE_CHI = 0x05,\n    STAGE_DAI = 0x06,\n    STAGE_NP3 = 0x07,\n    STAGE_CEN = 0x08,\n    STAGE_NO4 = 0x09,\n    STAGE_ARE = 0x0A,\n    STAGE_TOP = 0x0B,\n    STAGE_NZ0 = 0x0C,\n    STAGE_NZ1 = 0x0D,\n    STAGE_WRP = 0x0E,\n    STAGE_NO1_ALT = 0x0F,\n    STAGE_NO0_ALT = 0x10,\n    STAGE_DRE = 0x12,\n    STAGE_NZ0_DEMO = 0x13,\n    STAGE_NZ1_DEMO = 0x14,\n    STAGE_LIB_DEMO = 0x15,\n    STAGE_BO7 = 0x16,\n    STAGE_MAR = 0x17,\n    STAGE_BO6 = 0x18,\n    STAGE_BO5 = 0x19,\n    STAGE_BO4 = 0x1A,\n    STAGE_BO3 = 0x1B,\n    STAGE_BO2 = 0x1C,\n    STAGE_BO1 = 0x1D,\n    STAGE_BO0 = 0x1E,\n    STAGE_ST0 = 0x1F,\n    STAGE_RNO0 = STAGE_NO0 | 0x20,\n    STAGE_RNO1 = STAGE_NO1 | 0x20,\n    STAGE_RLIB = STAGE_LIB | 0x20,\n    STAGE_RCAT = STAGE_CAT | 0x20,\n    STAGE_RNO2 = STAGE_NO2 | 0x20,\n    STAGE_RCHI = STAGE_CHI | 0x20,\n    STAGE_RDAI = STAGE_DAI | 0x20,\n    STAGE_RNO3 = STAGE_NP3 | 0x20,\n    STAGE_RCEN = STAGE_CEN | 0x20,\n    STAGE_RNO4 = STAGE_NO4 | 0x20,\n    STAGE_RARE = STAGE_ARE | 0x20,\n    STAGE_RTOP = STAGE_TOP | 0x20,\n    STAGE_RNZ0 = STAGE_NZ0 | 0x20,\n    STAGE_RNZ1 = STAGE_NZ1 | 0x20,\n    STAGE_RWRP = STAGE_WRP | 0x20,\n    STAGE_RNZ1_DEMO = 0x35,\n    STAGE_RBO8 = 0x36,\n    STAGE_RBO7 = 0x37,\n    STAGE_RBO6 = 0x38,\n    STAGE_RBO5 = 0x39,\n    STAGE_RBO4 = 0x3A,\n    STAGE_RBO3 = 0x3B,\n    STAGE_RBO2 = 0x3C,\n    STAGE_RBO1 = 0x3D,\n    STAGE_RBO0 = 0x3E,\n    STAGE_MAD = 0x40,\n    STAGE_NO3 = 0x41,\n    STAGE_IWA_LOAD = 0x42,\n    STAGE_IGA_LOAD = 0x43,\n    STAGE_HAGI_LOAD = 0x44,\n    STAGE_SEL = 0x45,\n    STAGE_TE1 = 0x46,\n    STAGE_TE2 = 0x47,\n    STAGE_TE3 = 0x48,\n    STAGE_TE4 = 0x49,\n    STAGE_TE5 = 0x4A,\n    STAGE_TOP_ALT = 0x4B,\n    STAGE_EU_WARNING = 0x70,\n    STAGE_ENDING = 0xFE,\n    STAGE_MEMORYCARD = 0xFF,\n} Stages;\ntypedef enum {\n    Play_Reset = 0,\n    Play_Init,\n    Play_PrepareDemo,\n    Play_Default,\n    Play_PrepareNextStage,\n    Play_LoadStageChr,\n    Play_WaitStageChr,\n    Play_LoadStageSfx,\n    Play_WaitStageSfx,\n    Play_LoadStagePrg,\n    Play_WaitStagePrg,\n    Play_16 = 16,\n    Gameover_Init = 0,\n    Gameover_AllocResources,\n    Gameover_2,\n    Gameover_3,\n    Gameover_4,\n    Gameover_5,\n    Gameover_6,\n    Gameover_7,\n    Gameover_8,\n    Gameover_9,\n    Gameover_10,\n    Gameover_11,\n    Gameover_Alt = 99,\n    Gameover_Init_Alt,\n    Gameover_AllocResources_Alt,\n    Gameover_2_Alt,\n    Gameover_3_Alt,\n    Gameover_11_Alt = 111,\n    NowLoading_2 = 2,\n} GameSteps;\ntypedef enum {\n    Demo_None,\n    Demo_PlaybackInit,\n    Demo_Recording,\n    Demo_End,\n    Demo_Playback,\n} DemoMode;\ntypedef enum {\n    TIMEATTACK_INVALID = -1,\n    TIMEATTACK_GET_RECORD,\n    TIMEATTACK_SET_RECORD,\n    TIMEATTACK_SET_VISITED,\n} TimeAttackActions;\ntypedef enum {\n    TIMEATTACK_EVENT_DRACULA_DEFEAT,\n    TIMEATTACK_EVENT_ORLOX_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_10_DEFEAT,\n    TIMEATTACK_EVENT_GRANFALOON_DEFEAT,\n    TIMEATTACK_EVENT_MINOTAUR_WEREWOLF_DEFEAT,\n    TIMEATTACK_EVENT_SCYLLA_DEFEAT,\n    TIMEATTACK_EVENT_SLOGRA_GAIBON_DEFEAT,\n    TIMEATTACK_EVENT_HYPPOGRYPH_DEFEAT,\n    TIMEATTACK_EVENT_BEELZEBUB_DEFEAT,\n    TIMEATTACK_EVENT_SUCCUBUS_DEFEAT,\n    TIMEATTACK_EVENT_KARASUMAN_DEFEAT,\n    TIMEATTACK_EVENT_RALPH_GRANT_SYPHA_DEFEAT,\n    TIMEATTACK_EVENT_DEATH_DEFEAT,\n    TIMEATTACK_EVENT_CERBERUS_DEFEAT,\n    TIMEATTACK_EVENT_SAVE_RICHTER,\n    TIMEATTACK_EVENT_MEDUSA_DEFEAT,\n    TIMEATTACK_EVENT_THE_CREATURE_DEFEAT,\n    TIMEATTACK_EVENT_LESSER_DEMON_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_40_DEFEAT,\n    TIMEATTACK_EVENT_AKMODAN_II_DEFEAT,\n    TIMEATTACK_EVENT_DARKWING_BAT_DEFEAT,\n    TIMEATTACK_EVENT_GALAMOTH_DEFEAT,\n    TIMEATTACK_EVENT_FINAL_SAVEPOINT,\n    TIMEATTACK_EVENT_MEET_DEATH,\n    TIMEATTACK_EVENT_GET_HOLYGLASSES,\n    TIMEATTACK_EVENT_MEET_MASTER_LIBRARIAN,\n    TIMEATTACK_EVENT_FIRST_MARIA_MEET,\n    NUM_TIMEATTACK_EVENTS,\n    TIMEATTACK_EVENT_UNUSED_28,\n    TIMEATTACK_EVENT_UNUSED_29,\n    TIMEATTACK_EVENT_UNUSED_30,\n    TIMEATTACK_EVENT_UNUSED_31,\n    TIMEATTACK_EVENT_END,\n    TIMEATTACK_EVENT_INVALID = 0xFF,\n} TimeAttackEvents;\nstruct Entity;\ntypedef struct {\n              s32 x;\n              s32 y;\n} Point32;\ntypedef struct {\n               u8 vabid;\n               u8 prog;\n               u8 note;\n               s8 volume;\n               u8 unk4;\n               u8 tone;\n               u8 unk6;\n} Unkstruct_800BF554;\ntypedef struct {\n               u_long* desc;\n               u_long* data;\n               u16 unk8;\n               u16 index;\n               u16 unkC;\n               u16 unkE;\n               u8 unkArray[0x30];\n} Unkstruct_8006C3C4;\ntypedef struct {\n               char pad0[0x14];\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Unkstruct_8010BF64;\ntypedef struct {\n               s16 sndId;\n               u16 unk02;\n               s16 unk04;\n} SfxRingBufferItem;\ntypedef struct {\n               s32 unk0;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n} Unkstruct_800EA5E4;\ntypedef struct {\n    s32 unk0;\n    s32 unk4;\n    s32 unk8;\n    s32 unkC;\n} Unkstruct_800FDB18;\ntypedef struct Unkstruct_801C6C6C {\n    union {\n        struct {\n            u16 w;\n            u16 x;\n        } c;\n        s32 p;\n    } x;\n    union {\n        struct {\n            u16 h;\n            u16 y;\n        } c;\n        s32 p;\n    } y;\n} Unkstruct_801C6C6C;\ntypedef struct {\n    u16 start;\n    s16 current;\n    s16* coords;\n    s16 unk8;\n} Unkstruct_80102CD8;\ntypedef struct {\n              s16 animSet;\n              s16 unk2;\n              u16 palette;\n              s8 drawMode;\n              char pad_7;\n              s32 unk8;\n} Unkstruct_80180FE0;\ntypedef struct Unkstruct_801C7954 {\n               u16 x1;\n               u16 x0;\n               u16 y2;\n               u16 y0;\n               u16 y3;\n               u16 y1;\n               u16 x3;\n               u16 x2;\n} Unkstruct_801C7954;\ntypedef struct {\n    u8 unk0[7];\n    u8 unk8;\n    u8 pad2[8];\n    u8 unk16[1];\n    u8 pad3[5];\n    u32 unk18;\n} Unkstruct_800ADEF0;\ntypedef struct {\n    u16 palette;\n    u8 unk2;\n} Unkstruct_800AE180;\ntypedef struct {\n                     s32 D_800973F8;\n                     s32 D_800973FC;\n                     s32 unk0;\n                     s32 unk4;\n                     Multi g_zEntityCenter;\n                     s32 unkC;\n                     s32 BottomCornerTextTimer;\n                     s32 BottomCornerTextPrims;\n                     s32 unk18;\n                     s32 unk1C;\n                     s32 unk20;\n                     s32 unk24;\n                     s32 D_80097428[8];\n} unkGraphicsStruct;\ntypedef struct {\n    u8 count;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 w;\n    u8 h;\n    u16 priority;\n    u16 drawMode;\n    s16 unkA;\n    u32 flags;\n} unkStr_8011E4BC;\ntypedef struct {\n    s32 : 32;\n    s16 unk4;\n    s16 unk6;\n    s16 unk8;\n    s16 unkA;\n    s16 unkC;\n    s32 unk10;\n    s32 unk14;\n    s32 unk18;\n} Unkstruct_8012BEF8;\ntypedef struct {\n    u8 childId;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n    u8 unk4;\n    u8 unk5;\n} FactoryBlueprint;\ntypedef struct {\n    s16 xOffset;\n    s16 yOffset;\n    s32 velocityX;\n    s32 velocityY;\n    s16 timerInit;\n    s16 tpage;\n    s16 clut;\n    u8 uBase;\n    u8 vBase;\n} unkStr80154E5C;\ntypedef struct {\n    s32 unk0;\n    s16 unk4;\n} unkstr_800cfe48;\ntypedef struct {\n    f32 x;\n    f32 y;\n} Pos;\ntypedef struct {\n    f32 posX;\n    f32 posY;\n} Camera;\ntypedef struct {\n    unsigned char width;\n    unsigned char height;\n    unsigned short unk2;\n    unsigned char data[0];\n} ImgSrc;\ntypedef struct {\n             u32 gfxOff;\n             u32 ovlOff;\n             u32 ovlLen;\n             u32 vhOff;\n             u32 vhLen;\n             u32 vbLen;\n             u32 unk18;\n             const char* gfxName;\n             const char* ovlName;\n             const char* name;\n             u8 unk28;\n             s8 seqIdx;\n             u16 unk2A;\n} Lba;\ntypedef struct {\n               s16 cursorX;\n               s16 cursorY;\n               s16 cursorW;\n               s16 cursorH;\n               RECT unk1;\n               s16 w;\n               s16 h;\n               s16 unk14;\n               s16 unk16;\n               s16 otIdx;\n               s16 unk1A;\n               u8 unk1C;\n               u8 unk1D;\n} MenuContext;\ntypedef struct {\n              u8 tileLayoutId;\n              u8 tilesetId;\n              u8 objGfxId;\n              u8 objLayoutId;\n} RoomLoadDef;\ntypedef struct {\n    RoomLoadDef* def;\n} RoomLoadDefHolder;\ntypedef struct {\n              u8 left;\n              u8 top;\n              u8 right;\n              u8 bottom;\n              RoomLoadDef load;\n} RoomHeader;\ntypedef struct {\n              u16 x;\n              u16 y;\n              u16 roomId;\n              u16 unk6;\n              u16 stageId;\n} RoomTeleport;\ntypedef struct {\n               s32 x;\n               s32 y;\n               Stages stageId;\n               TimeAttackEvents eventId;\n               s32 unk10;\n} RoomBossTeleport;\ntypedef struct {\n              u16 pressed;\n              s16 previous;\n              u16 tapped;\n              u16 repeat;\n} Pad;\ntypedef struct {\n    u16 duration;\n    u16 unk2;\n} AnimationFrame;\ntypedef struct {\n    s8 unk0;\n    s8 unk2;\n    s8 hitboxWidth;\n    s8 hitboxHeight;\n} FrameProperty;\ntypedef enum {\n    Player_Stand,\n    Player_Walk,\n    Player_Crouch,\n    Player_Fall,\n    Player_Jump,\n    Player_MorphBat,\n    Player_AlucardStuck,\n    Player_MorphMist,\n    Player_HighJump,\n    Player_UnmorphBat,\n    Player_Hit,\n    Player_StatusStone,\n    Player_BossGrab,\n    Player_KillWater,\n    Player_UnmorphMist,\n    Player_SwordWarp,\n    Player_Kill,\n    Player_Unk17,\n    Player_Teleport,\n    Player_FlameWhip,\n    Player_Hydrostorm,\n    Player_ThousandBlades,\n    Player_RichterFourHolyBeasts,\n    Player_Slide,\n    Player_MorphWolf,\n    Player_UnmorphWolf,\n    Player_SlideKick,\n    Player_Unk27,\n    Player_SpellDarkMetamorphosis = 32,\n    Player_SpellSummonSpirit,\n    Player_SpellHellfire,\n    Player_SpellTetraSpirit,\n    Player_Spell36,\n    Player_SpellSoulSteal,\n    Player_Unk38,\n    Player_SpellSwordBrothers,\n    Player_AxearmorStand,\n    Player_AxearmorWalk,\n    Player_AxearmorJump,\n    Player_AxearmorHit,\n    Player_Unk48 = 48,\n    Player_Unk49,\n    Player_Unk50\n} PlayerSteps;\ntypedef struct Entity {\n               f32 posX;\n               f32 posY;\n               s32 velocityX;\n               s32 velocityY;\n               s16 hitboxOffX;\n               s16 hitboxOffY;\n               u16 facingLeft;\n               u16 palette;\n               u8 drawMode;\n               u8 drawFlags;\n               s16 rotX;\n               s16 rotY;\n               s16 rotZ;\n               s16 rotPivotX;\n               s16 rotPivotY;\n               u16 zPriority;\n               u16 entityId;\n               PfnEntityUpdate pfnUpdate;\n               u16 step;\n               u16 step_s;\n               u16 params;\n               u16 entityRoomIndex;\n               s32 flags;\n               s16 unk38;\n               u16 enemyId;\n               u16 hitboxState;\n               s16 hitPoints;\n               s16 attack;\n               s16 attackElement;\n               u16 unk44;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               u8 hitFlags;\n               u8 nFramesInvincibility;\n               s16 unk4A;\n               AnimationFrame* unk4C;\n               u16 animFrameIdx;\n               s16 animFrameDuration;\n               s16 animSet;\n               s16 animCurFrame;\n               s16 stunFrames;\n               u16 unk5A;\n               struct Entity* unk5C;\n               struct Entity* unk60;\n               s32 primIndex;\n               u16 unk68;\n               u16 hitEffect;\n               u8 unk6C;\n               u8 unk6D[11];\n               s32 unk78;\n               Ext ext;\n} Entity;\ntypedef struct {\n               u16 animSet;\n               u16 zPriority;\n               Multi16 unk4;\n               u16 palette;\n               u16 drawFlags;\n               u16 drawMode;\n               u32 unkC;\n               u8* unk10;\n} ObjInit2;\ntypedef struct GpuBuffer {\n                  struct GpuBuffer* next;\n                  DRAWENV draw;\n                  DISPENV disp;\n                  DR_ENV env[0x10];\n                  u_long ot[0x200];\n                  DR_MODE drawModes[0x400];\n                  POLY_GT4 polyGT4[0x300];\n                  POLY_G4 polyG4[0x100];\n                  POLY_GT3 polyGT3[0x30];\n                  LINE_G2 lineG2[0x100];\n                  SPRT_16 sprite16[0x280];\n                  TILE tiles[0x100];\n                  SPRT sprite[0x200];\n} GpuBuffer;\ntypedef struct {\n               u32 drawModes;\n               u32 gt4;\n               u32 g4;\n               u32 gt3;\n               u32 line;\n               u32 sp16;\n               u32 tile;\n               u32 sp;\n               u32 env;\n} GpuUsage;\ntypedef enum {\n    GFX_BANK_NONE,\n    GFX_BANK_4BPP,\n    GFX_BANK_8BPP,\n    GFX_BANK_16BPP,\n    GFX_BANK_COMPRESSED,\n} GfxBankKind;\ntypedef struct {\n               u_long* xy;\n               u_long* wh;\n               u_long* data;\n} GfxEntry;\ntypedef struct {\n    GfxBankKind kind;\n    GfxEntry entries[0];\n} GfxBank;\ntypedef struct {\n              GfxEntry* next;\n              u16 kind;\n              s16 unk6;\n              s16 unk8;\n              s16 unkA;\n} GfxLoad;\ntypedef enum EquipKind {\n    EQUIP_HAND,\n    EQUIP_HEAD,\n    EQUIP_ARMOR,\n    EQUIP_CAPE,\n    EQUIP_ACCESSORY,\n    NUM_EQUIP_KINDS,\n} EquipKind;\ntypedef enum {\n    ITEM_S_SWORD,\n    ITEM_SWORD,\n    ITEM_THROW_1,\n    ITEM_FIST,\n    ITEM_CLUB,\n    ITEM_TWOHAND,\n    ITEM_FOOD,\n    ITEM_BOMB,\n    ITEM_THROW_2,\n    ITEM_SHIELD,\n    ITEM_MEDICINE,\n    ITEM_END,\n} ItemCategory;\ntypedef enum {\n    SUBWPN_NONE,\n    SUBWPN_DAGGER,\n    SUBWPN_AXE,\n    SUBWPN_HOLYWATER,\n    SUBWPN_CROSS,\n    SUBWPN_BIBLE,\n    SUBWPN_STOPWATCH,\n    SUBWPN_REBNDSTONE,\n    SUBWPN_VIBHUTI,\n    SUBWPN_AGUNEA\n} SubWpnID;\ntypedef enum { STAT_STR, STAT_CON, STAT_INT, STAT_LCK } Stats;\ntypedef struct {\n    s32 level;\n    s32 exp;\n    s32 unk8;\n} FamiliarStats;\ntypedef enum {\n    RELIC_SOUL_OF_BAT,\n    RELIC_FIRE_OF_BAT,\n    RELIC_ECHO_OF_BAT,\n    RELIC_FORCE_OF_ECHO,\n    RELIC_SOUL_OF_WOLF,\n    RELIC_POWER_OF_WOLF,\n    RELIC_SKILL_OF_WOLF,\n    RELIC_FORM_OF_MIST,\n    RELIC_POWER_OF_MIST,\n    RELIC_GAS_CLOUD,\n    RELIC_CUBE_OF_ZOE,\n    RELIC_SPIRIT_ORB,\n    RELIC_GRAVITY_BOOTS,\n    RELIC_LEAP_STONE,\n    RELIC_HOLY_SYMBOL,\n    RELIC_FAERIE_SCROLL,\n    RELIC_JEWEL_OF_OPEN,\n    RELIC_MERMAN_STATUE,\n    RELIC_BAT_CARD,\n    RELIC_GHOST_CARD,\n    RELIC_FAERIE_CARD,\n    RELIC_DEMON_CARD,\n    RELIC_SWORD_CARD,\n    RELIC_JP_0,\n    RELIC_JP_1,\n    RELIC_HEART_OF_VLAD,\n    RELIC_TOOTH_OF_VLAD,\n    RELIC_RIB_OF_VLAD,\n    RELIC_RING_OF_VLAD,\n    RELIC_EYE_OF_VLAD,\n    NUM_RELICS,\n} RelicIds;\ntypedef enum {\n    SPELL_DARK_METAMORPHOSIS,\n    SPELL_SUMMON_SPIRIT,\n    SPELL_HELLFIRE,\n    SPELL_TETRA_SPIRIT,\n    SPELL_WOLF_CHARGE,\n    SPELL_SOUL_STEAL,\n    SPELL_WING_SMASH,\n    SPELL_SWORD_BROTHERS,\n    NUM_SPELLS,\n} SpellIds;\ntypedef enum {\n    FAM_STATS_BAT,\n    FAM_STATS_GHOST,\n    FAM_STATS_FAERIE,\n    FAM_STATS_DEMON,\n    FAM_STATS_SWORD,\n    FAM_STATS_YOUSEI,\n    FAM_STATS_NOSE_DEMON,\n    NUM_FAMILIARS\n} FamiliarStatsIds;\ntypedef enum {\n    FAM_ACTIVE_NONE,\n    FAM_ACTIVE_BAT = FAM_STATS_BAT + 1,\n    FAM_ACTIVE_GHOST = FAM_STATS_GHOST + 1,\n    FAM_ACTIVE_FAERIE = FAM_STATS_FAERIE + 1,\n    FAM_ACTIVE_DEMON = FAM_STATS_DEMON + 1,\n    FAM_ACTIVE_SWORD = FAM_STATS_SWORD + 1,\n    FAM_ACTIVE_YOUSEI = FAM_STATS_YOUSEI + 1,\n    FAM_ACTIVE_NOSE_DEMON = FAM_STATS_NOSE_DEMON + 1,\n} FamiliarActiveIds;\ntypedef struct {\n                   u8 relics[30];\n                   u8 spells[NUM_SPELLS];\n                   u8 equipHandCount[169];\n                   u8 equipBodyCount[90];\n                   u8 equipHandOrder[169];\n                   u8 equipBodyOrder[90];\n                   u8 saveName[12];\n                   u32 spellsLearnt;\n                   s32 hp;\n                   s32 hpMax;\n                   s32 hearts;\n                   s32 heartsMax;\n                   s32 mp;\n                   s32 mpMax;\n                   s32 statsBase[4];\n                   s32 statsEquip[4];\n                   s32 statsTotal[4];\n                   u32 level;\n                   u32 exp;\n                   s32 gold;\n                   s32 killCount;\n                   u32 D_80097BF8;\n                   u32 subWeapon;\n                   u32 equipment[7];\n                   u32 attackHands[2];\n                   s32 defenseEquip;\n                   u16 defenseElement;\n                   u16 D_80097C2A;\n                   u16 D_80097C2C;\n                   u16 D_80097C2E;\n                   s32 timerHours;\n                   s32 timerMinutes;\n                   s32 timerSeconds;\n                   s32 timerFrames;\n                   u32 D_80097C40;\n                   FamiliarStats statsFamiliars[NUM_FAMILIARS];\n} PlayerStatus;\ntypedef struct {\n                         s32 cursorMain;\n                         s32 cursorRelic;\n                         s32 cursorEquip;\n                         s32 cursorEquipType[NUM_EQUIP_KINDS];\n                         s32 scrollEquipType[NUM_EQUIP_KINDS];\n                         s32 cursorSpells;\n                         s32 cursorSettings;\n                         s32 cursorCloak;\n                         s32 cursorButtons;\n                         s32 cursorWindowColors;\n                         s32 cursorTimeAttack;\n} MenuNavigation;\ntypedef struct {\n                            u32 buttonConfig[8];\n                            u16 buttonMask[8];\n                            s32 timeAttackRecords[TIMEATTACK_EVENT_END];\n                            s32 cloakColors[6];\n                            s32 windowColors[3];\n                            s32 equipOrderTypes[ITEM_END];\n                            s32 isCloakLiningReversed;\n                            s32 isSoundMono;\n                            s32 D_8003CB00;\n                            s32 D_8003CB04;\n} GameSettings;\ntypedef struct {\n               u8 Magic[2];\n               u8 Type;\n               u8 BlockEntry;\n               u8 Title[64];\n               u8 reserve[28];\n               u8 Clut[32];\n               u8 Icon[3][128];\n} MemcardHeader;\ntypedef struct {\n               char name[12];\n               s32 level;\n               s32 gold;\n               s32 playHours;\n               s32 playMinutes;\n               s32 playSeconds;\n               s32 cardIcon;\n               s32 endGameFlags;\n               s16 stage;\n               u16 nRoomsExplored;\n               u16 roomX;\n               u16 roomY;\n               s32 character;\n               s32 saveSize;\n} SaveInfo;\ntypedef struct {\n                MemcardHeader header;\n                SaveInfo info;\n                PlayerStatus status;\n                MenuNavigation menuNavigation;\n                GameSettings settings;\n                u8 castleFlags[0x300];\n                u8 castleMap[0x800];\n                 s32 rng;\n} SaveData;\ntypedef struct {\n               u8* gfxPage;\n               u8* gfxIndex;\n               u8* clut;\n               u8* collision;\n} TileDefinition;\ntypedef struct {\n               u32 left : 6;\n               u32 top : 6;\n               u32 right : 6;\n               u32 bottom : 6;\n               u8 params : 8;\n} LayoutRect;\ntypedef struct {\n               u16* layout;\n               TileDefinition* tileDef;\n               LayoutRect rect;\n               u16 zPriority;\n               u16 flags;\n} LayerDef;\ntypedef struct {\n    LayerDef* fg;\n    LayerDef* bg;\n} RoomDef;\ntypedef struct {\n               s16 x;\n               s16 y;\n               s16 width;\n               s16 height;\n               s16 clut;\n               s16 tpage;\n               s16 texLeft;\n               s16 texTop;\n               s16 texRight;\n               s16 texBottom;\n} Sprite;\ntypedef struct {\n             s16 flags;\n             s16 offsetx;\n             s16 offsety;\n             s16 width;\n             s16 height;\n             s16 clut;\n             s16 tileset;\n             s16 left;\n             s16 top;\n             s16 right;\n             s16 bottom;\n} SpritePart;\ntypedef struct {\n             u16 count;\n             SpritePart parts[0];\n} SpriteParts;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*HitDetection)(void);\n                   void (*UpdateRoomPosition)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   SpriteParts** spriteBanks;\n                   u_long** cluts;\n                   void* objLayoutHorizontal;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*UpdateStageEntities)(void);\n                   u8** unk2c;\n                   u8** unk30;\n                   s32* unk34;\n                   s32* unk38;\n                   void (*StageEndCutScene)(void);\n} Overlay;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*HitDetection)(void);\n                   void (*UpdateRoomPosition)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   SpriteParts** spriteBanks;\n                   u_long** cluts;\n                   void* objLayoutHorizontal;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*UpdateStageEntities)(void);\n} AbbreviatedOverlay;\ntypedef enum {\n    EFFECT_SOLID = 1 << 0,\n    EFFECT_UNK_0002 = 1 << 1,\n    EFFECT_QUICKSAND = 1 << 2,\n    EFFECT_WATER = 1 << 3,\n    EFFECT_MIST_ONLY = 1 << 4,\n    EFFECT_UNK_0020 = 1 << 5,\n    EFFECT_SOLID_FROM_ABOVE = 1 << 6,\n    EFFECT_SOLID_FROM_BELOW = 1 << 7,\n    EFFECT_UNK_0100 = 1 << 8,\n    EFFECT_UNK_0200 = 1 << 9,\n    EFFECT_UNK_0400 = 1 << 10,\n    EFFECT_UNK_0800 = 1 << 11,\n    EFFECT_UNK_1000 = 1 << 12,\n    EFFECT_UNK_2000 = 1 << 13,\n    EFFECT_UNK_4000 = 1 << 14,\n    EFFECT_UNK_8000 = 1 << 15,\n    EFFECT_NOTHROUGH = EFFECT_SOLID | EFFECT_QUICKSAND,\n    EFFECT_NOTHROUGH_PLUS = EFFECT_SOLID | EFFECT_UNK_0002 | EFFECT_QUICKSAND,\n    EFFECT_UNK_C000 = EFFECT_UNK_8000 | EFFECT_UNK_4000\n} ColliderEffectFlags;\ntypedef struct Collider {\n               u32 effects;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n               s32 unk10;\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Collider;\ntypedef struct XaMusicConfig {\n    u32 cd_addr;\n    s32 unk228;\n    u8 filter_file;\n    u8 filter_channel_id;\n    u8 volume;\n    u8 unk22f;\n    u8 unk230;\n    u8 pad[3];\n} XaMusicConfig;\ntypedef struct {\n               const char* name;\n               s16 hitPoints;\n               s16 attack;\n               u16 attackElement;\n               s16 defense;\n               u16 hitboxState;\n               u16 weaknesses;\n               u16 strengths;\n               u16 immunes;\n               u16 absorbs;\n               u16 level;\n               u16 exp;\n               u16 rareItemId;\n               u16 uncommonItemId;\n               u16 rareItemDropRate;\n               u16 uncommonItemDropRate;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               s32 flags;\n} EnemyDef;\ntypedef struct {\n               s16 attack;\n               s16 heartCost;\n               u16 attackElement;\n               u8 unk6;\n               u8 nFramesInvincibility;\n               u16 stunFrames;\n               u8 anim;\n               u8 blueprintNum;\n               u16 hitboxState;\n               u16 hitEffect;\n               u8 crashId;\n               u8 unk11;\n               u16 entityRoomIndex;\n} SubweaponDef;\ntypedef struct {\n               const char* name;\n               const char* description;\n               s16 attack;\n               s16 defense;\n               u16 element;\n               u8 itemCategory;\n               u8 weaponId;\n               u8 palette;\n               u8 unk11;\n               u8 playerAnim;\n               u8 unk13;\n               u8 unk14;\n               u8 lockDuration;\n               u8 chainLimit;\n               u8 unk17;\n               u8 specialMove;\n               u8 isConsumable;\n               u8 enemyInvincibilityFrames;\n               u8 unk1B;\n               u32 comboSub;\n               u32 comboMain;\n               u16 mpUsage;\n               u16 stunFrames;\n               u16 hitType;\n               u16 hitEffect;\n               u16 icon;\n               u16 iconPalette;\n               u16 criticalRate;\n               u16 unk32;\n} Equipment;\ntypedef struct {\n             const char* name;\n             const char* description;\n             s16 attBonus;\n             s16 defBonus;\n             u8 statsBonus[4];\n             u16 unk10;\n             u16 unk12;\n             u16 unk14;\n             u16 unk16;\n             u16 icon;\n             u16 iconPalette;\n             u16 equipType;\n             u16 unk1E;\n} Accessory;\ntypedef struct {\n               const char* name;\n               const char* combo;\n               const char* description;\n               u8 mpUsage;\n               s8 nFramesInvincibility;\n               s16 stunFrames;\n               s16 hitboxState;\n               s16 hitEffect;\n               s16 entityRoomIndex;\n               u16 attackElement;\n               s16 attack;\n               s16 unk1A;\n} SpellDef;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 unk08;\n               u16 unk0A;\n               s32 unk0C;\n} RelicDesc;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 icon;\n               u16 iconPalette;\n               u16 unk0C;\n               u16 unk0E;\n} RelicOrb;\ntypedef struct {\n               const char* nextCharDialogue;\n               s16 startX;\n               s16 nextLineY;\n               s16 startY;\n               s16 nextCharX;\n               s16 nextLineX;\n               s16 nextCharY;\n               s16 portraitAnimTimer;\n               u16 unk12;\n               u16 clutIndex;\n               u8 nextCharTimer;\n               u8 unk17;\n               Primitive* prim[6];\n               s32 primIndex[3];\n               u16 unk3C;\n               u16 timer;\n               const char* unk40;\n} Dialogue;\ntypedef struct {\n    u32 effects;\n    u32 damageKind;\n    s32 damageTaken;\n    s32 unkC;\n} DamageParam;\ntypedef struct {\n                   Overlay o;\n                   void (*FreePrimitives)(s32);\n                   s16 (*AllocPrimitives)(PrimitiveType type, s32 count);\n                   void (*CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\n                   void (*func_80102CD8)(s32 arg0);\n                   void (*UpdateAnim)(\n        FrameProperty* frameProps, AnimationFrame** anims);\n                   void (*SetSpeedX)(s32 value);\n                   Entity* (*GetFreeEntity)(s16 start, s16 end);\n                   void (*GetEquipProperties)(\n        s32 handId, Equipment* res, s32 equipId);\n                   s32 (*func_800EA5E4)(u32);\n                   void (*LoadGfxAsync)(s32 gfxId);\n                   void (*PlaySfx)(s32 sfxId);\n                   s16 (*func_800EDB58)(s32, s32);\n                   void (*func_800EA538)(s32 arg0);\n                   void (*g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\n                   void (*func_801027C4)(u32 arg0);\n                   void (*func_800EB758)(\n        s16 pivotX, s16 pivotY, Entity* e, u16 flags, POLY_GT4* p, u8 flipX);\n                   Entity* (*CreateEntFactoryFromEntity)(\n        Entity* self, u32 flags, s32 arg2);\n                   bool (*func_80131F68)(void);\n                   DR_ENV* (*func_800EDB08)(POLY_GT4* poly);\n                   u16* (*func_80106A28)(u32 arg0, u16 kind);\n                   void (*func_80118894)(Entity*);\n                   EnemyDef* enemyDefs;\n                   Entity* (*func_80118970)(void);\n                   s16 (*func_80118B18)(\n        Entity* ent1, Entity* ent2, s32 facingLeft);\n                   s32 (*UpdateUnarmedAnim)(s8* frameProps, u16** frames);\n                   void (*PlayAnimation)(s8*, AnimationFrame** frames);\n                   void (*func_80118C28)(s32 arg0);\n                   void (*func_8010E168)(s32 arg0, s16 arg1);\n                   void (*func_8010DFF0)(s32 arg0, s32 arg1);\n                   u16 (*DealDamage)(\n        Entity* enemyEntity, Entity* attackerEntity);\n                   void (*LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\n                   Equipment* equipDefs;\n                   Accessory* accessoryDefs;\n                   void (*AddHearts)(s32 value);\n                   bool (*LoadMonsterLibrarianPreview)(s32 monsterId);\n                   s32 (*TimeAttackController)(\n        TimeAttackEvents eventId, TimeAttackActions action);\n                   void* (*func_8010E0A8)(void);\n                   void (*func_800FE044)(s32, s32);\n                   void (*AddToInventory)(u32 id, EquipKind kind);\n                   RelicOrb* relicDefs;\n                   void (*InitStatsAndGear)(bool debugMode);\n                   s32 (*func_80134714)(s32 arg0, s32 arg1, s32 arg2);\n                   s32 (*func_80134678)(s16 arg0, u16 arg1);\n                   void (*func_800F53A4)(void);\n                   u32 (*CheckEquipmentItemCount)(u32 itemId, u32 equipType);\n                   void (*func_8010BF64)(Unkstruct_8010BF64* arg0);\n                   void (*func_800F1FC4)(s32 arg0);\n                   void (*func_800F2288)(s32 arg0);\n                   void (*func_8011A3AC)(\n        Entity* entity, s32 spellId, s32 arg2, FamiliarStats* out);\n                   s32 (*func_800FF460)(s32 arg0);\n                   s32 (*func_800FF494)(EnemyDef* arg0);\n                   bool (*CdSoundCommandQueueEmpty)(void);\n                   bool (*func_80133950)(void);\n                   bool (*func_800F27F4)(s32 arg0);\n                   s32 (*func_800FF110)(s32 arg0);\n                   s32 (*func_800FD664)(s32 arg0);\n                   s32 (*func_800FD5BC)(DamageParam* arg0);\n                   void (*LearnSpell)(s32 spellId);\n                   void (*DebugInputWait)(const char* str);\n                   void* unused12C;\n                   void* unused130;\n                   void* unused134;\n                   void* unused138;\n                   void* unused13C;\n} GameApi;\ntypedef struct {\n    void (*D_8013C000)(void);\n    void (*D_8013C004)(void);\n    void (*D_8013C008)(void);\n    void (*D_8013C00C)(void);\n} PlayerOvl;\nextern PlayerOvl g_PlOvl;\nextern u8** g_PlOvlAluBatSpritesheet[1];\nextern u8* g_PlOvlSpritesheet[];\nextern void (*g_api_FreePrimitives)(s32);\nextern s16 (*g_api_AllocPrimitives)(PrimitiveType type, s32 count);\nextern void (*g_api_CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\nextern void (*g_api_func_80102CD8)(s32 arg0);\nextern void (*g_api_UpdateAnim)(FrameProperty* frameProps, s32* arg1);\nextern void (*g_api_SetSpeedX)(s32 value);\nextern Entity* (*g_api_GetFreeEntity)(s16 start, s16 end);\nextern void (*g_api_GetEquipProperties)(\n    s32 handId, Equipment* res, s32 equipId);\nextern s32 (*g_api_func_800EA5E4)(u32);\nextern void (*g_api_LoadGfxAsync)(s32);\nextern void (*g_api_PlaySfx)(s32 sfxId);\nextern s16 (*g_api_func_800EDB58)(s32, s32);\nextern void (*g_api_func_800EA538)(s32 arg0);\nextern void (*g_api_g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\nextern Entity* (*g_api_CreateEntFactoryFromEntity)(\n    Entity* self, u32 flags, s32 arg2);\nextern bool (*g_api_func_80131F68)(void);\nextern DR_ENV* (*g_api_func_800EDB08)(POLY_GT4* poly);\nextern u16* (*g_api_func_80106A28)(u16 arg0, u16 kind);\nextern void (*g_api_func_80118894)(Entity*);\nextern EnemyDef* g_api_enemyDefs;\nextern u32 (*g_api_UpdateUnarmedAnim)(s8* frameProps, u16** frames);\nextern void (*g_api_PlayAnimation)(s8*, AnimationFrame** frames);\nextern void (*g_api_func_8010E168)(s32 arg0, s16 arg1);\nextern void (*g_api_func_8010DFF0)(s32 arg0, s32 arg1);\nextern u16 (*g_api_DealDamage)(Entity* enemyEntity, Entity* attackerEntity);\nextern void (*g_api_LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\nextern Equipment* g_api_equipDefs;\nextern Accessory* g_api_g_AccessoryDefs;\nextern void (*g_api_AddHearts)(s32 value);\nextern s32 (*g_api_TimeAttackController)(\n    TimeAttackEvents eventId, TimeAttackActions action);\nextern void* (*g_api_func_8010E0A8)(void);\nextern void (*g_api_func_800FE044)(s32, s32);\nextern void (*g_api_AddToInventory)(u16 id, EquipKind kind);\nextern RelicOrb* g_api_relicDefs;\nextern s32 (*g_api_func_80134714)(s32 arg0, s32 arg1, s32 arg2);\nextern s32 (*g_api_func_80134678)(s16 arg0, u16 arg1);\nextern void (*g_api_func_800F53A4)(void);\nextern u32 (*g_api_CheckEquipmentItemCount)(u32 itemId, u32 equipType);\nextern void (*g_api_func_8010BF64)(Unkstruct_8010BF64* arg0);\nextern void (*g_api_func_800F1FC4)(s32 arg0);\nextern void (*g_api_func_800F2288)(s32 arg0);\nextern void (*g_api_func_8011A3AC)(\n    Entity* entity, s32 spellId, s32 arg2, FamiliarStats* out);\nextern s32 (*g_api_func_800FF460)(s32 arg0);\nextern s32 (*g_api_func_800FF494)(EnemyDef* arg0);\nextern bool (*g_api_CdSoundCommandQueueEmpty)(void);\nextern bool (*g_api_func_80133950)(void);\nextern bool (*g_api_func_800F27F4)(s32 arg0);\nextern s32 (*g_api_func_800FF110)(s32 arg0);\nextern s32 (*g_api_func_800FD664)(s32 arg0);\nextern s32 (*g_api_func_800FD5BC)(DamageParam* arg0);\nextern void (*g_api_LearnSpell)(s32 spellId);\nextern void (*g_api_func_800E2438)(const char* str);\ntypedef struct {\n               u16** frames;\n               s8* frameProps;\n               u16 palette;\n               u16 soundId;\n               u8 frameStart;\n               u8 soundFrame;\n               s16 unused;\n} WeaponAnimation;\ntypedef struct {\n                        u16* layout;\n                        TileDefinition* tileDef;\n                        f32 scrollX;\n                        f32 scrollY;\n                        u32 unused10;\n                        u32 unused14;\n                        u32 order;\n                        u32 flags;\n                        u32 w;\n                        u32 h;\n                        u32 hideTimer;\n                        u32 scrollKind;\n} BgLayer;\ntypedef struct {\n                   u16* fg;\n                   TileDefinition* tileDef;\n                   f32 scrollX;\n                   f32 scrollY;\n                   s32 unused10;\n                   s32 unused14;\n                   s32 order;\n                   u32 flags;\n                   s32 hSize;\n                   s32 vSize;\n                   u32 hideTimer;\n                   s32 left;\n                   s32 top;\n                   s32 right;\n                   s32 bottom;\n                   s32 x;\n                   s32 y;\n                   s32 width;\n                   s32 height;\n                   s32 unk30;\n                   s32 D_800730D4;\n                   BgLayer bg[16];\n} Tilemap;\ntypedef struct {\n                     u16 flags;\n                     u16 unk2;\n                     u16 unk4;\n                     s16 zPriority;\n} FgLayer;\ntypedef struct {\n                   Collider colliders[4];\n                   Collider colliders2[4];\n                   Collider colliders3[14];\n                   s32 padPressed;\n                   s32 padTapped;\n                   s32 padHeld;\n                   u32 padSim;\n                   s32 D_80072EF8;\n                   s32 D_80072EFC;\n                   s16 D_80072F00[16];\n                   s32 pl_vram_flag;\n                   s32 unk04;\n                   s32 unk08;\n                   u32 unk0C;\n                   s32 unk10;\n                   u32 unk14;\n                   s32 unk18;\n                   s32 unk1C;\n                   s32 unk20;\n                   s32 unk24;\n                   s32 unk28;\n                   s32 unk2C;\n                   s32 unk30;\n                   s32 unk34;\n                   s32 unk38;\n                   s32 unk3C;\n                   u16 unk40;\n                   u16 pl_high_jump_timer;\n                   u16 unk44;\n                   u16 unk46;\n                   u16 unk48;\n                   s16 unk4A;\n                   u16 unk4C;\n                   u16 unk4E;\n                   u16 unk50;\n                   u16 unk52;\n                   u16 unk54;\n                   u16 unk56;\n                   u16 unk58;\n                   u16 damageTaken;\n                   u16 unk5C;\n                   u16 unk5E;\n                   u16 unk60;\n                   u16 unk62;\n                   u16 unk64;\n                   u16 unk66;\n                   u16 unk68;\n                   u16 unk6A;\n                   u16 unk6C;\n                   u16 unk6E;\n                   u16 unk70;\n                   u16 unk72;\n                   u32 unk74;\n                   u16 unk78;\n                   u16 unk7A;\n                   u16 unk7C;\n                   u16 unk7E;\n} PlayerState;\ntypedef struct {\n               RECT rect0;\n               RECT rect1;\n               RECT rect2;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 enableColorBlend;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 flipX;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 unk27;\n} PlayerDraw;\ntypedef struct {\n    s16 buttonsCorrect;\n    s16 timer;\n} ButtonComboState;\nextern s32 D_8003925C;\nextern s32 g_IsTimeAttackUnlocked;\nextern u8 g_CastleFlags[0x300];\nextern s32 D_8003C0EC[4];\nextern s32 D_8003C0F8;\nextern s32 D_8003C100;\nextern u16 g_ClutIds[];\nextern s32 D_8003C704;\nextern FgLayer D_8003C708;\nextern s16 D_8003C710;\nextern s16 D_8003C712;\nextern s32 D_8003C728;\nextern s32 D_8003C730;\nextern GameState g_GameState;\nextern s32 D_8003C738;\nextern s32 D_8003C73C;\nextern u32 D_8003C744;\nextern u32 g_RoomCount;\nextern GameApi g_api;\nextern s32 D_8003C8B8;\nextern u32 g_GameTimer;\nextern bool D_8003C908;\nextern s32 g_EquippedWeaponIds[2];\nextern u32 g_Timer;\nextern s32 g_MapCursorTimer;\n                 extern s32 g_PlayableCharacter;\n                 extern u32 D_8003C9A4;\n                 extern MenuNavigation g_MenuNavigation;\n                 extern GameSettings g_Settings;\nextern GpuBuffer g_GpuBuffers[2];\nextern s16 g_GpuBuffers_1_buf_draw_clip_y;\nextern const char g_MemcardSavePath[];\nextern const char aBaslus00067dra[19];\nextern const char g_strMemcardRootPath[];\nextern s32 g_LoadFile;\nextern s32 D_8006BB00;\nextern u8 g_CastleMap[0x800];\nextern s32 D_8006C374;\nextern s32 D_8006C378;\nextern GpuBuffer* g_CurrentBuffer;\nextern Point32 D_8006C384;\nextern Point32 D_8006C38C;\nextern u32 g_CdStep;\nextern s32 D_8006C3AC;\nextern s32 g_backbufferX;\nextern s32 g_backbufferY;\nextern s32 g_IsUsingCd;\nextern Entity* g_CurrentEntity;\nextern Unkstruct_8006C3C4 D_8006C3C4[32];\nextern s32 g_Servant;\nextern u16 g_Clut[0x3000];\nextern u16 D_8006EBCC[0x1000];\nextern u16 D_8006EBE0;\nextern s16 D_800705CC[];\nextern u32 D_80070BCC;\nextern PlayerState g_Player;\nextern Entity* D_psp_091CF3A0;\nextern s32 D_psp_091CF3A4;\nextern void (*D_psp_091CF3A8)(Entity*);\nextern s32 D_psp_091CF3AC;\nextern u16 D_psp_091CF3DC;\nextern GfxLoad g_GfxLoad[0x10];\nextern u32 g_GameStep;\nextern s32 g_ServantLoaded;\nextern Event g_EvSwCardEnd;\nextern Event g_EvSwCardErr;\nextern Event g_EvSwCardTmo;\nextern s32 g_PrevScrollX;\nextern Event g_EvSwCardNew;\nextern s32 g_PrevScrollY;\nextern s32 D_80073080;\nextern Tilemap g_Tilemap;\nextern Entity g_Entities[256];\nextern s32 g_entityDestroyed[18];\nextern Event g_EvHwCardEnd;\nextern Event g_EvHwCardErr;\nextern Event g_EvHwCardTmo;\nextern Event g_EvHwCardNew;\nextern u8 g_Pix[4][128 * 128 / 2];\nextern Primitive g_PrimBuf[0x500];\nextern s32 g_PlayerX;\nextern s32 g_PlayerY;\nextern u32 g_randomNext;\nextern s32 D_80096ED8[];\nextern s8 D_80097B98;\nextern s8 D_80097B99;\nextern s32 D_800973EC;\nextern unkGraphicsStruct g_unkGraphicsStruct;\nextern s32 D_80097448[];\nextern s32 D_80097450;\nextern Pos D_80097488;\nextern Pad g_pads[2];\nextern Stages g_StageId;\nextern s32 D_800974A4;\nextern DR_ENV D_800974AC[16];\nextern s32 g_UseDisk;\nextern s32 D_800978B4;\nextern s32 D_800978C4;\nextern u32 g_MenuStep;\nextern char D_80097902[];\nextern s32 D_80097904;\nextern s32 g_ScrollDeltaX;\nextern s32 g_ScrollDeltaY;\nextern s32 D_80097910;\nextern DemoMode g_DemoMode;\nextern s32 g_LoadOvlIdx;\nextern s32 D_8009791C;\nextern s32 D_80097920;\nextern s32 D_80097924;\nextern s32 D_80097928;\nextern GpuUsage g_GpuUsage;\nextern PlayerStatus g_Status;\nextern s32 D_80097C98;\nextern s32 subWeapon;\nextern u8 g_SaveName[12] ;\nextern u32 D_80097C40[];\nextern PlayerDraw g_PlayerDraw[0x10];\nextern s32 D_800987B4;\nextern s32 D_800987C8;\nextern s32 g_DebugPlayer;\nextern s32 D_80098894;\ntypedef enum ItemSlots {\n    LEFT_HAND_SLOT,\n    RIGHT_HAND_SLOT,\n    HEAD_SLOT,\n    ARMOR_SLOT,\n    CAPE_SLOT,\n    ACCESSORY_1_SLOT,\n    ACCESSORY_2_SLOT,\n    NUM_ITEM_SLOTS,\n} ItemSlots;\ntypedef enum HandItems {\n                ITEM_EMPTY_HAND,\n                ITEM_MONSTER_VIAL_1,\n                ITEM_MONSTER_VIAL_2,\n                ITEM_MONSTER_VIAL_3,\n                ITEM_SHIELD_ROD,\n                ITEM_LEATHER_SHIELD,\n                ITEM_KNIGHT_SHIELD,\n                ITEM_IRON_SHIELD,\n                ITEM_AXELORD_SHIELD,\n                ITEM_HERALD_SHIELD,\n                ITEM_DARK_SHIELD,\n                ITEM_GODDESS_SHIELD,\n                ITEM_SHAMAN_SHIELD,\n                ITEM_MEDUSA_SHIELD,\n                ITEM_SKULL_SHIELD,\n                ITEM_FIRE_SHIELD,\n                ITEM_ALUCARD_SHIELD,\n                ITEM_SWORD_OF_DAWN,\n                ITEM_BASILARD,\n                ITEM_SHORT_SWORD,\n                ITEM_COMBAT_KNIFE,\n                ITEM_NUNCHAKU,\n                ITEM_WERE_BANE,\n                ITEM_RAPIER,\n                ITEM_KARMA_COIN,\n                ITEM_MAGIC_MISSILE,\n                ITEM_RED_RUST,\n                ITEM_TAKEMITSU,\n                ITEM_SHOTEL,\n                ITEM_ORANGE,\n                ITEM_APPLE,\n                ITEM_BANANA,\n                ITEM_GRAPES,\n                ITEM_STRAWBERRY,\n                ITEM_PINEAPPLE,\n                ITEM_PEANUTS,\n                ITEM_TOADSTOOL,\n                ITEM_SHIITAKE,\n                ITEM_CHEESECAKE,\n                ITEM_SHORTCAKE,\n                ITEM_TART,\n                ITEM_PARFAIT,\n                ITEM_PUDDING,\n                ITEM_ICE_CREAM,\n                ITEM_FRANKFURTER,\n                ITEM_HAMBURGER,\n                ITEM_PIZZA,\n                ITEM_CHEESE,\n                ITEM_HAM_AND_EGGS,\n                ITEM_OMELETTE,\n                ITEM_MORNING_SET,\n                ITEM_LUNCH_A,\n                ITEM_LUNCH_B,\n                ITEM_CURRY_RICE,\n                ITEM_GYROS_PLATE,\n                ITEM_SPAGHETTI,\n                ITEM_GRAPE_JUICE,\n                ITEM_BARLEY_TEA,\n                ITEM_GREEN_TEA,\n                ITEM_NATOU,\n                ITEM_RAMEN,\n                ITEM_MISO_SOUP,\n                ITEM_SUSHI,\n                ITEM_PORK_BUN,\n                ITEM_RED_BEAN_BUN,\n                ITEM_CHINESE_BUN,\n                ITEM_DIM_SUM_SET,\n                ITEM_POT_ROAST,\n                ITEM_SIRLION,\n                ITEM_TURKEY,\n                ITEM_MEAL_TICKET,\n                ITEM_NEUTRON_BOMB,\n                ITEM_POWER_OF_SIRE,\n                ITEM_PENTAGRAM,\n                ITEM_BAT_PENTAGRAM,\n                ITEM_SHURIKEN,\n                ITEM_CROSS_SHURIKEN,\n                ITEM_BUFFALO_STAR,\n                ITEM_FLAME_STAR,\n                ITEM_TNT,\n                ITEM_BWAKA_KNIFE,\n                ITEM_BOOMERANG,\n                ITEM_JAVELIN,\n                ITEM_TYRFING,\n                ITEM_NAMAKURA,\n                ITEM_KNUCKLE_DUSTER,\n                ITEM_GLADIUS,\n                ITEM_SCIMITAR,\n                ITEM_CUTLASS,\n                ITEM_SABER,\n                ITEM_FALCHION,\n                ITEM_BROADSWORD,\n                ITEM_BEKATOWA,\n                ITEM_DAMASCUS_SWORD,\n                ITEM_HUNTER_SWORD,\n                ITEM_ESTOC,\n                ITEM_BASTARD_SWORD,\n                ITEM_JEWEL_KNUCKLES,\n                ITEM_CLAYMORE,\n                ITEM_TALWAR,\n                ITEM_KATANA,\n                ITEM_FLAMBERGE,\n                ITEM_IRON_FIST,\n                ITEM_ZWEIHANDER,\n                ITEM_SWORD_OF_HADOR,\n                ITEM_LUMINUS,\n                ITEM_HARPER,\n                ITEM_OBSIDIAN_SWORD,\n                ITEM_GRAM,\n                ITEM_JEWEL_SWORD,\n                ITEM_MORMEGIL,\n                ITEM_FIREBRAND,\n                ITEM_THUNDERBRAND,\n                ITEM_ICEBRAND,\n                ITEM_STONE_SWORD,\n                ITEM_HOLY_SWORD,\n                ITEM_TERMINUS_EST,\n                ITEM_MARSIL,\n                ITEM_DARK_BLADE,\n                ITEM_HEAVEN_SWORD,\n                ITEM_FIST_OF_TULKAS,\n                ITEM_GURTHANG,\n                ITEM_MOURNEBLADE,\n                ITEM_ALUCARD_SWORD,\n                ITEM_MABLUNG_SWORD,\n                ITEM_BADELAIRE,\n                ITEM_SWORD_FAMILIAR,\n                ITEM_GREAT_SWORD,\n                ITEM_MACE,\n                ITEM_MORNINGSTAR,\n                ITEM_HOLY_ROD,\n                ITEM_STAR_FLAIL,\n                ITEM_MOON_ROD,\n                ITEM_CHAKRAM,\n                ITEM_FIRE_BOOMERANG,\n                ITEM_IRON_BALL,\n                ITEM_HOLBEIN_DAGGER,\n                ITEM_BLUE_KNUCKLES,\n                ITEM_DYNAMITE,\n                ITEM_OSAFUNE_KATANA,\n                ITEM_MASAMUNE,\n                ITEM_MURAMASA,\n                ITEM_HEART_REFRESH,\n                ITEM_RUNESWORD,\n                ITEM_ANTIVENOM,\n                ITEM_UNCURSE,\n                ITEM_LIFE_APPLE,\n                ITEM_HAMMER,\n                ITEM_STR_POTION,\n                ITEM_LUCK_POTION,\n                ITEM_SMART_POTION,\n                ITEM_ATTACK_POTION,\n                ITEM_SHIELD_POTION,\n                ITEM_RESIST_FIRE,\n                ITEM_RESIST_THUNDER,\n                ITEM_RESIST_ICE,\n                ITEM_RESIST_STONE,\n                ITEM_RESIST_HOLY,\n                ITEM_RESIST_DARK,\n                ITEM_POTION,\n                ITEM_HIGH_POTION,\n                ITEM_ELIXIR,\n                ITEM_MANNA_PRISM,\n                ITEM_VORPAL_BLADE,\n                ITEM_CRISSAEGRIM,\n                ITEM_YASUTSUNA,\n                ITEM_LIBRARY_CARD,\n                ITEM_ALUCART_SHIELD,\n                ITEM_ALUCART_SWORD,\n                NUM_HAND_ITEMS,\n} HandItems;\ntypedef enum BodyItems {\n               ITEM_NO_ARMOR,\n               ITEM_CLOTH_TUNIC,\n               ITEM_HIDE_CUIRASS,\n               ITEM_BRONZE_CUIRASS,\n               ITEM_IRON_CUIRASS,\n               ITEM_STEEL_CUIRASS,\n               ITEM_SILVER_PLATE,\n               ITEM_GOLD_PLATE,\n               ITEM_PLATINUM_MAIL,\n               ITEM_DIAMOND_PLATE,\n               ITEM_FIRE_MAIL,\n               ITEM_LIGHTNING_MAIL,\n               ITEM_ICE_MAIL,\n               ITEM_MIRROR_CUIRASS,\n               ITEM_SPIKE_BREAKER,\n               ITEM_ALUCARD_MAIL,\n               ITEM_DARK_ARMOR,\n               ITEM_HEALING_MAIL,\n               ITEM_HOLY_MAIL,\n               ITEM_WALK_ARMOR,\n               ITEM_BRILLIANT_MAIL,\n               ITEM_MOJO_MAIL,\n               ITEM_FURY_PLATE,\n               ITEM_DRACULA_TUNIC,\n               ITEM_GODS_GARB,\n               ITEM_AXE_LORD_ARMOR,\n               ITEM_EMPTY_HEAD,\n               ITEM_SUNGLASSES,\n               ITEM_BALLROOM_MASK,\n               ITEM_BANDANNA,\n               ITEM_FELT_HAT,\n               ITEM_VELVET_HAT,\n               ITEM_GOGGLES,\n               ITEM_LEATHER_HAT,\n               ITEM_HOLY_GLASSES,\n               ITEM_STEEL_HELM,\n               ITEM_STONE_MASK,\n               ITEM_CIRCLET,\n               ITEM_GOLD_CIRCLET,\n               ITEM_RUBY_CIRCLET,\n               ITEM_OPAL_CIRCLET,\n               ITEM_TOPAZ_CIRCLET,\n               ITEM_BERYL_CIRCLET,\n               ITEM_CAT_EYE_CIRCLET,\n               ITEM_CORAL_CIRCLET,\n               ITEM_DRAGON_HELM,\n               ITEM_SILVER_CROWN,\n               ITEM_WIZARD_HAT,\n               ITEM_NO_CAPE,\n               ITEM_CLOTH_CAPE,\n               ITEM_REVERSE_CLOAK,\n               ITEM_ELVEN_CLOAK,\n               ITEM_CRYSTAL_CLOAK,\n               ITEM_ROYAL_CLOAK,\n               ITEM_BLOOD_CLOAK,\n               ITEM_JOSEPHS_CLOAK,\n               ITEM_TWILIGHT_CLOAK,\n               ITEM_NO_ACCESSORY,\n               ITEM_MOONSTONE,\n               ITEM_SUNSTONE,\n               ITEM_BLOODSTONE,\n               ITEM_STAUROLITE,\n               ITEM_RING_OF_PALES,\n               ITEM_ZIRCON,\n               ITEM_AQUAMARINE,\n               ITEM_TURQUOISE,\n               ITEM_ONYX,\n               ITEM_GARNET,\n               ITEM_OPAL,\n               ITEM_DIAMOND,\n               ITEM_LAPIS_LAZULI,\n               ITEM_RING_OF_ARES,\n               ITEM_GOLD_RING,\n               ITEM_SILVER_RING,\n               ITEM_RING_OF_VARDA,\n               ITEM_RING_OF_ARCANA,\n               ITEM_MYSTIC_PENDANT,\n               ITEM_HEART_BROACH,\n               ITEM_NECKLACE_OF_J,\n               ITEM_GAUNTLET,\n               ITEM_ANKH_OF_LIFE,\n               ITEM_RING_OF_FEANOR,\n               ITEM_MEDAL,\n               ITEM_TALISMAN,\n               ITEM_DUPLICATOR,\n               ITEM_KINGS_STONE,\n               ITEM_COVENANT_STONE,\n               ITEM_NAUGLAMIR,\n               ITEM_SECRET_BOOTS,\n               ITEM_ALUCART_MAIL,\n               NUM_BODY_ITEMS,\n} BodyItems;\nvoid EntityBreakable(Entity*);\nvoid EntityExplosion(Entity*);\nvoid EntityPrizeDrop(Entity*);\nvoid EntityDamageDisplay(Entity*);\nvoid EntityRedDoor(Entity*);\nvoid EntityIntenseExplosion(Entity*);\nvoid EntitySoulStealOrb(Entity*);\nvoid EntityRoomForeground(Entity*);\nvoid EntityStageNamePopup(Entity*);\nvoid EntityEquipItemDrop(Entity*);\nvoid EntityRelicOrb(Entity*);\nvoid EntityHeartDrop(Entity*);\nvoid EntityEnemyBlood(Entity*);\nvoid EntityMessageBox(Entity*);\nvoid EntityDummy(Entity*);\ntypedef enum { MONO_SOUND, STEREO_SOUND } soundMode;\nenum Sfx {\n    SFX_HARPY_WING_FLAP = 0x601,\n    SFX_RIC_WHIP_RATTLE_A,\n    SFX_RIC_WHIP_RATTLE_B,\n    SFX_RIC_WHIP_RATTLE_C,\n    SFX_RIC_WHIP_RATTLE_D,\n    SFX_RIC_WHIP_RATTLE_E,\n    SFX_STONE_MOVE_A,\n    SFX_STONE_MOVE_B,\n    SFX_STONE_MOVE_C,\n    SFX_WEAPON_SWISH_A,\n    SFX_WEAPON_SWISH_B,\n    SFX_WEAPON_SWISH_C,\n    SFX_METAL_CLANG_A,\n    SFX_METAL_CLANG_B,\n    SFX_METAL_CLANG_C,\n    SFX_METAL_CLANG_D,\n    SFX_METAL_CLANG_E,\n    SFX_METAL_CLANG_F,\n    SFX_UNK_CROW,\n    SFX_ELECTRICITY,\n    SFX_SCRAPE_A,\n    SFX_SCRAPE_B,\n    SFX_SCRAPE_C,\n    SFX_UNK_618,\n    SFX_GLASS_BREAK_A,\n    SFX_GLASS_BREAK_B,\n    SFX_GLASS_BREAK_C,\n    SFX_GLASS_BREAK_D,\n    SFX_GLASS_BREAK_E,\n    SFX_BAT_ECHO_A,\n    SFX_BAT_ECHO_B,\n    SFX_BAT_ECHO_C,\n    SFX_BAT_ECHO_D,\n    SFX_SKULL_BONK,\n    SFX_RIC_RSTONE_TINK,\n    SFX_SMALL_BURST,\n    SFX_ARROW_SHOT_A,\n    SFX_ARROW_SHOT_B,\n    SFX_ARROW_SHOT_C,\n    SFX_ARROW_SHOT_D,\n    SFX_SKELETON_DEATH_A,\n    SFX_SKELETON_DEATH_B,\n    SFX_SKELETON_DEATH_C,\n    SFX_FIRE_SHOT,\n    SFX_WEAPON_STAB_A,\n    SFX_WEAPON_STAB_B,\n    SFX_WEAPON_APPEAR,\n    SFX_UNK_BETA_630,\n    SFX_DEATH_AMBIENCE,\n    SFX_MAGIC_GLASS_BREAK,\n    SFX_UI_CONFIRM,\n    SFX_CANDLE_HIT,\n    SFX_TELEPORT_BANG_A,\n    SFX_TELEPORT_BANG_B,\n    SFX_SUC_APPEAR,\n    SFX_UNK_SCRAPE_A,\n    SFX_UNK_SCRAPE_B,\n    SFX_UNK_SCRAPE_C,\n    SFX_UNK_UI_SELECT,\n    SFX_START_SLAM_A,\n    SFX_START_SLAM_B,\n    SFX_START_SLAM_C,\n    SFX_ANIME_SWORD_A,\n    SFX_ANIME_SWORD_B,\n    SFX_ANIME_SWORD_C,\n    SFX_DOOR_OPEN,\n    SFX_WALL_DEBRIS_A,\n    SFX_WALL_DEBRIS_B,\n    SFX_WALL_DEBRIS_C,\n    SFX_STOMP_HARD_A,\n    SFX_STOMP_HARD_B,\n    SFX_STOMP_HARD_C,\n    SFX_STOMP_HARD_D,\n    SFX_STOMP_HARD_E,\n    SFX_STOMP_SOFT_A,\n    SFX_STOMP_SOFT_B,\n    SFX_SAVE_HEARTBEAT,\n    SFX_BAT_SCREECH,\n    SFX_DOOR_CLOSE_A,\n    SFX_DOOR_CLOSE_B,\n    SFX_UNK_UI_ERROR,\n    SFX_EXPLODE_FAST_A,\n    SFX_EXPLODE_FAST_B,\n    SFX_EXPLODE_A,\n    SFX_EXPLODE_B,\n    SFX_EXPLODE_C,\n    SFX_EXPLODE_D,\n    SFX_EXPLODE_E,\n    SFX_EXPLODE_F,\n    SFX_FM_EXPLODE_A,\n    SFX_FM_EXPLODE_B,\n    SFX_FM_EXPLODE_C,\n    SFX_FM_EXPLODE_D,\n    SFX_EXPLODE_SMALL,\n    SFX_WEAPON_HIT = 0x678,\n    SFX_HEART_PICKUP = 0x67A,\n    SFX_ITEM_PICKUP = 0x67C,\n    SFX_GOLD_PICKUP = 0x6A9,\n};\ntypedef struct {\n              u16 posX;\n              u16 posY;\n              u16 entityId;\n              u16 entityRoomIndex;\n              u16 params;\n} LayoutEntity;\ntypedef struct {\n    u16* layout;\n    TileDefinition* tileDef;\n    u32 params;\n    u16 zPriority;\n    u8 unkE;\n    u8 unkF;\n} MyLayer;\ntypedef struct {\n    MyLayer* fg;\n    MyLayer* bg;\n} MyRoomDef;\nextern LayoutEntity* g_pStObjLayoutHorizontal[];\nextern LayoutEntity* g_pStObjLayoutVertical[];\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern u16 g_ItemIconSlots[0x20];\nvoid InitRoomEntities(s32 objLayoutId);\nvoid UpdateRoomPosition();\nvoid Update(void);\nvoid HitDetection(void);\ns32 Random();\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\nvoid CreateEntityFromLayout(Entity* entity, LayoutEntity* initDesc);\nvoid DestroyEntity(Entity*);\nvoid DestroyEntitiesFromIndex(s16 index);\nvoid MoveEntity();\nvoid FallEntity(void);\nEntity* AllocEntity(Entity* start, Entity* end);\ntypedef struct EntityInit {\n    u16 animSet;\n    u16 animCurFrame;\n    u16 unk5A;\n    u16 palette;\n    u16 enemyId;\n    u16 : 16;\n} EntityInit;\nvoid InitializeEntity(u16 arg0[]);\ntypedef enum {\n    E_NONE,\n    E_BREAKABLE,\n    E_EXPLOSION,\n    E_PRIZE_DROP,\n    E_NUMERIC_DAMAGE,\n    E_RED_DOOR,\n    E_INTENSE_EXPLOSION,\n    E_SOUL_STEAL_ORB,\n    E_ROOM_FOREGROUND,\n    E_DUMMY_09,\n    E_EQUIP_ITEM_DROP,\n    E_DUMMY_0B,\n    E_DUMMY_0C,\n    E_DUMMY_0D,\n    E_DUMMY_0E,\n    E_DUMMY_0F,\n    E_DUMMY_10,\n    E_ID_14 = 0x14,\n    E_ID_15,\n    E_ID_26 = 0x26,\n    E_SECRET_BUTTON = 0x28,\n    E_SECRET_STAIRS = 0x29,\n} EntityIDs;\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\ns32 GetSideToPlayer();\nvoid MoveEntity();\nvoid SetStep(u8);\nvoid EntityExplosion(Entity*);\nvoid EntityUnkId14(Entity* entity);\nvoid EntityUnkId15(Entity* entity);\nextern const char* D_801A7984;\nextern const char* D_801A7990;\nextern const char* D_801A799C;\nextern s8 c_HeartPrizes[10];\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern bool g_isSecretStairsButtonPressed;\nextern bool g_isDraculaFirstFormDefeated;\nextern u16 D_80180574[];\nextern u16 g_InitializeEntityData0[];\nextern u16 D_80180598[];\nextern u16 g_eInitGeneric2[];\nextern u16 D_801805D4[];\nextern u16 D_801805E0[];\nextern u16 D_801805EC[];\nextern u16 D_80180604[];\nextern u16 D_80180610[];\nextern u16 D_8018061C[];\nextern u16 D_80180628[];\nextern ObjInit2 D_80180638[];\nextern s32 D_801806D0[];\nextern u8 D_801806F8[];\nextern u8 D_80180704[];\nextern u16 D_80180710[];\nextern s16 D_80180724[];\nextern s16 D_80180738[];\nextern s8 D_8018074C[];\nextern s16 D_80180758[];\nextern u8 D_80180770[];\nextern u8 D_80180830[];\nextern u8 D_8018083C[];\nextern u8 D_8018084C[];\nextern u8 D_8018085C[];\nextern u8 D_80180864[];\nextern u8 D_8018086C[];\nextern u8 D_8018087C[];\nextern u8 D_80180884[];\nextern u8 D_8018088C[];\nextern u8 D_80180894[];\nextern Point16 D_801808A0[];\nextern u16 D_801808B0[];\nextern s16 D_801808F8[];\nextern s32 D_80180908;\nextern s32 D_80180910;\nextern u8 D_80180914[];\nextern u8 D_80180924[];\nextern u8 D_80180934[];\nextern u8 D_80180944[];\nextern u8 D_80180954[];\nextern u8 D_80180964[];\nextern u8 D_8018097C[];\nextern u8 D_801809A4[];\nextern u8 D_80180A0C[];\nextern u8 D_80180A20[];\nextern u8 D_80180A2C[];\nextern u8 D_80180AA4[];\nextern u8 D_80180AB0[];\nextern u8 D_80180AC8[];\nextern u8 D_80180AD4[];\nextern u8 D_80180AEC[];\nextern u8 D_80180AFC[];\nextern u8 D_80180B20[];\nextern u8 D_80180B48[];\nextern u8 D_80180B58[];\nextern u8 D_80180B60[];\nextern u8 D_80180B80[];\nextern u8 D_80180BA0[];\nextern u8 D_80180BB8[];\nextern u8 D_80180BCC[];\nextern u8 D_80180BDC[];\nextern u16 D_80180A48[];\nextern Point16 D_80180A58[];\nextern u16 D_80180BE4[];\nextern s16 D_801810F4[];\nextern Point16 D_80181108[];\nextern s32 D_80181148;\nextern u32 D_8018114C;\nextern s16 D_80181150[];\nextern s16 D_8018129C[];\nextern u8 D_801813E8;\nextern u8 D_801814A8;\nextern u16 g_testCollEnemyLookup[];\nextern u8 g_testColluCoords[];\nextern u8 g_testCollvCoords[];\nextern u16 g_testCollElementLookup[10];\nextern u8 g_testColliFrames[10];\nextern u16 D_80181CAC[];\nextern u16 D_80181CDC[];\nextern u32 D_80181CF0[];\nextern s8 D_801A7B7C;\nextern Point32 D_801BEB64[];\nextern s32 D_801C2578;\nextern u32 D_801C257C;\nextern s32 D_801C2578;\nextern s16 D_80181990[];\nextern u16 g_InitializeData0[];\nextern u16 D_80181D74[];\nextern s16 D_80181E3C[];\nextern s16 D_80181E3E[];\nextern s16 D_80181EB0[];\nextern u32 D_80181EC0[];\nextern u16 D_80181F04[];\nextern u8 D_801824CC[];\nextern s8 D_801A7BDC;\nextern Point32 D_801BEB64[];\nextern s32 D_801C24C8;\nextern s16 D_801C24D4;\nextern s16 D_801C24D6;\nextern s16 D_801C24D8;\nextern s16 D_801C24DA;\nextern s16 D_801C24DC;\nextern s8 D_801C24DE;\nextern s8 D_801C24DF;\nextern Primitive* D_801C24E0;\nextern s32 D_801C24E4[];\nextern s32 D_801C2578;\nextern s32 D_801C2580;\nextern u16 g_ESoulStealOrbAngles[];\nextern s16 g_ESoulStealOrbSprt[];\nextern u8 g_ESoulStealOrbAnim[];\nextern u8 D_80180784[];\nextern u8 D_80180788[];\nextern u16 D_8018078C[];\nextern u16 D_80180790[];\nextern u16 D_80180794[];\nextern s16 D_80180798[];\nextern const char D_801829D8[];\nextern s32 D_801C24C8;\nextern s32 D_801C2504;\nextern u32 D_801C257C;\nextern s32 D_801C2580;\nextern Dialogue g_Dialogue;\n\nvoid SetWeaponProperties(Entity* self, s32 kind);\nvoid SetSpriteBank1(SpriteParts* animset);\nvoid SetSpriteBank2(SpriteParts* animset);\nvoid EntityWeaponAttack(Entity* self);\nvoid DestroyEntityWeapon(bool arg0);\n\nvoid LoadWeaponPalette(s32 clutIndex);\ns32 func_ptr_80170004(Entity* self);\nvoid func_ptr_80170008(Entity* self);\nvoid func_ptr_8017000C(Entity* self);\ns32 func_ptr_80170010(Entity* self);\ns32 func_ptr_80170014(Entity* self);\nint GetWeaponId(void);\nvoid EntityWeaponShieldSpell(Entity* self);\nvoid func_ptr_80170024(Entity* self);\nvoid func_ptr_80170028(Entity* self);\nvoid WeaponUnused2C(void);\nvoid WeaponUnused30(void);\nvoid WeaponUnused34(void);\nvoid WeaponUnused38(void);\nvoid WeaponUnused3C(void);\n\nvoid DestroyEntity(Entity* entity);\nvoid DecelerateX(s32 amount);\nvoid DecelerateY(s32 amount);\nvoid SetSpeedX(s32 speed);\n\nextern SpriteParts g_Animset[];\nextern s32 g_HandId;\n\nextern SpriteParts D_17E000_8017A040[];\nextern WeaponAnimation D_17E000_8017AEC4[];\nextern u16 D_17E000_8017AEF4[];\nextern u16 D_17E000_8017AEFC[];	1	\N	0d9122b76ee73fc0f2210d8ab81493035325fb71744d56e08235a38aefd9eff1	EntityWeaponAttack	ps1	180		EntityWeaponAttack	37500	[]	t	[]	\N	\N
VYRmX	2024-08-20 22:16:59.440903+00	2024-08-20 22:17:19.532795+00	gcc2.6.3-psx	-O2 -G0 -funsigned-char -gcoff -Wa,--expand-div --no-builtin	extern u16 D_154000_8017AFE0[];\n\ns32 func_ptr_80170004(Entity* self) {\n    Primitive* prim;\n    Point16 point;\n    u16 newXPos;\n    s32 i;\n    s32 newYPos;\n    s32 xOffset;\n    s16 primIndex;\n    s16 lifetime;\n    s32 b1_max;\n    s32 r1_max;\n    s32 b0_max;\n    s32 g0_max;\n    s32 g0_min;\n    s32 r0_max;\n    s32 r1_range;\n    s32 b1_range;\n    s32 g0_range;\n    s32 b0_range;\n    s32 r0_range;\n    u16 y;\n    u16 x;\n    s32 params;\n\n    u16 angle;\n\n    s16 temp_s4;\n    s16 temp_s7;\n    \n    \n    s32 b_scale;\n    s32 temp_s5;\n    s32 colorIndex;\n    s32 temp_v0_3;\n    s32 temp_v1_2;\n    u16 temp_a2;\n\n\n    if (((PLAYER.ext.weapon.anim - 0x41) >= 7U) ||\n        !g_Player.unk46) {\n        DestroyEntity(self);\n        return;\n    }\n\n    params = (((u8) self->params) & 0x7f);\n\n    if (params < 0x10) {\n        xOffset = 0xC;\n        if (PLAYER.facingLeft != 0) {\n            xOffset = -0xC;\n        }\n        self->posX.i.hi = xOffset + PLAYER.posX.i.hi;\n        newYPos = PLAYER.posY.i.hi - 0x4A;\n        newXPos = self->posX.i.hi;\n        self->posY.i.hi = PLAYER.posY.i.hi - 0x1A;\n    } else {\n        func_154000_8017B810(self, &point, params < 0x20);\n        newXPos = self->posX.i.hi + point.x;\n        newYPos = self->posY.i.hi + point.y;\n    }\n\n    self->facingLeft = PLAYER.facingLeft;\n\n    if (PLAYER.drawFlags & 2) {\n        if (params < 0x10) {\n            newYPos -= 3;\n            self->posY.i.hi -= 3;\n        }\n        if ((PLAYER.ext.weapon.anim - 0x43) < 2U) {\n            newYPos--;\n            self->posY.i.hi--;\n        } else {\n            newYPos -= 3;\n            self->posY.i.hi -= 3;\n        }\n    }\n\n    if (self->step != 1) {\n        if (self->step == 0) {\n        primIndex = g_api.AllocPrimitives(PRIM_LINE_G2, 0xA);\n        self->primIndex = primIndex;\n\n        if (primIndex == -1) {\n            DestroyEntity(self);\n            return;\n        }\n\n        colorIndex = (params & 0xF) * 8;\n        self->flags = 0x860000;\n        prim = &g_PrimBuf[self->primIndex];\n        for (i = 0; i < 10; i++) {\n            temp_a2 = D_154000_8017AFE0[colorIndex];\n            temp_v1_2 = 0xA - i;\n            r0_range = (D_154000_8017AFE0[colorIndex] * temp_v1_2);\n            r0_max = r0_range / 256;\n            \n            b_scale = D_154000_8017AFE0[colorIndex + 1];\n            b0_range = D_154000_8017AFE0[colorIndex + 1] * temp_v1_2;\n            b0_max = b0_range / 256;\n            g0_range = D_154000_8017AFE0[colorIndex + 2] * temp_v1_2;\n            g0_min = g0_range / 256;\n    \n            temp_v0_3 = 9 - i;\n            r1_range = D_154000_8017AFE0[colorIndex] * temp_v0_3;\n            r1_max = r1_range / 256;\n            b1_range = b_scale * temp_v0_3;\n            b1_max = b1_range / 256;\n            g0_max = D_154000_8017AFE0[colorIndex + 2] * temp_v0_3;\n\n            prim->r0 = (r0_max >> 2) - (r0_range >> 0x1F);\n            prim->b0 = (b0_max >> 2) - (b0_range >> 0x1F);\n            prim->g0 = (g0_min >> 2) - (g0_range >> 0x1F);\n            prim->r1 = (r1_max >> 2) - (r1_range >> 0x1F);\n            prim->b1 = (b1_max >> 2) - (b1_range >> 0x1F);\n            prim->g1 = g0_max / 10;\n            prim->x2 = rand();\n            prim->priority = PLAYER.zPriority + 4;\n            prim->drawMode = 0x335;\n            prim = prim->next;\n        }\n\n        self->ext.factory.unkAE = self->ext.factory.parent->ext.factory.unkAE;\n\n        SetWeaponProperties(self, 0);\n        self->enemyId = self->ext.factory.parent->enemyId;\n\n        if (params < 0x10) {\n            self->hitboxOffY = -0x14;\n            self->hitboxWidth = 4;\n            self->hitboxHeight = 0x14;\n            self->hitboxOffX = 0;\n            lifetime = 0x28;\n        } else {\n            lifetime = 6;\n            if (params >= 0x20) {\n                if (!(params & 0xF)) {\n                    self->hitboxOffX = 0x20;\n                    self->hitboxWidth = 0x20;\n                    self->hitboxOffY = 0;\n                    self->hitboxHeight = 6;\n                } else {\n                    self->hitboxState = 0;\n                }\n                lifetime = 6;\n            }\n        }\n        self->ext.weapon.lifetime = lifetime;\n        self->step++;\n        }\n    } else if (self->step == 1) {\n        self->ext.weapon.lifetime--;\n        if (!self->ext.weapon.lifetime) {\n            DestroyEntity(self);\n            return;\n        }\n    }\n\n    y = self->posY.i.hi;\n    x = self->posX.i.hi;\n    temp_s7 = newYPos - y;\n    temp_s4 = newXPos - x;\n    prim = &g_PrimBuf[self->primIndex];\n\n    for (i = 0; i < 10; i++) {\n        prim->x0 = x;\n        prim->y0 = y;\n        angle = prim->x2;\n        prim->x2 += 0x300;\n\n        prim->x1 = self->posX.i.hi;\n        prim->x1 += (temp_s4 * (i + 1)) / 10;\n        prim->x1 += (((rsin((s32) (s16) angle) >> 4) * 3) >> 8);;\n        x = prim->x1;\n\n        prim->y1 = self->posY.i.hi;\n        prim->y1 += (temp_s7 * (i + 1)) / 10;\n        prim->y1 -= (((rsin((s32) (s16) angle) >> 4) * 3) >> 8);\n        y = prim->y1 = y;\n\n        prim = prim->next;\n    }\n\n}	#define MU_DEATH_BALLAD 0x334\n#define NA_VO_DEATH_LAUGH 0x7A1\n#define PAL_DRA(x) (x)\n#define EvSpNEW 0x2000\n#define EvSpINT 0x0002\n#define PLAYER_STATUS_AXEARMOR 0x01000000\n#define CdlModeSpeedDouble 1\n#define CdlDataEnd 0x04\n#define PLAYER_STATUS_UNK1000 0x1000\n#define HwCARD_0 (DescHW | 0x12)\n#define HwCARD_1 (DescHW | 0x13)\n#define FWLOCK 0x0020\n#define SPU_VOICE_ADSR_DR (0x01 << 12)\n#define SAVE_FLAG_REPLAY (2)\n#define SE_INTRO_WIND_QUIET 0x32C\n#define MU_MOONLIGHT_NOCTURNE 0x340\n#define gte_stsxy(r0) \n#define KERNEL_H \n#define MU_SILENCE 0x33D\n#define RCntMdFR 0x0000\n#define SS_IMEDIATE 0\n#define PAL_TERMINATE() ((u_long*)-1)\n#define VERSION_US \n#define SFX_UNK_647 0x647\n#define PAD_LEFT 0x8000\n#define setlen(p,_len) (((P_TAG*)(p))->len = (u_char)(_len))\n#define MU_CRYSTAL_TEARDROPS_LOOP_POINT 0x30C\n#define EvSpACK 0x0010\n#define NA_VO_SU_NO_SCREAM 0x87B\n#define SS_TICK120 3\n#define MU_ABANDONED_PIT_LOOP_POINT 0x31A\n#define NA_SE_SU_CHARGE_PINKBALLS 0x6E2\n#define CdlForward 0x04\n#define SPAD(x) ((s32*)SP(x * sizeof(s32)))\n#define CD_SOUND_COMMAND_8 8\n#define FLAG_UNK_10000000 0x10000000\n#define NA_SE_EN_SPITTLEBONE_ACID_SPLAT 0x73C\n#define getaddr(p) (u_long)(((P_TAG*)(p))->addr)\n#define CdlGetTN 0x13\n#define MU_MARBLE_GALLERY 0x30D\n#define FIX(x) ((s32)((x) * 65536.0))\n#define HEART_VESSEL_INCREASE 5\n#define PLAYER_STATUS_UNK800000 0x800000\n#define JP_VO_YANAMI_JYOUJI_MESSAGE 0x34B\n#define OTSIZE 0x200\n#define EvStACTIVE 0x2000\n#define LIBAPI_H \n#define PRIMITIVE_H \n#define SFX_UNK_6B1 0x6B1\n#define SFX_UNK_6B2 0x6B2\n#define FLAG_UNK_400000 0x400000\n#define EvSpERROR 0x8000\n#define WEAPON_0_END (WEAPON_1_START - 1)\n#define NAMEOF(var) #var\n#define FLAG_UNK_800 0x800\n#define SPU_VOICE_ADSR_RR (0x01 << 14)\n#define JP_VO_SATOU_MASAHARU_MESSAGE 0x348\n#define blendMode drawMode\n#define SPU_VOICE_ADSR_AMODE (0x01 << 8)\n#define NA_SE_PL_TELEPORT 0x8BA\n#define RCntMdSC 0x0001\n#define SFX_UNK_6A0 0x6A0\n#define RCntMdSP 0x0000\n#define PLAYER_STATUS_UNK10 0x10\n#define COLOR_LEN ((COLOR_BPP) / 8)\n#define NA_SE_EN_BONE_SCIMITAR_SWORD_SLASH 0x66D\n#define MU_FINAL_TOCATTA 0x338\n#define SS_TICKMODE_MAX 6\n#define DRAW_UNK_100 0x100\n#define JP_VO_YOKOYAMA_CHISA_MESSAGE 0x34A\n#define CD_SOUND_COMMAND_14 14\n#define COMMON_H \n#define CD_SOUND_COMMAND_16 16\n#define PLAYER_STATUS_UNK40 0x40\n#define SPU_VOICE_SAMPLE_NOTE (0x01 << 6)\n#define CdlReadN 0x06\n#define MaxEntityCount 32\n#define PLAYER_STATUS_POISON 0x00004000\n#define CdlNop 0x01\n#define JP_VO_SH_GROAN 0x52E\n#define ALIGNED4 \n#define FLAG_UNK_4 0x4\n#define NA_VO_RI_IMPRESSIVE_ESCAPE 0x3DB\n#define JP_VO_YANADA_KIYOYUKI_MESSAGE 0x346\n#define HwCPU (DescHW | 0x10)\n#define MU_RAINBOW_CEMETERY_LOOP_POINT 0x308\n#define getcode(p) (u_char)(((P_TAG*)(p))->code)\n#define FIX_FRAC(x) (*(s16*)&(x))\n#define WARNF(...) _log(LOG_LEVEL_W, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define gte_ldv0(r0) \n#define gte_ldv3(r0,r1,r2) \n#define NA_SE_EV_WATER_SPLASH 0x7C2\n#define PAD_TRIANGLE 0x0010\n#define MU_THE_TRAGIC_PRINCE 0x311\n#define FONT_SPACE 4\n#define DISP_ALL_H 240\n#define EvSpPERROR 0x8001\n#define NA_SE_EN_GAIBON_FLAME 0x691\n#define EvMdNOINTR 0x2000\n#define MEMCPY memcpy\n#define gte_SetRotMatrix(r0) \n#define HwCNTL (DescHW | 0x08)\n#define OT_TYPE u_long\n#define DEMO_MAX_LEN 0x2000\n#define MU_CRYSTAL_TEARDROPS 0x30B\n#define MU_REQUIEM_FOR_THE_GODS_LOOP_POINT 0x306\n#define LIBGS_H \n#define DRAW_UNK_40 0x40\n#define MU_METAMORPHOSIS 0x327\n#define FLAG_UNK_08000000 0x08000000\n#define SFX_RICHTER_ATTACK_HIT 0x705\n#define getTPage(tp,abr,x,y) ((GetGraphType() == 1 || GetGraphType() == 2) ? ((((tp) & 0x3) << 9) | (((abr) & 0x3) << 7) | (((y) & 0x300) >> 3) | (((x) & 0x3ff) >> 6)) : ((((tp) & 0x3) << 7) | (((abr) & 0x3) << 5) | (((y) & 0x100) >> 4) | (((x) & 0x3ff) >> 6) | (((y) & 0x200) << 2)))\n#define __asm__(...) \n#define USE_MICRO_OPTIMIZATIONS 0\n#define LAYER_SEMI_TRANS 0x80\n#define JP_VO_SOSHITE 0x342\n#define PAL_UNK_OP3 3\n#define CdlSeekL 0x15\n#define CdlSeekP 0x16\n#define PAD_L1 0x0004\n#define PAD_L3 0x0200\n#define MU_DOOR_OF_HOLY_SPIRITS 0x315\n#define NA_SE_EN_SLOGRA_HURT 0x70C\n#define DISP_TITLE_H DISP_ALL_H\n#define LAYER_TPAGE_ALT 0x100\n#define setLineG4(p) setlen(p, 9), setcode(p, 0x5c), (p)->pad = 0x55555555\n#define JP_VO_KONAMI_5 0x350\n#define SET_SOUNDMODE_MONO 5\n#define MU_LOST_PAINTING 0x301\n#define setSprt8(p) setlen(p, 3), setcode(p, 0x74)\n#define TILE_SIZE 16\n#define STRINGIFY_(x) #x\n#define SFX_THUNDER 0x665\n#define MU_TOWER_OF_MIST 0x313\n#define NA_SE_EN_SLOGRA_SPEAR_PROJECTILE 0x690\n#define SS_SOFF 0\n#define NA_SE_EN_SLOGRA_BEAK_ATTACK 0x6C8\n#define FLT(x) ((s32)((x) * 4096.0))\n#define PAD_SELECT 0x0100\n#define EvSpUNKNOWN 0x0200\n#define PAD_R1 0x0008\n#define PAD_R2 0x0002\n#define GAMEBUTTONS (~(PAD_START | PAD_SELECT))\n#define SE_UNK_TE1_692 0x692\n#define SFX_UNK_668 0x668\n#define SS_REV 1\n#define NA_SE_VO_AXE_KNIGHT_SCREAM 0x767\n#define FLAG_UNK_04000000 0x04000000\n#define MENUCHAR(x) ((x) - 0x20)\n#define setXY0(p,_x0,_y0) (p)->x0 = (_x0), (p)->y0 = (_y0)\n#define setXY2(p,_x0,_y0,_x1,_y1) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1)\n#define setXY4(p,_x0,_y0,_x1,_y1,_x2,_y2,_x3,_y3) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2), (p)->x3 = (_x3), (p)->y3 = (_y3)\n#define ASM_RODATA __asm__(".section .rodata")\n#define EvSpCZ 0x0001\n#define SS_TICKVSYNC 5\n#define NA_VO_RI_DIE_MONSTER 0x358\n#define SPU_VOICE_ADSR_ADSR2 (0x01 << 18)\n#define gte_nclip() \n#define setPolyFT3(p) setlen(p, 7), setcode(p, 0x24)\n#define setPolyFT4(p) setlen(p, 9), setcode(p, 0x2c)\n#define FLAG_UNK_10000 0x10000\n#define LIBGTE_H \n#define MAX_SPRT_COUNT 0x200\n#define MU_WOOD_CARVING_PARTITA 0x309\n#define STAGE_WIDTH 256\n#define CdlModeSize0 0x10\n#define ELEMENT_STONE 0x200\n#define NUM_AVAIL_RELICS (NUM_RELICS - 2)\n#define SS_SEQ_TABSIZ 176\n#define DescEV 0xf1000000\n#define EvStUNUSED 0x0000\n#define NA_SE_EV_CLOCK_TICK 0x6A1\n#define setSprt16(p) setlen(p, 3), setcode(p, 0x7c)\n#define JP_VO_SH_SONO_TEIDO 0x530\n#define SE_UI_MAIN_MENU_SELECT 0x67D\n#define CdlModeAP 0x02\n#define SFX_UNK_641 0x641\n#define DescHW 0xf0000000\n#define MU_BLOOD_RELATIONS_LOOP_POINT 0x337\n#define SAVE_FLAG_CLEAR (1)\n#define NA_SE_EN_GAIBON_SMALL_FIREBALL 0x652\n#define DEBUGF(...) _log(LOG_LEVEL_D, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define CdlDataReady 0x01\n#define ANIMSET_OVL_FLAG 0x8000\n#define PAL_GLOW_ANIM 4\n#define NA_VO_AL_DEATH_DREAM_WORLD 0x391\n#define _ROMIO_H \n#define SE_SAVE_HEARTBEAT 0x64D\n#define FTRUNC 0x0400\n#define LEN(x) ((s32)(sizeof(x) / sizeof(*(x))))\n#define SPU_VOICE_ADSR_AR (0x01 << 11)\n#define CD_SOUND_COMMAND_10 10\n#define LIFE_VESSEL_INCREASE 5\n#define CdlStatSeekError 0x04\n#define CdlGetlocP 0x11\n#define NA_SE_EN_BLOOD_SKELETON_DISASSEMBLES 0x6CB\n#define PLAYER_STATUS_WOLF_FORM 0x00000004\n#define MU_DANCE_OF_PALES_LOOP_POINT 0x318\n#define PAL_UNK_OP3_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define RELIC_FLAG_FOUND 1\n#define EvSpCLOSE 0x0008\n#define CdlSetfilter 0x0d\n#define ELEMENT_CUT 0x40\n#define CdlGetlocL 0x10\n#define TcbStUNUSED 0x1000\n#define SFX_KARMA_COIN_HEADS 0x6B1\n#define GFX_ENTRY(x,y,w,h,data) (u_long*)((x) | ((y) << 16)), (u_long*)((w) | ((h) << 16)), (u_long*)data\n#define DescRC 0xf2000000\n#define FNBLOCK 0x0004\n#define setaddr(p,_addr) (((P_TAG*)(p))->addr = (u_long)(_addr))\n#define FLAG_DESTROY_IF_BARELY_OUT_OF_CAMERA 0x40000000\n#define SE_BOSS_DEFEATED 0x7D2\n#define DescTH DescMask\n#define setWH(p,_w,_h) (p)->w = _w, (p)->h = _h\n#define SPU_OFF 0\n#define LIBSPU_H \n#define FLAG_UNK_20000000 0x20000000\n#define PAL_COPY_INFO() MAKE_PAL_OP(PAL_COPY, 0)\n#define SFX_UNK_6E7 0x6E7\n#define PAD_CROSS 0x0040\n#define SCRIPT(...) {}\n#define gte_SetTransMatrix(r0) \n#define NA_VO_SU_GRUNT_1 0x870\n#define CdlModeRT 0x40\n#define CdlMAXDIR 128\n#define PLAYER_STATUS_UNK80000 0x80000\n#define JP_VO_SHIINA_HEKIRU_MESSAGE 0x345\n#define SET_UNK_12 0x12\n#define LOHU(x) (*(u16*)&(x))\n#define FLAG_UNK_1000 0x1000\n#define NA_SE_EN_ZOMBIE_EXPLODE 0x65E\n#define USE_CD_SPEED_DOUBLE 0\n#define NA_SE_EV_SWITCH_CLICK 0x676\n#define PAL_COPY 1\n#define SEEK_CUR 1\n#define OVL_EXPORT(x) ST0_ ##x\n#define NA_SE_VO_DR_HURT_1 0x853\n#define NA_SE_VO_DR_HURT_2 0x85B\n#define NA_SE_VO_DR_HURT_3 0x85C\n#define NA_SE_VO_DR_HURT_4 0x85D\n#define PLAYER_STATUS_UNK40000000 0x40000000\n#define addPrim(ot,p) setaddr(p, getaddr(ot)), setaddr(ot, p)\n#define PAD_R3 0x0400\n#define FALL_TERMINAL_VELOCITY 0x60000\n#define PLAYER_STATUS_UNK20000 0x20000\n#define __SPU_IRQCALLBACK_PROC \n#define MU_PROLOGUE 0x321\n#define ANIMSET_DRA(x) (x)\n#define SS_TICK240 2\n#define NA_SE_EN_SLOGRA_FLOOR_STOMP 0x64F\n#define setPolyF3(p) setlen(p, 4), setcode(p, 0x20)\n#define setPolyF4(p) setlen(p, 5), setcode(p, 0x28)\n#define FRCOM 0x2000\n#define MU_ENCHANTED_BANQUET 0x330\n#define DRAW_UNK02 0x02\n#define ELEMENT_FIRE 0x8000\n#define MAX_PRIM_COUNT 0x500\n#define setPolyG3(p) setlen(p, 6), setcode(p, 0x30)\n#define setPolyG4(p) setlen(p, 8), setcode(p, 0x38)\n#define FLAG_UNK_400 0x400\n#define SFX_UNK_689 0x689\n#define FLAG_UNK_10 0x10\n#define CdlModeDA 0x01\n#define DescMask 0xff000000\n#define NA_VO_SU_GRUNT_3 0x874\n#define LAYER_WRAP_BG 0x1000\n#define MU_BLOOD_RELATIONS 0x336\n#define NA_SE_VO_WO_BARK 0x706\n#define DISP_STAGE_H DISP_ALL_H\n#define DISP_STAGE_W 256\n#define SET_SOUNDMODE_STEREO 6\n#define STRINGIFY(x) STRINGIFY_(x)\n#define isendprim(p) ((((P_TAG*)(p))->addr) == 0xffffff)\n#define MU_TOWER_OF_MIST_LOOP_POINT 0x314\n#define MU_DANCE_OF_PALES 0x317\n#define MU_FESTIVAL_OF_SERVANTS 0x31D\n#define TOTAL_ENTITY_COUNT 256\n#define NA_VO_MA_IF_YOU_WEAR 0x3CE\n#define setUV3(p,_u0,_v0,_u1,_v1,_u2,_v2) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2)\n#define setUV4(p,_u0,_v0,_u1,_v1,_u2,_v2,_u3,_v3) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2), (p)->u3 = (_u3), (p)->v3 = (_v3)\n#define CdlNoIntr 0x00\n#define JP_VO_AKUMAJO 0x343\n#define CdlSetloc 0x02\n#define SE_INTRO_WIND_LOOP_POINT 0x32B\n#define PLAYER_STATUS_TRANSFORM (PLAYER_STATUS_BAT_FORM | PLAYER_STATUS_MIST_FORM | PLAYER_STATUS_WOLF_FORM)\n#define SE_WPN_PENTAGRAM 0x6E4\n#define LOWU(x) (*(u32*)&(x))\n#define NA_SE_EN_BLOOD_SKELETON_REASSEMBLES 0x6CC\n#define NA_SE_VO_DR_TAUNT_2 0x850\n#define DISP_MENU_W 384\n#define PLAYER_MARIA 2\n#define MU_I_AM_THE_WIND 0x33C\n#define CdlPause 0x09\n#define NA_VO_SU_LAUGH 0x86E\n#define SPRITESHEET_PTR 0x8013C020\n#define PLAYER_STATUS_CURSE 0x00008000\n#define DRAW_UNK_200 0x200\n#define FLAG_UNK_4000 0x4000\n#define SS_TICK50 4\n#define FLAG_UNK_02000000 0x02000000\n#define SFX_UNK_6FF 0x6FF\n#define SS_TICK60 1\n#define HwRTC0 (DescHW | 0x05)\n#define HwRTC1 (DescHW | 0x06)\n#define HwRTC2 (DescHW | 0x07)\n#define ANIMSET_OVL(x) ((x) | ANIMSET_OVL_FLAG)\n#define FRLOCK 0x0010\n#define NA_SE_VO_AL_PUNCH 0x6F1\n#define PLAYER_STATUS_UNK400000 0x400000\n#define NA_VO_RI_IMPRESSIVE_WHIP 0x3DA\n#define MAX_POLY_GT3_COUNT 0x30\n#define SS_REV_TYPE_DELAY 8\n#define F3DEX_GBI_2 1\n#define COLOR_BPP (16)\n#define CdlModeSF 0x08\n#define FLAG_UNK_20000 0x20000\n#define PAL_GLOW_DATA(data) (u_long*)(data)\n#define STAGE_ENTITY_START 64\n#define SS_REV_TYPE_STUDIO_A 2\n#define SS_REV_TYPE_STUDIO_C 4\n#define SS_WAIT_COMPLETED 1\n#define NA_SE_EN_COG_CLICK 0x642\n#define STRCPY(dst,src) __builtin_memcpy(dst, src, sizeof(src))\n#define PAL_COPY_DATA_(dst,data,len) (dst), (u_long*)(len), (u_long*)(data)\n#define ELEMENT_THUNDER 0x4000\n#define CdlPlay 0x03\n#define M2CTX 1\n#define DRAW_MENU 0x80\n#define TEST_BITS(x,y) ((x & y) == y)\n#define termPrim(p) setaddr(p, 0xffffffff)\n#define SFX_UNK_69D 0x69D\n#define SET_STOP_MUSIC 0xA\n#define FIX_TO_I(x) ((s32)((x) >> 16))\n#define MU_JP_FAIRY_SONG 0x33F\n#define NA_VO_SU_GRUNT_2 0x872\n#define SPU_REV_MODE (0x01 << 0)\n#define ELEMENT_DARK 0x800\n#define DRAW_COLORS 0x04\n#define PLAYER_RICHTER 1\n#define MAX_PRIM_ALLOC_COUNT 0x400\n#define NOT_IMPLEMENTED WARNF("not implemented")\n#define NA_SE_PL_MAX_HP_MP_INCREASED 0x687\n#define NA_VO_RI_ONLY_THE_COUNT 0x3DC\n#define O_NOBUF FNBUF\n#define WEAPON_0_START 0xE0\n#define DIAG_EOL 0xFF\n#define MAX_POLY_G4_COUNT 0x100\n#define MU_REQUIEM_FOR_THE_GODS 0x305\n#define SFX_UNK_8BB 0x8BB\n#define FLAG_DEAD 0x100\n#define PLAYER_STATUS_UNK2000 0x2000\n#define SPU_VOICE_ADSR_SL (0x01 << 15)\n#define NA_SE_VO_AXE_KNIGHT_THROW 0x766\n#define DISP_TITLE_W 512\n#define FLAG_UNK_800000 0x800000\n#define EvSpERANGE 0x0302\n#define SPU_VOICE_ADSR_SR (0x01 << 13)\n#define PAL_OVL_FLAG 0x8000\n#define setXY3(p,_x0,_y0,_x1,_y1,_x2,_y2) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2)\n#define HwDMAC (DescHW | 0x04)\n#define GAME_H \n#define NA_SE_SU_CREATE_CLONES 0x6D5\n#define SS_REV_TYPE_ECHO 7\n#define CdlMAXLEVEL 8\n#define NA_VO_SU_BLANK 0x86F\n#define CLAMP_MAX(v,max) ((v) > (max) ? (max) : (v))\n#define DISP_MENU_H DISP_ALL_H\n#define SPU_VOICE_ADSR_SMODE (0x01 << 9)\n#define LAYER_SHOW 1\n#define MU_RAINBOW_CEMETERY 0x307\n#define DRAW_TPAGE 0x10\n#define SIM_PTR 0x80280000\n#define setPolyGT3(p) setlen(p, 9), setcode(p, 0x34)\n#define setPolyGT4(p) setlen(p, 12), setcode(p, 0x3c)\n#define INCLUDE_ASM_H \n#define EvSpEDOM 0x0301\n#define NA_SE_SU_FLAPPING_WINGS 0x6C6\n#define PLAYER_ALUCARD 0\n#define JP_VO_KONAMI_1 0x34C\n#define JP_VO_KONAMI_2 0x34D\n#define RCntCNT1 (DescRC | 0x01)\n#define RCntCNT2 (DescRC | 0x02)\n#define RCntCNT3 (DescRC | 0x03)\n#define JP_VO_KONAMI_8 0x353\n#define JP_VO_KONAMI_9 0x354\n#define ERRORF(...) _log(LOG_LEVEL_E, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define JP_VO_KONAMI_12 0x357\n#define MU_DOOR_OF_HOLY_SPIRITS_LOOP_POINT 0x316\n#define SIZEOF_MENUCONTEXT (0x1E)\n#define JP_VO_KONAMI_3 0x34E\n#define HwGPU (DescHW | 0x02)\n#define SPU_VOICE_VOLL (0x01 << 0)\n#define SS_SON 1\n#define SPU_VOICE_VOLR (0x01 << 1)\n#define MU_LAND_OF_BENEDICTION 0x33E\n#define MAX_GOLD 999999\n#define INFOF(...) _log(LOG_LEVEL_I, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define OFF(type,field) ((size_t)(&((type*)0)->field))\n#define CdlBackward 0x05\n#define MU_WANDERING_GHOSTS 0x323\n#define SS_REV_TYPE_HALL 5\n#define NA_SE_EN_SLOGRA_HISSING 0x709\n#define STAGE STAGE_ST0\n#define NA_SE_PL_BT_FIREBALL 0x680\n#define SFX_UNK_661 0x661\n#define O_RDWR FREAD | FWRITE\n#define setTile(p) setlen(p, 3), setcode(p, 0x60)\n#define NA_SE_EN_SLOGRA_DEATH_EXPLOSION 0x697\n#define NA_SE_EV_WINDOW_LATCH 0x79D\n#define FLAG_HAS_PRIMS 0x00800000\n#define CdlAcknowledge 0x03\n#define SwMATH (DescSW | 0x02)\n#define NA_SE_PL_RIC_UNK_6E2 0x6E2\n#define SOUND_BAT_SCREECH 0x64E\n#define gte_SetGeomScreen(r0) \n#define DRAW_DEFAULT 0x00\n#define PLAYER_STATUS_ABSORB_BLOOD 0x02000000\n#define NA_SE_SY_MOVE_MENU_CURSOR 0x67B\n#define SE_UI_OVERWRITE_SELECT 0x6A4\n#define NA_VO_SU_SUCK_YOU_DRY 0x876\n#define gte_stszotz(r0) \n#define setShadeTex(p,tge) ((tge) ? setcode(p, getcode(p) | 0x01) : setcode(p, getcode(p) & ~0x01))\n#define CD_SOUND_COMMAND_12 12\n#define PAL_COPY_DATA(dst,data) (dst), (u_long*)LEN(data), (u_long*)(data)\n#define SE_DRE_FADE_TO_WHITE 0x65A\n#define NA_SE_EN_BLOODY_ZOMBIE_INJURED_SCREAM 0x746\n#define NA_SE_VO_DR_GRANT_ME_POWER 0x857\n#define RCntMdINTR 0x1000\n#define MU_LOST_PAINTING_LOOP_POINT 0x302\n#define FALL_GRAVITY 0x4000\n#define MU_PRAYER_LOOP_POINT 0x333\n#define NA_SE_CS_BURNING_PHOTOGRAPH 0x8BE\n#define PAD_SQUARE 0x0080\n#define RIC_PRG_PTR 0x8013C000\n#define MU_CURSE_ZONE 0x303\n#define SE_UI_SELECT 0x67B\n#define getlen(p) (u_char)(((P_TAG*)(p))->len)\n#define GET_PAL_OP_FREQ(x) (HIH(x))\n#define PAD_UP 0x1000\n#define MU_CURSE_ZONE_LOOP_POINT 0x304\n#define SS_REV_TYPE_SPACE 6\n#define FLAG_DRAW_ROTX 0x01\n#define FLAG_DRAW_ROTY 0x02\n#define FLAG_DRAW_ROTZ 0x04\n#define EvSpDE 0x0080\n#define LIBGPU_H \n#define O_RDONLY FREAD\n#define PAL_BULK_COPY 5\n#define SS_REV_TYPE_PIPE 9\n#define PAD_L2 0x0001\n#define PLAYER_STATUS_UNK80000000 0x80000000\n#define REBOUND_STONE_BOUNCE 0x6A4\n#define ELEMENT_HIT 0x20\n#define nextPrim(p) (void*)((u_long)(((P_TAG*)(p))->addr) | 0x80000000)\n#define FWRITE 0x0002\n#define SS_REV_TYPE_OFF 0\n#define PLAYER_STATUS_UNK40000 0x40000\n#define PLAYER_STATUS_STONE 0x00000080\n#define setUV0(p,_u0,_v0) (p)->u0 = (_u0), (p)->v0 = (_v0)\n#define NA_SE_EN_SLOGRA_SPEAR_SLASH 0x6C6\n#define HIH(x) (((s16*)&(x))[1])\n#define NA_VO_SU_HURT_1 0x879\n#define SS_NOTICK0 0\n#define MU_DANCE_OF_ILLUSIONS_LOOP_POINT 0x320\n#define MU_HEAVENLY_DOORWAY 0x31B\n#define CdlStatStandby 0x02\n#define MU_DANCE_OF_GOLD_LOOP_POINT 0x32F\n#define SE_UI_OVERWRITE_MSG 0x6AD\n#define MAX_TILE_COUNT 0x100\n#define MU_THE_TRAGIC_PRINCE_LOOP_POINT 0x312\n#define setSprt(p) setlen(p, 4), setcode(p, 0x64)\n#define DRAW_UNK_800 0x800\n#define setLineF2(p) setlen(p, 3), setcode(p, 0x40)\n#define setLineF3(p) setlen(p, 5), setcode(p, 0x48), (p)->pad = 0x55555555\n#define setLineF4(p) setlen(p, 6), setcode(p, 0x4c), (p)->pad = 0x55555555\n#define BUTTON_COUNT 8\n#define EvSpTRAP 0x1000\n#define setLineG2(p) setlen(p, 4), setcode(p, 0x50)\n#define setLineG3(p) setlen(p, 7), setcode(p, 0x58), (p)->pad = 0x55555555\n#define NA_SE_EN_GAIBON_SCREAM 0x70B\n#define SFX_KARMA_COIN 0x682\n#define NA_SE_VO_AL_WHAT 0x6F2\n#define DRAW_UNK_1000 0x1000\n#define SEEK_SET 0\n#define SS_SERIAL_A 0\n#define SS_SERIAL_B 1\n#define FLAG_DESTROY_IF_OUT_OF_CAMERA 0x80000000\n#define gte_rtps() \n#define gte_rtpt() \n#define N_VERTI_TILES 16\n#define NA_SE_EN_GAIBON_FLAME_OUT 0x65E\n#define FSCAN 0x1000\n#define gte_stsxy2(r0) \n#define gte_stsxy3(r0,r1,r2) \n#define CdlDiskError 0x05\n#define PLAYER_STATUS_UNK10000 0x10000\n#define TILE_MASK 0x0F\n#define setTile16(p) setlen(p, 2), setcode(p, 0x78)\n#define NA_SE_EN_AXE_KNIGHT_BREAK_AXE 0x66B\n#define EvSpTIMOUT 0x0100\n#define NA_SE_VO_DR_HERE_IS_TRUE_POWER 0x855\n#define O_CREAT FCREAT\n#define SPELL_FLAG_KNOWN 0x80\n#define FLAG_UNK_00200000 0x00200000\n#define NA_SE_EN_GAIBON_COLLAPSE 0x672\n#define PAL_BULK(dst,data) (u_long*)(dst), (u_long*)LEN(data), (u_long*)(data)\n#define FNBUF 0x4000\n#define MU_THE_DOOR_TO_THE_ABYSS 0x325\n#define NA_SE_BREAK_GLASS 0x68B\n#define NULL (0)\n#define LAYER_TPAGE_ID (0x20 | 0x40)\n#define CD_SOUND_COMMAND_FADE_OUT_1 3\n#define CD_SOUND_COMMAND_FADE_OUT_2 2\n#define MU_THE_DOOR_TO_THE_ABYSS_LOOP_POINT 0x326\n#define CdlSetmode 0x0e\n#define NA_VO_SU_DELICIOUS 0x8D1\n#define setUVWH(p,_u0,_v0,_w,_h) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u0) + (_w), (p)->v1 = (_v0), (p)->u2 = (_u0), (p)->v2 = (_v0) + (_h), (p)->u3 = (_u0) + (_w), (p)->v3 = (_v0) + (_h)\n#define SE_UI_ERROR 0x686\n#define CdlStatRead 0x20\n#define MAKE_PAL_OP(kind,freq) ((kind) | ((freq) << 0x10))\n#define CASTLE_MAP_PTR 0x801E0000\n#define NA_SE_EN_GAIBON_BIG_FIREBALL 0x655\n#define ELEMENT_HOLY 0x1000\n#define __attribute__(...) \n#define EvSpIOE 0x0004\n#define CD_SOUND_COMMAND_6 6\n#define NA_VO_MAR_AIM_HEAD 0x87F\n#define CdlStop 0x08\n#define SPU_VOICE_NOTE (0x01 << 5)\n#define SE_INTRO_WIND_QUIET_LOOP_POINT 0x32D\n#define SE_UI_DEBUG_SELECT 0x688\n#define DRAW_HIDE 0x08\n#define SE_HEALTH_REGAINED 0x68E\n#define TcbStACTIVE 0x4000\n#define CdlStandby 0x07\n#define SPU_VOICE_ADSR_RMODE (0x01 << 10)\n#define MU_PRAYER 0x332\n#define NA_SE_PL_MP_GAUGE 0x67D\n#define CdlMAXFILE 64\n#define PAL_GLOW_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define JP_VO_FUKAMI_RIKA_MESSAGE 0x344\n#define FLAG_UNK_80000 0x80000\n#define NA_VO_RI_TRIBUTE 0x35A\n#define SFX_UNK_6EA 0x6EA\n#define MU_FINAL_TOCATTA_LOOP_POINT 0x339\n#define MAX_BG_LAYER_COUNT 16\n#define MU_METAMORPHOSIS_II 0x328\n#define PAL_OVL(x) ((x) | ANIMSET_OVL_FLAG)\n#define PLAYER_STATUS_MIST_FORM 0x00000002\n#define SPU_VOICE_VOLMODEL (0x01 << 2)\n#define SPU_VOICE_VOLMODER (0x01 << 3)\n#define NA_SE_EN_SLOGRA_HURT_2 0x70A\n#define PLAYER_STATUS_BAT_FORM 0x00000001\n#define WEAPON1_PTR 0x8017D000\n#define SE_WPN_POWER_OF_SIRE 0x66A\n#define CdlStatSeek 0x40\n#define MU_ABANDONED_PIT 0x319\n#define CdlModeStream2 0x120\n#define SE_WPN_ALUCARD_SWORD_SWING 0x6A8\n#define NA_SE_EN_GAIBON_FLAP_WINGS 0x68D\n#define ELEMENT_WATER 0x400\n#define SS_REV_TYPE_ROOM 1\n#define SE_DEATH_TAKES_ITEMS 0x7A0\n#define SPU_VOICE_ADSR_ADSR1 (0x01 << 17)\n#define FLAG_UNK_01000000 0x01000000\n#define LOH(x) (*(s16*)&(x))\n#define HwCdRom (DescHW | 0x03)\n#define PLAYER_STATUS_UNK4000000 0x04000000\n#define NA_SE_EN_BLOODY_ZOMBIE_INJURED 0x748\n#define DRA_PRG_PTR 0x800A0000\n#define RELIC_FLAG_ACTIVE 2\n#define MAX_LINE_G2_COUNT 0x100\n#define SE_UNK_TE3_667 0x667\n#define MAX_ENV_COUNT 0x10\n#define NA_SE_VO_DR_PLAYTIME_IS_OVER 0x858\n#define O_NBLOCK FNBLOCK\n#define SE_UNK_TE3_679 0x679\n#define MAX_DRAW_MODES 0x400\n#define SET_STOP_SEQ 7\n#define PAD_RIGHT 0x2000\n#define MEMCARD_ID "BASLUS-00067DRAX00"\n#define N_HORIZ_TILES 17\n#define RCntMdNOINTR 0x2000\n#define HwVBLANK (DescHW | 0x01)\n#define STAGE_INVERTEDCASTLE_MASK 0x1F\n#define CdlModeStream 0x100\n#define HwSIO (DescHW | 0x0b)\n#define MU_DANCE_OF_ILLUSIONS 0x31F\n#define PLAYER_STATUS_UNK400 0x400\n#define MU_DRACULAS_CASTLE_LOOP_POINT 0x310\n#define gte_stopz(r0) \n#define NA_SE_SU_PETAL_ATTACK 0x6B0\n#define SE_TREE_BRANCH_SNAP 0x7A4\n#define CdlModeRept 0x04\n#define NA_SE_EN_SKELETON_THROW_BONE 0x6C8\n#define HwPIO (DescHW | 0x0a)\n#define SPU_REV_FEEDBACK (0x01 << 4)\n#define PAL_UNK_OP2_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define EvStWAIT 0x1000\n#define EvSpCOMP 0x0020\n#define FLAG_UNK_100000 0x100000\n#define O_NOWAIT FASYNC\n#define MU_DEATH_BALLAD_LOOP_POINT 0x335\n#define SE_UNK_TE3_6B8 0x6B8\n#define WEAPON0_PTR 0x8017A000\n#define NA_SE_EN_EXPLOSIVE_DEATH 0x693\n#define JP_VO_KONAMI_10 0x355\n#define JP_VO_KONAMI_11 0x356\n#define FLAG_UNK_200 0x200\n#define HwSPU (DescHW | 0x09)\n#define TYPES_H \n#define FCREAT 0x0200\n#define setSemiTrans(p,abe) ((abe) ? setcode(p, getcode(p) | 0x02) : setcode(p, getcode(p) & ~0x02))\n#define SS_IMMEDIATE 0\n#define DescUEV 0xf3000000\n#define CdlGetparam 0x0f\n#define DEMO_KEY_LEN 3\n#define SFX_UNK_6F0 0x6F0\n#define FLAG_UNK_8000 0x8000\n#define FONT_H 8\n#define FONT_W 8\n#define NA_SE_EN_BLOODY_ZOMBIE_HEMORRHAGE 0x749\n#define LIBETC_H \n#define BIBLE_SUBWPN_SWOOSH 0x8C3\n#define FONT_GAP FONT_W\n#define MU_BLACK_BANQUET 0x33A\n#define TcbMdPRI 0x2000\n#define setClut(p,x,y) ((p)->clut = getClut(x, y))\n#define SE_UNK_TE2_6B4 0x6B4\n#define PALETTE_LEN ((COLORS_PER_PAL) * ((COLOR_BPP) / 8))\n#define MU_ENCHANTED_BANQUET_LOOP_POINT 0x331\n#define NA_VO_DR_IT_WAS_NOT 0x359\n#define FREAD 0x0001\n#define EvStALREADY 0x4000\n#define setRGB0(p,_r0,_g0,_b0) (p)->r0 = _r0, (p)->g0 = _g0, (p)->b0 = _b0\n#define setRGB1(p,_r1,_g1,_b1) (p)->r1 = _r1, (p)->g1 = _g1, (p)->b1 = _b1\n#define setRGB2(p,_r2,_g2,_b2) (p)->r2 = _r2, (p)->g2 = _g2, (p)->b2 = _b2\n#define MU_BLACK_BANQUET_LOOP_POINT 0x33B\n#define SEEK_END 2\n#define RCntCNT0 (DescRC | 0x00)\n#define ELEMENT_CURSE 0x100\n#define CdlMute 0x0b\n#define JP_VO_KONAMI_4 0x34F\n#define DRAW_TPAGE2 0x20\n#define JP_VO_KONAMI_6 0x351\n#define catPrim(p0,p1) setaddr(p0, p1)\n#define JP_VO_KONAMI_7 0x352\n#define NA_SE_VO_AL_SOUL_STEAL 0x6F4\n#define SS_MIX 0\n#define CdlModeSize1 0x20\n#define FLAG_DRAW_UNK100 0x100\n#define PLAYER_STATUS_UNK200 0x200\n#define NA_VO_SU_HURT_2 0x87A\n#define SFX_UNK_64B 0x64B\n#define SFX_UNK_64C 0x64C\n#define CdlStatError 0x01\n#define SE_ITEM_YOINK 0x7A2\n#define ALUCARD_DARK_METAMORPHOSIS 0x705\n#define STAGE_PRG_PTR 0x80180000\n#define COLORS_PER_PAL (16)\n#define SFX_UNK_664 0x664\n#define setRGB3(p,_r3,_g3,_b3) (p)->r3 = _r3, (p)->g3 = _g3, (p)->b3 = _b3\n#define SFX_UNK_669 0x669\n#define PAD_COUNT 2\n#define O_WRONLY FWRITE\n#define STAGE_INVERTEDCASTLE_FLAG 0x20\n#define PLAYER g_Entities[PLAYER_CHARACTER]\n#define MU_DRACULAS_CASTLE 0x30F\n#define SFX_UNK_683 0x683\n#define SE_UNK_TE2_6B6 0x6B6\n#define HEART_VESSEL_RICHTER 30\n#define FACTORY(A0,BLUEPRINTNUM) (A0 << 8 | BLUEPRINTNUM)\n#define NA_SE_VO_AL_DYING 0x6F6\n#define SFX_UNK_69A 0x69A\n#define PLAYER_STATUS_UNK800 0x800\n#define CdlStatShellOpen 0x10\n#define DRAW_TRANSP 0x01\n#define SPU_REV_DELAYTIME (0x01 << 3)\n#define addPrims(ot,p0,p1) setaddr(p1, getaddr(ot)), setaddr(ot, p0)\n#define ELEMENT_POISON 0x80\n#define CdlStatPlay 0x80\n#define SPU_ON 1\n#define SS_NOTICK 0x1000\n#define SE_UNK_TE1_651 0x651\n#define FLAG_UNK_2000 0x2000\n#define SPU_VOICE_WDSA (0x01 << 7)\n#define PAL_UNK_OP2_DATA(data) (u_long*)(data)\n#define EvSpSYSCALL 0x4000\n#define FAMILIAR_PTR 0x80170000\n#define LAYER_CLUT_ALT 0x200\n#define SP(x) (0x1F800000 + (x))\n#define SQ(x) ((x) * (x))\n#define SE_UNK_TE1_66F 0x66F\n#define FLAG_DRAW_UNK10 0x10\n#define STAGE_H \n#define MAX_POLY_GT4_COUNT 0x300\n#define HwCARD (DescHW | 0x11)\n#define MU_FESTIVAL_OF_SERVANTS_LOOP_POINT 0x31E\n#define FLAG_DRAW_UNK20 0x20\n#define CdlModeSpeedNormal 0\n#define RCntMdGATE 0x0010\n#define SAVE_FLAG_NORMAL (0)\n#define SFX_UNK_6A3 0x6A3\n#define SFX_UNK_6AD 0x6AD\n#define setTile1(p) setlen(p, 2), setcode(p, 0x68)\n#define setTile8(p) setlen(p, 2), setcode(p, 0x70)\n#define FLAG_DRAW_UNK40 0x40\n#define SFX_UNK_6B0 0x6B0\n#define CdlDemute 0x0c\n#define JP_VO_KATSUTE 0x341\n#define setBlockFill(p) setlen(p, 3), setcode(p, 0x02)\n#define EvSpIOER 0x0400\n#define SFX_UNK_6DF 0x6DF\n#define FLAG_DRAW_UNK8 0x08\n#define SFX_UNK_6E0 0x6E0\n#define NA_SE_VO_AL_DARK_METAMORPHOSIS 0x6F3\n#define SFX_UNK_6E8 0x6E8\n#define SFX_UNK_6E9 0x6E9\n#define SFX_UNK_6EB 0x6EB\n#define SFX_UNK_6EC 0x6EC\n#define SFX_UNK_6ED 0x6ED\n#define SFX_UNK_6EE 0x6EE\n#define SFX_UNK_6EF 0x6EF\n#define EvSpIOEW 0x0800\n#define PAD_CIRCLE 0x0020\n#define FLAG_DRAW_UNK80 0x80\n#define SFX_UNK_6F7 0x6F7\n#define DIAG_EOS 0x00\n#define PLAYER_STATUS_UNK_20 0x00000020\n#define SFX_H \n#define CLAMP_MIN(v,min) ((v) < (min) ? (min) : (v))\n#define LIBSND_H \n#define PAL_UNK_OP2 2\n#define O_TAG u_long tag\n#define GET_PAL_OP_KIND(x) (LOH(x))\n#define MU_PROLOGUE_LOOP_POINT 0x322\n#define _LANGUAGE_C 1\n#define DRAW_UNK_400 0x400\n#define _S(x) (x)\n#define SE_UNK_TE1_6B3 0x6B3\n#define FAPPEND 0x0100\n#define WEAPON_1_START 0xF0\n#define DescSW 0xf4000000\n#define RENDERFLAGS_NOSHADOW 2\n#define SIM_CHR0 0x80280000\n#define SIM_CHR1 0x80284000\n#define CdlGetTD 0x14\n#define NA_SE_VO_DR_TAUNT_1 0x84F\n#define CdlReadS 0x1B\n#define MAX(a,b) ((a) > (b) ? (b) : (a))\n#define setcode(p,_code) (((P_TAG*)(p))->code = (u_char)(_code))\n#define getClut(x,y) ((y << 6) | ((x >> 4) & 0x3f))\n#define PAL_BULK_COPY_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define MU_MARBLE_GALLERY_LOOP_POINT 0x30E\n#define NA_SE_EN_BLOODY_ZOMBIE_DEATH_SCREAM 0x747\n#define SE_INTRO_WIND 0x32A\n#define SwCARD (DescSW | 0x01)\n#define DRAW_ABSPOS 0x2000\n#define FASYNC 0x8000\n#define JP_VO_OKIAYU_RYOUTAROU_MESSAGE 0x347\n#define SPU_VOICE_PITCH (0x01 << 4)\n#define DEMO_KEY_PTR 0x801E8000\n#define setTPage(p,tp,abr,x,y) ((p)->tpage = getTPage(tp, abr, x, y))\n#define _MIPS_SZLONG 32\n#define CdlComplete 0x02\n#define CdlModeSpeed 0x80\n#define SE_CASTLE_GATE_RISE 0x7A5\n#define CD_SOUND_COMMAND_START_XA 4\n#define SPU_REV_DEPTHL (0x01 << 1)\n#define SPU_REV_DEPTHR (0x01 << 2)\n#define EvMdINTR 0x1000\n#define VERSION "us"\n#define EvSpDR 0x0040\n#define PAL_UNK_OP3_DATA(data) (u_long*)(data)\n#define MIN(a,b) ((a) > (b) ? (b) : (a))\n#define MAXSPRT16 0x280\n#define RELIC_FLAG_DISABLE 0\n#define NA_SE_EN_DR_FIREBALL 0x660\n#define INCLUDE_ASM(FOLDER,NAME) __asm__(".pushsection .text\\n" "\\t.align\\t2\\n" "\\t.globl\\t" #NAME "\\n" "\\t.ent\\t" #NAME "\\n" #NAME ":\\n" ".include \\"asm/" VERSION "/" FOLDER "/" #NAME ".s\\"\\n" "\\t.set reorder\\n" "\\t.set at\\n" "\\t.end\\t" #NAME "\\n" ".popsection");\n#define SET_UNK_0B 0xB\n#define SET_UNK_0E 0xE\n#define SET_UNK_0F 0xF\n#define ELEMENT_ICE 0x2000\n#define JP_VO_SH_SCREAM 0x52F\n#define SET_UNK_10 0x10\n#define SET_UNK_11 0x11\n#define SPU_VOICE_LSAX (0x01 << 16)\n#define LOG_H \n#define COLOR16(r,g,b,a) (r) + ((g) << 5) + ((b) << 10) + ((a) << 15)\n#define setXYWH(p,_x0,_y0,_w,_h) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x0) + (_w), (p)->y1 = (_y0), (p)->x2 = (_x0), (p)->y2 = (_y0) + (_h), (p)->x3 = (_x0) + (_w), (p)->y3 = (_y0) + (_h)\n#define MU_DANCE_OF_GOLD 0x32E\n#define MU_WANDERING_GHOSTS_LOOP_POINT 0x324\n#define FLAG_UNK_40000 0x40000\n#define FLAG_DRAW_DEFAULT 0x00\n#define JP_VO_WAKAMOTO_NORIO_MESSAGE 0x349\n#define PAD_DOWN 0x4000\n#define TcbMdRT 0x1000\n#define GFX_TERMINATE() ((u_long*)-1)\n#define NA_VO_SU_CRYSTAL_1 0x87C\n#define NA_VO_SU_CRYSTAL_2 0x6AF\n#define SS_REV_TYPE_STUDIO_B 3\n#define PAD_START 0x0800\n#define LOW(x) (*(s32*)&(x))\ntypedef char int8_t;\ntypedef short int16_t;\ntypedef int int32_t;\ntypedef long long int64_t;\ntypedef unsigned char uint8_t;\ntypedef unsigned short uint16_t;\ntypedef unsigned int uint32_t;\ntypedef unsigned long long uint64_t;\ntypedef unsigned char u_char;\ntypedef unsigned short u_short;\ntypedef unsigned long u_long;\ntypedef unsigned int size_t;\ntypedef signed char s8;\ntypedef signed short s16;\ntypedef signed int s32;\ntypedef signed long long s64;\ntypedef unsigned char u8;\ntypedef unsigned short u16;\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\ntypedef signed char byte;\ntypedef enum { false, true } bool;\ntypedef union {\n    s32 val;\n    struct {\n        s16 lo;\n        s16 hi;\n    } i;\n} f32;\ntypedef struct {\n              s16 x;\n              s16 y;\n} Point16;\ntypedef struct {\n    u8 u;\n    u8 v;\n} uvPair;\ntypedef struct {\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 pad;\n} rgb_set;\nint sprintf(char* dst, const char* fmt, ...);\ntypedef enum {\n    LOG_LEVEL_D,\n    LOG_LEVEL_I,\n    LOG_LEVEL_W,\n    LOG_LEVEL_E,\n} LOG_LEVEL;\nvoid SetMinLogLevel(LOG_LEVEL level);\nvoid _log(unsigned int level, const char* file, unsigned int line,\n          const char* func, const char* fmt, ...);\ntypedef enum {\n    PLAYER_CHARACTER,\n    UNK_ENTITY_1,\n    UNK_ENTITY_2,\n    UNK_ENTITY_3,\n    UNK_ENTITY_4,\n    UNK_ENTITY_5,\n    UNK_ENTITY_6,\n    UNK_ENTITY_7,\n    UNK_ENTITY_8,\n    E_WEAPON = 0x10,\n    UNK_ENTITY_11 = 0x11,\n    UNK_ENTITY_12 = 0x12,\n    UNK_ENTITY_13 = 0x13,\n    UNK_ENTITY_20 = 0x20,\n    UNK_ENTITY_51 = 0x51,\n    UNK_ENTITY_100 = 0x100\n} EntityTypes;\nstruct DIRENTRY {\n               char name[20];\n               long attr;\n               long size;\n               struct DIRENTRY* next;\n              long head;\n               char system[4];\n};\nvoid EnterCriticalSection(void);\nvoid ExitCriticalSection(void);\nlong _card_info(long chan);\nlong _card_clear(long chan);\nlong _card_load(long chan);\nvoid InitCARD(long val);\nlong StartCARD(void);\nstruct EXEC {\n    unsigned long pc0;\n    unsigned long gp0;\n    unsigned long t_addr;\n    unsigned long t_size;\n    unsigned long d_addr;\n    unsigned long d_size;\n    unsigned long b_addr;\n    unsigned long b_size;\n    unsigned long s_addr;\n    unsigned long s_size;\n    unsigned long sp, fp, gp, ret, base;\n};\nextern void InitHeap(void*, unsigned long);\nextern long Load(char*, struct EXEC*);\nextern long Exec(struct EXEC*, long, char**);\nextern void _bu_init(void);\nextern long open(char* devname,\n                 int flag\n);\nextern long lseek(long, long, long);\nextern long read(long fd,\n                 void* buf,\n                 long n\n);\nextern long write(long, void*, long);\nextern int close(int fd\n);\nextern long format(char* fs\n);\nextern struct DIRENTRY* firstfile(char*, struct DIRENTRY*);\nextern struct DIRENTRY* nextfile(struct DIRENTRY*);\nextern long erase(char*);\nextern long Krom2RawAdd(unsigned long);\nextern void ChangeClearPAD(long);\nextern void StopPAD(void);\nint PAD_init(s32 , s32* );\nextern void FlushCache(void);\nextern void DeliverEvent(unsigned long, unsigned long);\nextern long TestEvent(unsigned long event\n);\nextern long OpenEvent(unsigned long, long, long, long (*func)());\nextern long EnableEvent(long);\nextern void _96_remove(void);\nextern long SetRCnt(unsigned long, unsigned short, long);\nextern long StartRCnt(unsigned long);\nextern long GetRCnt(unsigned long);\nextern long StopRCnt(unsigned long);\nextern long ResetRCnt(unsigned long);\nextern void exit();\nextern void puts(char*);\nextern char* strcat(char*, char*);\nextern int strcmp(char*, char*);\nextern int strncmp(char*, char*);\nextern char* strcpy(char*, char*);\nextern int strlen(char*);\nextern void* memcpy(unsigned char*, unsigned char*, int);\nextern void* memset(unsigned char*, unsigned char, int);\nextern int rand(void);\nextern void srand(unsigned int);\nextern void* malloc(size_t\n);\nextern void free(void*);\nint printf(char*, ...);\nint abs(int x);\ntypedef struct {\n    u_char minute;\n    u_char second;\n    u_char sector;\n    u_char track;\n} CdlLOC;\ntypedef struct {\n    u_char val0;\n    u_char val1;\n    u_char val2;\n    u_char val3;\n} CdlATV;\ntypedef struct {\n    u_short id;\n    u_short type;\n    u_short secCount;\n    u_short nSectors;\n    u_long frameCount;\n    u_long frameSize;\n    u_short width;\n    u_short height;\n    u_long dummy1;\n    u_long dummy2;\n    CdlLOC loc;\n} StHEADER;\ntypedef struct {\n    CdlLOC pos;\n    u_long size;\n    char name[16];\n} CdlFILE;\ntypedef void (*CdlCB)(u_char, u_char*);\nvoid def_cbsync(u_char intr, u_char* result);\nvoid def_cbready(u_char intr, u_char* result);\nvoid def_cbread(u_char intr, u_char* result);\nint CdInit(void);\nint CdStatus(void);\nint CdMode(void);\nint CdLastCom(void);\nint CdReset(int mode);\nvoid CdFlush(void);\nint CdSetDebug(int level);\nchar* CdComstr(u_char com);\nchar* CdIntstr(u_char intr);\nint CdSync(int mode, u_char* result);\nint CdReady(int mode, u_char* result);\nCdlCB CdSyncCallback(CdlCB func);\nCdlCB CdReadyCallback(CdlCB func);\nint CdControl(u_char com, u_char* param, u_char* result);\nint CdControlB(u_char com, u_char* param, u_char* result);\nint CdControlF(u_char com, u_char* param);\nint CdMix(CdlATV* vol\n);\nint CdGetSector(void* madr, int size);\nvoid(*CdDataCallback(void (*func)()));\nCdlLOC* CdIntToPos(int i, CdlLOC* p);\nint CdPosToInt(CdlLOC* p);\nCdlFILE* CdSearchFile(CdlFILE* fp, char* name);\nint CdRead(int sectors, u_long* buf, int mode);\nint CdReadSync(int mode, u_char* result);\nCdlCB CdReadCallback(CdlCB func);\nint CdRead2(long mode);\nvoid StClearRing(void);\nvoid StSetStream(u_long mode, u_long start_frame, u_long end_frame,\n                 void (*func1)(), void (*func2)());\nvoid StSetMask(u_long mask, u_long start, u_long end);\nu_long StGetNext(u_long** addr, u_long** header);\nu_long StFreeRing(u_long* base);\nint StGetBackloc(CdlLOC* loc);\nvoid StSetRing(u_long* ring_addr, u_long ring_size1);\nvoid StUnSetRing(void);\nstruct Callbacks {\n    const char* rcsid;\n    void* (*DMACallback)(int dma, void (*func)());\n    void* (*InterruptCallback)(int irq, void (*f)());\n    int (*ResetCallback)(void);\n    int (*StopCallback)(void);\n    int (*VSyncCallbacks)(int ch, void (*f)());\n    int (*RestartCallback)(void);\n};\nextern unsigned short D_8002C2BA;\nextern struct Callbacks* D_8002D340;\nint VSync(int mode);\nint VSyncCallback(void (*f)());\nint VSyncCallbacks(int ch, void (*f)());\nvoid* DMACallback(int dma, void (*func)());\nint ResetCallback(void);\nint StopCallback(void);\nint RestartCallback(void);\nint CheckCallback(void);\nlong SetVideoMode(long mode);\nvoid PadInit(int mode);\nu_long PadRead(int id);\nvoid PadStop(void);\ntypedef struct {\n              short x;\n              short y;\n              short w;\n              short h;\n} RECT;\ntypedef struct {\n    unsigned addr : 24;\n    unsigned len : 8;\n    u_char r0, g0, b0, code;\n} P_TAG;\ntypedef struct {\n    u_char r0, g0, b0, code;\n} P_CODE;\ntypedef struct {\n    u_long tag;\n              u_long code[15];\n} DR_ENV;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n} POLY_F3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    short x3, y3;\n} POLY_F4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char u0, v0;\n    u_short clut;\n    short x1, y1;\n    u_char u1, v1;\n    u_short tpage;\n    short x2, y2;\n    u_char u2, v2;\n    u_short pad1;\n} POLY_FT3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char u0, v0;\n    u_short clut;\n    short x1, y1;\n    u_char u1, v1;\n    u_short tpage;\n    short x2, y2;\n    u_char u2, v2;\n    u_short pad1;\n    short x3, y3;\n    u_char u3, v3;\n    u_short pad2;\n} POLY_FT4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, pad1;\n    short x1, y1;\n    u_char r2, g2, b2, pad2;\n    short x2, y2;\n} POLY_G3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n} POLY_GT3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char pad1;\n               short x1;\n               short y1;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char pad2;\n               short x2;\n               short y2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char pad3;\n               short x3;\n               short y3;\n} POLY_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char p3;\n               short x3;\n               short y3;\n               u_char u3;\n               u_char v3;\n               u_short pad3;\n} POLY_GT4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n} LINE_F2;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n} LINE_G2;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    u_long pad;\n} LINE_F3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n    u_char r2, g2, b2, p2;\n    short x2, y2;\n    u_long pad;\n} LINE_G3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    short x3, y3;\n    u_long pad;\n} LINE_F4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n    u_char r2, g2, b2, p2;\n    short x2, y2;\n    u_char r3, g3, b3, p3;\n    short x3, y3;\n    u_long pad;\n} LINE_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               short w;\n               short h;\n} SPRT;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_16;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_8;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short w, h;\n} TILE;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_16;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_8;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_1;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short w, h;\n} BLK_FILL;\ntypedef struct {\n               RECT clip;\n               short ofs[2];\n               RECT tw;\n               u_short tpage;\n               u_char dtd;\n               u_char dfe;\n               u_char isbg;\n               u_char r0, g0, b0;\n               DR_ENV dr_env;\n} DRAWENV;\ntypedef struct {\n               RECT disp;\n               RECT screen;\n               u_char isinter;\n               u_char isrgb24;\n               u_char pad0;\n               u_char pad1;\n} DISPENV;\ntypedef struct {\n               u_long tag;\n               u_long code[2];\n} DR_MODE;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_TWIN;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_AREA;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_OFFSET;\ntypedef struct {\n    u_long tag;\n    u32 code[2];\n} DR_PRIO;\ntypedef struct PixPattern {\n    u8 w;\n    u8 h;\n    u8 x;\n    u8 y;\n} PixPattern;\nextern u_short LoadTPage(\n    u_long* pix,\n    int tp,\n    int abr,\n    int x, int y,\n    int w, int h\n);\nextern u_short LoadClut2(u_long* clut, int x, int y);\nu_short GetClut(int x,\n                int y\n);\nu_short GetTPage(int tp, int abr, int x, int y);\nvoid DumpTPage(u_short tpage);\nvoid DumpClut(u_short clut);\nextern void AddPrim(void* ot, void* p);\nextern void SetShadeTex(void* p, int tge);\nextern void SetLineG2(LINE_G2* p);\nextern void SetPolyGT3(POLY_GT3* p);\nextern void SetPolyG4(POLY_G4* p);\nextern void SetPolyGT4(POLY_GT4* p);\nextern void SetSemiTrans(void* p, int abe);\nextern void SetSprt(SPRT* p);\nextern void SetSprt16(SPRT_16* p);\nextern void SetSprt8(SPRT_8* p);\nextern void SetTile(TILE* p);\nextern int ResetGraph(int mode);\nint SetGraphDebug(int level);\nextern int SetGraphReverse(int mode);\nextern int SetGraphQueue(int mode);\nextern u_long DrawSyncCallback(void (*func)());\nextern void FntLoad(int tx, int ty);\nint FntPrint(const char* fmt, ...);\nextern void SetDispMask(int mask);\nextern void SetDrawMode(DR_MODE* p, int dfe, int dtd, int tpage, RECT* tw);\nextern void SetDumpFnt(int id);\nextern int ClearImage(RECT* rect, u_char r, u_char g, u_char b);\nextern int DrawSync(int mode);\nextern int FntOpen(int x, int y, int w, int h, int isbg, int n);\nextern u_long* FntFlush(int id);\nextern int LoadImage(RECT* rect, u_long* p);\nextern int StoreImage(RECT* rect, u_long* p);\nextern int MoveImage(RECT* rect, int x, int y);\nextern u_long* ClearOTag(u_long* ot, int n);\nextern u_long* ClearOTagR(u_long* ot, int n);\nextern void DrawOTag(u_long* p);\nextern DRAWENV* PutDrawEnv(DRAWENV* env);\nextern DISPENV* PutDispEnv(DISPENV* env);\nextern DISPENV* SetDefDispEnv(DISPENV* env, int x, int y, int w, int h);\nextern DRAWENV* SetDefDrawEnv(DRAWENV* env, int x, int y, int w, int h);\nextern void SetDrawEnv(DR_ENV* dr_env, DRAWENV* env);\nvoid GsClearVcount(void);\nlong GsGetVcount();\nvoid GsInitVcount();\nvoid InitGeom();\ntypedef struct {\n    short m[3][3];\n    long t[3];\n} MATRIX;\ntypedef struct {\n    long vx, vy, vz;\n    long pad;\n} VECTOR;\ntypedef struct {\n    short vx, vy, vz;\n    short pad;\n} SVECTOR;\ntypedef struct {\n    u_char r, g, b;\n    u_char cd;\n} CVECTOR;\nMATRIX* RotMatrix(SVECTOR* r, MATRIX* m);\nvoid SetGeomOffset(long ofx, long ofy);\nlong RotTransPers(SVECTOR*, long*, long*, long*);\nvoid SetGeomScreen(long h);\nvoid SetRotMatrix(MATRIX* m);\nMATRIX* RotMatrixX(long r, MATRIX* m);\nMATRIX* RotMatrixY(long r, MATRIX* m);\nMATRIX* RotMatrixZ(long r, MATRIX* m);\nMATRIX* TransMatrix(MATRIX* m, VECTOR* v);\nMATRIX* ScaleMatrix(MATRIX* m, VECTOR* v);\nvoid SetTransMatrix(MATRIX* m);\nlong RotTransPers4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* v10, long* v11, long* v12,\n    long* v13,\n    long* p,\n    long* flag\n);\nlong RotAverageNclip4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* sxy0, long* sxy1, long* sxy2,\n    long* sxy3,\n    long* p,\n    long* otz,\n    long* flag\n);\nvoid NormalColorCol(SVECTOR* v0,\n                    CVECTOR* v1,\n                    CVECTOR* v2\n);\nMATRIX* RotMatrixY(long r,\n                   MATRIX* m\n);\nvoid SetBackColor(long rbk, long gbk, long bbk);\nvoid SetColorMatrix(MATRIX* m);\nvoid SetLightMatrix(MATRIX* m);\nvoid SetTransMatrix(MATRIX* m);\nvoid SetFarColor(long rfc, long gfc, long bfc);\nvoid SetFogNear(long a, long h);\nextern long SquareRoot0(long a);\nextern long SquareRoot12(long a);\nextern int rcos(int a);\nextern int rsin(int a);\nextern long ratan2(long y, long x);\ntypedef void (*SpuIRQCallbackProc)(void);\ntypedef struct {\n    short left;\n    short right;\n} SpuVolume;\ntypedef struct {\n               unsigned long voice;\n               unsigned long mask;\n               SpuVolume volume;\n               SpuVolume volmode;\n               SpuVolume volumex;\n               unsigned short pitch;\n               unsigned short note;\n               unsigned short sample_note;\n               short envx;\n               unsigned long addr;\n               unsigned long loop_addr;\n               long a_mode;\n               long s_mode;\n               long r_mode;\n               unsigned short ar;\n               unsigned short dr;\n               unsigned short sr;\n               unsigned short rr;\n               unsigned short sl;\n               unsigned short adsr1;\n               unsigned short adsr2;\n} SpuVoiceAttr;\ntypedef struct {\n    unsigned long mask;\n    long mode;\n    SpuVolume depth;\n    long delay;\n    long feedback;\n} SpuReverbAttr;\nextern long SpuSetTransferMode(long mode);\nextern unsigned long SpuWrite(unsigned char* addr, unsigned long size);\nextern long SpuSetReverbModeParam(SpuReverbAttr* attr);\nextern void SpuSetVoiceAttr(SpuVoiceAttr* arg);\nextern void SpuSetKey(long on_off, unsigned long voice_bit);\nextern long SpuMallocWithStartAddr(unsigned long addr, long size);\nextern SpuIRQCallbackProc SpuSetIRQCallback(SpuIRQCallbackProc);\nextern void SsSeqClose(short seq_access_num);\nextern void SsSetMVol(short voll, short volr);\nextern void SsSetSerialAttr(char s_num, char attr, char mode);\nextern void SsSetSerialVol(short s_num, short voll, short volr);\nextern long SpuClearReverbWorkArea(long rev_mode\n);\nvoid SsInitHot(void);\nchar SsSetReservedVoice(char voices\n);\nvoid SsSetTickMode(long tick_mode\n);\nvoid SsStart(void);\nshort SsUtKeyOnV(\n    short voice,\n    short vabId,\n    short prog,\n    short tone,\n    short note,\n    short fine,\n    short voll,\n    short volr\n);\nshort SsUtSetVVol(short vc,\n                  short voll,\n                  short volr\n);\nvoid SpuGetAllKeysStatus(char* status);\nvoid SsSetTableSize(\n    char* table,\n    short s_max,\n    short t_max\n);\nvoid SsSeqStop(short seq_access_num\n);\nvoid SsSetMono(void);\nvoid SsSetStereo(void);\ns32 SsVabOpenHeadSticky(\n    u_char* addr,\n    u_long vabid,\n    u_long sbaddr\n);\ns32 SsVabTransBodyPartly(\n    u_char* addr,\n    u_long bufsize,\n    u_long vabid\n);\ns32 SsVabTransCompleted(\n    short immediateFlag\n);\nvoid SsUtSetReverbType(short type);\nvoid SsUtReverbOn(void);\nvoid SsUtSetReverbDepth(\n    short ldepth,\n    short rdepth\n);\nvoid SsUtSetReverbDelay(short delay);\ntypedef long Event;\ntypedef enum {\n    PRIM_NONE,\n    PRIM_TILE,\n    PRIM_LINE_G2,\n    PRIM_G4,\n    PRIM_GT4,\n    PRIM_GT3,\n    PRIM_SPRT,\n    PRIM_ENV,\n    PRIM_TILE_ALT = PRIM_TILE | 0x10,\n    PRIM_LINE_G2_ALT = PRIM_LINE_G2 | 0x10,\n    PRIM_G4_ALT = PRIM_G4 | 0x10\n} PrimitiveType;\ntypedef struct Vertex {\n              u8 r;\n              u8 g;\n              u8 b;\n              u8 p;\n              s16 x;\n              s16 y;\n              u8 u;\n              u8 v;\n              u16 param;\n} Vertex;\ntypedef struct {\n               SVECTOR* v0;\n               SVECTOR* v1;\n               SVECTOR* v2;\n               SVECTOR* v3;\n} SVEC4;\ntypedef struct {\n    s16 x;\n    s16 y;\n    u8 u;\n    u8 v;\n    u16 param;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 p;\n} VertexFake;\ntypedef struct Prim {\n    struct Prim* next;\n    struct Vertex v[4];\n} Prim;\ntypedef struct Primitive {\n               struct Primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               s16 x2;\n               s16 y2;\n               u8 u2;\n               u8 v2;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               s16 x3;\n               s16 y3;\n               u8 u3;\n               u8 v3;\n               u16 drawMode;\n} Primitive;\ntypedef struct FakePrim {\n    struct FakePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 w;\n               u8 h;\n               u16 clut;\n               f32 posX;\n               f32 posY;\n               f32 velocityX;\n               f32 velocityY;\n               s16 x2;\n               s16 y2;\n               s16 delay;\n               u16 priority;\n               f32 accelerationX;\n               f32 accelerationY;\n               s16 timer;\n               u16 drawMode;\n} FakePrim;\ntypedef struct PrimLineG2 {\n    struct PrimLineG2* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               s16 xLength;\n               s16 yLength;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               f32 velocityX;\n               f32 velocityY;\n               s32 angle;\n               s16 delay;\n               u16 priority;\n               f32 preciseX;\n               f32 preciseY;\n               s16 timer;\n               u16 drawMode;\n} PrimLineG2;\ntypedef struct {\n    struct primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               f32 y1_f32;\n               s16 unk24;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               f32 y1_f32_velocity;\n               s16 unk30;\n               u16 drawMode;\n} draculaPrimitive;\ntypedef struct AxePrim {\n    struct AxePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               s32 unk0C;\n               s32 unk10;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               s16 unk1C;\n              s16 unk1E;\n               s16 x2;\n               s16 y2;\n               u8 step;\n               u16 priority;\n               s32 pad;\n               s16 timer;\n               s16 unk2E;\n               s16 unk30;\n               u16 drawMode;\n} AxePrim;\nstruct Entity;\ntypedef void (*PfnEntityUpdate)(struct Entity*);\ntypedef union {\n    s32 unk;\n    void* ptr;\n    struct {\n        s8 unk0, unk1, unk2, unk3;\n    } S8;\n    struct {\n        u8 unk0, unk1, unk2, unk3;\n    } U8;\n    struct {\n        s16 unk0, unk2;\n    } S16;\n    struct {\n        u16 unk0, unk2;\n    } U16;\n} Multi;\ntypedef union {\n    s16 s;\n    u16 u;\n    struct {\n        s8 unk0, unk1;\n    } S8;\n    struct {\n        u8 unk0, unk1;\n    } U8;\n} Multi16;\nstruct Entity;\ntypedef struct ET_Generic {\n               Multi16 unk7C;\n    union {\n                   u16 modeU16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeU8;\n    } unk7E;\n    union {\n                   s32 modeS32;\n                   struct Entity* entityPtr;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeS8;\n    } unk80;\n               Multi unk84;\n               Multi unk88;\n    union {\n                   struct Entity* entityPtr;\n                   struct Primitive* primPtr;\n                   s32 modeS32;\n        struct {\n                       u16 unk0;\n                       u16 unk2;\n        } modeU16;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk8C;\n               s16 unk90;\n               s16 unk92;\n               u8 unk94;\n               u8 unk95;\n               s16 unk96;\n               s32 unk98;\n               struct Entity* unk9C;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               u8 unkAC;\n               s8 unkAD;\n               s8 unkAE;\n               s8 unkAF;\n               s16 unkB0;\n               s16 unkB2;\n               s16 unkB4;\n               s16 unkB6;\n    union {\n                   void (*unkFuncB8)(struct Entity*);\n                   struct Entity* entityPtr;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n                       u8 unk2;\n                       u8 unk3;\n        } modeU8;\n    } unkB8;\n} ET_Generic;\ntypedef struct {\n               u16 timer;\n               s16 unk7E;\n               u8 aliveTimer;\n               s8 unk81;\n               s16 unk82;\n               s32 fallSpeed;\n               s16 gravity;\n               s16 unk8A;\n               s16 iconSlot;\n               s16 unk8E;\n               s16 unk90;\n               s16 unk92;\n               s32 castleFlag;\n} ET_EquipItemDrop;\ntypedef struct {\n               u32 unk[14];\n               u16 unkB4;\n               s16 unkB6;\n               PfnEntityUpdate update;\n} ET_HeartDrop;\ntypedef struct {\n               u16 timer;\n               u16 size;\n               u32 speed;\n} ET_BloodDroplets;\ntypedef struct {\n               u16 nPrims;\n               u16 nDigits;\n               u8 digits[4];\n               u16 timer;\n               s16 unk86;\n               u16 unk88;\n               s16 unk8A;\n} ET_NumericDamage;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u16 sparkleCycle;\n    u16 sparkleAnim;\n    u32 unk84;\n    u32 unk88;\n    s16 iconSlot;\n    u16 unk8E;\n    u16 floatTimer;\n    u16 unk92;\n    s32 yFloatSpeed;\n} ET_RelicOrb;\ntypedef struct {\n               u32 unused7C;\n               s16 unused80;\n               s16 unk82;\n               s16 angle;\n               s16 unk86;\n               u8 sideToPlayer;\n               u8 showedMessage;\n} ET_Door;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               struct Primitive* unk84;\n               struct Primitive* unk88;\n               struct Primitive* unk8C;\n               s16 unk90;\n               s16 unk92;\n} ET_StagePopup;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               struct Primitive* unk84;\n               struct Primitive* unk88;\n               u8 unk8C;\n} ET_StagePopupJP;\ntypedef struct {\n               char* label;\n               u16 width;\n               u16 height;\n               s16 unk84;\n               u16 duration;\n} ET_MessageBox;\ntypedef struct {\n               s16 lifetime;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               struct Entity* some_ent;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s32 accelerationX;\n               s32 accelerationY;\n               s32 unkA4;\n               s32 unkA8;\n               u8 anim;\n               u8 unkAD;\n               s16 equipId;\n} ET_Weapon;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    s32 unk80;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n} ET_KarmaCoin;\ntypedef struct {\n    s16 angle;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 xPos;\n    s16 unk8A;\n    struct Entity* parent;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 accelerationX;\n    s32 accelerationY;\n    s32 unkA4;\n    s32 unkA8;\n    u8 anim;\n    u8 unkAD;\n    s16 equipId;\n} ET_HeavenSword;\ntypedef struct {\n    s16 angle;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s32 unk84;\n    s16 xPos;\n    s16 unk8A;\n    struct Entity* parent;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 accelerationX;\n    s32 accelerationY;\n    s32 unkA4;\n    s32 unkA8;\n    u8 anim;\n    u8 unkAD;\n    s16 equipId;\n} ET_HeavenSword2;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               byte pad[10];\n               u8 anim;\n               u8 padAD;\n               s16 unkAE;\n} ET_Shield;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               u16 unk80;\n               s16 pal;\n               s16* palettePtr;\n               u16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               byte pad[14];\n               u8 anim;\n               u8 padAD;\n               s16 unkAE;\n} ET_DarkShield;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               struct Entity* target;\n               s16 unk94;\n               s16 unk96;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               byte pad[6];\n               s16 unkAE;\n} ET_MedusaShieldLaser;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n} ET_ShamanShieldStar;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               u8 unk9C;\n               byte pad[14];\n               u8 anim;\n               s16 unkAE;\n} ET_HeraldShieldSwirlEffect;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    s32 unk80;\n    s16 pad[21];\n    s16 foodId;\n} ET_Food;\ntypedef struct {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 attackMode;\n               u8 flag;\n               u8 nearDeath;\n               s32 speed;\n               s16 angle;\n               char pad_8E[0xE];\n               u8 pickupFlag;\n               u8 grabedAscending;\n} ET_GaibonSlogra;\ntypedef struct {\n               u16 angle;\n               u16 unk7E;\n               u16 unk80;\n               s16 unk82;\n} ET_SoulStealOrb;\ntypedef struct {\n               Primitive* primBg;\n               s32 unused80;\n               Primitive* primFade;\n               s32 unk88;\n} ET_WarpRoom;\ntypedef struct {\n               char pad_0[0x8];\n               u8 timer;\n               char pad_85[0x1];\n               s8 timer2;\n               char pad_87[0x5];\n               u16 palette;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_0[0x6];\n               s8 timer;\n               char pad_87[0x5];\n               s16 rotation;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman_2;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               s16 unk8C;\n               s16 unk8E;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s32 unkA0;\n               struct Entity* target;\n               s16 unkA8;\n               s16 unkAA;\n               s16 cameraX;\n               s16 cameraY;\n               s16 unkB0;\n               s16 unkB2;\n               struct Entity* follow;\n} ET_Bat;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    struct Primitive* unk84;\n    s16 unk88;\n    s16 unk8A;\n} ET_BatEcho;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n               char pad_8A[0x3];\n               u8 unk8D;\n               char pad_8E[0xE];\n               s16 unk9C;\n               struct Entity* next;\n} ET_801CF254;\ntypedef struct {\n               char pad_0[0x4];\n               s16 unk80;\n               char pad_82[0xA];\n               u8 unk8C;\n               char pad_8D[0xF];\n               u16 unk9C;\n               char pad_9E[0x8];\n               s16 unkA6;\n} ET_GurkhaSword;\ntypedef struct ET_Dracula {\n               char pad_7C[4];\n               struct draculaPrimitive* unk80;\n               struct draculaPrimitive* unk84;\n               char pad_88[4];\n               s16 unk8C;\n               char pad_8E[0x2];\n               u8 unk90;\n               char pad91;\n               u8 unk92;\n               char pad93;\n               u8 unk94;\n               char pad_95[0x3];\n               s16 unk98;\n               char pad_9A[0x2];\n               s16 unk9C;\n               char pad_9E[0x2];\n               u8 unkA0;\n               u8 unkA1;\n               u8 unkA2;\n               char pad_A3[0x9];\n               struct Primitive* prim;\n} ET_Dracula;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               s32 unk84;\n               s16 unk88;\n               char pad_8A[0x2];\n               s16 unk8C;\n               s16 unk8E;\n} ET_StageTitleCard;\ntypedef struct ET_Succubus {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 facingLeft;\n               u8 unk85;\n               u8 nextAttack;\n               u8 unk87;\n               u16 nextStep;\n               char pad_8A[0x4];\n               s16 yOffset;\n               char pad_90[0xC];\n               struct Entity* real;\n               s16 clonePosX;\n               s16 unkA2;\n} ET_Succubus;\ntypedef struct {\n               u16 timer;\n               char pad_7E[2];\n               s32 unk80;\n} ET_RoomTransition2;\ntypedef struct {\n               u8 pad0[0x4];\n               s32 unk80;\n               s16 unk84;\n               u8 pad86[2];\n               u8 unk88;\n               u8 unk89;\n} ET_801B3C38;\ntypedef struct {\n               u16 unk7C;\n} ET_801BCC4C;\ntypedef struct ET_CastleDoor {\n               struct Primitive* prim;\n               s16 timer;\n               char pad_82[0x2];\n               s16 rotZ;\n} ET_CastleDoor;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               s16 unk82;\n               s16 timer;\n} ET_ShuttingWindow;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               u16 unk84;\n} ET_DeathSkySwirl;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s32 elevatorTarget;\n} ET_Elevator;\ntypedef struct {\n               s32 pad[8];\n               s16 unk84;\n               s16 unk86;\n               s16* unk88;\n} ET_801D0B40;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0xC];\n               u8 unk8C;\n               u8 unk8D;\n               char pad_8E[0xE];\n               u16 unk9C;\n} ET_801D1BB8;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n} ET_801D0B78;\ntypedef struct {\n               s32 unk7C;\n               s16 unk80;\n               s16 unk82;\n    union {\n                   s32 val;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk84;\n               u16 unk88;\n} ET_WaterEffects;\ntypedef struct {\n               char pad_0[4];\n               s16 unk80;\n               char pad_82[2];\n               u8 unk84;\n               char pad_85[3];\n               u16 unk88;\n               char pad_8A[2];\n               u8 unk8C;\n               u8 unk8D;\n               u8 unk8E;\n               char pad_8E[13];\n               s16 rotZ;\n               s16 unk9E;\n               struct Entity* parent;\n               s16 unkA4;\n               s16 unkA6;\n               u8 unkA8;\n               char pad_A9[0x7];\n               u16 unkB0[0x6];\n} ET_GurkhaHammer;\ntypedef struct {\n               char pad_0[0x20];\n               s16 unk9C;\n               char pad_A0[0x6];\n               s16 unkA4;\n               s16 unkA6;\n               char pad_A8[0xC];\n               u16 unkB4;\n} ET_801CDFD8;\ntypedef struct {\n               char pad_0[0x8];\n               u8 unk84;\n               char pad_85[0x9];\n               u8 unk8E;\n               char pad_8F[0x20];\n               s16 unkB0;\n} ET_801CE4CC;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n} ET_TransparentWater;\ntypedef struct {\n               struct Primitive* prim;\n               s32 timer;\n} ET_HeartRoomGoldDoor;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s8 unk84;\n               char pad_85[0x1];\n               s8 unk86;\n} ET_MermanWaterSplash;\ntypedef struct {\n               s32 playerVelocity;\n} ET_CastleDoorTransition;\ntypedef struct {\n               s8 unk7C;\n} ET_AlucardController;\ntypedef struct {\n               u16 unk7C;\n} ET_ForegroundTree;\ntypedef struct {\n               u16 unk7C;\n               u16 unk7E;\n               s16 unk80;\n} ET_FadeToWhite;\ntypedef struct {\n               u16 unk7C;\n} ET_DeathStolenItems;\ntypedef struct {\n               u16 unk7C;\n               char pad_7E[0x2];\n               s16 posX;\n               s16 posY;\n               u16 moveTimer;\n               u16 moveDirection;\n} ET_Death;\ntypedef struct {\n               u8 unk7C;\n               char pad_7D[0x3];\n               s16 unk80;\n               s16 unk82;\n               struct Entity* unk84;\n} ET_SpittleBone;\ntypedef struct {\n    Primitive* prim;\n    char pad[0x24];\n    s16 unkA4;\n    s16 unkA6;\n    char padd[4];\n    u8 anim;\n    char pad2[0x8];\n    struct Entity* unkB8;\n} ET_Player;\ntypedef struct {\n    u8 unk0;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n} ET_EntitySlot1;\ntypedef struct {\n    char pad[0x32];\n    s16 unkAE;\n} ET_EntitySlot16;\ntypedef struct {\n               s16 unk7C;\n} ET_Entity12;\ntypedef struct {\n    u8 fiveFrameCounter;\n    struct Entity* parent;\n    char pad[8];\n    u16 parentId;\n} ET_Entity13;\ntypedef struct {\n    s16 t;\n} ET_TimerOnly;\ntypedef struct {\n    char pad[8];\n    struct Primitive* prim;\n} ET_AxeKnight;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 childId;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               s16 unkAC;\n               s16 unkAE;\n               s16 unkB0;\n               s16 unkB2;\n} ET_EntFactory;\ntypedef struct {\n    char pad[8];\n    s32 unk8;\n} unk_sub_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    byte pad[14];\n    unk_sub_8011E4BC* unk8C;\n} ET_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_HellfireHandler;\ntypedef struct {\n    s16 stoneAngle;\n    s16 lifeTimer;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_ReboundStone;\ntypedef struct {\n    s16 timer;\n} ET_Vibhuti;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 pad[24];\n               s16 unkB0;\n} ET_GiantSpinningCross;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_8017091C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 pad[0x16];\n    s16 unkB0;\n} ET_80170F64;\ntypedef struct {\n    s16 timer;\n    s16 size;\n} ET_stopwatchCircle;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    f32 unk84;\n    s32 unk88;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 unk96;\n    struct Entity* unk98;\n    s32 pad[5];\n    s16 unkB0;\n} ET_801719A4;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 unk96;\n    struct Entity* unk98;\n    s32 pad[5];\n    s16 unkB0;\n} ET_BibleSubwpn;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s32 unk84;\n    s32 unk88;\n    struct Entity* parent1;\n    s32 pad[10];\n    struct Entity* parent2;\n} ET_80128C2C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_80161FF0;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n} ET_80162870;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n} ET_8016E9E4;\ntypedef struct {\n    u8 unk7C;\n    u8 unk7D[3];\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_801CC820;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    struct Primitive* unk88;\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n} ET_stopwatchSparkle;\ntypedef struct {\n    s16 t;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    f32 unk84;\n    f32 unk88;\n    s16 unk8C;\n    s16 unk8E;\n} ET_stopwatch;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n} ET_RichterPowerUpRing;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n} ET_TransparentWhiteCircle;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n} ET_HitByIce;\ntypedef struct {\n    s16 unk7C;\n    s16 pad7E;\n    s16 unk80;\n    s16 unk82;\n    byte pad84[12];\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 pad96[3];\n    s16 unk9C;\n} ET_HitByLightning;\ntypedef struct {\n    s32 unk7C;\n    s32 unk80;\n    s32 unk84;\n    s32 unk88;\n    s32 unk8C;\n    s32 unk90;\n} ET_Teleport;\ntypedef struct {\n    s16 timer;\n    s16 angle;\n    s16 unk80;\n    s16 unk82;\n} ET_HolyWater;\ntypedef struct {\n    s16 timer;\n    s16 angle;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_HolyWaterFlame;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u8 unk80;\n    byte pad81;\n    u8 unk82;\n    byte pad83;\n    s32 unk84;\n} ET_CrashCross;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u8 unk80;\n    byte pad81;\n    u8 unk82;\n    byte pad83;\n    s32 unk84;\n} ET_RicRevivalColumn;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    u16 unk80;\n    u16 pad82;\n    Point16* unk84;\n} ET_CrossBoomerang;\ntypedef struct {\n    f32 unk7C;\n    f32 unk80;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n    s16 unk8C;\n    s16 unk8E;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 unk9C;\n    s32 unkA0;\n    s16 unkA4;\n    s16 unkA6;\n    s32 unkA8;\n    s32 unkAC;\n    s16 unkB0;\n    s32 unkB4;\n    s32 unkB8;\n} ET_80166784;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s8 unk8A;\n    u8 unk8B[12];\n    s32 unk98;\n} ET_AguneaCrash;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s8 unk8A;\n    u8 unk8B[12];\n    s32 unk98;\n    s32 unk9C;\n    u16 unkA0;\n} ET_AxeCrash;\ntypedef struct {\n    s32 pad7c;\n    Primitive* unk80;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    struct Entity* parent;\n    s16 unk90;\n} ET_801291C4;\ntypedef struct {\n    s16 timer;\n    u16 unk7E;\n    s16 unk80;\n    s16 pad82;\n    s32 unk84;\n    s32 unk88;\n    u16 unk8C;\n} ET_VibhutiCrash;\ntypedef struct {\n    PrimLineG2* lines[4];\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n} ET_8016D9C4;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_8016DF74;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    byte pad[46];\n    s16 unkB0;\n} ET_8016E46C;\ntypedef struct {\n    struct Primitive* prim1;\n    struct Primitive* prim2;\n    struct Primitive* prim3;\n    struct Primitive* prim4;\n    s16 unk8C;\n    s16 unk8E;\n} ET_801AF774;\ntypedef struct {\n    s32 unk7C;\n    s16 timer;\n    s16 unk82;\n    s16 unk84;\n} ET_DracFinal;\ntypedef struct {\n    byte pad[0x18];\n    s32 unk94;\n} ET_Drop;\ntypedef struct {\n               byte pad[4];\n               s16 angle;\n               byte pad2[2];\n               u8 switch_control;\n               u8 speed;\n} ET_BigRedFireball;\ntypedef struct {\n    s16 timer;\n    s16 spawnTimer;\n} ET_SummonSpirit;\ntypedef struct {\n    struct Primitive* prim;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_3DBackgroundhouse;\ntypedef struct {\n    struct Primitive* prim1;\n    struct Primitive* prim2;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n} ET_LifeUpSpawn;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    u16 unk88;\n    u16 unk8A;\n} ET_801B0AA4;\ntypedef struct {\n    byte pad[4];\n    u16 unk80;\n    u16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n    u8 unk8C;\n} ET_Owl;\ntypedef struct {\n    u16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    u16 unk88;\n    s16 unk8A;\n    s16 unk8C;\n    s16 unk8E;\n} ET_AlucardWaterEffect;\ntypedef struct {\n    s32 pad;\n    s16 timer;\n} ET_801B28E4;\ntypedef struct {\n    u32 unk24[10];\n    u8 unk28;\n    u8 unk29;\n} ET_80123B40;\ntypedef struct {\n    struct Entity* ent;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_80129864;\ntypedef struct {\n    s16 timer;\n    s16 pad;\n    s16 xCurrent;\n    s16 yCurrent;\n    s16 xTarget;\n    s16 yTarget;\n} ET_Mist;\ntypedef struct {\n    s32 unk7C;\n    s16 unk80;\n    s16 unk82;\n    s32 un84;\n    s16 unk88;\n    s16 unk8A;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s32 unk94;\n    s16 unk98;\n    s16 unk9A;\n    s16 unk9C;\n} ET_PlayerBlink;\ntypedef struct {\n    struct Primitive* prim;\n    s16 unk80;\n    s16 pad82;\n    s32 pad84;\n    s32 pad88;\n    struct Primitive* prim2;\n    struct Primitive* prim3;\n} ET_BloodSplatter;\ntypedef struct {\n    s32 pad7c;\n    s16 timer;\n    s16 pad82;\n    s32 pad84;\n    s32 pad88;\n    s32 pad8C;\n    s16 brightness;\n} ET_PlayerOutline;\ntypedef struct {\n    u8 digits[4];\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    u16 unk86;\n    u16 unk88;\n    u16 unk8A;\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n    s16 unk92;\n    s16 angleToMeter;\n    s16 distToMeter;\n    s16 unk98;\n} ET_HPNumberMove;\ntypedef struct {\n    s16 timer;\n    s16 pad1;\n    s16 halfWidth;\n    s16 halfHeight;\n    s32 pad2;\n    s16 angle;\n    s16 pad3;\n    s32 pad4;\n    s32 str_x;\n    s32 str_y;\n    s32 unk98;\n} ET_GuardText;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_Dissolve;\ntypedef union {\n    struct Primitive* prim;\n    char stub[0x40];\n    ET_TimerOnly timer;\n    ET_EntFactory factory;\n    ET_Generic generic;\n    ET_EntitySlot1 entSlot1;\n    ET_EntitySlot16 entSlot16;\n    ET_Entity12 ent12;\n    ET_Entity13 ent13;\n    ET_8011E4BC et_8011E4BC;\n    ET_HellfireHandler hellfireHandler;\n    ET_ReboundStone reboundStone;\n    ET_8016D9C4 et_8016D9C4;\n    ET_8016E46C et_8016E46C;\n    ET_8016DF74 et_8016DF74;\n    ET_CrossBoomerang crossBoomerang;\n    ET_Vibhuti vibhuti;\n    ET_HolyWater holywater;\n    ET_HolyWaterFlame holywaterflame;\n    ET_CrashCross crashcross;\n    ET_AguneaCrash aguneaCrash;\n    ET_AxeCrash axeCrash;\n    ET_VibhutiCrash vibhutiCrash;\n    ET_RicRevivalColumn ricColumn;\n    ET_GiantSpinningCross giantcross;\n    ET_EquipItemDrop equipItemDrop;\n    ET_HeartDrop heartDrop;\n    ET_BloodDroplets bloodDroplets;\n    ET_BloodSplatter bloodSplatter;\n    ET_NumericDamage ndmg;\n    ET_RelicOrb relicOrb;\n    ET_Door door;\n    ET_StagePopup stpopup;\n    ET_StagePopupJP stpopupj;\n    ET_MessageBox messageBox;\n    ET_Weapon weapon;\n    ET_Shield shield;\n    ET_DarkShield darkShield;\n    ET_KarmaCoin karmacoin;\n    ET_HeavenSword heavenSword;\n    ET_HeavenSword2 heavenSword2;\n    ET_MedusaShieldLaser medshieldlaser;\n    ET_ShamanShieldStar shamanshieldstar;\n    ET_HeraldShieldSwirlEffect heraldSwirl;\n    ET_Food food;\n    ET_HitByIce hitbyice;\n    ET_HitByLightning hitbylightning;\n    ET_PlayerBlink playerBlink;\n    ET_Mist mist;\n    ET_Bat bat;\n    ET_BatEcho batEcho;\n    ET_SoulStealOrb soulStealOrb;\n    ET_GaibonSlogra GS_Props;\n    ET_WarpRoom warpRoom;\n    ET_Teleport teleport;\n    ET_Merman merman;\n    ET_Merman_2 merman2;\n    ET_MermanWaterSplash mermanWaterSplash;\n    ET_80128C2C et_80128C2C;\n    ET_801291C4 et_801291C4;\n    ET_8017091C et_8017091C;\n    ET_80170F64 et_80170F64;\n    ET_stopwatchCircle et_stopwatchCircle;\n    ET_stopwatchSparkle et_stopWatchSparkle;\n    ET_stopwatch stopwatch;\n    ET_80161FF0 et_80161FF0;\n    ET_80162870 et_80162870;\n    ET_80166784 et_80166784;\n    ET_RichterPowerUpRing ricPowerRing;\n    ET_TransparentWhiteCircle whiteCircle;\n    ET_8016E9E4 et_8016E9E4;\n    ET_801719A4 et_801719A4;\n    ET_BibleSubwpn et_BibleSubwpn;\n    ET_801CF254 et_801CF254;\n    ET_GurkhaSword gurkhaSword;\n    ET_Dracula dracula;\n    ET_DracFinal dracFinalForm;\n    ET_Succubus succubus;\n    ET_StageTitleCard stageTitleCard;\n    ET_RoomTransition2 roomTransition2;\n    ET_801B3C38 et38;\n    ET_801BCC4C et_801BCC4C;\n    ET_ShuttingWindow shuttingWindow;\n    ET_CastleDoor castleDoor;\n    ET_DeathSkySwirl deathSkySwirl;\n    ET_Elevator elevator;\n    ET_801D0B40 et_801D0B40;\n    ET_801D1BB8 et_801D1BB8;\n    ET_801D0B78 et_801D0B78;\n    ET_WaterEffects waterEffects;\n    ET_GurkhaHammer GH_Props;\n    ET_801CE4CC et_801CE4CC;\n    ET_801CDFD8 et_801CDFD8;\n    ET_TransparentWater transparentWater;\n    ET_HeartRoomGoldDoor heartRoomGoldDoor;\n    ET_CastleDoorTransition castleDoorTransition;\n    ET_AlucardController alucardController;\n    ET_ForegroundTree foregroundTree;\n    ET_FadeToWhite fadeToWhite;\n    ET_DeathStolenItems deathStolenItems;\n    ET_Death death;\n    ET_SpittleBone spittleBone;\n    ET_Player player;\n    ET_801CC820 et_801CC820;\n    ET_801AF774 et_801AF774;\n    ET_Drop drop;\n    ET_BigRedFireball bigredfireball;\n    ET_SummonSpirit summonspirit;\n    ET_3DBackgroundhouse bghouse;\n    ET_LifeUpSpawn lifeUpSpawn;\n    ET_AxeKnight axeknight;\n    ET_801B0AA4 et_801B0AA4;\n    ET_Owl owl;\n    ET_AlucardWaterEffect aluwater;\n    ET_80123B40 et_80123B40;\n    ET_80129864 et_80129864;\n    ET_801B28E4 et_801B28E4;\n    ET_PlayerOutline playerOutline;\n    ET_HPNumberMove hpNumMove;\n    ET_GuardText guardText;\n    ET_Dissolve dissolve;\n} Ext;\ntypedef enum {\n    Game_Init,\n    Game_Title,\n    Game_Play,\n    Game_GameOver,\n    Game_NowLoading,\n    Game_VideoPlayback,\n    Game_Unk6,\n    Game_PrologueEnd,\n    Game_MainMenu,\n    Game_Ending,\n    Game_Boot,\n    Game_99 = 99,\n} GameState;\ntypedef enum {\n    STAGE_NO0 = 0x00,\n    STAGE_NO1 = 0x01,\n    STAGE_LIB = 0x02,\n    STAGE_CAT = 0x03,\n    STAGE_NO2 = 0x04,\n    STAGE_CHI = 0x05,\n    STAGE_DAI = 0x06,\n    STAGE_NP3 = 0x07,\n    STAGE_CEN = 0x08,\n    STAGE_NO4 = 0x09,\n    STAGE_ARE = 0x0A,\n    STAGE_TOP = 0x0B,\n    STAGE_NZ0 = 0x0C,\n    STAGE_NZ1 = 0x0D,\n    STAGE_WRP = 0x0E,\n    STAGE_NO1_ALT = 0x0F,\n    STAGE_NO0_ALT = 0x10,\n    STAGE_DRE = 0x12,\n    STAGE_NZ0_DEMO = 0x13,\n    STAGE_NZ1_DEMO = 0x14,\n    STAGE_LIB_DEMO = 0x15,\n    STAGE_BO7 = 0x16,\n    STAGE_MAR = 0x17,\n    STAGE_BO6 = 0x18,\n    STAGE_BO5 = 0x19,\n    STAGE_BO4 = 0x1A,\n    STAGE_BO3 = 0x1B,\n    STAGE_BO2 = 0x1C,\n    STAGE_BO1 = 0x1D,\n    STAGE_BO0 = 0x1E,\n    STAGE_ST0 = 0x1F,\n    STAGE_RNO0 = STAGE_NO0 | 0x20,\n    STAGE_RNO1 = STAGE_NO1 | 0x20,\n    STAGE_RLIB = STAGE_LIB | 0x20,\n    STAGE_RCAT = STAGE_CAT | 0x20,\n    STAGE_RNO2 = STAGE_NO2 | 0x20,\n    STAGE_RCHI = STAGE_CHI | 0x20,\n    STAGE_RDAI = STAGE_DAI | 0x20,\n    STAGE_RNO3 = STAGE_NP3 | 0x20,\n    STAGE_RCEN = STAGE_CEN | 0x20,\n    STAGE_RNO4 = STAGE_NO4 | 0x20,\n    STAGE_RARE = STAGE_ARE | 0x20,\n    STAGE_RTOP = STAGE_TOP | 0x20,\n    STAGE_RNZ0 = STAGE_NZ0 | 0x20,\n    STAGE_RNZ1 = STAGE_NZ1 | 0x20,\n    STAGE_RWRP = STAGE_WRP | 0x20,\n    STAGE_RNZ1_DEMO = 0x35,\n    STAGE_RBO8 = 0x36,\n    STAGE_RBO7 = 0x37,\n    STAGE_RBO6 = 0x38,\n    STAGE_RBO5 = 0x39,\n    STAGE_RBO4 = 0x3A,\n    STAGE_RBO3 = 0x3B,\n    STAGE_RBO2 = 0x3C,\n    STAGE_RBO1 = 0x3D,\n    STAGE_RBO0 = 0x3E,\n    STAGE_MAD = 0x40,\n    STAGE_NO3 = 0x41,\n    STAGE_IWA_LOAD = 0x42,\n    STAGE_IGA_LOAD = 0x43,\n    STAGE_HAGI_LOAD = 0x44,\n    STAGE_SEL = 0x45,\n    STAGE_TE1 = 0x46,\n    STAGE_TE2 = 0x47,\n    STAGE_TE3 = 0x48,\n    STAGE_TE4 = 0x49,\n    STAGE_TE5 = 0x4A,\n    STAGE_TOP_ALT = 0x4B,\n    STAGE_EU_WARNING = 0x70,\n    STAGE_ENDING = 0xFE,\n    STAGE_MEMORYCARD = 0xFF,\n} Stages;\ntypedef enum {\n    Play_Reset = 0,\n    Play_Init,\n    Play_PrepareDemo,\n    Play_Default,\n    Play_PrepareNextStage,\n    Play_LoadStageChr,\n    Play_WaitStageChr,\n    Play_LoadStageSfx,\n    Play_WaitStageSfx,\n    Play_LoadStagePrg,\n    Play_WaitStagePrg,\n    Play_16 = 16,\n    Gameover_Init = 0,\n    Gameover_AllocResources,\n    Gameover_2,\n    Gameover_3,\n    Gameover_4,\n    Gameover_5,\n    Gameover_6,\n    Gameover_7,\n    Gameover_8,\n    Gameover_9,\n    Gameover_10,\n    Gameover_11,\n    Gameover_Alt = 99,\n    Gameover_Init_Alt,\n    Gameover_AllocResources_Alt,\n    Gameover_2_Alt,\n    Gameover_3_Alt,\n    Gameover_11_Alt = 111,\n    NowLoading_2 = 2,\n} GameSteps;\ntypedef enum {\n    Demo_None,\n    Demo_PlaybackInit,\n    Demo_Recording,\n    Demo_End,\n    Demo_Playback,\n} DemoMode;\ntypedef enum {\n    TIMEATTACK_INVALID = -1,\n    TIMEATTACK_GET_RECORD,\n    TIMEATTACK_SET_RECORD,\n    TIMEATTACK_SET_VISITED,\n} TimeAttackActions;\ntypedef enum {\n    TIMEATTACK_EVENT_DRACULA_DEFEAT,\n    TIMEATTACK_EVENT_ORLOX_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_10_DEFEAT,\n    TIMEATTACK_EVENT_GRANFALOON_DEFEAT,\n    TIMEATTACK_EVENT_MINOTAUR_WEREWOLF_DEFEAT,\n    TIMEATTACK_EVENT_SCYLLA_DEFEAT,\n    TIMEATTACK_EVENT_SLOGRA_GAIBON_DEFEAT,\n    TIMEATTACK_EVENT_HYPPOGRYPH_DEFEAT,\n    TIMEATTACK_EVENT_BEELZEBUB_DEFEAT,\n    TIMEATTACK_EVENT_SUCCUBUS_DEFEAT,\n    TIMEATTACK_EVENT_KARASUMAN_DEFEAT,\n    TIMEATTACK_EVENT_RALPH_GRANT_SYPHA_DEFEAT,\n    TIMEATTACK_EVENT_DEATH_DEFEAT,\n    TIMEATTACK_EVENT_CERBERUS_DEFEAT,\n    TIMEATTACK_EVENT_SAVE_RICHTER,\n    TIMEATTACK_EVENT_MEDUSA_DEFEAT,\n    TIMEATTACK_EVENT_THE_CREATURE_DEFEAT,\n    TIMEATTACK_EVENT_LESSER_DEMON_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_40_DEFEAT,\n    TIMEATTACK_EVENT_AKMODAN_II_DEFEAT,\n    TIMEATTACK_EVENT_DARKWING_BAT_DEFEAT,\n    TIMEATTACK_EVENT_GALAMOTH_DEFEAT,\n    TIMEATTACK_EVENT_FINAL_SAVEPOINT,\n    TIMEATTACK_EVENT_MEET_DEATH,\n    TIMEATTACK_EVENT_GET_HOLYGLASSES,\n    TIMEATTACK_EVENT_MEET_MASTER_LIBRARIAN,\n    TIMEATTACK_EVENT_FIRST_MARIA_MEET,\n    NUM_TIMEATTACK_EVENTS,\n    TIMEATTACK_EVENT_UNUSED_28,\n    TIMEATTACK_EVENT_UNUSED_29,\n    TIMEATTACK_EVENT_UNUSED_30,\n    TIMEATTACK_EVENT_UNUSED_31,\n    TIMEATTACK_EVENT_END,\n    TIMEATTACK_EVENT_INVALID = 0xFF,\n} TimeAttackEvents;\nstruct Entity;\ntypedef struct {\n              s32 x;\n              s32 y;\n} Point32;\ntypedef struct {\n               u8 vabid;\n               u8 prog;\n               u8 note;\n               s8 volume;\n               u8 unk4;\n               u8 tone;\n               u8 unk6;\n} Unkstruct_800BF554;\ntypedef struct {\n               u_long* desc;\n               u_long* data;\n               u16 unk8;\n               u16 index;\n               u16 unkC;\n               u16 unkE;\n               u8 unkArray[0x30];\n} Unkstruct_8006C3C4;\ntypedef struct {\n               char pad0[0x14];\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Unkstruct_8010BF64;\ntypedef struct {\n               s16 sndId;\n               u16 unk02;\n               s16 unk04;\n} SfxRingBufferItem;\ntypedef struct {\n               s32 unk0;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n} Unkstruct_800EA5E4;\ntypedef struct {\n    s32 unk0;\n    s32 unk4;\n    s32 unk8;\n    s32 unkC;\n} Unkstruct_800FDB18;\ntypedef struct Unkstruct_801C6C6C {\n    union {\n        struct {\n            u16 w;\n            u16 x;\n        } c;\n        s32 p;\n    } x;\n    union {\n        struct {\n            u16 h;\n            u16 y;\n        } c;\n        s32 p;\n    } y;\n} Unkstruct_801C6C6C;\ntypedef struct {\n    u16 start;\n    s16 current;\n    s16* coords;\n    s16 unk8;\n} Unkstruct_80102CD8;\ntypedef struct {\n              s16 animSet;\n              s16 unk2;\n              u16 palette;\n              s8 drawMode;\n              char pad_7;\n              s32 unk8;\n} Unkstruct_80180FE0;\ntypedef struct Unkstruct_801C7954 {\n               u16 x1;\n               u16 x0;\n               u16 y2;\n               u16 y0;\n               u16 y3;\n               u16 y1;\n               u16 x3;\n               u16 x2;\n} Unkstruct_801C7954;\ntypedef struct {\n    u8 unk0[7];\n    u8 unk8;\n    u8 pad2[8];\n    u8 unk16[1];\n    u8 pad3[5];\n    u32 unk18;\n} Unkstruct_800ADEF0;\ntypedef struct {\n    u16 palette;\n    u8 unk2;\n} Unkstruct_800AE180;\ntypedef struct {\n                     s32 D_800973F8;\n                     s32 D_800973FC;\n                     s32 unk0;\n                     s32 unk4;\n                     Multi g_zEntityCenter;\n                     s32 unkC;\n                     s32 BottomCornerTextTimer;\n                     s32 BottomCornerTextPrims;\n                     s32 unk18;\n                     s32 unk1C;\n                     s32 unk20;\n                     s32 unk24;\n                     s32 D_80097428[8];\n} unkGraphicsStruct;\ntypedef struct {\n    u8 count;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 w;\n    u8 h;\n    u16 priority;\n    u16 drawMode;\n    s16 unkA;\n    u32 flags;\n} unkStr_8011E4BC;\ntypedef struct {\n    s32 : 32;\n    s16 unk4;\n    s16 unk6;\n    s16 unk8;\n    s16 unkA;\n    s16 unkC;\n    s32 unk10;\n    s32 unk14;\n    s32 unk18;\n} Unkstruct_8012BEF8;\ntypedef struct {\n    u8 childId;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n    u8 unk4;\n    u8 unk5;\n} FactoryBlueprint;\ntypedef struct {\n    s16 xOffset;\n    s16 yOffset;\n    s32 velocityX;\n    s32 velocityY;\n    s16 timerInit;\n    s16 tpage;\n    s16 clut;\n    u8 uBase;\n    u8 vBase;\n} unkStr80154E5C;\ntypedef struct {\n    s32 unk0;\n    s16 unk4;\n} unkstr_800cfe48;\ntypedef struct {\n    f32 x;\n    f32 y;\n} Pos;\ntypedef struct {\n    f32 posX;\n    f32 posY;\n} Camera;\ntypedef struct {\n    unsigned char width;\n    unsigned char height;\n    unsigned short unk2;\n    unsigned char data[0];\n} ImgSrc;\ntypedef struct {\n             u32 gfxOff;\n             u32 ovlOff;\n             u32 ovlLen;\n             u32 vhOff;\n             u32 vhLen;\n             u32 vbLen;\n             u32 unk18;\n             const char* gfxName;\n             const char* ovlName;\n             const char* name;\n             u8 unk28;\n             s8 seqIdx;\n             u16 unk2A;\n} Lba;\ntypedef struct {\n               s16 cursorX;\n               s16 cursorY;\n               s16 cursorW;\n               s16 cursorH;\n               RECT unk1;\n               s16 w;\n               s16 h;\n               s16 unk14;\n               s16 unk16;\n               s16 otIdx;\n               s16 unk1A;\n               u8 unk1C;\n               u8 unk1D;\n} MenuContext;\ntypedef struct {\n              u8 tileLayoutId;\n              u8 tilesetId;\n              u8 objGfxId;\n              u8 objLayoutId;\n} RoomLoadDef;\ntypedef struct {\n    RoomLoadDef* def;\n} RoomLoadDefHolder;\ntypedef struct {\n              u8 left;\n              u8 top;\n              u8 right;\n              u8 bottom;\n              RoomLoadDef load;\n} RoomHeader;\ntypedef struct {\n              u16 x;\n              u16 y;\n              u16 roomId;\n              u16 unk6;\n              u16 stageId;\n} RoomTeleport;\ntypedef struct {\n               s32 x;\n               s32 y;\n               Stages stageId;\n               TimeAttackEvents eventId;\n               s32 unk10;\n} RoomBossTeleport;\ntypedef struct {\n              u16 pressed;\n              s16 previous;\n              u16 tapped;\n              u16 repeat;\n} Pad;\ntypedef struct {\n    u16 duration;\n    u16 unk2;\n} AnimationFrame;\ntypedef struct {\n    s8 unk0;\n    s8 unk2;\n    s8 hitboxWidth;\n    s8 hitboxHeight;\n} FrameProperty;\ntypedef enum {\n    Player_Stand,\n    Player_Walk,\n    Player_Crouch,\n    Player_Fall,\n    Player_Jump,\n    Player_MorphBat,\n    Player_AlucardStuck,\n    Player_MorphMist,\n    Player_HighJump,\n    Player_UnmorphBat,\n    Player_Hit,\n    Player_StatusStone,\n    Player_BossGrab,\n    Player_KillWater,\n    Player_UnmorphMist,\n    Player_SwordWarp,\n    Player_Kill,\n    Player_Unk17,\n    Player_Teleport,\n    Player_FlameWhip,\n    Player_Hydrostorm,\n    Player_ThousandBlades,\n    Player_RichterFourHolyBeasts,\n    Player_Slide,\n    Player_MorphWolf,\n    Player_UnmorphWolf,\n    Player_SlideKick,\n    Player_Unk27,\n    Player_SpellDarkMetamorphosis = 32,\n    Player_SpellSummonSpirit,\n    Player_SpellHellfire,\n    Player_SpellTetraSpirit,\n    Player_Spell36,\n    Player_SpellSoulSteal,\n    Player_Unk38,\n    Player_SpellSwordBrothers,\n    Player_AxearmorStand,\n    Player_AxearmorWalk,\n    Player_AxearmorJump,\n    Player_AxearmorHit,\n    Player_Unk48 = 48,\n    Player_Unk49,\n    Player_Unk50\n} PlayerSteps;\ntypedef struct Entity {\n               f32 posX;\n               f32 posY;\n               s32 velocityX;\n               s32 velocityY;\n               s16 hitboxOffX;\n               s16 hitboxOffY;\n               u16 facingLeft;\n               u16 palette;\n               u8 drawMode;\n               u8 drawFlags;\n               s16 rotX;\n               s16 rotY;\n               s16 rotZ;\n               s16 rotPivotX;\n               s16 rotPivotY;\n               u16 zPriority;\n               u16 entityId;\n               PfnEntityUpdate pfnUpdate;\n               u16 step;\n               u16 step_s;\n               u16 params;\n               u16 entityRoomIndex;\n               s32 flags;\n               s16 unk38;\n               u16 enemyId;\n               u16 hitboxState;\n               s16 hitPoints;\n               s16 attack;\n               s16 attackElement;\n               u16 unk44;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               u8 hitFlags;\n               u8 nFramesInvincibility;\n               s16 unk4A;\n               AnimationFrame* unk4C;\n               u16 animFrameIdx;\n               s16 animFrameDuration;\n               s16 animSet;\n               s16 animCurFrame;\n               s16 stunFrames;\n               u16 unk5A;\n               struct Entity* unk5C;\n               struct Entity* unk60;\n               s32 primIndex;\n               u16 unk68;\n               u16 hitEffect;\n               u8 unk6C;\n               u8 unk6D[11];\n               s32 unk78;\n               Ext ext;\n} Entity;\ntypedef struct {\n               u16 animSet;\n               u16 zPriority;\n               Multi16 unk4;\n               u16 palette;\n               u16 drawFlags;\n               u16 drawMode;\n               u32 unkC;\n               u8* unk10;\n} ObjInit2;\ntypedef struct GpuBuffer {\n                  struct GpuBuffer* next;\n                  DRAWENV draw;\n                  DISPENV disp;\n                  DR_ENV env[0x10];\n                  u_long ot[0x200];\n                  DR_MODE drawModes[0x400];\n                  POLY_GT4 polyGT4[0x300];\n                  POLY_G4 polyG4[0x100];\n                  POLY_GT3 polyGT3[0x30];\n                  LINE_G2 lineG2[0x100];\n                  SPRT_16 sprite16[0x280];\n                  TILE tiles[0x100];\n                  SPRT sprite[0x200];\n} GpuBuffer;\ntypedef struct {\n               u32 drawModes;\n               u32 gt4;\n               u32 g4;\n               u32 gt3;\n               u32 line;\n               u32 sp16;\n               u32 tile;\n               u32 sp;\n               u32 env;\n} GpuUsage;\ntypedef enum {\n    GFX_BANK_NONE,\n    GFX_BANK_4BPP,\n    GFX_BANK_8BPP,\n    GFX_BANK_16BPP,\n    GFX_BANK_COMPRESSED,\n} GfxBankKind;\ntypedef struct {\n               u_long* xy;\n               u_long* wh;\n               u_long* data;\n} GfxEntry;\ntypedef struct {\n    GfxBankKind kind;\n    GfxEntry entries[0];\n} GfxBank;\ntypedef struct {\n              GfxEntry* next;\n              u16 kind;\n              s16 unk6;\n              s16 unk8;\n              s16 unkA;\n} GfxLoad;\ntypedef enum EquipKind {\n    EQUIP_HAND,\n    EQUIP_HEAD,\n    EQUIP_ARMOR,\n    EQUIP_CAPE,\n    EQUIP_ACCESSORY,\n    NUM_EQUIP_KINDS,\n} EquipKind;\ntypedef enum {\n    ITEM_S_SWORD,\n    ITEM_SWORD,\n    ITEM_THROW_1,\n    ITEM_FIST,\n    ITEM_CLUB,\n    ITEM_TWOHAND,\n    ITEM_FOOD,\n    ITEM_BOMB,\n    ITEM_THROW_2,\n    ITEM_SHIELD,\n    ITEM_MEDICINE,\n    ITEM_END,\n} ItemCategory;\ntypedef enum {\n    SUBWPN_NONE,\n    SUBWPN_DAGGER,\n    SUBWPN_AXE,\n    SUBWPN_HOLYWATER,\n    SUBWPN_CROSS,\n    SUBWPN_BIBLE,\n    SUBWPN_STOPWATCH,\n    SUBWPN_REBNDSTONE,\n    SUBWPN_VIBHUTI,\n    SUBWPN_AGUNEA\n} SubWpnID;\ntypedef enum { STAT_STR, STAT_CON, STAT_INT, STAT_LCK } Stats;\ntypedef struct {\n    s32 level;\n    s32 exp;\n    s32 unk8;\n} FamiliarStats;\ntypedef enum {\n    RELIC_SOUL_OF_BAT,\n    RELIC_FIRE_OF_BAT,\n    RELIC_ECHO_OF_BAT,\n    RELIC_FORCE_OF_ECHO,\n    RELIC_SOUL_OF_WOLF,\n    RELIC_POWER_OF_WOLF,\n    RELIC_SKILL_OF_WOLF,\n    RELIC_FORM_OF_MIST,\n    RELIC_POWER_OF_MIST,\n    RELIC_GAS_CLOUD,\n    RELIC_CUBE_OF_ZOE,\n    RELIC_SPIRIT_ORB,\n    RELIC_GRAVITY_BOOTS,\n    RELIC_LEAP_STONE,\n    RELIC_HOLY_SYMBOL,\n    RELIC_FAERIE_SCROLL,\n    RELIC_JEWEL_OF_OPEN,\n    RELIC_MERMAN_STATUE,\n    RELIC_BAT_CARD,\n    RELIC_GHOST_CARD,\n    RELIC_FAERIE_CARD,\n    RELIC_DEMON_CARD,\n    RELIC_SWORD_CARD,\n    RELIC_JP_0,\n    RELIC_JP_1,\n    RELIC_HEART_OF_VLAD,\n    RELIC_TOOTH_OF_VLAD,\n    RELIC_RIB_OF_VLAD,\n    RELIC_RING_OF_VLAD,\n    RELIC_EYE_OF_VLAD,\n    NUM_RELICS,\n} RelicIds;\ntypedef enum {\n    SPELL_DARK_METAMORPHOSIS,\n    SPELL_SUMMON_SPIRIT,\n    SPELL_HELLFIRE,\n    SPELL_TETRA_SPIRIT,\n    SPELL_WOLF_CHARGE,\n    SPELL_SOUL_STEAL,\n    SPELL_WING_SMASH,\n    SPELL_SWORD_BROTHERS,\n    NUM_SPELLS,\n} SpellIds;\ntypedef enum {\n    FAM_STATS_BAT,\n    FAM_STATS_GHOST,\n    FAM_STATS_FAERIE,\n    FAM_STATS_DEMON,\n    FAM_STATS_SWORD,\n    FAM_STATS_YOUSEI,\n    FAM_STATS_NOSE_DEMON,\n    NUM_FAMILIARS\n} FamiliarStatsIds;\ntypedef enum {\n    FAM_ACTIVE_NONE,\n    FAM_ACTIVE_BAT = FAM_STATS_BAT + 1,\n    FAM_ACTIVE_GHOST = FAM_STATS_GHOST + 1,\n    FAM_ACTIVE_FAERIE = FAM_STATS_FAERIE + 1,\n    FAM_ACTIVE_DEMON = FAM_STATS_DEMON + 1,\n    FAM_ACTIVE_SWORD = FAM_STATS_SWORD + 1,\n    FAM_ACTIVE_YOUSEI = FAM_STATS_YOUSEI + 1,\n    FAM_ACTIVE_NOSE_DEMON = FAM_STATS_NOSE_DEMON + 1,\n} FamiliarActiveIds;\ntypedef struct {\n                   u8 relics[30];\n                   u8 spells[NUM_SPELLS];\n                   u8 equipHandCount[169];\n                   u8 equipBodyCount[90];\n                   u8 equipHandOrder[169];\n                   u8 equipBodyOrder[90];\n                   u8 saveName[12];\n                   u32 spellsLearnt;\n                   s32 hp;\n                   s32 hpMax;\n                   s32 hearts;\n                   s32 heartsMax;\n                   s32 mp;\n                   s32 mpMax;\n                   s32 statsBase[4];\n                   s32 statsEquip[4];\n                   s32 statsTotal[4];\n                   u32 level;\n                   u32 exp;\n                   s32 gold;\n                   s32 killCount;\n                   u32 D_80097BF8;\n                   u32 subWeapon;\n                   u32 equipment[7];\n                   u32 attackHands[2];\n                   s32 defenseEquip;\n                   u16 defenseElement;\n                   u16 D_80097C2A;\n                   u16 D_80097C2C;\n                   u16 D_80097C2E;\n                   s32 timerHours;\n                   s32 timerMinutes;\n                   s32 timerSeconds;\n                   s32 timerFrames;\n                   u32 D_80097C40;\n                   FamiliarStats statsFamiliars[NUM_FAMILIARS];\n} PlayerStatus;\ntypedef struct {\n                         s32 cursorMain;\n                         s32 cursorRelic;\n                         s32 cursorEquip;\n                         s32 cursorEquipType[NUM_EQUIP_KINDS];\n                         s32 scrollEquipType[NUM_EQUIP_KINDS];\n                         s32 cursorSpells;\n                         s32 cursorSettings;\n                         s32 cursorCloak;\n                         s32 cursorButtons;\n                         s32 cursorWindowColors;\n                         s32 cursorTimeAttack;\n} MenuNavigation;\ntypedef struct {\n                            u32 buttonConfig[8];\n                            u16 buttonMask[8];\n                            s32 timeAttackRecords[TIMEATTACK_EVENT_END];\n                            s32 cloakColors[6];\n                            s32 windowColors[3];\n                            s32 equipOrderTypes[ITEM_END];\n                            s32 isCloakLiningReversed;\n                            s32 isSoundMono;\n                            s32 D_8003CB00;\n                            s32 D_8003CB04;\n} GameSettings;\ntypedef struct {\n               u8 Magic[2];\n               u8 Type;\n               u8 BlockEntry;\n               u8 Title[64];\n               u8 reserve[28];\n               u8 Clut[32];\n               u8 Icon[3][128];\n} MemcardHeader;\ntypedef struct {\n               char name[12];\n               s32 level;\n               s32 gold;\n               s32 playHours;\n               s32 playMinutes;\n               s32 playSeconds;\n               s32 cardIcon;\n               s32 endGameFlags;\n               s16 stage;\n               u16 nRoomsExplored;\n               u16 roomX;\n               u16 roomY;\n               s32 character;\n               s32 saveSize;\n} SaveInfo;\ntypedef struct {\n                MemcardHeader header;\n                SaveInfo info;\n                PlayerStatus status;\n                MenuNavigation menuNavigation;\n                GameSettings settings;\n                u8 castleFlags[0x300];\n                u8 castleMap[0x800];\n                 s32 rng;\n} SaveData;\ntypedef struct {\n               u8* gfxPage;\n               u8* gfxIndex;\n               u8* clut;\n               u8* collision;\n} TileDefinition;\ntypedef struct {\n               u32 left : 6;\n               u32 top : 6;\n               u32 right : 6;\n               u32 bottom : 6;\n               u8 params : 8;\n} LayoutRect;\ntypedef struct {\n               u16* layout;\n               TileDefinition* tileDef;\n               LayoutRect rect;\n               u16 zPriority;\n               u16 flags;\n} LayerDef;\ntypedef struct {\n    LayerDef* fg;\n    LayerDef* bg;\n} RoomDef;\ntypedef struct {\n               s16 x;\n               s16 y;\n               s16 width;\n               s16 height;\n               s16 clut;\n               s16 tpage;\n               s16 texLeft;\n               s16 texTop;\n               s16 texRight;\n               s16 texBottom;\n} Sprite;\ntypedef struct {\n             s16 flags;\n             s16 offsetx;\n             s16 offsety;\n             s16 width;\n             s16 height;\n             s16 clut;\n             s16 tileset;\n             s16 left;\n             s16 top;\n             s16 right;\n             s16 bottom;\n} SpritePart;\ntypedef struct {\n             u16 count;\n             SpritePart parts[0];\n} SpriteParts;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*HitDetection)(void);\n                   void (*UpdateRoomPosition)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   SpriteParts** spriteBanks;\n                   u_long** cluts;\n                   void* objLayoutHorizontal;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*UpdateStageEntities)(void);\n                   u8** unk2c;\n                   u8** unk30;\n                   s32* unk34;\n                   s32* unk38;\n                   void (*StageEndCutScene)(void);\n} Overlay;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*HitDetection)(void);\n                   void (*UpdateRoomPosition)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   SpriteParts** spriteBanks;\n                   u_long** cluts;\n                   void* objLayoutHorizontal;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*UpdateStageEntities)(void);\n} AbbreviatedOverlay;\ntypedef enum {\n    EFFECT_SOLID = 1 << 0,\n    EFFECT_UNK_0002 = 1 << 1,\n    EFFECT_QUICKSAND = 1 << 2,\n    EFFECT_WATER = 1 << 3,\n    EFFECT_MIST_ONLY = 1 << 4,\n    EFFECT_UNK_0020 = 1 << 5,\n    EFFECT_SOLID_FROM_ABOVE = 1 << 6,\n    EFFECT_SOLID_FROM_BELOW = 1 << 7,\n    EFFECT_UNK_0100 = 1 << 8,\n    EFFECT_UNK_0200 = 1 << 9,\n    EFFECT_UNK_0400 = 1 << 10,\n    EFFECT_UNK_0800 = 1 << 11,\n    EFFECT_UNK_1000 = 1 << 12,\n    EFFECT_UNK_2000 = 1 << 13,\n    EFFECT_UNK_4000 = 1 << 14,\n    EFFECT_UNK_8000 = 1 << 15,\n    EFFECT_NOTHROUGH = EFFECT_SOLID | EFFECT_QUICKSAND,\n    EFFECT_NOTHROUGH_PLUS = EFFECT_SOLID | EFFECT_UNK_0002 | EFFECT_QUICKSAND,\n    EFFECT_UNK_C000 = EFFECT_UNK_8000 | EFFECT_UNK_4000\n} ColliderEffectFlags;\ntypedef struct Collider {\n               u32 effects;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n               s32 unk10;\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Collider;\ntypedef struct XaMusicConfig {\n    u32 cd_addr;\n    s32 unk228;\n    u8 filter_file;\n    u8 filter_channel_id;\n    u8 volume;\n    u8 unk22f;\n    u8 unk230;\n    u8 pad[3];\n} XaMusicConfig;\ntypedef struct {\n               const char* name;\n               s16 hitPoints;\n               s16 attack;\n               u16 attackElement;\n               s16 defense;\n               u16 hitboxState;\n               u16 weaknesses;\n               u16 strengths;\n               u16 immunes;\n               u16 absorbs;\n               u16 level;\n               u16 exp;\n               u16 rareItemId;\n               u16 uncommonItemId;\n               u16 rareItemDropRate;\n               u16 uncommonItemDropRate;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               s32 flags;\n} EnemyDef;\ntypedef struct {\n               s16 attack;\n               s16 heartCost;\n               u16 attackElement;\n               u8 unk6;\n               u8 nFramesInvincibility;\n               u16 stunFrames;\n               u8 anim;\n               u8 blueprintNum;\n               u16 hitboxState;\n               u16 hitEffect;\n               u8 crashId;\n               u8 unk11;\n               u16 entityRoomIndex;\n} SubweaponDef;\ntypedef struct {\n               const char* name;\n               const char* description;\n               s16 attack;\n               s16 defense;\n               u16 element;\n               u8 itemCategory;\n               u8 weaponId;\n               u8 palette;\n               u8 unk11;\n               u8 playerAnim;\n               u8 unk13;\n               u8 unk14;\n               u8 lockDuration;\n               u8 chainLimit;\n               u8 unk17;\n               u8 specialMove;\n               u8 isConsumable;\n               u8 enemyInvincibilityFrames;\n               u8 unk1B;\n               u32 comboSub;\n               u32 comboMain;\n               u16 mpUsage;\n               u16 stunFrames;\n               u16 hitType;\n               u16 hitEffect;\n               u16 icon;\n               u16 iconPalette;\n               u16 criticalRate;\n               u16 unk32;\n} Equipment;\ntypedef struct {\n             const char* name;\n             const char* description;\n             s16 attBonus;\n             s16 defBonus;\n             u8 statsBonus[4];\n             u16 unk10;\n             u16 unk12;\n             u16 unk14;\n             u16 unk16;\n             u16 icon;\n             u16 iconPalette;\n             u16 equipType;\n             u16 unk1E;\n} Accessory;\ntypedef struct {\n               const char* name;\n               const char* combo;\n               const char* description;\n               u8 mpUsage;\n               s8 nFramesInvincibility;\n               s16 stunFrames;\n               s16 hitboxState;\n               s16 hitEffect;\n               s16 entityRoomIndex;\n               u16 attackElement;\n               s16 attack;\n               s16 unk1A;\n} SpellDef;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 unk08;\n               u16 unk0A;\n               s32 unk0C;\n} RelicDesc;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 icon;\n               u16 iconPalette;\n               u16 unk0C;\n               u16 unk0E;\n} RelicOrb;\ntypedef struct {\n               const char* nextCharDialogue;\n               s16 startX;\n               s16 nextLineY;\n               s16 startY;\n               s16 nextCharX;\n               s16 nextLineX;\n               s16 nextCharY;\n               s16 portraitAnimTimer;\n               u16 unk12;\n               u16 clutIndex;\n               u8 nextCharTimer;\n               u8 unk17;\n               Primitive* prim[6];\n               s32 primIndex[3];\n               u16 unk3C;\n               u16 timer;\n               const char* unk40;\n} Dialogue;\ntypedef struct {\n    u32 effects;\n    u32 damageKind;\n    s32 damageTaken;\n    s32 unkC;\n} DamageParam;\ntypedef struct {\n                   Overlay o;\n                   void (*FreePrimitives)(s32);\n                   s16 (*AllocPrimitives)(PrimitiveType type, s32 count);\n                   void (*CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\n                   void (*func_80102CD8)(s32 arg0);\n                   void (*UpdateAnim)(\n        FrameProperty* frameProps, AnimationFrame** anims);\n                   void (*SetSpeedX)(s32 value);\n                   Entity* (*GetFreeEntity)(s16 start, s16 end);\n                   void (*GetEquipProperties)(\n        s32 handId, Equipment* res, s32 equipId);\n                   s32 (*func_800EA5E4)(u32);\n                   void (*LoadGfxAsync)(s32 gfxId);\n                   void (*PlaySfx)(s32 sfxId);\n                   s16 (*func_800EDB58)(s32, s32);\n                   void (*func_800EA538)(s32 arg0);\n                   void (*g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\n                   void (*func_801027C4)(u32 arg0);\n                   void (*func_800EB758)(\n        s16 pivotX, s16 pivotY, Entity* e, u16 flags, POLY_GT4* p, u8 flipX);\n                   Entity* (*CreateEntFactoryFromEntity)(\n        Entity* self, u32 flags, s32 arg2);\n                   bool (*func_80131F68)(void);\n                   DR_ENV* (*func_800EDB08)(POLY_GT4* poly);\n                   u16* (*func_80106A28)(u32 arg0, u16 kind);\n                   void (*func_80118894)(Entity*);\n                   EnemyDef* enemyDefs;\n                   Entity* (*func_80118970)(void);\n                   s16 (*func_80118B18)(\n        Entity* ent1, Entity* ent2, s32 facingLeft);\n                   s32 (*UpdateUnarmedAnim)(s8* frameProps, u16** frames);\n                   void (*PlayAnimation)(s8*, AnimationFrame** frames);\n                   void (*func_80118C28)(s32 arg0);\n                   void (*func_8010E168)(s32 arg0, s16 arg1);\n                   void (*func_8010DFF0)(s32 arg0, s32 arg1);\n                   u16 (*DealDamage)(\n        Entity* enemyEntity, Entity* attackerEntity);\n                   void (*LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\n                   Equipment* equipDefs;\n                   Accessory* accessoryDefs;\n                   void (*AddHearts)(s32 value);\n                   bool (*LoadMonsterLibrarianPreview)(s32 monsterId);\n                   s32 (*TimeAttackController)(\n        TimeAttackEvents eventId, TimeAttackActions action);\n                   void* (*func_8010E0A8)(void);\n                   void (*func_800FE044)(s32, s32);\n                   void (*AddToInventory)(u32 id, EquipKind kind);\n                   RelicOrb* relicDefs;\n                   void (*InitStatsAndGear)(bool debugMode);\n                   s32 (*func_80134714)(s32 arg0, s32 arg1, s32 arg2);\n                   s32 (*func_80134678)(s16 arg0, u16 arg1);\n                   void (*func_800F53A4)(void);\n                   u32 (*CheckEquipmentItemCount)(u32 itemId, u32 equipType);\n                   void (*func_8010BF64)(Unkstruct_8010BF64* arg0);\n                   void (*func_800F1FC4)(s32 arg0);\n                   void (*func_800F2288)(s32 arg0);\n                   void (*func_8011A3AC)(\n        Entity* entity, s32 spellId, s32 arg2, FamiliarStats* out);\n                   s32 (*func_800FF460)(s32 arg0);\n                   s32 (*func_800FF494)(EnemyDef* arg0);\n                   bool (*CdSoundCommandQueueEmpty)(void);\n                   bool (*func_80133950)(void);\n                   bool (*func_800F27F4)(s32 arg0);\n                   s32 (*func_800FF110)(s32 arg0);\n                   s32 (*func_800FD664)(s32 arg0);\n                   s32 (*func_800FD5BC)(DamageParam* arg0);\n                   void (*LearnSpell)(s32 spellId);\n                   void (*DebugInputWait)(const char* str);\n                   void* unused12C;\n                   void* unused130;\n                   void* unused134;\n                   void* unused138;\n                   void* unused13C;\n} GameApi;\ntypedef struct {\n    void (*D_8013C000)(void);\n    void (*D_8013C004)(void);\n    void (*D_8013C008)(void);\n    void (*D_8013C00C)(void);\n} PlayerOvl;\nextern PlayerOvl g_PlOvl;\nextern u8** g_PlOvlAluBatSpritesheet[1];\nextern u8* g_PlOvlSpritesheet[];\nextern void (*g_api_FreePrimitives)(s32);\nextern s16 (*g_api_AllocPrimitives)(PrimitiveType type, s32 count);\nextern void (*g_api_CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\nextern void (*g_api_func_80102CD8)(s32 arg0);\nextern void (*g_api_UpdateAnim)(FrameProperty* frameProps, s32* arg1);\nextern void (*g_api_SetSpeedX)(s32 value);\nextern Entity* (*g_api_GetFreeEntity)(s16 start, s16 end);\nextern void (*g_api_GetEquipProperties)(\n    s32 handId, Equipment* res, s32 equipId);\nextern s32 (*g_api_func_800EA5E4)(u32);\nextern void (*g_api_LoadGfxAsync)(s32);\nextern void (*g_api_PlaySfx)(s32 sfxId);\nextern s16 (*g_api_func_800EDB58)(s32, s32);\nextern void (*g_api_func_800EA538)(s32 arg0);\nextern void (*g_api_g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\nextern Entity* (*g_api_CreateEntFactoryFromEntity)(\n    Entity* self, u32 flags, s32 arg2);\nextern bool (*g_api_func_80131F68)(void);\nextern DR_ENV* (*g_api_func_800EDB08)(POLY_GT4* poly);\nextern u16* (*g_api_func_80106A28)(u16 arg0, u16 kind);\nextern void (*g_api_func_80118894)(Entity*);\nextern EnemyDef* g_api_enemyDefs;\nextern u32 (*g_api_UpdateUnarmedAnim)(s8* frameProps, u16** frames);\nextern void (*g_api_PlayAnimation)(s8*, AnimationFrame** frames);\nextern void (*g_api_func_8010E168)(s32 arg0, s16 arg1);\nextern void (*g_api_func_8010DFF0)(s32 arg0, s32 arg1);\nextern u16 (*g_api_DealDamage)(Entity* enemyEntity, Entity* attackerEntity);\nextern void (*g_api_LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\nextern Equipment* g_api_equipDefs;\nextern Accessory* g_api_g_AccessoryDefs;\nextern void (*g_api_AddHearts)(s32 value);\nextern s32 (*g_api_TimeAttackController)(\n    TimeAttackEvents eventId, TimeAttackActions action);\nextern void* (*g_api_func_8010E0A8)(void);\nextern void (*g_api_func_800FE044)(s32, s32);\nextern void (*g_api_AddToInventory)(u16 id, EquipKind kind);\nextern RelicOrb* g_api_relicDefs;\nextern s32 (*g_api_func_80134714)(s32 arg0, s32 arg1, s32 arg2);\nextern s32 (*g_api_func_80134678)(s16 arg0, u16 arg1);\nextern void (*g_api_func_800F53A4)(void);\nextern u32 (*g_api_CheckEquipmentItemCount)(u32 itemId, u32 equipType);\nextern void (*g_api_func_8010BF64)(Unkstruct_8010BF64* arg0);\nextern void (*g_api_func_800F1FC4)(s32 arg0);\nextern void (*g_api_func_800F2288)(s32 arg0);\nextern void (*g_api_func_8011A3AC)(\n    Entity* entity, s32 spellId, s32 arg2, FamiliarStats* out);\nextern s32 (*g_api_func_800FF460)(s32 arg0);\nextern s32 (*g_api_func_800FF494)(EnemyDef* arg0);\nextern bool (*g_api_CdSoundCommandQueueEmpty)(void);\nextern bool (*g_api_func_80133950)(void);\nextern bool (*g_api_func_800F27F4)(s32 arg0);\nextern s32 (*g_api_func_800FF110)(s32 arg0);\nextern s32 (*g_api_func_800FD664)(s32 arg0);\nextern s32 (*g_api_func_800FD5BC)(DamageParam* arg0);\nextern void (*g_api_LearnSpell)(s32 spellId);\nextern void (*g_api_func_800E2438)(const char* str);\ntypedef struct {\n               u16** frames;\n               s8* frameProps;\n               u16 palette;\n               u16 soundId;\n               u8 frameStart;\n               u8 soundFrame;\n               s16 unused;\n} WeaponAnimation;\ntypedef struct {\n                        u16* layout;\n                        TileDefinition* tileDef;\n                        f32 scrollX;\n                        f32 scrollY;\n                        u32 unused10;\n                        u32 unused14;\n                        u32 order;\n                        u32 flags;\n                        u32 w;\n                        u32 h;\n                        u32 hideTimer;\n                        u32 scrollKind;\n} BgLayer;\ntypedef struct {\n                   u16* fg;\n                   TileDefinition* tileDef;\n                   f32 scrollX;\n                   f32 scrollY;\n                   s32 unused10;\n                   s32 unused14;\n                   s32 order;\n                   u32 flags;\n                   s32 hSize;\n                   s32 vSize;\n                   u32 hideTimer;\n                   s32 left;\n                   s32 top;\n                   s32 right;\n                   s32 bottom;\n                   s32 x;\n                   s32 y;\n                   s32 width;\n                   s32 height;\n                   s32 unk30;\n                   s32 D_800730D4;\n                   BgLayer bg[16];\n} Tilemap;\ntypedef struct {\n                     u16 flags;\n                     u16 unk2;\n                     u16 unk4;\n                     s16 zPriority;\n} FgLayer;\ntypedef struct {\n                   Collider colliders[4];\n                   Collider colliders2[4];\n                   Collider colliders3[14];\n                   s32 padPressed;\n                   s32 padTapped;\n                   s32 padHeld;\n                   u32 padSim;\n                   s32 D_80072EF8;\n                   s32 D_80072EFC;\n                   s16 D_80072F00[16];\n                   s32 pl_vram_flag;\n                   s32 unk04;\n                   s32 unk08;\n                   u32 unk0C;\n                   s32 unk10;\n                   u32 unk14;\n                   s32 unk18;\n                   s32 unk1C;\n                   s32 unk20;\n                   s32 unk24;\n                   s32 unk28;\n                   s32 unk2C;\n                   s32 unk30;\n                   s32 unk34;\n                   s32 unk38;\n                   s32 unk3C;\n                   u16 unk40;\n                   u16 pl_high_jump_timer;\n                   u16 unk44;\n                   u16 unk46;\n                   u16 unk48;\n                   s16 unk4A;\n                   u16 unk4C;\n                   u16 unk4E;\n                   u16 unk50;\n                   u16 unk52;\n                   u16 unk54;\n                   u16 unk56;\n                   u16 unk58;\n                   u16 damageTaken;\n                   u16 unk5C;\n                   u16 unk5E;\n                   u16 unk60;\n                   u16 unk62;\n                   u16 unk64;\n                   u16 unk66;\n                   u16 unk68;\n                   u16 unk6A;\n                   u16 unk6C;\n                   u16 unk6E;\n                   u16 unk70;\n                   u16 unk72;\n                   u32 unk74;\n                   u16 unk78;\n                   u16 unk7A;\n                   u16 unk7C;\n                   u16 unk7E;\n} PlayerState;\ntypedef struct {\n               RECT rect0;\n               RECT rect1;\n               RECT rect2;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 enableColorBlend;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 flipX;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 unk27;\n} PlayerDraw;\ntypedef struct {\n    s16 buttonsCorrect;\n    s16 timer;\n} ButtonComboState;\nextern s32 D_8003925C;\nextern s32 g_IsTimeAttackUnlocked;\nextern u8 g_CastleFlags[0x300];\nextern s32 D_8003C0EC[4];\nextern s32 D_8003C0F8;\nextern s32 D_8003C100;\nextern u16 g_ClutIds[];\nextern s32 D_8003C704;\nextern FgLayer D_8003C708;\nextern s16 D_8003C710;\nextern s16 D_8003C712;\nextern s32 D_8003C728;\nextern s32 D_8003C730;\nextern GameState g_GameState;\nextern s32 D_8003C738;\nextern s32 D_8003C73C;\nextern u32 D_8003C744;\nextern u32 g_RoomCount;\nextern GameApi g_api;\nextern s32 D_8003C8B8;\nextern u32 g_GameTimer;\nextern bool D_8003C908;\nextern s32 g_EquippedWeaponIds[2];\nextern u32 g_Timer;\nextern s32 g_MapCursorTimer;\n                 extern s32 g_PlayableCharacter;\n                 extern u32 D_8003C9A4;\n                 extern MenuNavigation g_MenuNavigation;\n                 extern GameSettings g_Settings;\nextern GpuBuffer g_GpuBuffers[2];\nextern s16 g_GpuBuffers_1_buf_draw_clip_y;\nextern const char g_MemcardSavePath[];\nextern const char aBaslus00067dra[19];\nextern const char g_strMemcardRootPath[];\nextern s32 g_LoadFile;\nextern s32 D_8006BB00;\nextern u8 g_CastleMap[0x800];\nextern s32 D_8006C374;\nextern s32 D_8006C378;\nextern GpuBuffer* g_CurrentBuffer;\nextern Point32 D_8006C384;\nextern Point32 D_8006C38C;\nextern u32 g_CdStep;\nextern s32 D_8006C3AC;\nextern s32 g_backbufferX;\nextern s32 g_backbufferY;\nextern s32 g_IsUsingCd;\nextern Entity* g_CurrentEntity;\nextern Unkstruct_8006C3C4 D_8006C3C4[32];\nextern s32 g_Servant;\nextern u16 g_Clut[0x3000];\nextern u16 D_8006EBCC[0x1000];\nextern u16 D_8006EBE0;\nextern s16 D_800705CC[];\nextern u32 D_80070BCC;\nextern PlayerState g_Player;\nextern Entity* D_psp_091CF3A0;\nextern s32 D_psp_091CF3A4;\nextern void (*D_psp_091CF3A8)(Entity*);\nextern s32 D_psp_091CF3AC;\nextern u16 D_psp_091CF3DC;\nextern GfxLoad g_GfxLoad[0x10];\nextern u32 g_GameStep;\nextern s32 g_ServantLoaded;\nextern Event g_EvSwCardEnd;\nextern Event g_EvSwCardErr;\nextern Event g_EvSwCardTmo;\nextern s32 g_PrevScrollX;\nextern Event g_EvSwCardNew;\nextern s32 g_PrevScrollY;\nextern s32 D_80073080;\nextern Tilemap g_Tilemap;\nextern Entity g_Entities[256];\nextern s32 g_entityDestroyed[18];\nextern Event g_EvHwCardEnd;\nextern Event g_EvHwCardErr;\nextern Event g_EvHwCardTmo;\nextern Event g_EvHwCardNew;\nextern u8 g_Pix[4][128 * 128 / 2];\nextern Primitive g_PrimBuf[0x500];\nextern s32 g_PlayerX;\nextern s32 g_PlayerY;\nextern u32 g_randomNext;\nextern s32 D_80096ED8[];\nextern s8 D_80097B98;\nextern s8 D_80097B99;\nextern s32 D_800973EC;\nextern unkGraphicsStruct g_unkGraphicsStruct;\nextern s32 D_80097448[];\nextern s32 D_80097450;\nextern Pos D_80097488;\nextern Pad g_pads[2];\nextern Stages g_StageId;\nextern s32 D_800974A4;\nextern DR_ENV D_800974AC[16];\nextern s32 g_UseDisk;\nextern s32 D_800978B4;\nextern s32 D_800978C4;\nextern u32 g_MenuStep;\nextern char D_80097902[];\nextern s32 D_80097904;\nextern s32 g_ScrollDeltaX;\nextern s32 g_ScrollDeltaY;\nextern s32 D_80097910;\nextern DemoMode g_DemoMode;\nextern s32 g_LoadOvlIdx;\nextern s32 D_8009791C;\nextern s32 D_80097920;\nextern s32 D_80097924;\nextern s32 D_80097928;\nextern GpuUsage g_GpuUsage;\nextern PlayerStatus g_Status;\nextern s32 D_80097C98;\nextern s32 subWeapon;\nextern u8 g_SaveName[12] ;\nextern u32 D_80097C40[];\nextern PlayerDraw g_PlayerDraw[0x10];\nextern s32 D_800987B4;\nextern s32 D_800987C8;\nextern s32 g_DebugPlayer;\nextern s32 D_80098894;\ntypedef enum ItemSlots {\n    LEFT_HAND_SLOT,\n    RIGHT_HAND_SLOT,\n    HEAD_SLOT,\n    ARMOR_SLOT,\n    CAPE_SLOT,\n    ACCESSORY_1_SLOT,\n    ACCESSORY_2_SLOT,\n    NUM_ITEM_SLOTS,\n} ItemSlots;\ntypedef enum HandItems {\n                ITEM_EMPTY_HAND,\n                ITEM_MONSTER_VIAL_1,\n                ITEM_MONSTER_VIAL_2,\n                ITEM_MONSTER_VIAL_3,\n                ITEM_SHIELD_ROD,\n                ITEM_LEATHER_SHIELD,\n                ITEM_KNIGHT_SHIELD,\n                ITEM_IRON_SHIELD,\n                ITEM_AXELORD_SHIELD,\n                ITEM_HERALD_SHIELD,\n                ITEM_DARK_SHIELD,\n                ITEM_GODDESS_SHIELD,\n                ITEM_SHAMAN_SHIELD,\n                ITEM_MEDUSA_SHIELD,\n                ITEM_SKULL_SHIELD,\n                ITEM_FIRE_SHIELD,\n                ITEM_ALUCARD_SHIELD,\n                ITEM_SWORD_OF_DAWN,\n                ITEM_BASILARD,\n                ITEM_SHORT_SWORD,\n                ITEM_COMBAT_KNIFE,\n                ITEM_NUNCHAKU,\n                ITEM_WERE_BANE,\n                ITEM_RAPIER,\n                ITEM_KARMA_COIN,\n                ITEM_MAGIC_MISSILE,\n                ITEM_RED_RUST,\n                ITEM_TAKEMITSU,\n                ITEM_SHOTEL,\n                ITEM_ORANGE,\n                ITEM_APPLE,\n                ITEM_BANANA,\n                ITEM_GRAPES,\n                ITEM_STRAWBERRY,\n                ITEM_PINEAPPLE,\n                ITEM_PEANUTS,\n                ITEM_TOADSTOOL,\n                ITEM_SHIITAKE,\n                ITEM_CHEESECAKE,\n                ITEM_SHORTCAKE,\n                ITEM_TART,\n                ITEM_PARFAIT,\n                ITEM_PUDDING,\n                ITEM_ICE_CREAM,\n                ITEM_FRANKFURTER,\n                ITEM_HAMBURGER,\n                ITEM_PIZZA,\n                ITEM_CHEESE,\n                ITEM_HAM_AND_EGGS,\n                ITEM_OMELETTE,\n                ITEM_MORNING_SET,\n                ITEM_LUNCH_A,\n                ITEM_LUNCH_B,\n                ITEM_CURRY_RICE,\n                ITEM_GYROS_PLATE,\n                ITEM_SPAGHETTI,\n                ITEM_GRAPE_JUICE,\n                ITEM_BARLEY_TEA,\n                ITEM_GREEN_TEA,\n                ITEM_NATOU,\n                ITEM_RAMEN,\n                ITEM_MISO_SOUP,\n                ITEM_SUSHI,\n                ITEM_PORK_BUN,\n                ITEM_RED_BEAN_BUN,\n                ITEM_CHINESE_BUN,\n                ITEM_DIM_SUM_SET,\n                ITEM_POT_ROAST,\n                ITEM_SIRLION,\n                ITEM_TURKEY,\n                ITEM_MEAL_TICKET,\n                ITEM_NEUTRON_BOMB,\n                ITEM_POWER_OF_SIRE,\n                ITEM_PENTAGRAM,\n                ITEM_BAT_PENTAGRAM,\n                ITEM_SHURIKEN,\n                ITEM_CROSS_SHURIKEN,\n                ITEM_BUFFALO_STAR,\n                ITEM_FLAME_STAR,\n                ITEM_TNT,\n                ITEM_BWAKA_KNIFE,\n                ITEM_BOOMERANG,\n                ITEM_JAVELIN,\n                ITEM_TYRFING,\n                ITEM_NAMAKURA,\n                ITEM_KNUCKLE_DUSTER,\n                ITEM_GLADIUS,\n                ITEM_SCIMITAR,\n                ITEM_CUTLASS,\n                ITEM_SABER,\n                ITEM_FALCHION,\n                ITEM_BROADSWORD,\n                ITEM_BEKATOWA,\n                ITEM_DAMASCUS_SWORD,\n                ITEM_HUNTER_SWORD,\n                ITEM_ESTOC,\n                ITEM_BASTARD_SWORD,\n                ITEM_JEWEL_KNUCKLES,\n                ITEM_CLAYMORE,\n                ITEM_TALWAR,\n                ITEM_KATANA,\n                ITEM_FLAMBERGE,\n                ITEM_IRON_FIST,\n                ITEM_ZWEIHANDER,\n                ITEM_SWORD_OF_HADOR,\n                ITEM_LUMINUS,\n                ITEM_HARPER,\n                ITEM_OBSIDIAN_SWORD,\n                ITEM_GRAM,\n                ITEM_JEWEL_SWORD,\n                ITEM_MORMEGIL,\n                ITEM_FIREBRAND,\n                ITEM_THUNDERBRAND,\n                ITEM_ICEBRAND,\n                ITEM_STONE_SWORD,\n                ITEM_HOLY_SWORD,\n                ITEM_TERMINUS_EST,\n                ITEM_MARSIL,\n                ITEM_DARK_BLADE,\n                ITEM_HEAVEN_SWORD,\n                ITEM_FIST_OF_TULKAS,\n                ITEM_GURTHANG,\n                ITEM_MOURNEBLADE,\n                ITEM_ALUCARD_SWORD,\n                ITEM_MABLUNG_SWORD,\n                ITEM_BADELAIRE,\n                ITEM_SWORD_FAMILIAR,\n                ITEM_GREAT_SWORD,\n                ITEM_MACE,\n                ITEM_MORNINGSTAR,\n                ITEM_HOLY_ROD,\n                ITEM_STAR_FLAIL,\n                ITEM_MOON_ROD,\n                ITEM_CHAKRAM,\n                ITEM_FIRE_BOOMERANG,\n                ITEM_IRON_BALL,\n                ITEM_HOLBEIN_DAGGER,\n                ITEM_BLUE_KNUCKLES,\n                ITEM_DYNAMITE,\n                ITEM_OSAFUNE_KATANA,\n                ITEM_MASAMUNE,\n                ITEM_MURAMASA,\n                ITEM_HEART_REFRESH,\n                ITEM_RUNESWORD,\n                ITEM_ANTIVENOM,\n                ITEM_UNCURSE,\n                ITEM_LIFE_APPLE,\n                ITEM_HAMMER,\n                ITEM_STR_POTION,\n                ITEM_LUCK_POTION,\n                ITEM_SMART_POTION,\n                ITEM_ATTACK_POTION,\n                ITEM_SHIELD_POTION,\n                ITEM_RESIST_FIRE,\n                ITEM_RESIST_THUNDER,\n                ITEM_RESIST_ICE,\n                ITEM_RESIST_STONE,\n                ITEM_RESIST_HOLY,\n                ITEM_RESIST_DARK,\n                ITEM_POTION,\n                ITEM_HIGH_POTION,\n                ITEM_ELIXIR,\n                ITEM_MANNA_PRISM,\n                ITEM_VORPAL_BLADE,\n                ITEM_CRISSAEGRIM,\n                ITEM_YASUTSUNA,\n                ITEM_LIBRARY_CARD,\n                ITEM_ALUCART_SHIELD,\n                ITEM_ALUCART_SWORD,\n                NUM_HAND_ITEMS,\n} HandItems;\ntypedef enum BodyItems {\n               ITEM_NO_ARMOR,\n               ITEM_CLOTH_TUNIC,\n               ITEM_HIDE_CUIRASS,\n               ITEM_BRONZE_CUIRASS,\n               ITEM_IRON_CUIRASS,\n               ITEM_STEEL_CUIRASS,\n               ITEM_SILVER_PLATE,\n               ITEM_GOLD_PLATE,\n               ITEM_PLATINUM_MAIL,\n               ITEM_DIAMOND_PLATE,\n               ITEM_FIRE_MAIL,\n               ITEM_LIGHTNING_MAIL,\n               ITEM_ICE_MAIL,\n               ITEM_MIRROR_CUIRASS,\n               ITEM_SPIKE_BREAKER,\n               ITEM_ALUCARD_MAIL,\n               ITEM_DARK_ARMOR,\n               ITEM_HEALING_MAIL,\n               ITEM_HOLY_MAIL,\n               ITEM_WALK_ARMOR,\n               ITEM_BRILLIANT_MAIL,\n               ITEM_MOJO_MAIL,\n               ITEM_FURY_PLATE,\n               ITEM_DRACULA_TUNIC,\n               ITEM_GODS_GARB,\n               ITEM_AXE_LORD_ARMOR,\n               ITEM_EMPTY_HEAD,\n               ITEM_SUNGLASSES,\n               ITEM_BALLROOM_MASK,\n               ITEM_BANDANNA,\n               ITEM_FELT_HAT,\n               ITEM_VELVET_HAT,\n               ITEM_GOGGLES,\n               ITEM_LEATHER_HAT,\n               ITEM_HOLY_GLASSES,\n               ITEM_STEEL_HELM,\n               ITEM_STONE_MASK,\n               ITEM_CIRCLET,\n               ITEM_GOLD_CIRCLET,\n               ITEM_RUBY_CIRCLET,\n               ITEM_OPAL_CIRCLET,\n               ITEM_TOPAZ_CIRCLET,\n               ITEM_BERYL_CIRCLET,\n               ITEM_CAT_EYE_CIRCLET,\n               ITEM_CORAL_CIRCLET,\n               ITEM_DRAGON_HELM,\n               ITEM_SILVER_CROWN,\n               ITEM_WIZARD_HAT,\n               ITEM_NO_CAPE,\n               ITEM_CLOTH_CAPE,\n               ITEM_REVERSE_CLOAK,\n               ITEM_ELVEN_CLOAK,\n               ITEM_CRYSTAL_CLOAK,\n               ITEM_ROYAL_CLOAK,\n               ITEM_BLOOD_CLOAK,\n               ITEM_JOSEPHS_CLOAK,\n               ITEM_TWILIGHT_CLOAK,\n               ITEM_NO_ACCESSORY,\n               ITEM_MOONSTONE,\n               ITEM_SUNSTONE,\n               ITEM_BLOODSTONE,\n               ITEM_STAUROLITE,\n               ITEM_RING_OF_PALES,\n               ITEM_ZIRCON,\n               ITEM_AQUAMARINE,\n               ITEM_TURQUOISE,\n               ITEM_ONYX,\n               ITEM_GARNET,\n               ITEM_OPAL,\n               ITEM_DIAMOND,\n               ITEM_LAPIS_LAZULI,\n               ITEM_RING_OF_ARES,\n               ITEM_GOLD_RING,\n               ITEM_SILVER_RING,\n               ITEM_RING_OF_VARDA,\n               ITEM_RING_OF_ARCANA,\n               ITEM_MYSTIC_PENDANT,\n               ITEM_HEART_BROACH,\n               ITEM_NECKLACE_OF_J,\n               ITEM_GAUNTLET,\n               ITEM_ANKH_OF_LIFE,\n               ITEM_RING_OF_FEANOR,\n               ITEM_MEDAL,\n               ITEM_TALISMAN,\n               ITEM_DUPLICATOR,\n               ITEM_KINGS_STONE,\n               ITEM_COVENANT_STONE,\n               ITEM_NAUGLAMIR,\n               ITEM_SECRET_BOOTS,\n               ITEM_ALUCART_MAIL,\n               NUM_BODY_ITEMS,\n} BodyItems;\nvoid EntityBreakable(Entity*);\nvoid EntityExplosion(Entity*);\nvoid EntityPrizeDrop(Entity*);\nvoid EntityDamageDisplay(Entity*);\nvoid EntityRedDoor(Entity*);\nvoid EntityIntenseExplosion(Entity*);\nvoid EntitySoulStealOrb(Entity*);\nvoid EntityRoomForeground(Entity*);\nvoid EntityStageNamePopup(Entity*);\nvoid EntityEquipItemDrop(Entity*);\nvoid EntityRelicOrb(Entity*);\nvoid EntityHeartDrop(Entity*);\nvoid EntityEnemyBlood(Entity*);\nvoid EntityMessageBox(Entity*);\nvoid EntityDummy(Entity*);\ntypedef enum { MONO_SOUND, STEREO_SOUND } soundMode;\nenum Sfx {\n    SFX_HARPY_WING_FLAP = 0x601,\n    SFX_RIC_WHIP_RATTLE_A,\n    SFX_RIC_WHIP_RATTLE_B,\n    SFX_RIC_WHIP_RATTLE_C,\n    SFX_RIC_WHIP_RATTLE_D,\n    SFX_RIC_WHIP_RATTLE_E,\n    SFX_STONE_MOVE_A,\n    SFX_STONE_MOVE_B,\n    SFX_STONE_MOVE_C,\n    SFX_WEAPON_SWISH_A,\n    SFX_WEAPON_SWISH_B,\n    SFX_WEAPON_SWISH_C,\n    SFX_METAL_CLANG_A,\n    SFX_METAL_CLANG_B,\n    SFX_METAL_CLANG_C,\n    SFX_METAL_CLANG_D,\n    SFX_METAL_CLANG_E,\n    SFX_METAL_CLANG_F,\n    SFX_UNK_CROW,\n    SFX_ELECTRICITY,\n    SFX_SCRAPE_A,\n    SFX_SCRAPE_B,\n    SFX_SCRAPE_C,\n    SFX_UNK_618,\n    SFX_GLASS_BREAK_A,\n    SFX_GLASS_BREAK_B,\n    SFX_GLASS_BREAK_C,\n    SFX_GLASS_BREAK_D,\n    SFX_GLASS_BREAK_E,\n    SFX_BAT_ECHO_A,\n    SFX_BAT_ECHO_B,\n    SFX_BAT_ECHO_C,\n    SFX_BAT_ECHO_D,\n    SFX_SKULL_BONK,\n    SFX_RIC_RSTONE_TINK,\n    SFX_SMALL_BURST,\n    SFX_ARROW_SHOT_A,\n    SFX_ARROW_SHOT_B,\n    SFX_ARROW_SHOT_C,\n    SFX_ARROW_SHOT_D,\n    SFX_SKELETON_DEATH_A,\n    SFX_SKELETON_DEATH_B,\n    SFX_SKELETON_DEATH_C,\n    SFX_FIRE_SHOT,\n    SFX_WEAPON_STAB_A,\n    SFX_WEAPON_STAB_B,\n    SFX_WEAPON_APPEAR,\n    SFX_UNK_BETA_630,\n    SFX_DEATH_AMBIENCE,\n    SFX_MAGIC_GLASS_BREAK,\n    SFX_UI_CONFIRM,\n    SFX_CANDLE_HIT,\n    SFX_TELEPORT_BANG_A,\n    SFX_TELEPORT_BANG_B,\n    SFX_SUC_APPEAR,\n    SFX_UNK_SCRAPE_A,\n    SFX_UNK_SCRAPE_B,\n    SFX_UNK_SCRAPE_C,\n    SFX_UNK_UI_SELECT,\n    SFX_START_SLAM_A,\n    SFX_START_SLAM_B,\n    SFX_START_SLAM_C,\n    SFX_ANIME_SWORD_A,\n    SFX_ANIME_SWORD_B,\n    SFX_ANIME_SWORD_C,\n    SFX_DOOR_OPEN,\n    SFX_WALL_DEBRIS_A,\n    SFX_WALL_DEBRIS_B,\n    SFX_WALL_DEBRIS_C,\n    SFX_STOMP_HARD_A,\n    SFX_STOMP_HARD_B,\n    SFX_STOMP_HARD_C,\n    SFX_STOMP_HARD_D,\n    SFX_STOMP_HARD_E,\n    SFX_STOMP_SOFT_A,\n    SFX_STOMP_SOFT_B,\n    SFX_SAVE_HEARTBEAT,\n    SFX_BAT_SCREECH,\n    SFX_DOOR_CLOSE_A,\n    SFX_DOOR_CLOSE_B,\n    SFX_UNK_UI_ERROR,\n    SFX_EXPLODE_FAST_A,\n    SFX_EXPLODE_FAST_B,\n    SFX_EXPLODE_A,\n    SFX_EXPLODE_B,\n    SFX_EXPLODE_C,\n    SFX_EXPLODE_D,\n    SFX_EXPLODE_E,\n    SFX_EXPLODE_F,\n    SFX_FM_EXPLODE_A,\n    SFX_FM_EXPLODE_B,\n    SFX_FM_EXPLODE_C,\n    SFX_FM_EXPLODE_D,\n    SFX_EXPLODE_SMALL,\n    SFX_WEAPON_HIT = 0x678,\n    SFX_HEART_PICKUP = 0x67A,\n    SFX_ITEM_PICKUP = 0x67C,\n    SFX_GOLD_PICKUP = 0x6A9,\n};\ntypedef struct {\n              u16 posX;\n              u16 posY;\n              u16 entityId;\n              u16 entityRoomIndex;\n              u16 params;\n} LayoutEntity;\ntypedef struct {\n    u16* layout;\n    TileDefinition* tileDef;\n    u32 params;\n    u16 zPriority;\n    u8 unkE;\n    u8 unkF;\n} MyLayer;\ntypedef struct {\n    MyLayer* fg;\n    MyLayer* bg;\n} MyRoomDef;\nextern LayoutEntity* g_pStObjLayoutHorizontal[];\nextern LayoutEntity* g_pStObjLayoutVertical[];\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern u16 g_ItemIconSlots[0x20];\nvoid InitRoomEntities(s32 objLayoutId);\nvoid UpdateRoomPosition();\nvoid Update(void);\nvoid HitDetection(void);\ns32 Random();\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\nvoid CreateEntityFromLayout(Entity* entity, LayoutEntity* initDesc);\nvoid DestroyEntity(Entity*);\nvoid DestroyEntitiesFromIndex(s16 index);\nvoid MoveEntity();\nvoid FallEntity(void);\nEntity* AllocEntity(Entity* start, Entity* end);\ntypedef struct EntityInit {\n    u16 animSet;\n    u16 animCurFrame;\n    u16 unk5A;\n    u16 palette;\n    u16 enemyId;\n    u16 : 16;\n} EntityInit;\nvoid InitializeEntity(u16 arg0[]);\ntypedef enum {\n    E_NONE,\n    E_BREAKABLE,\n    E_EXPLOSION,\n    E_PRIZE_DROP,\n    E_NUMERIC_DAMAGE,\n    E_RED_DOOR,\n    E_INTENSE_EXPLOSION,\n    E_SOUL_STEAL_ORB,\n    E_ROOM_FOREGROUND,\n    E_DUMMY_09,\n    E_EQUIP_ITEM_DROP,\n    E_DUMMY_0B,\n    E_DUMMY_0C,\n    E_DUMMY_0D,\n    E_DUMMY_0E,\n    E_DUMMY_0F,\n    E_DUMMY_10,\n    E_ID_14 = 0x14,\n    E_ID_15,\n    E_ID_26 = 0x26,\n    E_SECRET_BUTTON = 0x28,\n    E_SECRET_STAIRS = 0x29,\n} EntityIDs;\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\ns32 GetSideToPlayer();\nvoid MoveEntity();\nvoid SetStep(u8);\nvoid EntityExplosion(Entity*);\nvoid EntityUnkId14(Entity* entity);\nvoid EntityUnkId15(Entity* entity);\nextern const char* D_801A7984;\nextern const char* D_801A7990;\nextern const char* D_801A799C;\nextern s8 c_HeartPrizes[10];\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern bool g_isSecretStairsButtonPressed;\nextern bool g_isDraculaFirstFormDefeated;\nextern u16 D_80180574[];\nextern u16 g_InitializeEntityData0[];\nextern u16 D_80180598[];\nextern u16 g_eInitGeneric2[];\nextern u16 D_801805D4[];\nextern u16 D_801805E0[];\nextern u16 D_801805EC[];\nextern u16 D_80180604[];\nextern u16 D_80180610[];\nextern u16 D_8018061C[];\nextern u16 D_80180628[];\nextern ObjInit2 D_80180638[];\nextern s32 D_801806D0[];\nextern u8 D_801806F8[];\nextern u8 D_80180704[];\nextern u16 D_80180710[];\nextern s16 D_80180724[];\nextern s16 D_80180738[];\nextern s8 D_8018074C[];\nextern s16 D_80180758[];\nextern u8 D_80180770[];\nextern u8 D_80180830[];\nextern u8 D_8018083C[];\nextern u8 D_8018084C[];\nextern u8 D_8018085C[];\nextern u8 D_80180864[];\nextern u8 D_8018086C[];\nextern u8 D_8018087C[];\nextern u8 D_80180884[];\nextern u8 D_8018088C[];\nextern u8 D_80180894[];\nextern Point16 D_801808A0[];\nextern u16 D_801808B0[];\nextern s16 D_801808F8[];\nextern s32 D_80180908;\nextern s32 D_80180910;\nextern u8 D_80180914[];\nextern u8 D_80180924[];\nextern u8 D_80180934[];\nextern u8 D_80180944[];\nextern u8 D_80180954[];\nextern u8 D_80180964[];\nextern u8 D_8018097C[];\nextern u8 D_801809A4[];\nextern u8 D_80180A0C[];\nextern u8 D_80180A20[];\nextern u8 D_80180A2C[];\nextern u8 D_80180AA4[];\nextern u8 D_80180AB0[];\nextern u8 D_80180AC8[];\nextern u8 D_80180AD4[];\nextern u8 D_80180AEC[];\nextern u8 D_80180AFC[];\nextern u8 D_80180B20[];\nextern u8 D_80180B48[];\nextern u8 D_80180B58[];\nextern u8 D_80180B60[];\nextern u8 D_80180B80[];\nextern u8 D_80180BA0[];\nextern u8 D_80180BB8[];\nextern u8 D_80180BCC[];\nextern u8 D_80180BDC[];\nextern u16 D_80180A48[];\nextern Point16 D_80180A58[];\nextern u16 D_80180BE4[];\nextern s16 D_801810F4[];\nextern Point16 D_80181108[];\nextern s32 D_80181148;\nextern u32 D_8018114C;\nextern s16 D_80181150[];\nextern s16 D_8018129C[];\nextern u8 D_801813E8;\nextern u8 D_801814A8;\nextern u16 g_testCollEnemyLookup[];\nextern u8 g_testColluCoords[];\nextern u8 g_testCollvCoords[];\nextern u16 g_testCollElementLookup[10];\nextern u8 g_testColliFrames[10];\nextern u16 D_80181CAC[];\nextern u16 D_80181CDC[];\nextern u32 D_80181CF0[];\nextern s8 D_801A7B7C;\nextern Point32 D_801BEB64[];\nextern s32 D_801C2578;\nextern u32 D_801C257C;\nextern s32 D_801C2578;\nextern s16 D_80181990[];\nextern u16 g_InitializeData0[];\nextern u16 D_80181D74[];\nextern s16 D_80181E3C[];\nextern s16 D_80181E3E[];\nextern s16 D_80181EB0[];\nextern u32 D_80181EC0[];\nextern u16 D_80181F04[];\nextern u8 D_801824CC[];\nextern s8 D_801A7BDC;\nextern Point32 D_801BEB64[];\nextern s32 D_801C24C8;\nextern s16 D_801C24D4;\nextern s16 D_801C24D6;\nextern s16 D_801C24D8;\nextern s16 D_801C24DA;\nextern s16 D_801C24DC;\nextern s8 D_801C24DE;\nextern s8 D_801C24DF;\nextern Primitive* D_801C24E0;\nextern s32 D_801C24E4[];\nextern s32 D_801C2578;\nextern s32 D_801C2580;\nextern u16 g_ESoulStealOrbAngles[];\nextern s16 g_ESoulStealOrbSprt[];\nextern u8 g_ESoulStealOrbAnim[];\nextern u8 D_80180784[];\nextern u8 D_80180788[];\nextern u16 D_8018078C[];\nextern u16 D_80180790[];\nextern u16 D_80180794[];\nextern s16 D_80180798[];\nextern const char D_801829D8[];\nextern s32 D_801C24C8;\nextern s32 D_801C2504;\nextern u32 D_801C257C;\nextern s32 D_801C2580;\nextern Dialogue g_Dialogue;\n\nvoid SetWeaponProperties(Entity* self, s32 kind);\nvoid SetSpriteBank1(SpriteParts* animset);\nvoid SetSpriteBank2(SpriteParts* animset);\nvoid EntityWeaponAttack(Entity* self);\nvoid DestroyEntityWeapon(bool arg0);\n\nvoid LoadWeaponPalette(s32 clutIndex);\ns32 func_ptr_80170004(Entity* self);\nvoid func_ptr_80170008(Entity* self);\nvoid func_ptr_8017000C(Entity* self);\ns32 func_ptr_80170010(Entity* self);\ns32 func_ptr_80170014(Entity* self);\nint GetWeaponId(void);\nvoid EntityWeaponShieldSpell(Entity* self);\nvoid func_ptr_80170024(Entity* self);\nvoid func_ptr_80170028(Entity* self);\nvoid WeaponUnused2C(void);\nvoid WeaponUnused30(void);\nvoid WeaponUnused34(void);\nvoid WeaponUnused38(void);\nvoid WeaponUnused3C(void);\n\nvoid DestroyEntity(Entity* entity);\nvoid DecelerateX(s32 amount);\nvoid DecelerateY(s32 amount);\nvoid SetSpeedX(s32 speed);\n\nextern SpriteParts g_Animset[];\nextern s32 g_HandId;\nvoid func_154000_8017B810(Entity* ent, Point16* outPoint, bool arg2);\nextern u16 D_154000_8017AFE0[];	1	\N	73b3f488845849438b2951edbb8fa66f5fe29d2ddff43f1e6225d3a8590b77ee	func_ptr_80170004	ps1	11150		func_ptr_80170004	37100	[]	f	[]	\N	\N
gml3D	2024-08-20 22:17:53.692764+00	2024-08-20 22:18:15.574172+00	gcc2.6.3-psx	-O2 -G0 -funsigned-char -gcoff -Wa,--expand-div	extern SpriteParts D_18C000_8017A040;\nextern ? D_18C000_8017AF64;\nextern ? D_18C000_8017AF94;\nextern ? D_18C000_8017AF9C;\nextern s16 PLAYER_animFrameDuration;\nextern u16 PLAYER_animFrameIdx;\nextern u8 PLAYER_drawFlags;\nextern u8 PLAYER_ext_player_anim;\nextern u16 PLAYER_facingLeft;\nextern s32 PLAYER_posY_val;\nextern u16 PLAYER_rotPivotY;\nextern u16 PLAYER_rotY;\nextern u16 PLAYER_zPriority;\nextern s16 g_Player_D_80072F00_11;\nextern u16 g_Player_unk46;\n\nvoid EntityWeaponAttack(Entity* self) {\n    Primitive* var_s0;\n    Primitive* var_s0_2;\n    s16 temp_v0;\n    s16 temp_v0_3;\n    s16 temp_v1_2;\n    s16 temp_v1_3;\n    s32 temp_a0;\n    s32 temp_v1_4;\n    s32 var_a0;\n    s32 var_a1;\n    s32 var_a2;\n    s32 var_s1;\n    s32 var_s1_2;\n    s32 var_s4;\n    s32 var_v0;\n    s32 var_v0_2;\n    s32 var_v0_3;\n    u8 temp_v0_2;\n    u8 temp_v1;\n    void* temp_s3;\n\n    var_s4 = saved_reg_s4;\n    self->posX.val = g_Entities->posX.val;\n    self->posY.val = PLAYER_posY_val;\n    self->facingLeft = PLAYER_facingLeft;\n    var_v0 = self->unk31 & 0x7F;\n    if (g_Player_D_80072F00_11 != 0) {\n        var_v0 = 2;\n    }\n    temp_s3 = (var_v0 * 0x10) + &D_18C000_8017AF64;\n    temp_v1 = temp_s3->unkC;\n    if (((u8) PLAYER_ext_player_anim >= temp_v1) && ((s32) PLAYER_ext_player_anim < (temp_v1 + 7)) && (g_Player_unk46 != 0)) {\n        if (self->step == 0) {\n            SetSpriteBank1(&D_18C000_8017A040);\n            self->animSet = -0x7FF0;\n            self->palette = 0x110;\n            self->unk5A = 0x64;\n            if (g_HandId != 0) {\n                self->animSet = (u16) self->animSet + 2;\n                self->unk5A += 2;\n                self->palette += 0x18;\n            }\n            self->flags = 0x60000;\n            self->palette += temp_s3->unk8;\n            temp_v0 = g_api_AllocPrimitives(PRIM_LINE_G2, 0xC);\n            self->primIndex = (s32) temp_v0;\n            if (temp_v0 != -1) {\n                var_s1 = 0;\n                var_s0 = &g_PrimBuf[self->primIndex];\n                self->flags |= 0x800000;\n                var_v0_2 = 0 < 4;\n                do {\n                    var_v0_3 = var_s1 < 7;\n                    if (var_v0_2 != 0) {\n                        var_s0->r2 = rand() & 3;\n                        var_s0->b2 = 1;\n                        var_v0_3 = var_s1 < 7;\n                    }\n                    if ((var_v0_3 == 0) && (var_s1 & 1)) {\n                        var_s0->r2 = rand() & 0xF;\n                        var_s0->b2 = 2;\n                    } else {\n                        var_s0->r2 = rand() & 7;\n                        var_s0->b2 = 1;\n                    }\n                    var_s0->r3 = var_s1 / 6;\n                    if (var_s1 == 0xB) {\n                        var_s0->r2 = 0x18;\n                        var_s0->r3 = 2;\n                        var_s0->b2 = 3;\n                    }\n                    var_s0->r1 = 0xFF;\n                    var_s0->r0 = 0xFF;\n                    temp_v0_2 = rand() & 0x1F;\n                    var_s1 += 1;\n                    var_s0->g1 = temp_v0_2;\n                    var_s0->g0 = temp_v0_2;\n                    var_s0->b1 = temp_v0_2;\n                    var_s0->b0 = temp_v0_2;\n                    var_s0->drawMode = 0x308;\n                    var_s0->priority = PLAYER_zPriority;\n                    var_s0 = var_s0->next;\n                    var_v0_2 = var_s1 < 4;\n                } while (var_s1 < 0xC);\n            }\n            self->drawMode = 0x30;\n            self->zPriority = PLAYER_zPriority - 2;\n            SetWeaponProperties(self, 0);\n            if (self->attack >= 0x1E) {\n                g_api_CreateEntFactoryFromEntity(self, ((g_HandId + 1) << 0xC) | 0x38, 0);\n            }\n            self->step += 1;\n        }\n        self->ext.stub[0x30] = PLAYER_ext_player_anim - temp_s3->unkC;\n        if ((PLAYER_animFrameDuration == 1) && (PLAYER_animFrameIdx == temp_s3->unkD)) {\n            g_api_PlaySfx((s32) temp_s3->unkA);\n        }\n        if (g_api_UpdateUnarmedAnim(temp_s3->unk4, temp_s3->unk0) < 0) {\n            goto block_26;\n        }\n        temp_v1_2 = self->animCurFrame;\n        self->drawFlags = PLAYER_drawFlags;\n        self->rotY = (s16) PLAYER_rotY;\n        self->rotPivotY = (s16) PLAYER_rotPivotY;\n        if ((temp_v1_2 == 0xD) || (temp_v1_2 == 0x22) || (temp_v1_2 == 0x2C) || (temp_v1_2 == 0x3E)) {\n            var_s1_2 = 0;\n            if (self->primIndex != -1) {\n                var_s0_2 = &g_PrimBuf[self->primIndex];\n                self->flags |= 0x800000;\n                do {\n                    temp_v1_3 = self->animCurFrame;\n                    if (temp_v1_3 != 0x22) {\n                        if (temp_v1_3 < 0x23) {\n                            var_a2 = var_s4 * 2;\n                            if (temp_v1_3 != 0xD) {\n\n                            } else {\n                                var_s4 = 0;\n                                goto block_44;\n                            }\n                        } else if (temp_v1_3 != 0x2C) {\n                            var_a2 = var_s4 * 2;\n                            if (temp_v1_3 != 0x3E) {\n\n                            } else {\n                                var_s4 = 3;\n                                goto block_44;\n                            }\n                        } else {\n                            var_s4 = 2;\n                            goto block_44;\n                        }\n                    } else {\n                        var_s4 = 1;\nblock_44:\n                        var_a2 = var_s4 * 2;\n                    }\n                    var_a0 = -1;\n                    temp_v1_4 = *(var_a2 + &D_18C000_8017AF94) - var_s1_2;\n                    var_a1 = temp_v1_4;\n                    if (self->facingLeft != 0) {\n                        var_a1 = -temp_v1_4;\n                        var_a0 = 1;\n                    }\n                    var_s0_2->x2 = var_a0 + (u16) var_s0_2->x2;\n                    temp_v0_3 = var_a1 + (u16) self->posX.i.hi;\n                    var_s0_2->x0 = temp_v0_3;\n                    var_s0_2->x1 = temp_v0_3 + (u16) var_s0_2->x2;\n                    temp_a0 = *(&D_18C000_8017AF9C + var_a2) + (var_s1_2 / 6);\n                    var_s0_2->y0 = temp_a0 + (u16) self->posY.i.hi;\n                    var_s0_2->y1 = var_s0_2->r3 + (temp_a0 + (u16) self->posY.i.hi);\n                    if ((u8) var_s0_2->r3 < (u8) var_s0_2->r2) {\n                        var_s0_2->r3 += var_s0_2->b2;\n                    }\n                    var_s1_2 += 1;\n                    var_s0_2->drawMode &= 0xFFF7;\n                    var_s0_2 = var_s0_2->next;\n                } while (var_s1_2 < 0xC);\n            }\n        }\n        return;\n    }\nblock_26:\n    DestroyEntity(self);\n}\n/* Warning: struct draculaPrimitive is not defined (only forward-declared) */\n	#define MU_DEATH_BALLAD 0x334\n#define NA_VO_DEATH_LAUGH 0x7A1\n#define PAL_DRA(x) (x)\n#define EvSpNEW 0x2000\n#define EvSpINT 0x0002\n#define PLAYER_STATUS_AXEARMOR 0x01000000\n#define CdlModeSpeedDouble 1\n#define CdlDataEnd 0x04\n#define PLAYER_STATUS_UNK1000 0x1000\n#define HwCARD_0 (DescHW | 0x12)\n#define HwCARD_1 (DescHW | 0x13)\n#define FWLOCK 0x0020\n#define SPU_VOICE_ADSR_DR (0x01 << 12)\n#define SAVE_FLAG_REPLAY (2)\n#define SE_INTRO_WIND_QUIET 0x32C\n#define MU_MOONLIGHT_NOCTURNE 0x340\n#define gte_stsxy(r0) \n#define KERNEL_H \n#define MU_SILENCE 0x33D\n#define RCntMdFR 0x0000\n#define SS_IMEDIATE 0\n#define PAL_TERMINATE() ((u_long*)-1)\n#define VERSION_US \n#define SFX_UNK_647 0x647\n#define PAD_LEFT 0x8000\n#define setlen(p,_len) (((P_TAG*)(p))->len = (u_char)(_len))\n#define MU_CRYSTAL_TEARDROPS_LOOP_POINT 0x30C\n#define EvSpACK 0x0010\n#define NA_VO_SU_NO_SCREAM 0x87B\n#define SS_TICK120 3\n#define MU_ABANDONED_PIT_LOOP_POINT 0x31A\n#define NA_SE_SU_CHARGE_PINKBALLS 0x6E2\n#define CdlForward 0x04\n#define SPAD(x) ((s32*)SP(x * sizeof(s32)))\n#define CD_SOUND_COMMAND_8 8\n#define FLAG_UNK_10000000 0x10000000\n#define NA_SE_EN_SPITTLEBONE_ACID_SPLAT 0x73C\n#define getaddr(p) (u_long)(((P_TAG*)(p))->addr)\n#define CdlGetTN 0x13\n#define MU_MARBLE_GALLERY 0x30D\n#define FIX(x) ((s32)((x) * 65536.0))\n#define HEART_VESSEL_INCREASE 5\n#define PLAYER_STATUS_UNK800000 0x800000\n#define JP_VO_YANAMI_JYOUJI_MESSAGE 0x34B\n#define OTSIZE 0x200\n#define EvStACTIVE 0x2000\n#define LIBAPI_H \n#define PRIMITIVE_H \n#define SFX_UNK_6B1 0x6B1\n#define SFX_UNK_6B2 0x6B2\n#define FLAG_UNK_400000 0x400000\n#define EvSpERROR 0x8000\n#define WEAPON_0_END (WEAPON_1_START - 1)\n#define NAMEOF(var) #var\n#define FLAG_UNK_800 0x800\n#define SPU_VOICE_ADSR_RR (0x01 << 14)\n#define JP_VO_SATOU_MASAHARU_MESSAGE 0x348\n#define blendMode drawMode\n#define SPU_VOICE_ADSR_AMODE (0x01 << 8)\n#define NA_SE_PL_TELEPORT 0x8BA\n#define RCntMdSC 0x0001\n#define SFX_UNK_6A0 0x6A0\n#define RCntMdSP 0x0000\n#define PLAYER_STATUS_UNK10 0x10\n#define COLOR_LEN ((COLOR_BPP) / 8)\n#define NA_SE_EN_BONE_SCIMITAR_SWORD_SLASH 0x66D\n#define MU_FINAL_TOCATTA 0x338\n#define SS_TICKMODE_MAX 6\n#define DRAW_UNK_100 0x100\n#define JP_VO_YOKOYAMA_CHISA_MESSAGE 0x34A\n#define CD_SOUND_COMMAND_14 14\n#define COMMON_H \n#define CD_SOUND_COMMAND_16 16\n#define PLAYER_STATUS_UNK40 0x40\n#define SPU_VOICE_SAMPLE_NOTE (0x01 << 6)\n#define CdlReadN 0x06\n#define MaxEntityCount 32\n#define PLAYER_STATUS_POISON 0x00004000\n#define CdlNop 0x01\n#define JP_VO_SH_GROAN 0x52E\n#define ALIGNED4 \n#define FLAG_UNK_4 0x4\n#define NA_VO_RI_IMPRESSIVE_ESCAPE 0x3DB\n#define JP_VO_YANADA_KIYOYUKI_MESSAGE 0x346\n#define HwCPU (DescHW | 0x10)\n#define MU_RAINBOW_CEMETERY_LOOP_POINT 0x308\n#define getcode(p) (u_char)(((P_TAG*)(p))->code)\n#define FIX_FRAC(x) (*(s16*)&(x))\n#define WARNF(...) _log(LOG_LEVEL_W, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define gte_ldv0(r0) \n#define gte_ldv3(r0,r1,r2) \n#define NA_SE_EV_WATER_SPLASH 0x7C2\n#define PAD_TRIANGLE 0x0010\n#define MU_THE_TRAGIC_PRINCE 0x311\n#define FONT_SPACE 4\n#define DISP_ALL_H 240\n#define EvSpPERROR 0x8001\n#define NA_SE_EN_GAIBON_FLAME 0x691\n#define EvMdNOINTR 0x2000\n#define MEMCPY memcpy\n#define gte_SetRotMatrix(r0) \n#define HwCNTL (DescHW | 0x08)\n#define OT_TYPE u_long\n#define DEMO_MAX_LEN 0x2000\n#define MU_CRYSTAL_TEARDROPS 0x30B\n#define MU_REQUIEM_FOR_THE_GODS_LOOP_POINT 0x306\n#define LIBGS_H \n#define DRAW_UNK_40 0x40\n#define MU_METAMORPHOSIS 0x327\n#define FLAG_UNK_08000000 0x08000000\n#define SFX_RICHTER_ATTACK_HIT 0x705\n#define getTPage(tp,abr,x,y) ((GetGraphType() == 1 || GetGraphType() == 2) ? ((((tp) & 0x3) << 9) | (((abr) & 0x3) << 7) | (((y) & 0x300) >> 3) | (((x) & 0x3ff) >> 6)) : ((((tp) & 0x3) << 7) | (((abr) & 0x3) << 5) | (((y) & 0x100) >> 4) | (((x) & 0x3ff) >> 6) | (((y) & 0x200) << 2)))\n#define __asm__(...) \n#define USE_MICRO_OPTIMIZATIONS 0\n#define LAYER_SEMI_TRANS 0x80\n#define JP_VO_SOSHITE 0x342\n#define PAL_UNK_OP3 3\n#define CdlSeekL 0x15\n#define CdlSeekP 0x16\n#define PAD_L1 0x0004\n#define PAD_L3 0x0200\n#define MU_DOOR_OF_HOLY_SPIRITS 0x315\n#define NA_SE_EN_SLOGRA_HURT 0x70C\n#define DISP_TITLE_H DISP_ALL_H\n#define LAYER_TPAGE_ALT 0x100\n#define setLineG4(p) setlen(p, 9), setcode(p, 0x5c), (p)->pad = 0x55555555\n#define JP_VO_KONAMI_5 0x350\n#define SET_SOUNDMODE_MONO 5\n#define MU_LOST_PAINTING 0x301\n#define setSprt8(p) setlen(p, 3), setcode(p, 0x74)\n#define TILE_SIZE 16\n#define STRINGIFY_(x) #x\n#define SFX_THUNDER 0x665\n#define MU_TOWER_OF_MIST 0x313\n#define NA_SE_EN_SLOGRA_SPEAR_PROJECTILE 0x690\n#define SS_SOFF 0\n#define NA_SE_EN_SLOGRA_BEAK_ATTACK 0x6C8\n#define FLT(x) ((s32)((x) * 4096.0))\n#define PAD_SELECT 0x0100\n#define EvSpUNKNOWN 0x0200\n#define PAD_R1 0x0008\n#define PAD_R2 0x0002\n#define GAMEBUTTONS (~(PAD_START | PAD_SELECT))\n#define SE_UNK_TE1_692 0x692\n#define SFX_UNK_668 0x668\n#define SS_REV 1\n#define NA_SE_VO_AXE_KNIGHT_SCREAM 0x767\n#define FLAG_UNK_04000000 0x04000000\n#define MENUCHAR(x) ((x) - 0x20)\n#define setXY0(p,_x0,_y0) (p)->x0 = (_x0), (p)->y0 = (_y0)\n#define setXY2(p,_x0,_y0,_x1,_y1) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1)\n#define setXY4(p,_x0,_y0,_x1,_y1,_x2,_y2,_x3,_y3) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2), (p)->x3 = (_x3), (p)->y3 = (_y3)\n#define ASM_RODATA __asm__(".section .rodata")\n#define EvSpCZ 0x0001\n#define SS_TICKVSYNC 5\n#define NA_VO_RI_DIE_MONSTER 0x358\n#define SPU_VOICE_ADSR_ADSR2 (0x01 << 18)\n#define gte_nclip() \n#define setPolyFT3(p) setlen(p, 7), setcode(p, 0x24)\n#define setPolyFT4(p) setlen(p, 9), setcode(p, 0x2c)\n#define FLAG_UNK_10000 0x10000\n#define LIBGTE_H \n#define MAX_SPRT_COUNT 0x200\n#define MU_WOOD_CARVING_PARTITA 0x309\n#define STAGE_WIDTH 256\n#define CdlModeSize0 0x10\n#define ELEMENT_STONE 0x200\n#define NUM_AVAIL_RELICS (NUM_RELICS - 2)\n#define SS_SEQ_TABSIZ 176\n#define DescEV 0xf1000000\n#define EvStUNUSED 0x0000\n#define NA_SE_EV_CLOCK_TICK 0x6A1\n#define setSprt16(p) setlen(p, 3), setcode(p, 0x7c)\n#define JP_VO_SH_SONO_TEIDO 0x530\n#define SE_UI_MAIN_MENU_SELECT 0x67D\n#define CdlModeAP 0x02\n#define SFX_UNK_641 0x641\n#define DescHW 0xf0000000\n#define MU_BLOOD_RELATIONS_LOOP_POINT 0x337\n#define SAVE_FLAG_CLEAR (1)\n#define NA_SE_EN_GAIBON_SMALL_FIREBALL 0x652\n#define DEBUGF(...) _log(LOG_LEVEL_D, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define CdlDataReady 0x01\n#define ANIMSET_OVL_FLAG 0x8000\n#define PAL_GLOW_ANIM 4\n#define NA_VO_AL_DEATH_DREAM_WORLD 0x391\n#define _ROMIO_H \n#define SE_SAVE_HEARTBEAT 0x64D\n#define FTRUNC 0x0400\n#define LEN(x) ((s32)(sizeof(x) / sizeof(*(x))))\n#define SPU_VOICE_ADSR_AR (0x01 << 11)\n#define CD_SOUND_COMMAND_10 10\n#define LIFE_VESSEL_INCREASE 5\n#define CdlStatSeekError 0x04\n#define CdlGetlocP 0x11\n#define NA_SE_EN_BLOOD_SKELETON_DISASSEMBLES 0x6CB\n#define PLAYER_STATUS_WOLF_FORM 0x00000004\n#define MU_DANCE_OF_PALES_LOOP_POINT 0x318\n#define PAL_UNK_OP3_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define RELIC_FLAG_FOUND 1\n#define EvSpCLOSE 0x0008\n#define CdlSetfilter 0x0d\n#define ELEMENT_CUT 0x40\n#define CdlGetlocL 0x10\n#define TcbStUNUSED 0x1000\n#define SFX_KARMA_COIN_HEADS 0x6B1\n#define GFX_ENTRY(x,y,w,h,data) (u_long*)((x) | ((y) << 16)), (u_long*)((w) | ((h) << 16)), (u_long*)data\n#define DescRC 0xf2000000\n#define FNBLOCK 0x0004\n#define setaddr(p,_addr) (((P_TAG*)(p))->addr = (u_long)(_addr))\n#define FLAG_DESTROY_IF_BARELY_OUT_OF_CAMERA 0x40000000\n#define SE_BOSS_DEFEATED 0x7D2\n#define DescTH DescMask\n#define setWH(p,_w,_h) (p)->w = _w, (p)->h = _h\n#define SPU_OFF 0\n#define LIBSPU_H \n#define FLAG_UNK_20000000 0x20000000\n#define PAL_COPY_INFO() MAKE_PAL_OP(PAL_COPY, 0)\n#define SFX_UNK_6E7 0x6E7\n#define PAD_CROSS 0x0040\n#define SCRIPT(...) {}\n#define gte_SetTransMatrix(r0) \n#define NA_VO_SU_GRUNT_1 0x870\n#define CdlModeRT 0x40\n#define CdlMAXDIR 128\n#define PLAYER_STATUS_UNK80000 0x80000\n#define JP_VO_SHIINA_HEKIRU_MESSAGE 0x345\n#define SET_UNK_12 0x12\n#define LOHU(x) (*(u16*)&(x))\n#define FLAG_UNK_1000 0x1000\n#define NA_SE_EN_ZOMBIE_EXPLODE 0x65E\n#define USE_CD_SPEED_DOUBLE 0\n#define NA_SE_EV_SWITCH_CLICK 0x676\n#define PAL_COPY 1\n#define SEEK_CUR 1\n#define OVL_EXPORT(x) ST0_ ##x\n#define NA_SE_VO_DR_HURT_1 0x853\n#define NA_SE_VO_DR_HURT_2 0x85B\n#define NA_SE_VO_DR_HURT_3 0x85C\n#define NA_SE_VO_DR_HURT_4 0x85D\n#define PLAYER_STATUS_UNK40000000 0x40000000\n#define addPrim(ot,p) setaddr(p, getaddr(ot)), setaddr(ot, p)\n#define PAD_R3 0x0400\n#define FALL_TERMINAL_VELOCITY 0x60000\n#define PLAYER_STATUS_UNK20000 0x20000\n#define __SPU_IRQCALLBACK_PROC \n#define MU_PROLOGUE 0x321\n#define ANIMSET_DRA(x) (x)\n#define SS_TICK240 2\n#define NA_SE_EN_SLOGRA_FLOOR_STOMP 0x64F\n#define setPolyF3(p) setlen(p, 4), setcode(p, 0x20)\n#define setPolyF4(p) setlen(p, 5), setcode(p, 0x28)\n#define FRCOM 0x2000\n#define MU_ENCHANTED_BANQUET 0x330\n#define DRAW_UNK02 0x02\n#define ELEMENT_FIRE 0x8000\n#define MAX_PRIM_COUNT 0x500\n#define setPolyG3(p) setlen(p, 6), setcode(p, 0x30)\n#define setPolyG4(p) setlen(p, 8), setcode(p, 0x38)\n#define FLAG_UNK_400 0x400\n#define SFX_UNK_689 0x689\n#define FLAG_UNK_10 0x10\n#define CdlModeDA 0x01\n#define DescMask 0xff000000\n#define NA_VO_SU_GRUNT_3 0x874\n#define LAYER_WRAP_BG 0x1000\n#define MU_BLOOD_RELATIONS 0x336\n#define NA_SE_VO_WO_BARK 0x706\n#define DISP_STAGE_H DISP_ALL_H\n#define DISP_STAGE_W 256\n#define SET_SOUNDMODE_STEREO 6\n#define STRINGIFY(x) STRINGIFY_(x)\n#define isendprim(p) ((((P_TAG*)(p))->addr) == 0xffffff)\n#define MU_TOWER_OF_MIST_LOOP_POINT 0x314\n#define MU_DANCE_OF_PALES 0x317\n#define MU_FESTIVAL_OF_SERVANTS 0x31D\n#define TOTAL_ENTITY_COUNT 256\n#define NA_VO_MA_IF_YOU_WEAR 0x3CE\n#define setUV3(p,_u0,_v0,_u1,_v1,_u2,_v2) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2)\n#define setUV4(p,_u0,_v0,_u1,_v1,_u2,_v2,_u3,_v3) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2), (p)->u3 = (_u3), (p)->v3 = (_v3)\n#define CdlNoIntr 0x00\n#define JP_VO_AKUMAJO 0x343\n#define CdlSetloc 0x02\n#define SE_INTRO_WIND_LOOP_POINT 0x32B\n#define PLAYER_STATUS_TRANSFORM (PLAYER_STATUS_BAT_FORM | PLAYER_STATUS_MIST_FORM | PLAYER_STATUS_WOLF_FORM)\n#define SE_WPN_PENTAGRAM 0x6E4\n#define LOWU(x) (*(u32*)&(x))\n#define NA_SE_EN_BLOOD_SKELETON_REASSEMBLES 0x6CC\n#define NA_SE_VO_DR_TAUNT_2 0x850\n#define DISP_MENU_W 384\n#define PLAYER_MARIA 2\n#define MU_I_AM_THE_WIND 0x33C\n#define CdlPause 0x09\n#define NA_VO_SU_LAUGH 0x86E\n#define SPRITESHEET_PTR 0x8013C020\n#define PLAYER_STATUS_CURSE 0x00008000\n#define DRAW_UNK_200 0x200\n#define FLAG_UNK_4000 0x4000\n#define SS_TICK50 4\n#define FLAG_UNK_02000000 0x02000000\n#define SFX_UNK_6FF 0x6FF\n#define SS_TICK60 1\n#define HwRTC0 (DescHW | 0x05)\n#define HwRTC1 (DescHW | 0x06)\n#define HwRTC2 (DescHW | 0x07)\n#define ANIMSET_OVL(x) ((x) | ANIMSET_OVL_FLAG)\n#define FRLOCK 0x0010\n#define NA_SE_VO_AL_PUNCH 0x6F1\n#define PLAYER_STATUS_UNK400000 0x400000\n#define NA_VO_RI_IMPRESSIVE_WHIP 0x3DA\n#define MAX_POLY_GT3_COUNT 0x30\n#define SS_REV_TYPE_DELAY 8\n#define F3DEX_GBI_2 1\n#define COLOR_BPP (16)\n#define CdlModeSF 0x08\n#define FLAG_UNK_20000 0x20000\n#define PAL_GLOW_DATA(data) (u_long*)(data)\n#define STAGE_ENTITY_START 64\n#define SS_REV_TYPE_STUDIO_A 2\n#define SS_REV_TYPE_STUDIO_C 4\n#define SS_WAIT_COMPLETED 1\n#define NA_SE_EN_COG_CLICK 0x642\n#define STRCPY(dst,src) __builtin_memcpy(dst, src, sizeof(src))\n#define PAL_COPY_DATA_(dst,data,len) (dst), (u_long*)(len), (u_long*)(data)\n#define ELEMENT_THUNDER 0x4000\n#define CdlPlay 0x03\n#define M2CTX 1\n#define DRAW_MENU 0x80\n#define TEST_BITS(x,y) ((x & y) == y)\n#define termPrim(p) setaddr(p, 0xffffffff)\n#define SFX_UNK_69D 0x69D\n#define SET_STOP_MUSIC 0xA\n#define FIX_TO_I(x) ((s32)((x) >> 16))\n#define MU_JP_FAIRY_SONG 0x33F\n#define NA_VO_SU_GRUNT_2 0x872\n#define SPU_REV_MODE (0x01 << 0)\n#define ELEMENT_DARK 0x800\n#define DRAW_COLORS 0x04\n#define PLAYER_RICHTER 1\n#define MAX_PRIM_ALLOC_COUNT 0x400\n#define NOT_IMPLEMENTED WARNF("not implemented")\n#define NA_SE_PL_MAX_HP_MP_INCREASED 0x687\n#define NA_VO_RI_ONLY_THE_COUNT 0x3DC\n#define O_NOBUF FNBUF\n#define WEAPON_0_START 0xE0\n#define DIAG_EOL 0xFF\n#define MAX_POLY_G4_COUNT 0x100\n#define MU_REQUIEM_FOR_THE_GODS 0x305\n#define SFX_UNK_8BB 0x8BB\n#define FLAG_DEAD 0x100\n#define PLAYER_STATUS_UNK2000 0x2000\n#define SPU_VOICE_ADSR_SL (0x01 << 15)\n#define NA_SE_VO_AXE_KNIGHT_THROW 0x766\n#define DISP_TITLE_W 512\n#define FLAG_UNK_800000 0x800000\n#define EvSpERANGE 0x0302\n#define SPU_VOICE_ADSR_SR (0x01 << 13)\n#define PAL_OVL_FLAG 0x8000\n#define setXY3(p,_x0,_y0,_x1,_y1,_x2,_y2) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2)\n#define HwDMAC (DescHW | 0x04)\n#define GAME_H \n#define NA_SE_SU_CREATE_CLONES 0x6D5\n#define SS_REV_TYPE_ECHO 7\n#define CdlMAXLEVEL 8\n#define NA_VO_SU_BLANK 0x86F\n#define CLAMP_MAX(v,max) ((v) > (max) ? (max) : (v))\n#define DISP_MENU_H DISP_ALL_H\n#define SPU_VOICE_ADSR_SMODE (0x01 << 9)\n#define LAYER_SHOW 1\n#define MU_RAINBOW_CEMETERY 0x307\n#define DRAW_TPAGE 0x10\n#define SIM_PTR 0x80280000\n#define setPolyGT3(p) setlen(p, 9), setcode(p, 0x34)\n#define setPolyGT4(p) setlen(p, 12), setcode(p, 0x3c)\n#define INCLUDE_ASM_H \n#define EvSpEDOM 0x0301\n#define NA_SE_SU_FLAPPING_WINGS 0x6C6\n#define PLAYER_ALUCARD 0\n#define JP_VO_KONAMI_1 0x34C\n#define JP_VO_KONAMI_2 0x34D\n#define RCntCNT1 (DescRC | 0x01)\n#define RCntCNT2 (DescRC | 0x02)\n#define RCntCNT3 (DescRC | 0x03)\n#define JP_VO_KONAMI_8 0x353\n#define JP_VO_KONAMI_9 0x354\n#define ERRORF(...) _log(LOG_LEVEL_E, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define JP_VO_KONAMI_12 0x357\n#define MU_DOOR_OF_HOLY_SPIRITS_LOOP_POINT 0x316\n#define SIZEOF_MENUCONTEXT (0x1E)\n#define JP_VO_KONAMI_3 0x34E\n#define HwGPU (DescHW | 0x02)\n#define SPU_VOICE_VOLL (0x01 << 0)\n#define SS_SON 1\n#define SPU_VOICE_VOLR (0x01 << 1)\n#define MU_LAND_OF_BENEDICTION 0x33E\n#define MAX_GOLD 999999\n#define INFOF(...) _log(LOG_LEVEL_I, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define OFF(type,field) ((size_t)(&((type*)0)->field))\n#define CdlBackward 0x05\n#define MU_WANDERING_GHOSTS 0x323\n#define SS_REV_TYPE_HALL 5\n#define NA_SE_EN_SLOGRA_HISSING 0x709\n#define STAGE STAGE_ST0\n#define NA_SE_PL_BT_FIREBALL 0x680\n#define SFX_UNK_661 0x661\n#define O_RDWR FREAD | FWRITE\n#define setTile(p) setlen(p, 3), setcode(p, 0x60)\n#define NA_SE_EN_SLOGRA_DEATH_EXPLOSION 0x697\n#define NA_SE_EV_WINDOW_LATCH 0x79D\n#define FLAG_HAS_PRIMS 0x00800000\n#define CdlAcknowledge 0x03\n#define SwMATH (DescSW | 0x02)\n#define NA_SE_PL_RIC_UNK_6E2 0x6E2\n#define SOUND_BAT_SCREECH 0x64E\n#define gte_SetGeomScreen(r0) \n#define DRAW_DEFAULT 0x00\n#define PLAYER_STATUS_ABSORB_BLOOD 0x02000000\n#define NA_SE_SY_MOVE_MENU_CURSOR 0x67B\n#define SE_UI_OVERWRITE_SELECT 0x6A4\n#define NA_VO_SU_SUCK_YOU_DRY 0x876\n#define gte_stszotz(r0) \n#define setShadeTex(p,tge) ((tge) ? setcode(p, getcode(p) | 0x01) : setcode(p, getcode(p) & ~0x01))\n#define CD_SOUND_COMMAND_12 12\n#define PAL_COPY_DATA(dst,data) (dst), (u_long*)LEN(data), (u_long*)(data)\n#define SE_DRE_FADE_TO_WHITE 0x65A\n#define NA_SE_EN_BLOODY_ZOMBIE_INJURED_SCREAM 0x746\n#define NA_SE_VO_DR_GRANT_ME_POWER 0x857\n#define RCntMdINTR 0x1000\n#define MU_LOST_PAINTING_LOOP_POINT 0x302\n#define FALL_GRAVITY 0x4000\n#define MU_PRAYER_LOOP_POINT 0x333\n#define NA_SE_CS_BURNING_PHOTOGRAPH 0x8BE\n#define PAD_SQUARE 0x0080\n#define RIC_PRG_PTR 0x8013C000\n#define MU_CURSE_ZONE 0x303\n#define SE_UI_SELECT 0x67B\n#define getlen(p) (u_char)(((P_TAG*)(p))->len)\n#define GET_PAL_OP_FREQ(x) (HIH(x))\n#define PAD_UP 0x1000\n#define MU_CURSE_ZONE_LOOP_POINT 0x304\n#define SS_REV_TYPE_SPACE 6\n#define FLAG_DRAW_ROTX 0x01\n#define FLAG_DRAW_ROTY 0x02\n#define FLAG_DRAW_ROTZ 0x04\n#define EvSpDE 0x0080\n#define LIBGPU_H \n#define O_RDONLY FREAD\n#define PAL_BULK_COPY 5\n#define SS_REV_TYPE_PIPE 9\n#define PAD_L2 0x0001\n#define PLAYER_STATUS_UNK80000000 0x80000000\n#define REBOUND_STONE_BOUNCE 0x6A4\n#define ELEMENT_HIT 0x20\n#define nextPrim(p) (void*)((u_long)(((P_TAG*)(p))->addr) | 0x80000000)\n#define FWRITE 0x0002\n#define SS_REV_TYPE_OFF 0\n#define PLAYER_STATUS_UNK40000 0x40000\n#define PLAYER_STATUS_STONE 0x00000080\n#define setUV0(p,_u0,_v0) (p)->u0 = (_u0), (p)->v0 = (_v0)\n#define NA_SE_EN_SLOGRA_SPEAR_SLASH 0x6C6\n#define HIH(x) (((s16*)&(x))[1])\n#define NA_VO_SU_HURT_1 0x879\n#define SS_NOTICK0 0\n#define MU_DANCE_OF_ILLUSIONS_LOOP_POINT 0x320\n#define MU_HEAVENLY_DOORWAY 0x31B\n#define CdlStatStandby 0x02\n#define MU_DANCE_OF_GOLD_LOOP_POINT 0x32F\n#define SE_UI_OVERWRITE_MSG 0x6AD\n#define MAX_TILE_COUNT 0x100\n#define MU_THE_TRAGIC_PRINCE_LOOP_POINT 0x312\n#define setSprt(p) setlen(p, 4), setcode(p, 0x64)\n#define DRAW_UNK_800 0x800\n#define setLineF2(p) setlen(p, 3), setcode(p, 0x40)\n#define setLineF3(p) setlen(p, 5), setcode(p, 0x48), (p)->pad = 0x55555555\n#define setLineF4(p) setlen(p, 6), setcode(p, 0x4c), (p)->pad = 0x55555555\n#define BUTTON_COUNT 8\n#define EvSpTRAP 0x1000\n#define setLineG2(p) setlen(p, 4), setcode(p, 0x50)\n#define setLineG3(p) setlen(p, 7), setcode(p, 0x58), (p)->pad = 0x55555555\n#define NA_SE_EN_GAIBON_SCREAM 0x70B\n#define SFX_KARMA_COIN 0x682\n#define NA_SE_VO_AL_WHAT 0x6F2\n#define DRAW_UNK_1000 0x1000\n#define SEEK_SET 0\n#define SS_SERIAL_A 0\n#define SS_SERIAL_B 1\n#define FLAG_DESTROY_IF_OUT_OF_CAMERA 0x80000000\n#define gte_rtps() \n#define gte_rtpt() \n#define N_VERTI_TILES 16\n#define NA_SE_EN_GAIBON_FLAME_OUT 0x65E\n#define FSCAN 0x1000\n#define gte_stsxy2(r0) \n#define gte_stsxy3(r0,r1,r2) \n#define CdlDiskError 0x05\n#define PLAYER_STATUS_UNK10000 0x10000\n#define TILE_MASK 0x0F\n#define setTile16(p) setlen(p, 2), setcode(p, 0x78)\n#define NA_SE_EN_AXE_KNIGHT_BREAK_AXE 0x66B\n#define EvSpTIMOUT 0x0100\n#define NA_SE_VO_DR_HERE_IS_TRUE_POWER 0x855\n#define O_CREAT FCREAT\n#define SPELL_FLAG_KNOWN 0x80\n#define FLAG_UNK_00200000 0x00200000\n#define NA_SE_EN_GAIBON_COLLAPSE 0x672\n#define PAL_BULK(dst,data) (u_long*)(dst), (u_long*)LEN(data), (u_long*)(data)\n#define FNBUF 0x4000\n#define MU_THE_DOOR_TO_THE_ABYSS 0x325\n#define NA_SE_BREAK_GLASS 0x68B\n#define NULL (0)\n#define LAYER_TPAGE_ID (0x20 | 0x40)\n#define CD_SOUND_COMMAND_FADE_OUT_1 3\n#define CD_SOUND_COMMAND_FADE_OUT_2 2\n#define MU_THE_DOOR_TO_THE_ABYSS_LOOP_POINT 0x326\n#define CdlSetmode 0x0e\n#define NA_VO_SU_DELICIOUS 0x8D1\n#define setUVWH(p,_u0,_v0,_w,_h) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u0) + (_w), (p)->v1 = (_v0), (p)->u2 = (_u0), (p)->v2 = (_v0) + (_h), (p)->u3 = (_u0) + (_w), (p)->v3 = (_v0) + (_h)\n#define SE_UI_ERROR 0x686\n#define CdlStatRead 0x20\n#define MAKE_PAL_OP(kind,freq) ((kind) | ((freq) << 0x10))\n#define CASTLE_MAP_PTR 0x801E0000\n#define NA_SE_EN_GAIBON_BIG_FIREBALL 0x655\n#define ELEMENT_HOLY 0x1000\n#define __attribute__(...) \n#define EvSpIOE 0x0004\n#define CD_SOUND_COMMAND_6 6\n#define NA_VO_MAR_AIM_HEAD 0x87F\n#define CdlStop 0x08\n#define SPU_VOICE_NOTE (0x01 << 5)\n#define SE_INTRO_WIND_QUIET_LOOP_POINT 0x32D\n#define SE_UI_DEBUG_SELECT 0x688\n#define DRAW_HIDE 0x08\n#define SE_HEALTH_REGAINED 0x68E\n#define TcbStACTIVE 0x4000\n#define CdlStandby 0x07\n#define SPU_VOICE_ADSR_RMODE (0x01 << 10)\n#define MU_PRAYER 0x332\n#define NA_SE_PL_MP_GAUGE 0x67D\n#define CdlMAXFILE 64\n#define PAL_GLOW_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define JP_VO_FUKAMI_RIKA_MESSAGE 0x344\n#define FLAG_UNK_80000 0x80000\n#define NA_VO_RI_TRIBUTE 0x35A\n#define SFX_UNK_6EA 0x6EA\n#define MU_FINAL_TOCATTA_LOOP_POINT 0x339\n#define MAX_BG_LAYER_COUNT 16\n#define MU_METAMORPHOSIS_II 0x328\n#define PAL_OVL(x) ((x) | ANIMSET_OVL_FLAG)\n#define PLAYER_STATUS_MIST_FORM 0x00000002\n#define SPU_VOICE_VOLMODEL (0x01 << 2)\n#define SPU_VOICE_VOLMODER (0x01 << 3)\n#define NA_SE_EN_SLOGRA_HURT_2 0x70A\n#define PLAYER_STATUS_BAT_FORM 0x00000001\n#define WEAPON1_PTR 0x8017D000\n#define SE_WPN_POWER_OF_SIRE 0x66A\n#define CdlStatSeek 0x40\n#define MU_ABANDONED_PIT 0x319\n#define CdlModeStream2 0x120\n#define SE_WPN_ALUCARD_SWORD_SWING 0x6A8\n#define NA_SE_EN_GAIBON_FLAP_WINGS 0x68D\n#define ELEMENT_WATER 0x400\n#define SS_REV_TYPE_ROOM 1\n#define SE_DEATH_TAKES_ITEMS 0x7A0\n#define SPU_VOICE_ADSR_ADSR1 (0x01 << 17)\n#define FLAG_UNK_01000000 0x01000000\n#define LOH(x) (*(s16*)&(x))\n#define HwCdRom (DescHW | 0x03)\n#define PLAYER_STATUS_UNK4000000 0x04000000\n#define NA_SE_EN_BLOODY_ZOMBIE_INJURED 0x748\n#define DRA_PRG_PTR 0x800A0000\n#define RELIC_FLAG_ACTIVE 2\n#define MAX_LINE_G2_COUNT 0x100\n#define SE_UNK_TE3_667 0x667\n#define MAX_ENV_COUNT 0x10\n#define NA_SE_VO_DR_PLAYTIME_IS_OVER 0x858\n#define O_NBLOCK FNBLOCK\n#define SE_UNK_TE3_679 0x679\n#define MAX_DRAW_MODES 0x400\n#define SET_STOP_SEQ 7\n#define PAD_RIGHT 0x2000\n#define MEMCARD_ID "BASLUS-00067DRAX00"\n#define N_HORIZ_TILES 17\n#define RCntMdNOINTR 0x2000\n#define HwVBLANK (DescHW | 0x01)\n#define STAGE_INVERTEDCASTLE_MASK 0x1F\n#define CdlModeStream 0x100\n#define HwSIO (DescHW | 0x0b)\n#define MU_DANCE_OF_ILLUSIONS 0x31F\n#define PLAYER_STATUS_UNK400 0x400\n#define MU_DRACULAS_CASTLE_LOOP_POINT 0x310\n#define gte_stopz(r0) \n#define NA_SE_SU_PETAL_ATTACK 0x6B0\n#define SE_TREE_BRANCH_SNAP 0x7A4\n#define CdlModeRept 0x04\n#define NA_SE_EN_SKELETON_THROW_BONE 0x6C8\n#define HwPIO (DescHW | 0x0a)\n#define SPU_REV_FEEDBACK (0x01 << 4)\n#define PAL_UNK_OP2_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define EvStWAIT 0x1000\n#define EvSpCOMP 0x0020\n#define FLAG_UNK_100000 0x100000\n#define O_NOWAIT FASYNC\n#define MU_DEATH_BALLAD_LOOP_POINT 0x335\n#define SE_UNK_TE3_6B8 0x6B8\n#define WEAPON0_PTR 0x8017A000\n#define NA_SE_EN_EXPLOSIVE_DEATH 0x693\n#define JP_VO_KONAMI_10 0x355\n#define JP_VO_KONAMI_11 0x356\n#define FLAG_UNK_200 0x200\n#define HwSPU (DescHW | 0x09)\n#define TYPES_H \n#define FCREAT 0x0200\n#define setSemiTrans(p,abe) ((abe) ? setcode(p, getcode(p) | 0x02) : setcode(p, getcode(p) & ~0x02))\n#define SS_IMMEDIATE 0\n#define DescUEV 0xf3000000\n#define CdlGetparam 0x0f\n#define DEMO_KEY_LEN 3\n#define SFX_UNK_6F0 0x6F0\n#define FLAG_UNK_8000 0x8000\n#define FONT_H 8\n#define FONT_W 8\n#define NA_SE_EN_BLOODY_ZOMBIE_HEMORRHAGE 0x749\n#define LIBETC_H \n#define BIBLE_SUBWPN_SWOOSH 0x8C3\n#define FONT_GAP FONT_W\n#define MU_BLACK_BANQUET 0x33A\n#define TcbMdPRI 0x2000\n#define setClut(p,x,y) ((p)->clut = getClut(x, y))\n#define SE_UNK_TE2_6B4 0x6B4\n#define PALETTE_LEN ((COLORS_PER_PAL) * ((COLOR_BPP) / 8))\n#define MU_ENCHANTED_BANQUET_LOOP_POINT 0x331\n#define NA_VO_DR_IT_WAS_NOT 0x359\n#define FREAD 0x0001\n#define EvStALREADY 0x4000\n#define setRGB0(p,_r0,_g0,_b0) (p)->r0 = _r0, (p)->g0 = _g0, (p)->b0 = _b0\n#define setRGB1(p,_r1,_g1,_b1) (p)->r1 = _r1, (p)->g1 = _g1, (p)->b1 = _b1\n#define setRGB2(p,_r2,_g2,_b2) (p)->r2 = _r2, (p)->g2 = _g2, (p)->b2 = _b2\n#define MU_BLACK_BANQUET_LOOP_POINT 0x33B\n#define SEEK_END 2\n#define RCntCNT0 (DescRC | 0x00)\n#define ELEMENT_CURSE 0x100\n#define CdlMute 0x0b\n#define JP_VO_KONAMI_4 0x34F\n#define DRAW_TPAGE2 0x20\n#define JP_VO_KONAMI_6 0x351\n#define catPrim(p0,p1) setaddr(p0, p1)\n#define JP_VO_KONAMI_7 0x352\n#define NA_SE_VO_AL_SOUL_STEAL 0x6F4\n#define SS_MIX 0\n#define CdlModeSize1 0x20\n#define FLAG_DRAW_UNK100 0x100\n#define PLAYER_STATUS_UNK200 0x200\n#define NA_VO_SU_HURT_2 0x87A\n#define SFX_UNK_64B 0x64B\n#define SFX_UNK_64C 0x64C\n#define CdlStatError 0x01\n#define SE_ITEM_YOINK 0x7A2\n#define ALUCARD_DARK_METAMORPHOSIS 0x705\n#define STAGE_PRG_PTR 0x80180000\n#define COLORS_PER_PAL (16)\n#define SFX_UNK_664 0x664\n#define setRGB3(p,_r3,_g3,_b3) (p)->r3 = _r3, (p)->g3 = _g3, (p)->b3 = _b3\n#define SFX_UNK_669 0x669\n#define PAD_COUNT 2\n#define O_WRONLY FWRITE\n#define STAGE_INVERTEDCASTLE_FLAG 0x20\n#define PLAYER g_Entities[PLAYER_CHARACTER]\n#define MU_DRACULAS_CASTLE 0x30F\n#define SFX_UNK_683 0x683\n#define SE_UNK_TE2_6B6 0x6B6\n#define HEART_VESSEL_RICHTER 30\n#define FACTORY(A0,BLUEPRINTNUM) (A0 << 8 | BLUEPRINTNUM)\n#define NA_SE_VO_AL_DYING 0x6F6\n#define SFX_UNK_69A 0x69A\n#define PLAYER_STATUS_UNK800 0x800\n#define CdlStatShellOpen 0x10\n#define DRAW_TRANSP 0x01\n#define SPU_REV_DELAYTIME (0x01 << 3)\n#define addPrims(ot,p0,p1) setaddr(p1, getaddr(ot)), setaddr(ot, p0)\n#define ELEMENT_POISON 0x80\n#define CdlStatPlay 0x80\n#define SPU_ON 1\n#define SS_NOTICK 0x1000\n#define SE_UNK_TE1_651 0x651\n#define FLAG_UNK_2000 0x2000\n#define SPU_VOICE_WDSA (0x01 << 7)\n#define PAL_UNK_OP2_DATA(data) (u_long*)(data)\n#define EvSpSYSCALL 0x4000\n#define FAMILIAR_PTR 0x80170000\n#define LAYER_CLUT_ALT 0x200\n#define SP(x) (0x1F800000 + (x))\n#define SQ(x) ((x) * (x))\n#define SE_UNK_TE1_66F 0x66F\n#define FLAG_DRAW_UNK10 0x10\n#define STAGE_H \n#define MAX_POLY_GT4_COUNT 0x300\n#define HwCARD (DescHW | 0x11)\n#define MU_FESTIVAL_OF_SERVANTS_LOOP_POINT 0x31E\n#define FLAG_DRAW_UNK20 0x20\n#define CdlModeSpeedNormal 0\n#define RCntMdGATE 0x0010\n#define SAVE_FLAG_NORMAL (0)\n#define SFX_UNK_6A3 0x6A3\n#define SFX_UNK_6AD 0x6AD\n#define setTile1(p) setlen(p, 2), setcode(p, 0x68)\n#define setTile8(p) setlen(p, 2), setcode(p, 0x70)\n#define FLAG_DRAW_UNK40 0x40\n#define SFX_UNK_6B0 0x6B0\n#define CdlDemute 0x0c\n#define JP_VO_KATSUTE 0x341\n#define setBlockFill(p) setlen(p, 3), setcode(p, 0x02)\n#define EvSpIOER 0x0400\n#define SFX_UNK_6DF 0x6DF\n#define FLAG_DRAW_UNK8 0x08\n#define SFX_UNK_6E0 0x6E0\n#define NA_SE_VO_AL_DARK_METAMORPHOSIS 0x6F3\n#define SFX_UNK_6E8 0x6E8\n#define SFX_UNK_6E9 0x6E9\n#define SFX_UNK_6EB 0x6EB\n#define SFX_UNK_6EC 0x6EC\n#define SFX_UNK_6ED 0x6ED\n#define SFX_UNK_6EE 0x6EE\n#define SFX_UNK_6EF 0x6EF\n#define EvSpIOEW 0x0800\n#define PAD_CIRCLE 0x0020\n#define FLAG_DRAW_UNK80 0x80\n#define SFX_UNK_6F7 0x6F7\n#define DIAG_EOS 0x00\n#define PLAYER_STATUS_UNK_20 0x00000020\n#define SFX_H \n#define CLAMP_MIN(v,min) ((v) < (min) ? (min) : (v))\n#define LIBSND_H \n#define PAL_UNK_OP2 2\n#define O_TAG u_long tag\n#define GET_PAL_OP_KIND(x) (LOH(x))\n#define MU_PROLOGUE_LOOP_POINT 0x322\n#define _LANGUAGE_C 1\n#define DRAW_UNK_400 0x400\n#define _S(x) (x)\n#define SE_UNK_TE1_6B3 0x6B3\n#define FAPPEND 0x0100\n#define WEAPON_1_START 0xF0\n#define DescSW 0xf4000000\n#define RENDERFLAGS_NOSHADOW 2\n#define SIM_CHR0 0x80280000\n#define SIM_CHR1 0x80284000\n#define CdlGetTD 0x14\n#define NA_SE_VO_DR_TAUNT_1 0x84F\n#define CdlReadS 0x1B\n#define MAX(a,b) ((a) > (b) ? (b) : (a))\n#define setcode(p,_code) (((P_TAG*)(p))->code = (u_char)(_code))\n#define getClut(x,y) ((y << 6) | ((x >> 4) & 0x3f))\n#define PAL_BULK_COPY_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define MU_MARBLE_GALLERY_LOOP_POINT 0x30E\n#define NA_SE_EN_BLOODY_ZOMBIE_DEATH_SCREAM 0x747\n#define SE_INTRO_WIND 0x32A\n#define SwCARD (DescSW | 0x01)\n#define DRAW_ABSPOS 0x2000\n#define FASYNC 0x8000\n#define JP_VO_OKIAYU_RYOUTAROU_MESSAGE 0x347\n#define SPU_VOICE_PITCH (0x01 << 4)\n#define DEMO_KEY_PTR 0x801E8000\n#define setTPage(p,tp,abr,x,y) ((p)->tpage = getTPage(tp, abr, x, y))\n#define _MIPS_SZLONG 32\n#define CdlComplete 0x02\n#define CdlModeSpeed 0x80\n#define SE_CASTLE_GATE_RISE 0x7A5\n#define CD_SOUND_COMMAND_START_XA 4\n#define SPU_REV_DEPTHL (0x01 << 1)\n#define SPU_REV_DEPTHR (0x01 << 2)\n#define EvMdINTR 0x1000\n#define VERSION "us"\n#define EvSpDR 0x0040\n#define PAL_UNK_OP3_DATA(data) (u_long*)(data)\n#define MIN(a,b) ((a) > (b) ? (b) : (a))\n#define MAXSPRT16 0x280\n#define RELIC_FLAG_DISABLE 0\n#define NA_SE_EN_DR_FIREBALL 0x660\n#define INCLUDE_ASM(FOLDER,NAME) __asm__(".pushsection .text\\n" "\\t.align\\t2\\n" "\\t.globl\\t" #NAME "\\n" "\\t.ent\\t" #NAME "\\n" #NAME ":\\n" ".include \\"asm/" VERSION "/" FOLDER "/" #NAME ".s\\"\\n" "\\t.set reorder\\n" "\\t.set at\\n" "\\t.end\\t" #NAME "\\n" ".popsection");\n#define SET_UNK_0B 0xB\n#define SET_UNK_0E 0xE\n#define SET_UNK_0F 0xF\n#define ELEMENT_ICE 0x2000\n#define JP_VO_SH_SCREAM 0x52F\n#define SET_UNK_10 0x10\n#define SET_UNK_11 0x11\n#define SPU_VOICE_LSAX (0x01 << 16)\n#define LOG_H \n#define COLOR16(r,g,b,a) (r) + ((g) << 5) + ((b) << 10) + ((a) << 15)\n#define setXYWH(p,_x0,_y0,_w,_h) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x0) + (_w), (p)->y1 = (_y0), (p)->x2 = (_x0), (p)->y2 = (_y0) + (_h), (p)->x3 = (_x0) + (_w), (p)->y3 = (_y0) + (_h)\n#define MU_DANCE_OF_GOLD 0x32E\n#define MU_WANDERING_GHOSTS_LOOP_POINT 0x324\n#define FLAG_UNK_40000 0x40000\n#define FLAG_DRAW_DEFAULT 0x00\n#define JP_VO_WAKAMOTO_NORIO_MESSAGE 0x349\n#define PAD_DOWN 0x4000\n#define TcbMdRT 0x1000\n#define GFX_TERMINATE() ((u_long*)-1)\n#define NA_VO_SU_CRYSTAL_1 0x87C\n#define NA_VO_SU_CRYSTAL_2 0x6AF\n#define SS_REV_TYPE_STUDIO_B 3\n#define PAD_START 0x0800\n#define LOW(x) (*(s32*)&(x))\ntypedef char int8_t;\ntypedef short int16_t;\ntypedef int int32_t;\ntypedef long long int64_t;\ntypedef unsigned char uint8_t;\ntypedef unsigned short uint16_t;\ntypedef unsigned int uint32_t;\ntypedef unsigned long long uint64_t;\ntypedef unsigned char u_char;\ntypedef unsigned short u_short;\ntypedef unsigned long u_long;\ntypedef unsigned int size_t;\ntypedef signed char s8;\ntypedef signed short s16;\ntypedef signed int s32;\ntypedef signed long long s64;\ntypedef unsigned char u8;\ntypedef unsigned short u16;\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\ntypedef signed char byte;\ntypedef enum { false, true } bool;\ntypedef union {\n    s32 val;\n    struct {\n        s16 lo;\n        s16 hi;\n    } i;\n} f32;\ntypedef struct {\n              s16 x;\n              s16 y;\n} Point16;\ntypedef struct {\n    u8 u;\n    u8 v;\n} uvPair;\ntypedef struct {\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 pad;\n} rgb_set;\nint sprintf(char* dst, const char* fmt, ...);\ntypedef enum {\n    LOG_LEVEL_D,\n    LOG_LEVEL_I,\n    LOG_LEVEL_W,\n    LOG_LEVEL_E,\n} LOG_LEVEL;\nvoid SetMinLogLevel(LOG_LEVEL level);\nvoid _log(unsigned int level, const char* file, unsigned int line,\n          const char* func, const char* fmt, ...);\ntypedef enum {\n    PLAYER_CHARACTER,\n    UNK_ENTITY_1,\n    UNK_ENTITY_2,\n    UNK_ENTITY_3,\n    UNK_ENTITY_4,\n    UNK_ENTITY_5,\n    UNK_ENTITY_6,\n    UNK_ENTITY_7,\n    UNK_ENTITY_8,\n    E_WEAPON = 0x10,\n    UNK_ENTITY_11 = 0x11,\n    UNK_ENTITY_12 = 0x12,\n    UNK_ENTITY_13 = 0x13,\n    UNK_ENTITY_20 = 0x20,\n    UNK_ENTITY_51 = 0x51,\n    UNK_ENTITY_100 = 0x100\n} EntityTypes;\nstruct DIRENTRY {\n               char name[20];\n               long attr;\n               long size;\n               struct DIRENTRY* next;\n              long head;\n               char system[4];\n};\nvoid EnterCriticalSection(void);\nvoid ExitCriticalSection(void);\nlong _card_info(long chan);\nlong _card_clear(long chan);\nlong _card_load(long chan);\nvoid InitCARD(long val);\nlong StartCARD(void);\nstruct EXEC {\n    unsigned long pc0;\n    unsigned long gp0;\n    unsigned long t_addr;\n    unsigned long t_size;\n    unsigned long d_addr;\n    unsigned long d_size;\n    unsigned long b_addr;\n    unsigned long b_size;\n    unsigned long s_addr;\n    unsigned long s_size;\n    unsigned long sp, fp, gp, ret, base;\n};\nextern void InitHeap(void*, unsigned long);\nextern long Load(char*, struct EXEC*);\nextern long Exec(struct EXEC*, long, char**);\nextern void _bu_init(void);\nextern long open(char* devname,\n                 int flag\n);\nextern long lseek(long, long, long);\nextern long read(long fd,\n                 void* buf,\n                 long n\n);\nextern long write(long, void*, long);\nextern int close(int fd\n);\nextern long format(char* fs\n);\nextern struct DIRENTRY* firstfile(char*, struct DIRENTRY*);\nextern struct DIRENTRY* nextfile(struct DIRENTRY*);\nextern long erase(char*);\nextern long Krom2RawAdd(unsigned long);\nextern void ChangeClearPAD(long);\nextern void StopPAD(void);\nint PAD_init(s32 , s32* );\nextern void FlushCache(void);\nextern void DeliverEvent(unsigned long, unsigned long);\nextern long TestEvent(unsigned long event\n);\nextern long OpenEvent(unsigned long, long, long, long (*func)());\nextern long EnableEvent(long);\nextern void _96_remove(void);\nextern long SetRCnt(unsigned long, unsigned short, long);\nextern long StartRCnt(unsigned long);\nextern long GetRCnt(unsigned long);\nextern long StopRCnt(unsigned long);\nextern long ResetRCnt(unsigned long);\nextern void exit();\nextern void puts(char*);\nextern char* strcat(char*, char*);\nextern int strcmp(char*, char*);\nextern int strncmp(char*, char*);\nextern char* strcpy(char*, char*);\nextern int strlen(char*);\nextern void* memcpy(unsigned char*, unsigned char*, int);\nextern void* memset(unsigned char*, unsigned char, int);\nextern int rand(void);\nextern void srand(unsigned int);\nextern void* malloc(size_t\n);\nextern void free(void*);\nint printf(char*, ...);\nint abs(int x);\ntypedef struct {\n    u_char minute;\n    u_char second;\n    u_char sector;\n    u_char track;\n} CdlLOC;\ntypedef struct {\n    u_char val0;\n    u_char val1;\n    u_char val2;\n    u_char val3;\n} CdlATV;\ntypedef struct {\n    u_short id;\n    u_short type;\n    u_short secCount;\n    u_short nSectors;\n    u_long frameCount;\n    u_long frameSize;\n    u_short width;\n    u_short height;\n    u_long dummy1;\n    u_long dummy2;\n    CdlLOC loc;\n} StHEADER;\ntypedef struct {\n    CdlLOC pos;\n    u_long size;\n    char name[16];\n} CdlFILE;\ntypedef void (*CdlCB)(u_char, u_char*);\nvoid def_cbsync(u_char intr, u_char* result);\nvoid def_cbready(u_char intr, u_char* result);\nvoid def_cbread(u_char intr, u_char* result);\nint CdInit(void);\nint CdStatus(void);\nint CdMode(void);\nint CdLastCom(void);\nint CdReset(int mode);\nvoid CdFlush(void);\nint CdSetDebug(int level);\nchar* CdComstr(u_char com);\nchar* CdIntstr(u_char intr);\nint CdSync(int mode, u_char* result);\nint CdReady(int mode, u_char* result);\nCdlCB CdSyncCallback(CdlCB func);\nCdlCB CdReadyCallback(CdlCB func);\nint CdControl(u_char com, u_char* param, u_char* result);\nint CdControlB(u_char com, u_char* param, u_char* result);\nint CdControlF(u_char com, u_char* param);\nint CdMix(CdlATV* vol\n);\nint CdGetSector(void* madr, int size);\nvoid(*CdDataCallback(void (*func)()));\nCdlLOC* CdIntToPos(int i, CdlLOC* p);\nint CdPosToInt(CdlLOC* p);\nCdlFILE* CdSearchFile(CdlFILE* fp, char* name);\nint CdRead(int sectors, u_long* buf, int mode);\nint CdReadSync(int mode, u_char* result);\nCdlCB CdReadCallback(CdlCB func);\nint CdRead2(long mode);\nvoid StClearRing(void);\nvoid StSetStream(u_long mode, u_long start_frame, u_long end_frame,\n                 void (*func1)(), void (*func2)());\nvoid StSetMask(u_long mask, u_long start, u_long end);\nu_long StGetNext(u_long** addr, u_long** header);\nu_long StFreeRing(u_long* base);\nint StGetBackloc(CdlLOC* loc);\nvoid StSetRing(u_long* ring_addr, u_long ring_size1);\nvoid StUnSetRing(void);\nstruct Callbacks {\n    const char* rcsid;\n    void* (*DMACallback)(int dma, void (*func)());\n    void* (*InterruptCallback)(int irq, void (*f)());\n    int (*ResetCallback)(void);\n    int (*StopCallback)(void);\n    int (*VSyncCallbacks)(int ch, void (*f)());\n    int (*RestartCallback)(void);\n};\nextern unsigned short D_8002C2BA;\nextern struct Callbacks* D_8002D340;\nint VSync(int mode);\nint VSyncCallback(void (*f)());\nint VSyncCallbacks(int ch, void (*f)());\nvoid* DMACallback(int dma, void (*func)());\nint ResetCallback(void);\nint StopCallback(void);\nint RestartCallback(void);\nint CheckCallback(void);\nlong SetVideoMode(long mode);\nvoid PadInit(int mode);\nu_long PadRead(int id);\nvoid PadStop(void);\ntypedef struct {\n              short x;\n              short y;\n              short w;\n              short h;\n} RECT;\ntypedef struct {\n    unsigned addr : 24;\n    unsigned len : 8;\n    u_char r0, g0, b0, code;\n} P_TAG;\ntypedef struct {\n    u_char r0, g0, b0, code;\n} P_CODE;\ntypedef struct {\n    u_long tag;\n              u_long code[15];\n} DR_ENV;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n} POLY_F3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    short x3, y3;\n} POLY_F4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char u0, v0;\n    u_short clut;\n    short x1, y1;\n    u_char u1, v1;\n    u_short tpage;\n    short x2, y2;\n    u_char u2, v2;\n    u_short pad1;\n} POLY_FT3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char u0, v0;\n    u_short clut;\n    short x1, y1;\n    u_char u1, v1;\n    u_short tpage;\n    short x2, y2;\n    u_char u2, v2;\n    u_short pad1;\n    short x3, y3;\n    u_char u3, v3;\n    u_short pad2;\n} POLY_FT4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, pad1;\n    short x1, y1;\n    u_char r2, g2, b2, pad2;\n    short x2, y2;\n} POLY_G3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n} POLY_GT3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char pad1;\n               short x1;\n               short y1;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char pad2;\n               short x2;\n               short y2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char pad3;\n               short x3;\n               short y3;\n} POLY_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char p3;\n               short x3;\n               short y3;\n               u_char u3;\n               u_char v3;\n               u_short pad3;\n} POLY_GT4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n} LINE_F2;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n} LINE_G2;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    u_long pad;\n} LINE_F3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n    u_char r2, g2, b2, p2;\n    short x2, y2;\n    u_long pad;\n} LINE_G3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    short x3, y3;\n    u_long pad;\n} LINE_F4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n    u_char r2, g2, b2, p2;\n    short x2, y2;\n    u_char r3, g3, b3, p3;\n    short x3, y3;\n    u_long pad;\n} LINE_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               short w;\n               short h;\n} SPRT;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_16;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_8;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short w, h;\n} TILE;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_16;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_8;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_1;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short w, h;\n} BLK_FILL;\ntypedef struct {\n               RECT clip;\n               short ofs[2];\n               RECT tw;\n               u_short tpage;\n               u_char dtd;\n               u_char dfe;\n               u_char isbg;\n               u_char r0, g0, b0;\n               DR_ENV dr_env;\n} DRAWENV;\ntypedef struct {\n               RECT disp;\n               RECT screen;\n               u_char isinter;\n               u_char isrgb24;\n               u_char pad0;\n               u_char pad1;\n} DISPENV;\ntypedef struct {\n               u_long tag;\n               u_long code[2];\n} DR_MODE;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_TWIN;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_AREA;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_OFFSET;\ntypedef struct {\n    u_long tag;\n    u32 code[2];\n} DR_PRIO;\ntypedef struct PixPattern {\n    u8 w;\n    u8 h;\n    u8 x;\n    u8 y;\n} PixPattern;\nextern u_short LoadTPage(\n    u_long* pix,\n    int tp,\n    int abr,\n    int x, int y,\n    int w, int h\n);\nextern u_short LoadClut2(u_long* clut, int x, int y);\nu_short GetClut(int x,\n                int y\n);\nu_short GetTPage(int tp, int abr, int x, int y);\nvoid DumpTPage(u_short tpage);\nvoid DumpClut(u_short clut);\nextern void AddPrim(void* ot, void* p);\nextern void SetShadeTex(void* p, int tge);\nextern void SetLineG2(LINE_G2* p);\nextern void SetPolyGT3(POLY_GT3* p);\nextern void SetPolyG4(POLY_G4* p);\nextern void SetPolyGT4(POLY_GT4* p);\nextern void SetSemiTrans(void* p, int abe);\nextern void SetSprt(SPRT* p);\nextern void SetSprt16(SPRT_16* p);\nextern void SetSprt8(SPRT_8* p);\nextern void SetTile(TILE* p);\nextern int ResetGraph(int mode);\nint SetGraphDebug(int level);\nextern int SetGraphReverse(int mode);\nextern int SetGraphQueue(int mode);\nextern u_long DrawSyncCallback(void (*func)());\nextern void FntLoad(int tx, int ty);\nint FntPrint(const char* fmt, ...);\nextern void SetDispMask(int mask);\nextern void SetDrawMode(DR_MODE* p, int dfe, int dtd, int tpage, RECT* tw);\nextern void SetDumpFnt(int id);\nextern int ClearImage(RECT* rect, u_char r, u_char g, u_char b);\nextern int DrawSync(int mode);\nextern int FntOpen(int x, int y, int w, int h, int isbg, int n);\nextern u_long* FntFlush(int id);\nextern int LoadImage(RECT* rect, u_long* p);\nextern int StoreImage(RECT* rect, u_long* p);\nextern int MoveImage(RECT* rect, int x, int y);\nextern u_long* ClearOTag(u_long* ot, int n);\nextern u_long* ClearOTagR(u_long* ot, int n);\nextern void DrawOTag(u_long* p);\nextern DRAWENV* PutDrawEnv(DRAWENV* env);\nextern DISPENV* PutDispEnv(DISPENV* env);\nextern DISPENV* SetDefDispEnv(DISPENV* env, int x, int y, int w, int h);\nextern DRAWENV* SetDefDrawEnv(DRAWENV* env, int x, int y, int w, int h);\nextern void SetDrawEnv(DR_ENV* dr_env, DRAWENV* env);\nvoid GsClearVcount(void);\nlong GsGetVcount();\nvoid GsInitVcount();\nvoid InitGeom();\ntypedef struct {\n    short m[3][3];\n    long t[3];\n} MATRIX;\ntypedef struct {\n    long vx, vy, vz;\n    long pad;\n} VECTOR;\ntypedef struct {\n    short vx, vy, vz;\n    short pad;\n} SVECTOR;\ntypedef struct {\n    u_char r, g, b;\n    u_char cd;\n} CVECTOR;\nMATRIX* RotMatrix(SVECTOR* r, MATRIX* m);\nvoid SetGeomOffset(long ofx, long ofy);\nlong RotTransPers(SVECTOR*, long*, long*, long*);\nvoid SetGeomScreen(long h);\nvoid SetRotMatrix(MATRIX* m);\nMATRIX* RotMatrixX(long r, MATRIX* m);\nMATRIX* RotMatrixY(long r, MATRIX* m);\nMATRIX* RotMatrixZ(long r, MATRIX* m);\nMATRIX* TransMatrix(MATRIX* m, VECTOR* v);\nMATRIX* ScaleMatrix(MATRIX* m, VECTOR* v);\nvoid SetTransMatrix(MATRIX* m);\nlong RotTransPers4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* v10, long* v11, long* v12,\n    long* v13,\n    long* p,\n    long* flag\n);\nlong RotAverageNclip4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* sxy0, long* sxy1, long* sxy2,\n    long* sxy3,\n    long* p,\n    long* otz,\n    long* flag\n);\nvoid NormalColorCol(SVECTOR* v0,\n                    CVECTOR* v1,\n                    CVECTOR* v2\n);\nMATRIX* RotMatrixY(long r,\n                   MATRIX* m\n);\nvoid SetBackColor(long rbk, long gbk, long bbk);\nvoid SetColorMatrix(MATRIX* m);\nvoid SetLightMatrix(MATRIX* m);\nvoid SetTransMatrix(MATRIX* m);\nvoid SetFarColor(long rfc, long gfc, long bfc);\nvoid SetFogNear(long a, long h);\nextern long SquareRoot0(long a);\nextern long SquareRoot12(long a);\nextern int rcos(int a);\nextern int rsin(int a);\nextern long ratan2(long y, long x);\ntypedef void (*SpuIRQCallbackProc)(void);\ntypedef struct {\n    short left;\n    short right;\n} SpuVolume;\ntypedef struct {\n               unsigned long voice;\n               unsigned long mask;\n               SpuVolume volume;\n               SpuVolume volmode;\n               SpuVolume volumex;\n               unsigned short pitch;\n               unsigned short note;\n               unsigned short sample_note;\n               short envx;\n               unsigned long addr;\n               unsigned long loop_addr;\n               long a_mode;\n               long s_mode;\n               long r_mode;\n               unsigned short ar;\n               unsigned short dr;\n               unsigned short sr;\n               unsigned short rr;\n               unsigned short sl;\n               unsigned short adsr1;\n               unsigned short adsr2;\n} SpuVoiceAttr;\ntypedef struct {\n    unsigned long mask;\n    long mode;\n    SpuVolume depth;\n    long delay;\n    long feedback;\n} SpuReverbAttr;\nextern long SpuSetTransferMode(long mode);\nextern unsigned long SpuWrite(unsigned char* addr, unsigned long size);\nextern long SpuSetReverbModeParam(SpuReverbAttr* attr);\nextern void SpuSetVoiceAttr(SpuVoiceAttr* arg);\nextern void SpuSetKey(long on_off, unsigned long voice_bit);\nextern long SpuMallocWithStartAddr(unsigned long addr, long size);\nextern SpuIRQCallbackProc SpuSetIRQCallback(SpuIRQCallbackProc);\nextern void SsSeqClose(short seq_access_num);\nextern void SsSetMVol(short voll, short volr);\nextern void SsSetSerialAttr(char s_num, char attr, char mode);\nextern void SsSetSerialVol(short s_num, short voll, short volr);\nextern long SpuClearReverbWorkArea(long rev_mode\n);\nvoid SsInitHot(void);\nchar SsSetReservedVoice(char voices\n);\nvoid SsSetTickMode(long tick_mode\n);\nvoid SsStart(void);\nshort SsUtKeyOnV(\n    short voice,\n    short vabId,\n    short prog,\n    short tone,\n    short note,\n    short fine,\n    short voll,\n    short volr\n);\nshort SsUtSetVVol(short vc,\n                  short voll,\n                  short volr\n);\nvoid SpuGetAllKeysStatus(char* status);\nvoid SsSetTableSize(\n    char* table,\n    short s_max,\n    short t_max\n);\nvoid SsSeqStop(short seq_access_num\n);\nvoid SsSetMono(void);\nvoid SsSetStereo(void);\ns32 SsVabOpenHeadSticky(\n    u_char* addr,\n    u_long vabid,\n    u_long sbaddr\n);\ns32 SsVabTransBodyPartly(\n    u_char* addr,\n    u_long bufsize,\n    u_long vabid\n);\ns32 SsVabTransCompleted(\n    short immediateFlag\n);\nvoid SsUtSetReverbType(short type);\nvoid SsUtReverbOn(void);\nvoid SsUtSetReverbDepth(\n    short ldepth,\n    short rdepth\n);\nvoid SsUtSetReverbDelay(short delay);\ntypedef long Event;\ntypedef enum {\n    PRIM_NONE,\n    PRIM_TILE,\n    PRIM_LINE_G2,\n    PRIM_G4,\n    PRIM_GT4,\n    PRIM_GT3,\n    PRIM_SPRT,\n    PRIM_ENV,\n    PRIM_TILE_ALT = PRIM_TILE | 0x10,\n    PRIM_LINE_G2_ALT = PRIM_LINE_G2 | 0x10,\n    PRIM_G4_ALT = PRIM_G4 | 0x10\n} PrimitiveType;\ntypedef struct Vertex {\n              u8 r;\n              u8 g;\n              u8 b;\n              u8 p;\n              s16 x;\n              s16 y;\n              u8 u;\n              u8 v;\n              u16 param;\n} Vertex;\ntypedef struct {\n               SVECTOR* v0;\n               SVECTOR* v1;\n               SVECTOR* v2;\n               SVECTOR* v3;\n} SVEC4;\ntypedef struct {\n    s16 x;\n    s16 y;\n    u8 u;\n    u8 v;\n    u16 param;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 p;\n} VertexFake;\ntypedef struct Prim {\n    struct Prim* next;\n    struct Vertex v[4];\n} Prim;\ntypedef struct Primitive {\n               struct Primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               s16 x2;\n               s16 y2;\n               u8 u2;\n               u8 v2;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               s16 x3;\n               s16 y3;\n               u8 u3;\n               u8 v3;\n               u16 drawMode;\n} Primitive;\ntypedef struct FakePrim {\n    struct FakePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 w;\n               u8 h;\n               u16 clut;\n               f32 posX;\n               f32 posY;\n               f32 velocityX;\n               f32 velocityY;\n               s16 x2;\n               s16 y2;\n               s16 delay;\n               u16 priority;\n               f32 accelerationX;\n               f32 accelerationY;\n               s16 timer;\n               u16 drawMode;\n} FakePrim;\ntypedef struct PrimLineG2 {\n    struct PrimLineG2* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               s16 xLength;\n               s16 yLength;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               f32 velocityX;\n               f32 velocityY;\n               s32 angle;\n               s16 delay;\n               u16 priority;\n               f32 preciseX;\n               f32 preciseY;\n               s16 timer;\n               u16 drawMode;\n} PrimLineG2;\ntypedef struct {\n    struct primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               f32 y1_f32;\n               s16 unk24;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               f32 y1_f32_velocity;\n               s16 unk30;\n               u16 drawMode;\n} draculaPrimitive;\ntypedef struct AxePrim {\n    struct AxePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               s32 unk0C;\n               s32 unk10;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               s16 unk1C;\n              s16 unk1E;\n               s16 x2;\n               s16 y2;\n               u8 step;\n               u16 priority;\n               s32 pad;\n               s16 timer;\n               s16 unk2E;\n               s16 unk30;\n               u16 drawMode;\n} AxePrim;\nstruct Entity;\ntypedef void (*PfnEntityUpdate)(struct Entity*);\ntypedef union {\n    s32 unk;\n    void* ptr;\n    struct {\n        s8 unk0, unk1, unk2, unk3;\n    } S8;\n    struct {\n        u8 unk0, unk1, unk2, unk3;\n    } U8;\n    struct {\n        s16 unk0, unk2;\n    } S16;\n    struct {\n        u16 unk0, unk2;\n    } U16;\n} Multi;\ntypedef union {\n    s16 s;\n    u16 u;\n    struct {\n        s8 unk0, unk1;\n    } S8;\n    struct {\n        u8 unk0, unk1;\n    } U8;\n} Multi16;\nstruct Entity;\ntypedef struct ET_Generic {\n               Multi16 unk7C;\n    union {\n                   u16 modeU16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeU8;\n    } unk7E;\n    union {\n                   s32 modeS32;\n                   struct Entity* entityPtr;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeS8;\n    } unk80;\n               Multi unk84;\n               Multi unk88;\n    union {\n                   struct Entity* entityPtr;\n                   struct Primitive* primPtr;\n                   s32 modeS32;\n        struct {\n                       u16 unk0;\n                       u16 unk2;\n        } modeU16;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk8C;\n               s16 unk90;\n               s16 unk92;\n               u8 unk94;\n               u8 unk95;\n               s16 unk96;\n               s32 unk98;\n               struct Entity* unk9C;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               u8 unkAC;\n               s8 unkAD;\n               s8 unkAE;\n               s8 unkAF;\n               s16 unkB0;\n               s16 unkB2;\n               s16 unkB4;\n               s16 unkB6;\n    union {\n                   void (*unkFuncB8)(struct Entity*);\n                   struct Entity* entityPtr;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n                       u8 unk2;\n                       u8 unk3;\n        } modeU8;\n    } unkB8;\n} ET_Generic;\ntypedef struct {\n               u16 timer;\n               s16 unk7E;\n               u8 aliveTimer;\n               s8 unk81;\n               s16 unk82;\n               s32 fallSpeed;\n               s16 gravity;\n               s16 unk8A;\n               s16 iconSlot;\n               s16 unk8E;\n               s16 unk90;\n               s16 unk92;\n               s32 castleFlag;\n} ET_EquipItemDrop;\ntypedef struct {\n               u32 unk[14];\n               u16 unkB4;\n               s16 unkB6;\n               PfnEntityUpdate update;\n} ET_HeartDrop;\ntypedef struct {\n               u16 timer;\n               u16 size;\n               u32 speed;\n} ET_BloodDroplets;\ntypedef struct {\n               u16 nPrims;\n               u16 nDigits;\n               u8 digits[4];\n               u16 timer;\n               s16 unk86;\n               u16 unk88;\n               s16 unk8A;\n} ET_NumericDamage;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u16 sparkleCycle;\n    u16 sparkleAnim;\n    u32 unk84;\n    u32 unk88;\n    s16 iconSlot;\n    u16 unk8E;\n    u16 floatTimer;\n    u16 unk92;\n    s32 yFloatSpeed;\n} ET_RelicOrb;\ntypedef struct {\n               u32 unused7C;\n               s16 unused80;\n               s16 unk82;\n               s16 angle;\n               s16 unk86;\n               u8 sideToPlayer;\n               u8 showedMessage;\n} ET_Door;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               struct Primitive* unk84;\n               struct Primitive* unk88;\n               struct Primitive* unk8C;\n               s16 unk90;\n               s16 unk92;\n} ET_StagePopup;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               struct Primitive* unk84;\n               struct Primitive* unk88;\n               u8 unk8C;\n} ET_StagePopupJP;\ntypedef struct {\n               char* label;\n               u16 width;\n               u16 height;\n               s16 unk84;\n               u16 duration;\n} ET_MessageBox;\ntypedef struct {\n               s16 lifetime;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               struct Entity* some_ent;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s32 accelerationX;\n               s32 accelerationY;\n               s32 unkA4;\n               s32 unkA8;\n               u8 anim;\n               u8 unkAD;\n               s16 equipId;\n} ET_Weapon;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    s32 unk80;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n} ET_KarmaCoin;\ntypedef struct {\n    s16 angle;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 xPos;\n    s16 unk8A;\n    struct Entity* parent;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 accelerationX;\n    s32 accelerationY;\n    s32 unkA4;\n    s32 unkA8;\n    u8 anim;\n    u8 unkAD;\n    s16 equipId;\n} ET_HeavenSword;\ntypedef struct {\n    s16 angle;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s32 unk84;\n    s16 xPos;\n    s16 unk8A;\n    struct Entity* parent;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 accelerationX;\n    s32 accelerationY;\n    s32 unkA4;\n    s32 unkA8;\n    u8 anim;\n    u8 unkAD;\n    s16 equipId;\n} ET_HeavenSword2;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               byte pad[10];\n               u8 anim;\n               u8 padAD;\n               s16 unkAE;\n} ET_Shield;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               u16 unk80;\n               s16 pal;\n               s16* palettePtr;\n               u16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               byte pad[14];\n               u8 anim;\n               u8 padAD;\n               s16 unkAE;\n} ET_DarkShield;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               struct Entity* target;\n               s16 unk94;\n               s16 unk96;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               byte pad[6];\n               s16 unkAE;\n} ET_MedusaShieldLaser;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n} ET_ShamanShieldStar;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               u8 unk9C;\n               byte pad[14];\n               u8 anim;\n               s16 unkAE;\n} ET_HeraldShieldSwirlEffect;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    s32 unk80;\n    s16 pad[21];\n    s16 foodId;\n} ET_Food;\ntypedef struct {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 attackMode;\n               u8 flag;\n               u8 nearDeath;\n               s32 speed;\n               s16 angle;\n               char pad_8E[0xE];\n               u8 pickupFlag;\n               u8 grabedAscending;\n} ET_GaibonSlogra;\ntypedef struct {\n               u16 angle;\n               u16 unk7E;\n               u16 unk80;\n               s16 unk82;\n} ET_SoulStealOrb;\ntypedef struct {\n               Primitive* primBg;\n               s32 unused80;\n               Primitive* primFade;\n               s32 unk88;\n} ET_WarpRoom;\ntypedef struct {\n               char pad_0[0x8];\n               u8 timer;\n               char pad_85[0x1];\n               s8 timer2;\n               char pad_87[0x5];\n               u16 palette;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_0[0x6];\n               s8 timer;\n               char pad_87[0x5];\n               s16 rotation;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman_2;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               s16 unk8C;\n               s16 unk8E;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s32 unkA0;\n               struct Entity* target;\n               s16 unkA8;\n               s16 unkAA;\n               s16 cameraX;\n               s16 cameraY;\n               s16 unkB0;\n               s16 unkB2;\n               struct Entity* follow;\n} ET_Bat;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    struct Primitive* unk84;\n    s16 unk88;\n    s16 unk8A;\n} ET_BatEcho;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n               char pad_8A[0x3];\n               u8 unk8D;\n               char pad_8E[0xE];\n               s16 unk9C;\n               struct Entity* next;\n} ET_801CF254;\ntypedef struct {\n               char pad_0[0x4];\n               s16 unk80;\n               char pad_82[0xA];\n               u8 unk8C;\n               char pad_8D[0xF];\n               u16 unk9C;\n               char pad_9E[0x8];\n               s16 unkA6;\n} ET_GurkhaSword;\ntypedef struct ET_Dracula {\n               char pad_7C[4];\n               struct draculaPrimitive* unk80;\n               struct draculaPrimitive* unk84;\n               char pad_88[4];\n               s16 unk8C;\n               char pad_8E[0x2];\n               u8 unk90;\n               char pad91;\n               u8 unk92;\n               char pad93;\n               u8 unk94;\n               char pad_95[0x3];\n               s16 unk98;\n               char pad_9A[0x2];\n               s16 unk9C;\n               char pad_9E[0x2];\n               u8 unkA0;\n               u8 unkA1;\n               u8 unkA2;\n               char pad_A3[0x9];\n               struct Primitive* prim;\n} ET_Dracula;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               s32 unk84;\n               s16 unk88;\n               char pad_8A[0x2];\n               s16 unk8C;\n               s16 unk8E;\n} ET_StageTitleCard;\ntypedef struct ET_Succubus {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 facingLeft;\n               u8 unk85;\n               u8 nextAttack;\n               u8 unk87;\n               u16 nextStep;\n               char pad_8A[0x4];\n               s16 yOffset;\n               char pad_90[0xC];\n               struct Entity* real;\n               s16 clonePosX;\n               s16 unkA2;\n} ET_Succubus;\ntypedef struct {\n               u16 timer;\n               char pad_7E[2];\n               s32 unk80;\n} ET_RoomTransition2;\ntypedef struct {\n               u8 pad0[0x4];\n               s32 unk80;\n               s16 unk84;\n               u8 pad86[2];\n               u8 unk88;\n               u8 unk89;\n} ET_801B3C38;\ntypedef struct {\n               u16 unk7C;\n} ET_801BCC4C;\ntypedef struct ET_CastleDoor {\n               struct Primitive* prim;\n               s16 timer;\n               char pad_82[0x2];\n               s16 rotZ;\n} ET_CastleDoor;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               s16 unk82;\n               s16 timer;\n} ET_ShuttingWindow;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               u16 unk84;\n} ET_DeathSkySwirl;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s32 elevatorTarget;\n} ET_Elevator;\ntypedef struct {\n               s32 pad[8];\n               s16 unk84;\n               s16 unk86;\n               s16* unk88;\n} ET_801D0B40;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0xC];\n               u8 unk8C;\n               u8 unk8D;\n               char pad_8E[0xE];\n               u16 unk9C;\n} ET_801D1BB8;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n} ET_801D0B78;\ntypedef struct {\n               s32 unk7C;\n               s16 unk80;\n               s16 unk82;\n    union {\n                   s32 val;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk84;\n               u16 unk88;\n} ET_WaterEffects;\ntypedef struct {\n               char pad_0[4];\n               s16 unk80;\n               char pad_82[2];\n               u8 unk84;\n               char pad_85[3];\n               u16 unk88;\n               char pad_8A[2];\n               u8 unk8C;\n               u8 unk8D;\n               u8 unk8E;\n               char pad_8E[13];\n               s16 rotZ;\n               s16 unk9E;\n               struct Entity* parent;\n               s16 unkA4;\n               s16 unkA6;\n               u8 unkA8;\n               char pad_A9[0x7];\n               u16 unkB0[0x6];\n} ET_GurkhaHammer;\ntypedef struct {\n               char pad_0[0x20];\n               s16 unk9C;\n               char pad_A0[0x6];\n               s16 unkA4;\n               s16 unkA6;\n               char pad_A8[0xC];\n               u16 unkB4;\n} ET_801CDFD8;\ntypedef struct {\n               char pad_0[0x8];\n               u8 unk84;\n               char pad_85[0x9];\n               u8 unk8E;\n               char pad_8F[0x20];\n               s16 unkB0;\n} ET_801CE4CC;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n} ET_TransparentWater;\ntypedef struct {\n               struct Primitive* prim;\n               s32 timer;\n} ET_HeartRoomGoldDoor;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s8 unk84;\n               char pad_85[0x1];\n               s8 unk86;\n} ET_MermanWaterSplash;\ntypedef struct {\n               s32 playerVelocity;\n} ET_CastleDoorTransition;\ntypedef struct {\n               s8 unk7C;\n} ET_AlucardController;\ntypedef struct {\n               u16 unk7C;\n} ET_ForegroundTree;\ntypedef struct {\n               u16 unk7C;\n               u16 unk7E;\n               s16 unk80;\n} ET_FadeToWhite;\ntypedef struct {\n               u16 unk7C;\n} ET_DeathStolenItems;\ntypedef struct {\n               u16 unk7C;\n               char pad_7E[0x2];\n               s16 posX;\n               s16 posY;\n               u16 moveTimer;\n               u16 moveDirection;\n} ET_Death;\ntypedef struct {\n               u8 unk7C;\n               char pad_7D[0x3];\n               s16 unk80;\n               s16 unk82;\n               struct Entity* unk84;\n} ET_SpittleBone;\ntypedef struct {\n    Primitive* prim;\n    char pad[0x24];\n    s16 unkA4;\n    s16 unkA6;\n    char padd[4];\n    u8 anim;\n    char pad2[0x8];\n    struct Entity* unkB8;\n} ET_Player;\ntypedef struct {\n    u8 unk0;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n} ET_EntitySlot1;\ntypedef struct {\n    char pad[0x32];\n    s16 unkAE;\n} ET_EntitySlot16;\ntypedef struct {\n               s16 unk7C;\n} ET_Entity12;\ntypedef struct {\n    u8 fiveFrameCounter;\n    struct Entity* parent;\n    char pad[8];\n    u16 parentId;\n} ET_Entity13;\ntypedef struct {\n    s16 t;\n} ET_TimerOnly;\ntypedef struct {\n    char pad[8];\n    struct Primitive* prim;\n} ET_AxeKnight;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 childId;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               s16 unkAC;\n               s16 unkAE;\n               s16 unkB0;\n               s16 unkB2;\n} ET_EntFactory;\ntypedef struct {\n    char pad[8];\n    s32 unk8;\n} unk_sub_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    byte pad[14];\n    unk_sub_8011E4BC* unk8C;\n} ET_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_HellfireHandler;\ntypedef struct {\n    s16 stoneAngle;\n    s16 lifeTimer;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_ReboundStone;\ntypedef struct {\n    s16 timer;\n} ET_Vibhuti;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 pad[24];\n               s16 unkB0;\n} ET_GiantSpinningCross;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_8017091C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 pad[0x16];\n    s16 unkB0;\n} ET_80170F64;\ntypedef struct {\n    s16 timer;\n    s16 size;\n} ET_stopwatchCircle;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    f32 unk84;\n    s32 unk88;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 unk96;\n    struct Entity* unk98;\n    s32 pad[5];\n    s16 unkB0;\n} ET_801719A4;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 unk96;\n    struct Entity* unk98;\n    s32 pad[5];\n    s16 unkB0;\n} ET_BibleSubwpn;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s32 unk84;\n    s32 unk88;\n    struct Entity* parent1;\n    s32 pad[10];\n    struct Entity* parent2;\n} ET_80128C2C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_80161FF0;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n} ET_80162870;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n} ET_8016E9E4;\ntypedef struct {\n    u8 unk7C;\n    u8 unk7D[3];\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_801CC820;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    struct Primitive* unk88;\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n} ET_stopwatchSparkle;\ntypedef struct {\n    s16 t;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    f32 unk84;\n    f32 unk88;\n    s16 unk8C;\n    s16 unk8E;\n} ET_stopwatch;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n} ET_RichterPowerUpRing;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n} ET_TransparentWhiteCircle;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n} ET_HitByIce;\ntypedef struct {\n    s16 unk7C;\n    s16 pad7E;\n    s16 unk80;\n    s16 unk82;\n    byte pad84[12];\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 pad96[3];\n    s16 unk9C;\n} ET_HitByLightning;\ntypedef struct {\n    s32 unk7C;\n    s32 unk80;\n    s32 unk84;\n    s32 unk88;\n    s32 unk8C;\n    s32 unk90;\n} ET_Teleport;\ntypedef struct {\n    s16 timer;\n    s16 angle;\n    s16 unk80;\n    s16 unk82;\n} ET_HolyWater;\ntypedef struct {\n    s16 timer;\n    s16 angle;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_HolyWaterFlame;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u8 unk80;\n    byte pad81;\n    u8 unk82;\n    byte pad83;\n    s32 unk84;\n} ET_CrashCross;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u8 unk80;\n    byte pad81;\n    u8 unk82;\n    byte pad83;\n    s32 unk84;\n} ET_RicRevivalColumn;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    u16 unk80;\n    u16 pad82;\n    Point16* unk84;\n} ET_CrossBoomerang;\ntypedef struct {\n    f32 unk7C;\n    f32 unk80;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n    s16 unk8C;\n    s16 unk8E;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 unk9C;\n    s32 unkA0;\n    s16 unkA4;\n    s16 unkA6;\n    s32 unkA8;\n    s32 unkAC;\n    s16 unkB0;\n    s32 unkB4;\n    s32 unkB8;\n} ET_80166784;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s8 unk8A;\n    u8 unk8B[12];\n    s32 unk98;\n} ET_AguneaCrash;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s8 unk8A;\n    u8 unk8B[12];\n    s32 unk98;\n    s32 unk9C;\n    u16 unkA0;\n} ET_AxeCrash;\ntypedef struct {\n    s32 pad7c;\n    Primitive* unk80;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    struct Entity* parent;\n    s16 unk90;\n} ET_801291C4;\ntypedef struct {\n    s16 timer;\n    u16 unk7E;\n    s16 unk80;\n    s16 pad82;\n    s32 unk84;\n    s32 unk88;\n    u16 unk8C;\n} ET_VibhutiCrash;\ntypedef struct {\n    PrimLineG2* lines[4];\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n} ET_8016D9C4;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_8016DF74;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    byte pad[46];\n    s16 unkB0;\n} ET_8016E46C;\ntypedef struct {\n    struct Primitive* prim1;\n    struct Primitive* prim2;\n    struct Primitive* prim3;\n    struct Primitive* prim4;\n    s16 unk8C;\n    s16 unk8E;\n} ET_801AF774;\ntypedef struct {\n    s32 unk7C;\n    s16 timer;\n    s16 unk82;\n    s16 unk84;\n} ET_DracFinal;\ntypedef struct {\n    byte pad[0x18];\n    s32 unk94;\n} ET_Drop;\ntypedef struct {\n               byte pad[4];\n               s16 angle;\n               byte pad2[2];\n               u8 switch_control;\n               u8 speed;\n} ET_BigRedFireball;\ntypedef struct {\n    s16 timer;\n    s16 spawnTimer;\n} ET_SummonSpirit;\ntypedef struct {\n    struct Primitive* prim;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_3DBackgroundhouse;\ntypedef struct {\n    struct Primitive* prim1;\n    struct Primitive* prim2;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n} ET_LifeUpSpawn;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    u16 unk88;\n    u16 unk8A;\n} ET_801B0AA4;\ntypedef struct {\n    byte pad[4];\n    u16 unk80;\n    u16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n    u8 unk8C;\n} ET_Owl;\ntypedef struct {\n    u16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    u16 unk88;\n    s16 unk8A;\n    s16 unk8C;\n    s16 unk8E;\n} ET_AlucardWaterEffect;\ntypedef struct {\n    s32 pad;\n    s16 timer;\n} ET_801B28E4;\ntypedef struct {\n    u32 unk24[10];\n    u8 unk28;\n    u8 unk29;\n} ET_80123B40;\ntypedef struct {\n    struct Entity* ent;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_80129864;\ntypedef struct {\n    s16 timer;\n    s16 pad;\n    s16 xCurrent;\n    s16 yCurrent;\n    s16 xTarget;\n    s16 yTarget;\n} ET_Mist;\ntypedef struct {\n    s32 unk7C;\n    s16 unk80;\n    s16 unk82;\n    s32 un84;\n    s16 unk88;\n    s16 unk8A;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s32 unk94;\n    s16 unk98;\n    s16 unk9A;\n    s16 unk9C;\n} ET_PlayerBlink;\ntypedef struct {\n    struct Primitive* prim;\n    s16 unk80;\n    s16 pad82;\n    s32 pad84;\n    s32 pad88;\n    struct Primitive* prim2;\n    struct Primitive* prim3;\n} ET_BloodSplatter;\ntypedef struct {\n    s32 pad7c;\n    s16 timer;\n    s16 pad82;\n    s32 pad84;\n    s32 pad88;\n    s32 pad8C;\n    s16 brightness;\n} ET_PlayerOutline;\ntypedef struct {\n    u8 digits[4];\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    u16 unk86;\n    u16 unk88;\n    u16 unk8A;\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n    s16 unk92;\n    s16 angleToMeter;\n    s16 distToMeter;\n    s16 unk98;\n} ET_HPNumberMove;\ntypedef struct {\n    s16 timer;\n    s16 pad1;\n    s16 halfWidth;\n    s16 halfHeight;\n    s32 pad2;\n    s16 angle;\n    s16 pad3;\n    s32 pad4;\n    s32 str_x;\n    s32 str_y;\n    s32 unk98;\n} ET_GuardText;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_Dissolve;\ntypedef union {\n    struct Primitive* prim;\n    char stub[0x40];\n    ET_TimerOnly timer;\n    ET_EntFactory factory;\n    ET_Generic generic;\n    ET_EntitySlot1 entSlot1;\n    ET_EntitySlot16 entSlot16;\n    ET_Entity12 ent12;\n    ET_Entity13 ent13;\n    ET_8011E4BC et_8011E4BC;\n    ET_HellfireHandler hellfireHandler;\n    ET_ReboundStone reboundStone;\n    ET_8016D9C4 et_8016D9C4;\n    ET_8016E46C et_8016E46C;\n    ET_8016DF74 et_8016DF74;\n    ET_CrossBoomerang crossBoomerang;\n    ET_Vibhuti vibhuti;\n    ET_HolyWater holywater;\n    ET_HolyWaterFlame holywaterflame;\n    ET_CrashCross crashcross;\n    ET_AguneaCrash aguneaCrash;\n    ET_AxeCrash axeCrash;\n    ET_VibhutiCrash vibhutiCrash;\n    ET_RicRevivalColumn ricColumn;\n    ET_GiantSpinningCross giantcross;\n    ET_EquipItemDrop equipItemDrop;\n    ET_HeartDrop heartDrop;\n    ET_BloodDroplets bloodDroplets;\n    ET_BloodSplatter bloodSplatter;\n    ET_NumericDamage ndmg;\n    ET_RelicOrb relicOrb;\n    ET_Door door;\n    ET_StagePopup stpopup;\n    ET_StagePopupJP stpopupj;\n    ET_MessageBox messageBox;\n    ET_Weapon weapon;\n    ET_Shield shield;\n    ET_DarkShield darkShield;\n    ET_KarmaCoin karmacoin;\n    ET_HeavenSword heavenSword;\n    ET_HeavenSword2 heavenSword2;\n    ET_MedusaShieldLaser medshieldlaser;\n    ET_ShamanShieldStar shamanshieldstar;\n    ET_HeraldShieldSwirlEffect heraldSwirl;\n    ET_Food food;\n    ET_HitByIce hitbyice;\n    ET_HitByLightning hitbylightning;\n    ET_PlayerBlink playerBlink;\n    ET_Mist mist;\n    ET_Bat bat;\n    ET_BatEcho batEcho;\n    ET_SoulStealOrb soulStealOrb;\n    ET_GaibonSlogra GS_Props;\n    ET_WarpRoom warpRoom;\n    ET_Teleport teleport;\n    ET_Merman merman;\n    ET_Merman_2 merman2;\n    ET_MermanWaterSplash mermanWaterSplash;\n    ET_80128C2C et_80128C2C;\n    ET_801291C4 et_801291C4;\n    ET_8017091C et_8017091C;\n    ET_80170F64 et_80170F64;\n    ET_stopwatchCircle et_stopwatchCircle;\n    ET_stopwatchSparkle et_stopWatchSparkle;\n    ET_stopwatch stopwatch;\n    ET_80161FF0 et_80161FF0;\n    ET_80162870 et_80162870;\n    ET_80166784 et_80166784;\n    ET_RichterPowerUpRing ricPowerRing;\n    ET_TransparentWhiteCircle whiteCircle;\n    ET_8016E9E4 et_8016E9E4;\n    ET_801719A4 et_801719A4;\n    ET_BibleSubwpn et_BibleSubwpn;\n    ET_801CF254 et_801CF254;\n    ET_GurkhaSword gurkhaSword;\n    ET_Dracula dracula;\n    ET_DracFinal dracFinalForm;\n    ET_Succubus succubus;\n    ET_StageTitleCard stageTitleCard;\n    ET_RoomTransition2 roomTransition2;\n    ET_801B3C38 et38;\n    ET_801BCC4C et_801BCC4C;\n    ET_ShuttingWindow shuttingWindow;\n    ET_CastleDoor castleDoor;\n    ET_DeathSkySwirl deathSkySwirl;\n    ET_Elevator elevator;\n    ET_801D0B40 et_801D0B40;\n    ET_801D1BB8 et_801D1BB8;\n    ET_801D0B78 et_801D0B78;\n    ET_WaterEffects waterEffects;\n    ET_GurkhaHammer GH_Props;\n    ET_801CE4CC et_801CE4CC;\n    ET_801CDFD8 et_801CDFD8;\n    ET_TransparentWater transparentWater;\n    ET_HeartRoomGoldDoor heartRoomGoldDoor;\n    ET_CastleDoorTransition castleDoorTransition;\n    ET_AlucardController alucardController;\n    ET_ForegroundTree foregroundTree;\n    ET_FadeToWhite fadeToWhite;\n    ET_DeathStolenItems deathStolenItems;\n    ET_Death death;\n    ET_SpittleBone spittleBone;\n    ET_Player player;\n    ET_801CC820 et_801CC820;\n    ET_801AF774 et_801AF774;\n    ET_Drop drop;\n    ET_BigRedFireball bigredfireball;\n    ET_SummonSpirit summonspirit;\n    ET_3DBackgroundhouse bghouse;\n    ET_LifeUpSpawn lifeUpSpawn;\n    ET_AxeKnight axeknight;\n    ET_801B0AA4 et_801B0AA4;\n    ET_Owl owl;\n    ET_AlucardWaterEffect aluwater;\n    ET_80123B40 et_80123B40;\n    ET_80129864 et_80129864;\n    ET_801B28E4 et_801B28E4;\n    ET_PlayerOutline playerOutline;\n    ET_HPNumberMove hpNumMove;\n    ET_GuardText guardText;\n    ET_Dissolve dissolve;\n} Ext;\ntypedef enum {\n    Game_Init,\n    Game_Title,\n    Game_Play,\n    Game_GameOver,\n    Game_NowLoading,\n    Game_VideoPlayback,\n    Game_Unk6,\n    Game_PrologueEnd,\n    Game_MainMenu,\n    Game_Ending,\n    Game_Boot,\n    Game_99 = 99,\n} GameState;\ntypedef enum {\n    STAGE_NO0 = 0x00,\n    STAGE_NO1 = 0x01,\n    STAGE_LIB = 0x02,\n    STAGE_CAT = 0x03,\n    STAGE_NO2 = 0x04,\n    STAGE_CHI = 0x05,\n    STAGE_DAI = 0x06,\n    STAGE_NP3 = 0x07,\n    STAGE_CEN = 0x08,\n    STAGE_NO4 = 0x09,\n    STAGE_ARE = 0x0A,\n    STAGE_TOP = 0x0B,\n    STAGE_NZ0 = 0x0C,\n    STAGE_NZ1 = 0x0D,\n    STAGE_WRP = 0x0E,\n    STAGE_NO1_ALT = 0x0F,\n    STAGE_NO0_ALT = 0x10,\n    STAGE_DRE = 0x12,\n    STAGE_NZ0_DEMO = 0x13,\n    STAGE_NZ1_DEMO = 0x14,\n    STAGE_LIB_DEMO = 0x15,\n    STAGE_BO7 = 0x16,\n    STAGE_MAR = 0x17,\n    STAGE_BO6 = 0x18,\n    STAGE_BO5 = 0x19,\n    STAGE_BO4 = 0x1A,\n    STAGE_BO3 = 0x1B,\n    STAGE_BO2 = 0x1C,\n    STAGE_BO1 = 0x1D,\n    STAGE_BO0 = 0x1E,\n    STAGE_ST0 = 0x1F,\n    STAGE_RNO0 = STAGE_NO0 | 0x20,\n    STAGE_RNO1 = STAGE_NO1 | 0x20,\n    STAGE_RLIB = STAGE_LIB | 0x20,\n    STAGE_RCAT = STAGE_CAT | 0x20,\n    STAGE_RNO2 = STAGE_NO2 | 0x20,\n    STAGE_RCHI = STAGE_CHI | 0x20,\n    STAGE_RDAI = STAGE_DAI | 0x20,\n    STAGE_RNO3 = STAGE_NP3 | 0x20,\n    STAGE_RCEN = STAGE_CEN | 0x20,\n    STAGE_RNO4 = STAGE_NO4 | 0x20,\n    STAGE_RARE = STAGE_ARE | 0x20,\n    STAGE_RTOP = STAGE_TOP | 0x20,\n    STAGE_RNZ0 = STAGE_NZ0 | 0x20,\n    STAGE_RNZ1 = STAGE_NZ1 | 0x20,\n    STAGE_RWRP = STAGE_WRP | 0x20,\n    STAGE_RNZ1_DEMO = 0x35,\n    STAGE_RBO8 = 0x36,\n    STAGE_RBO7 = 0x37,\n    STAGE_RBO6 = 0x38,\n    STAGE_RBO5 = 0x39,\n    STAGE_RBO4 = 0x3A,\n    STAGE_RBO3 = 0x3B,\n    STAGE_RBO2 = 0x3C,\n    STAGE_RBO1 = 0x3D,\n    STAGE_RBO0 = 0x3E,\n    STAGE_MAD = 0x40,\n    STAGE_NO3 = 0x41,\n    STAGE_IWA_LOAD = 0x42,\n    STAGE_IGA_LOAD = 0x43,\n    STAGE_HAGI_LOAD = 0x44,\n    STAGE_SEL = 0x45,\n    STAGE_TE1 = 0x46,\n    STAGE_TE2 = 0x47,\n    STAGE_TE3 = 0x48,\n    STAGE_TE4 = 0x49,\n    STAGE_TE5 = 0x4A,\n    STAGE_TOP_ALT = 0x4B,\n    STAGE_EU_WARNING = 0x70,\n    STAGE_ENDING = 0xFE,\n    STAGE_MEMORYCARD = 0xFF,\n} Stages;\ntypedef enum {\n    Play_Reset = 0,\n    Play_Init,\n    Play_PrepareDemo,\n    Play_Default,\n    Play_PrepareNextStage,\n    Play_LoadStageChr,\n    Play_WaitStageChr,\n    Play_LoadStageSfx,\n    Play_WaitStageSfx,\n    Play_LoadStagePrg,\n    Play_WaitStagePrg,\n    Play_16 = 16,\n    Gameover_Init = 0,\n    Gameover_AllocResources,\n    Gameover_2,\n    Gameover_3,\n    Gameover_4,\n    Gameover_5,\n    Gameover_6,\n    Gameover_7,\n    Gameover_8,\n    Gameover_9,\n    Gameover_10,\n    Gameover_11,\n    Gameover_Alt = 99,\n    Gameover_Init_Alt,\n    Gameover_AllocResources_Alt,\n    Gameover_2_Alt,\n    Gameover_3_Alt,\n    Gameover_11_Alt = 111,\n    NowLoading_2 = 2,\n} GameSteps;\ntypedef enum {\n    Demo_None,\n    Demo_PlaybackInit,\n    Demo_Recording,\n    Demo_End,\n    Demo_Playback,\n} DemoMode;\ntypedef enum {\n    TIMEATTACK_INVALID = -1,\n    TIMEATTACK_GET_RECORD,\n    TIMEATTACK_SET_RECORD,\n    TIMEATTACK_SET_VISITED,\n} TimeAttackActions;\ntypedef enum {\n    TIMEATTACK_EVENT_DRACULA_DEFEAT,\n    TIMEATTACK_EVENT_ORLOX_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_10_DEFEAT,\n    TIMEATTACK_EVENT_GRANFALOON_DEFEAT,\n    TIMEATTACK_EVENT_MINOTAUR_WEREWOLF_DEFEAT,\n    TIMEATTACK_EVENT_SCYLLA_DEFEAT,\n    TIMEATTACK_EVENT_SLOGRA_GAIBON_DEFEAT,\n    TIMEATTACK_EVENT_HYPPOGRYPH_DEFEAT,\n    TIMEATTACK_EVENT_BEELZEBUB_DEFEAT,\n    TIMEATTACK_EVENT_SUCCUBUS_DEFEAT,\n    TIMEATTACK_EVENT_KARASUMAN_DEFEAT,\n    TIMEATTACK_EVENT_RALPH_GRANT_SYPHA_DEFEAT,\n    TIMEATTACK_EVENT_DEATH_DEFEAT,\n    TIMEATTACK_EVENT_CERBERUS_DEFEAT,\n    TIMEATTACK_EVENT_SAVE_RICHTER,\n    TIMEATTACK_EVENT_MEDUSA_DEFEAT,\n    TIMEATTACK_EVENT_THE_CREATURE_DEFEAT,\n    TIMEATTACK_EVENT_LESSER_DEMON_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_40_DEFEAT,\n    TIMEATTACK_EVENT_AKMODAN_II_DEFEAT,\n    TIMEATTACK_EVENT_DARKWING_BAT_DEFEAT,\n    TIMEATTACK_EVENT_GALAMOTH_DEFEAT,\n    TIMEATTACK_EVENT_FINAL_SAVEPOINT,\n    TIMEATTACK_EVENT_MEET_DEATH,\n    TIMEATTACK_EVENT_GET_HOLYGLASSES,\n    TIMEATTACK_EVENT_MEET_MASTER_LIBRARIAN,\n    TIMEATTACK_EVENT_FIRST_MARIA_MEET,\n    NUM_TIMEATTACK_EVENTS,\n    TIMEATTACK_EVENT_UNUSED_28,\n    TIMEATTACK_EVENT_UNUSED_29,\n    TIMEATTACK_EVENT_UNUSED_30,\n    TIMEATTACK_EVENT_UNUSED_31,\n    TIMEATTACK_EVENT_END,\n    TIMEATTACK_EVENT_INVALID = 0xFF,\n} TimeAttackEvents;\nstruct Entity;\ntypedef struct {\n              s32 x;\n              s32 y;\n} Point32;\ntypedef struct {\n               u8 vabid;\n               u8 prog;\n               u8 note;\n               s8 volume;\n               u8 unk4;\n               u8 tone;\n               u8 unk6;\n} Unkstruct_800BF554;\ntypedef struct {\n               u_long* desc;\n               u_long* data;\n               u16 unk8;\n               u16 index;\n               u16 unkC;\n               u16 unkE;\n               u8 unkArray[0x30];\n} Unkstruct_8006C3C4;\ntypedef struct {\n               char pad0[0x14];\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Unkstruct_8010BF64;\ntypedef struct {\n               s16 sndId;\n               u16 unk02;\n               s16 unk04;\n} SfxRingBufferItem;\ntypedef struct {\n               s32 unk0;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n} Unkstruct_800EA5E4;\ntypedef struct {\n    s32 unk0;\n    s32 unk4;\n    s32 unk8;\n    s32 unkC;\n} Unkstruct_800FDB18;\ntypedef struct Unkstruct_801C6C6C {\n    union {\n        struct {\n            u16 w;\n            u16 x;\n        } c;\n        s32 p;\n    } x;\n    union {\n        struct {\n            u16 h;\n            u16 y;\n        } c;\n        s32 p;\n    } y;\n} Unkstruct_801C6C6C;\ntypedef struct {\n    u16 start;\n    s16 current;\n    s16* coords;\n    s16 unk8;\n} Unkstruct_80102CD8;\ntypedef struct {\n              s16 animSet;\n              s16 unk2;\n              u16 palette;\n              s8 drawMode;\n              char pad_7;\n              s32 unk8;\n} Unkstruct_80180FE0;\ntypedef struct Unkstruct_801C7954 {\n               u16 x1;\n               u16 x0;\n               u16 y2;\n               u16 y0;\n               u16 y3;\n               u16 y1;\n               u16 x3;\n               u16 x2;\n} Unkstruct_801C7954;\ntypedef struct {\n    u8 unk0[7];\n    u8 unk8;\n    u8 pad2[8];\n    u8 unk16[1];\n    u8 pad3[5];\n    u32 unk18;\n} Unkstruct_800ADEF0;\ntypedef struct {\n    u16 palette;\n    u8 unk2;\n} Unkstruct_800AE180;\ntypedef struct {\n                     s32 D_800973F8;\n                     s32 D_800973FC;\n                     s32 unk0;\n                     s32 unk4;\n                     Multi g_zEntityCenter;\n                     s32 unkC;\n                     s32 BottomCornerTextTimer;\n                     s32 BottomCornerTextPrims;\n                     s32 unk18;\n                     s32 unk1C;\n                     s32 unk20;\n                     s32 unk24;\n                     s32 D_80097428[8];\n} unkGraphicsStruct;\ntypedef struct {\n    u8 count;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 w;\n    u8 h;\n    u16 priority;\n    u16 drawMode;\n    s16 unkA;\n    u32 flags;\n} unkStr_8011E4BC;\ntypedef struct {\n    s32 : 32;\n    s16 unk4;\n    s16 unk6;\n    s16 unk8;\n    s16 unkA;\n    s16 unkC;\n    s32 unk10;\n    s32 unk14;\n    s32 unk18;\n} Unkstruct_8012BEF8;\ntypedef struct {\n    u8 childId;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n    u8 unk4;\n    u8 unk5;\n} FactoryBlueprint;\ntypedef struct {\n    s16 xOffset;\n    s16 yOffset;\n    s32 velocityX;\n    s32 velocityY;\n    s16 timerInit;\n    s16 tpage;\n    s16 clut;\n    u8 uBase;\n    u8 vBase;\n} unkStr80154E5C;\ntypedef struct {\n    s32 unk0;\n    s16 unk4;\n} unkstr_800cfe48;\ntypedef struct {\n    f32 x;\n    f32 y;\n} Pos;\ntypedef struct {\n    f32 posX;\n    f32 posY;\n} Camera;\ntypedef struct {\n    unsigned char width;\n    unsigned char height;\n    unsigned short unk2;\n    unsigned char data[0];\n} ImgSrc;\ntypedef struct {\n             u32 gfxOff;\n             u32 ovlOff;\n             u32 ovlLen;\n             u32 vhOff;\n             u32 vhLen;\n             u32 vbLen;\n             u32 unk18;\n             const char* gfxName;\n             const char* ovlName;\n             const char* name;\n             u8 unk28;\n             s8 seqIdx;\n             u16 unk2A;\n} Lba;\ntypedef struct {\n               s16 cursorX;\n               s16 cursorY;\n               s16 cursorW;\n               s16 cursorH;\n               RECT unk1;\n               s16 w;\n               s16 h;\n               s16 unk14;\n               s16 unk16;\n               s16 otIdx;\n               s16 unk1A;\n               u8 unk1C;\n               u8 unk1D;\n} MenuContext;\ntypedef struct {\n              u8 tileLayoutId;\n              u8 tilesetId;\n              u8 objGfxId;\n              u8 objLayoutId;\n} RoomLoadDef;\ntypedef struct {\n    RoomLoadDef* def;\n} RoomLoadDefHolder;\ntypedef struct {\n              u8 left;\n              u8 top;\n              u8 right;\n              u8 bottom;\n              RoomLoadDef load;\n} RoomHeader;\ntypedef struct {\n              u16 x;\n              u16 y;\n              u16 roomId;\n              u16 unk6;\n              u16 stageId;\n} RoomTeleport;\ntypedef struct {\n               s32 x;\n               s32 y;\n               Stages stageId;\n               TimeAttackEvents eventId;\n               s32 unk10;\n} RoomBossTeleport;\ntypedef struct {\n              u16 pressed;\n              s16 previous;\n              u16 tapped;\n              u16 repeat;\n} Pad;\ntypedef struct {\n    u16 duration;\n    u16 unk2;\n} AnimationFrame;\ntypedef struct {\n    s8 unk0;\n    s8 unk2;\n    s8 hitboxWidth;\n    s8 hitboxHeight;\n} FrameProperty;\ntypedef enum {\n    Player_Stand,\n    Player_Walk,\n    Player_Crouch,\n    Player_Fall,\n    Player_Jump,\n    Player_MorphBat,\n    Player_AlucardStuck,\n    Player_MorphMist,\n    Player_HighJump,\n    Player_UnmorphBat,\n    Player_Hit,\n    Player_StatusStone,\n    Player_BossGrab,\n    Player_KillWater,\n    Player_UnmorphMist,\n    Player_SwordWarp,\n    Player_Kill,\n    Player_Unk17,\n    Player_Teleport,\n    Player_FlameWhip,\n    Player_Hydrostorm,\n    Player_ThousandBlades,\n    Player_RichterFourHolyBeasts,\n    Player_Slide,\n    Player_MorphWolf,\n    Player_UnmorphWolf,\n    Player_SlideKick,\n    Player_Unk27,\n    Player_SpellDarkMetamorphosis = 32,\n    Player_SpellSummonSpirit,\n    Player_SpellHellfire,\n    Player_SpellTetraSpirit,\n    Player_Spell36,\n    Player_SpellSoulSteal,\n    Player_Unk38,\n    Player_SpellSwordBrothers,\n    Player_AxearmorStand,\n    Player_AxearmorWalk,\n    Player_AxearmorJump,\n    Player_AxearmorHit,\n    Player_Unk48 = 48,\n    Player_Unk49,\n    Player_Unk50\n} PlayerSteps;\ntypedef struct Entity {\n               f32 posX;\n               f32 posY;\n               s32 velocityX;\n               s32 velocityY;\n               s16 hitboxOffX;\n               s16 hitboxOffY;\n               u16 facingLeft;\n               u16 palette;\n               u8 drawMode;\n               u8 drawFlags;\n               s16 rotX;\n               s16 rotY;\n               s16 rotZ;\n               s16 rotPivotX;\n               s16 rotPivotY;\n               u16 zPriority;\n               u16 entityId;\n               PfnEntityUpdate pfnUpdate;\n               u16 step;\n               u16 step_s;\n               u16 params;\n               u16 entityRoomIndex;\n               s32 flags;\n               s16 unk38;\n               u16 enemyId;\n               u16 hitboxState;\n               s16 hitPoints;\n               s16 attack;\n               s16 attackElement;\n               u16 unk44;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               u8 hitFlags;\n               u8 nFramesInvincibility;\n               s16 unk4A;\n               AnimationFrame* unk4C;\n               u16 animFrameIdx;\n               s16 animFrameDuration;\n               s16 animSet;\n               s16 animCurFrame;\n               s16 stunFrames;\n               u16 unk5A;\n               struct Entity* unk5C;\n               struct Entity* unk60;\n               s32 primIndex;\n               u16 unk68;\n               u16 hitEffect;\n               u8 unk6C;\n               u8 unk6D[11];\n               s32 unk78;\n               Ext ext;\n} Entity;\ntypedef struct {\n               u16 animSet;\n               u16 zPriority;\n               Multi16 unk4;\n               u16 palette;\n               u16 drawFlags;\n               u16 drawMode;\n               u32 unkC;\n               u8* unk10;\n} ObjInit2;\ntypedef struct GpuBuffer {\n                  struct GpuBuffer* next;\n                  DRAWENV draw;\n                  DISPENV disp;\n                  DR_ENV env[0x10];\n                  u_long ot[0x200];\n                  DR_MODE drawModes[0x400];\n                  POLY_GT4 polyGT4[0x300];\n                  POLY_G4 polyG4[0x100];\n                  POLY_GT3 polyGT3[0x30];\n                  LINE_G2 lineG2[0x100];\n                  SPRT_16 sprite16[0x280];\n                  TILE tiles[0x100];\n                  SPRT sprite[0x200];\n} GpuBuffer;\ntypedef struct {\n               u32 drawModes;\n               u32 gt4;\n               u32 g4;\n               u32 gt3;\n               u32 line;\n               u32 sp16;\n               u32 tile;\n               u32 sp;\n               u32 env;\n} GpuUsage;\ntypedef enum {\n    GFX_BANK_NONE,\n    GFX_BANK_4BPP,\n    GFX_BANK_8BPP,\n    GFX_BANK_16BPP,\n    GFX_BANK_COMPRESSED,\n} GfxBankKind;\ntypedef struct {\n               u_long* xy;\n               u_long* wh;\n               u_long* data;\n} GfxEntry;\ntypedef struct {\n    GfxBankKind kind;\n    GfxEntry entries[0];\n} GfxBank;\ntypedef struct {\n              GfxEntry* next;\n              u16 kind;\n              s16 unk6;\n              s16 unk8;\n              s16 unkA;\n} GfxLoad;\ntypedef enum EquipKind {\n    EQUIP_HAND,\n    EQUIP_HEAD,\n    EQUIP_ARMOR,\n    EQUIP_CAPE,\n    EQUIP_ACCESSORY,\n    NUM_EQUIP_KINDS,\n} EquipKind;\ntypedef enum {\n    ITEM_S_SWORD,\n    ITEM_SWORD,\n    ITEM_THROW_1,\n    ITEM_FIST,\n    ITEM_CLUB,\n    ITEM_TWOHAND,\n    ITEM_FOOD,\n    ITEM_BOMB,\n    ITEM_THROW_2,\n    ITEM_SHIELD,\n    ITEM_MEDICINE,\n    ITEM_END,\n} ItemCategory;\ntypedef enum {\n    SUBWPN_NONE,\n    SUBWPN_DAGGER,\n    SUBWPN_AXE,\n    SUBWPN_HOLYWATER,\n    SUBWPN_CROSS,\n    SUBWPN_BIBLE,\n    SUBWPN_STOPWATCH,\n    SUBWPN_REBNDSTONE,\n    SUBWPN_VIBHUTI,\n    SUBWPN_AGUNEA\n} SubWpnID;\ntypedef enum { STAT_STR, STAT_CON, STAT_INT, STAT_LCK } Stats;\ntypedef struct {\n    s32 level;\n    s32 exp;\n    s32 unk8;\n} FamiliarStats;\ntypedef enum {\n    RELIC_SOUL_OF_BAT,\n    RELIC_FIRE_OF_BAT,\n    RELIC_ECHO_OF_BAT,\n    RELIC_FORCE_OF_ECHO,\n    RELIC_SOUL_OF_WOLF,\n    RELIC_POWER_OF_WOLF,\n    RELIC_SKILL_OF_WOLF,\n    RELIC_FORM_OF_MIST,\n    RELIC_POWER_OF_MIST,\n    RELIC_GAS_CLOUD,\n    RELIC_CUBE_OF_ZOE,\n    RELIC_SPIRIT_ORB,\n    RELIC_GRAVITY_BOOTS,\n    RELIC_LEAP_STONE,\n    RELIC_HOLY_SYMBOL,\n    RELIC_FAERIE_SCROLL,\n    RELIC_JEWEL_OF_OPEN,\n    RELIC_MERMAN_STATUE,\n    RELIC_BAT_CARD,\n    RELIC_GHOST_CARD,\n    RELIC_FAERIE_CARD,\n    RELIC_DEMON_CARD,\n    RELIC_SWORD_CARD,\n    RELIC_JP_0,\n    RELIC_JP_1,\n    RELIC_HEART_OF_VLAD,\n    RELIC_TOOTH_OF_VLAD,\n    RELIC_RIB_OF_VLAD,\n    RELIC_RING_OF_VLAD,\n    RELIC_EYE_OF_VLAD,\n    NUM_RELICS,\n} RelicIds;\ntypedef enum {\n    SPELL_DARK_METAMORPHOSIS,\n    SPELL_SUMMON_SPIRIT,\n    SPELL_HELLFIRE,\n    SPELL_TETRA_SPIRIT,\n    SPELL_WOLF_CHARGE,\n    SPELL_SOUL_STEAL,\n    SPELL_WING_SMASH,\n    SPELL_SWORD_BROTHERS,\n    NUM_SPELLS,\n} SpellIds;\ntypedef enum {\n    FAM_STATS_BAT,\n    FAM_STATS_GHOST,\n    FAM_STATS_FAERIE,\n    FAM_STATS_DEMON,\n    FAM_STATS_SWORD,\n    FAM_STATS_YOUSEI,\n    FAM_STATS_NOSE_DEMON,\n    NUM_FAMILIARS\n} FamiliarStatsIds;\ntypedef enum {\n    FAM_ACTIVE_NONE,\n    FAM_ACTIVE_BAT = FAM_STATS_BAT + 1,\n    FAM_ACTIVE_GHOST = FAM_STATS_GHOST + 1,\n    FAM_ACTIVE_FAERIE = FAM_STATS_FAERIE + 1,\n    FAM_ACTIVE_DEMON = FAM_STATS_DEMON + 1,\n    FAM_ACTIVE_SWORD = FAM_STATS_SWORD + 1,\n    FAM_ACTIVE_YOUSEI = FAM_STATS_YOUSEI + 1,\n    FAM_ACTIVE_NOSE_DEMON = FAM_STATS_NOSE_DEMON + 1,\n} FamiliarActiveIds;\ntypedef struct {\n                   u8 relics[30];\n                   u8 spells[NUM_SPELLS];\n                   u8 equipHandCount[169];\n                   u8 equipBodyCount[90];\n                   u8 equipHandOrder[169];\n                   u8 equipBodyOrder[90];\n                   u8 saveName[12];\n                   u32 spellsLearnt;\n                   s32 hp;\n                   s32 hpMax;\n                   s32 hearts;\n                   s32 heartsMax;\n                   s32 mp;\n                   s32 mpMax;\n                   s32 statsBase[4];\n                   s32 statsEquip[4];\n                   s32 statsTotal[4];\n                   u32 level;\n                   u32 exp;\n                   s32 gold;\n                   s32 killCount;\n                   u32 D_80097BF8;\n                   u32 subWeapon;\n                   u32 equipment[7];\n                   u32 attackHands[2];\n                   s32 defenseEquip;\n                   u16 defenseElement;\n                   u16 D_80097C2A;\n                   u16 D_80097C2C;\n                   u16 D_80097C2E;\n                   s32 timerHours;\n                   s32 timerMinutes;\n                   s32 timerSeconds;\n                   s32 timerFrames;\n                   u32 D_80097C40;\n                   FamiliarStats statsFamiliars[NUM_FAMILIARS];\n} PlayerStatus;\ntypedef struct {\n                         s32 cursorMain;\n                         s32 cursorRelic;\n                         s32 cursorEquip;\n                         s32 cursorEquipType[NUM_EQUIP_KINDS];\n                         s32 scrollEquipType[NUM_EQUIP_KINDS];\n                         s32 cursorSpells;\n                         s32 cursorSettings;\n                         s32 cursorCloak;\n                         s32 cursorButtons;\n                         s32 cursorWindowColors;\n                         s32 cursorTimeAttack;\n} MenuNavigation;\ntypedef struct {\n                            u32 buttonConfig[8];\n                            u16 buttonMask[8];\n                            s32 timeAttackRecords[TIMEATTACK_EVENT_END];\n                            s32 cloakColors[6];\n                            s32 windowColors[3];\n                            s32 equipOrderTypes[ITEM_END];\n                            s32 isCloakLiningReversed;\n                            s32 isSoundMono;\n                            s32 D_8003CB00;\n                            s32 D_8003CB04;\n} GameSettings;\ntypedef struct {\n               u8 Magic[2];\n               u8 Type;\n               u8 BlockEntry;\n               u8 Title[64];\n               u8 reserve[28];\n               u8 Clut[32];\n               u8 Icon[3][128];\n} MemcardHeader;\ntypedef struct {\n               char name[12];\n               s32 level;\n               s32 gold;\n               s32 playHours;\n               s32 playMinutes;\n               s32 playSeconds;\n               s32 cardIcon;\n               s32 endGameFlags;\n               s16 stage;\n               u16 nRoomsExplored;\n               u16 roomX;\n               u16 roomY;\n               s32 character;\n               s32 saveSize;\n} SaveInfo;\ntypedef struct {\n                MemcardHeader header;\n                SaveInfo info;\n                PlayerStatus status;\n                MenuNavigation menuNavigation;\n                GameSettings settings;\n                u8 castleFlags[0x300];\n                u8 castleMap[0x800];\n                 s32 rng;\n} SaveData;\ntypedef struct {\n               u8* gfxPage;\n               u8* gfxIndex;\n               u8* clut;\n               u8* collision;\n} TileDefinition;\ntypedef struct {\n               u32 left : 6;\n               u32 top : 6;\n               u32 right : 6;\n               u32 bottom : 6;\n               u8 params : 8;\n} LayoutRect;\ntypedef struct {\n               u16* layout;\n               TileDefinition* tileDef;\n               LayoutRect rect;\n               u16 zPriority;\n               u16 flags;\n} LayerDef;\ntypedef struct {\n    LayerDef* fg;\n    LayerDef* bg;\n} RoomDef;\ntypedef struct {\n               s16 x;\n               s16 y;\n               s16 width;\n               s16 height;\n               s16 clut;\n               s16 tpage;\n               s16 texLeft;\n               s16 texTop;\n               s16 texRight;\n               s16 texBottom;\n} Sprite;\ntypedef struct {\n             s16 flags;\n             s16 offsetx;\n             s16 offsety;\n             s16 width;\n             s16 height;\n             s16 clut;\n             s16 tileset;\n             s16 left;\n             s16 top;\n             s16 right;\n             s16 bottom;\n} SpritePart;\ntypedef struct {\n             u16 count;\n             SpritePart parts[0];\n} SpriteParts;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*HitDetection)(void);\n                   void (*UpdateRoomPosition)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   SpriteParts** spriteBanks;\n                   u_long** cluts;\n                   void* objLayoutHorizontal;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*UpdateStageEntities)(void);\n                   u8** unk2c;\n                   u8** unk30;\n                   s32* unk34;\n                   s32* unk38;\n                   void (*StageEndCutScene)(void);\n} Overlay;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*HitDetection)(void);\n                   void (*UpdateRoomPosition)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   SpriteParts** spriteBanks;\n                   u_long** cluts;\n                   void* objLayoutHorizontal;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*UpdateStageEntities)(void);\n} AbbreviatedOverlay;\ntypedef enum {\n    EFFECT_SOLID = 1 << 0,\n    EFFECT_UNK_0002 = 1 << 1,\n    EFFECT_QUICKSAND = 1 << 2,\n    EFFECT_WATER = 1 << 3,\n    EFFECT_MIST_ONLY = 1 << 4,\n    EFFECT_UNK_0020 = 1 << 5,\n    EFFECT_SOLID_FROM_ABOVE = 1 << 6,\n    EFFECT_SOLID_FROM_BELOW = 1 << 7,\n    EFFECT_UNK_0100 = 1 << 8,\n    EFFECT_UNK_0200 = 1 << 9,\n    EFFECT_UNK_0400 = 1 << 10,\n    EFFECT_UNK_0800 = 1 << 11,\n    EFFECT_UNK_1000 = 1 << 12,\n    EFFECT_UNK_2000 = 1 << 13,\n    EFFECT_UNK_4000 = 1 << 14,\n    EFFECT_UNK_8000 = 1 << 15,\n    EFFECT_NOTHROUGH = EFFECT_SOLID | EFFECT_QUICKSAND,\n    EFFECT_NOTHROUGH_PLUS = EFFECT_SOLID | EFFECT_UNK_0002 | EFFECT_QUICKSAND,\n    EFFECT_UNK_C000 = EFFECT_UNK_8000 | EFFECT_UNK_4000\n} ColliderEffectFlags;\ntypedef struct Collider {\n               u32 effects;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n               s32 unk10;\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Collider;\ntypedef struct XaMusicConfig {\n    u32 cd_addr;\n    s32 unk228;\n    u8 filter_file;\n    u8 filter_channel_id;\n    u8 volume;\n    u8 unk22f;\n    u8 unk230;\n    u8 pad[3];\n} XaMusicConfig;\ntypedef struct {\n               const char* name;\n               s16 hitPoints;\n               s16 attack;\n               u16 attackElement;\n               s16 defense;\n               u16 hitboxState;\n               u16 weaknesses;\n               u16 strengths;\n               u16 immunes;\n               u16 absorbs;\n               u16 level;\n               u16 exp;\n               u16 rareItemId;\n               u16 uncommonItemId;\n               u16 rareItemDropRate;\n               u16 uncommonItemDropRate;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               s32 flags;\n} EnemyDef;\ntypedef struct {\n               s16 attack;\n               s16 heartCost;\n               u16 attackElement;\n               u8 unk6;\n               u8 nFramesInvincibility;\n               u16 stunFrames;\n               u8 anim;\n               u8 blueprintNum;\n               u16 hitboxState;\n               u16 hitEffect;\n               u8 crashId;\n               u8 unk11;\n               u16 entityRoomIndex;\n} SubweaponDef;\ntypedef struct {\n               const char* name;\n               const char* description;\n               s16 attack;\n               s16 defense;\n               u16 element;\n               u8 itemCategory;\n               u8 weaponId;\n               u8 palette;\n               u8 unk11;\n               u8 playerAnim;\n               u8 unk13;\n               u8 unk14;\n               u8 lockDuration;\n               u8 chainLimit;\n               u8 unk17;\n               u8 specialMove;\n               u8 isConsumable;\n               u8 enemyInvincibilityFrames;\n               u8 unk1B;\n               u32 comboSub;\n               u32 comboMain;\n               u16 mpUsage;\n               u16 stunFrames;\n               u16 hitType;\n               u16 hitEffect;\n               u16 icon;\n               u16 iconPalette;\n               u16 criticalRate;\n               u16 unk32;\n} Equipment;\ntypedef struct {\n             const char* name;\n             const char* description;\n             s16 attBonus;\n             s16 defBonus;\n             u8 statsBonus[4];\n             u16 unk10;\n             u16 unk12;\n             u16 unk14;\n             u16 unk16;\n             u16 icon;\n             u16 iconPalette;\n             u16 equipType;\n             u16 unk1E;\n} Accessory;\ntypedef struct {\n               const char* name;\n               const char* combo;\n               const char* description;\n               u8 mpUsage;\n               s8 nFramesInvincibility;\n               s16 stunFrames;\n               s16 hitboxState;\n               s16 hitEffect;\n               s16 entityRoomIndex;\n               u16 attackElement;\n               s16 attack;\n               s16 unk1A;\n} SpellDef;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 unk08;\n               u16 unk0A;\n               s32 unk0C;\n} RelicDesc;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 icon;\n               u16 iconPalette;\n               u16 unk0C;\n               u16 unk0E;\n} RelicOrb;\ntypedef struct {\n               const char* nextCharDialogue;\n               s16 startX;\n               s16 nextLineY;\n               s16 startY;\n               s16 nextCharX;\n               s16 nextLineX;\n               s16 nextCharY;\n               s16 portraitAnimTimer;\n               u16 unk12;\n               u16 clutIndex;\n               u8 nextCharTimer;\n               u8 unk17;\n               Primitive* prim[6];\n               s32 primIndex[3];\n               u16 unk3C;\n               u16 timer;\n               const char* unk40;\n} Dialogue;\ntypedef struct {\n    u32 effects;\n    u32 damageKind;\n    s32 damageTaken;\n    s32 unkC;\n} DamageParam;\ntypedef struct {\n                   Overlay o;\n                   void (*FreePrimitives)(s32);\n                   s16 (*AllocPrimitives)(PrimitiveType type, s32 count);\n                   void (*CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\n                   void (*func_80102CD8)(s32 arg0);\n                   void (*UpdateAnim)(\n        FrameProperty* frameProps, AnimationFrame** anims);\n                   void (*SetSpeedX)(s32 value);\n                   Entity* (*GetFreeEntity)(s16 start, s16 end);\n                   void (*GetEquipProperties)(\n        s32 handId, Equipment* res, s32 equipId);\n                   s32 (*func_800EA5E4)(u32);\n                   void (*LoadGfxAsync)(s32 gfxId);\n                   void (*PlaySfx)(s32 sfxId);\n                   s16 (*func_800EDB58)(s32, s32);\n                   void (*func_800EA538)(s32 arg0);\n                   void (*g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\n                   void (*func_801027C4)(u32 arg0);\n                   void (*func_800EB758)(\n        s16 pivotX, s16 pivotY, Entity* e, u16 flags, POLY_GT4* p, u8 flipX);\n                   Entity* (*CreateEntFactoryFromEntity)(\n        Entity* self, u32 flags, s32 arg2);\n                   bool (*func_80131F68)(void);\n                   DR_ENV* (*func_800EDB08)(POLY_GT4* poly);\n                   u16* (*func_80106A28)(u32 arg0, u16 kind);\n                   void (*func_80118894)(Entity*);\n                   EnemyDef* enemyDefs;\n                   Entity* (*func_80118970)(void);\n                   s16 (*func_80118B18)(\n        Entity* ent1, Entity* ent2, s32 facingLeft);\n                   s32 (*UpdateUnarmedAnim)(s8* frameProps, u16** frames);\n                   void (*PlayAnimation)(s8*, AnimationFrame** frames);\n                   void (*func_80118C28)(s32 arg0);\n                   void (*func_8010E168)(s32 arg0, s16 arg1);\n                   void (*func_8010DFF0)(s32 arg0, s32 arg1);\n                   u16 (*DealDamage)(\n        Entity* enemyEntity, Entity* attackerEntity);\n                   void (*LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\n                   Equipment* equipDefs;\n                   Accessory* accessoryDefs;\n                   void (*AddHearts)(s32 value);\n                   bool (*LoadMonsterLibrarianPreview)(s32 monsterId);\n                   s32 (*TimeAttackController)(\n        TimeAttackEvents eventId, TimeAttackActions action);\n                   void* (*func_8010E0A8)(void);\n                   void (*func_800FE044)(s32, s32);\n                   void (*AddToInventory)(u32 id, EquipKind kind);\n                   RelicOrb* relicDefs;\n                   void (*InitStatsAndGear)(bool debugMode);\n                   s32 (*func_80134714)(s32 arg0, s32 arg1, s32 arg2);\n                   s32 (*func_80134678)(s16 arg0, u16 arg1);\n                   void (*func_800F53A4)(void);\n                   u32 (*CheckEquipmentItemCount)(u32 itemId, u32 equipType);\n                   void (*func_8010BF64)(Unkstruct_8010BF64* arg0);\n                   void (*func_800F1FC4)(s32 arg0);\n                   void (*func_800F2288)(s32 arg0);\n                   void (*func_8011A3AC)(\n        Entity* entity, s32 spellId, s32 arg2, FamiliarStats* out);\n                   s32 (*func_800FF460)(s32 arg0);\n                   s32 (*func_800FF494)(EnemyDef* arg0);\n                   bool (*CdSoundCommandQueueEmpty)(void);\n                   bool (*func_80133950)(void);\n                   bool (*func_800F27F4)(s32 arg0);\n                   s32 (*func_800FF110)(s32 arg0);\n                   s32 (*func_800FD664)(s32 arg0);\n                   s32 (*func_800FD5BC)(DamageParam* arg0);\n                   void (*LearnSpell)(s32 spellId);\n                   void (*DebugInputWait)(const char* str);\n                   void* unused12C;\n                   void* unused130;\n                   void* unused134;\n                   void* unused138;\n                   void* unused13C;\n} GameApi;\ntypedef struct {\n    void (*D_8013C000)(void);\n    void (*D_8013C004)(void);\n    void (*D_8013C008)(void);\n    void (*D_8013C00C)(void);\n} PlayerOvl;\nextern PlayerOvl g_PlOvl;\nextern u8** g_PlOvlAluBatSpritesheet[1];\nextern u8* g_PlOvlSpritesheet[];\nextern void (*g_api_FreePrimitives)(s32);\nextern s16 (*g_api_AllocPrimitives)(PrimitiveType type, s32 count);\nextern void (*g_api_CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\nextern void (*g_api_func_80102CD8)(s32 arg0);\nextern void (*g_api_UpdateAnim)(FrameProperty* frameProps, s32* arg1);\nextern void (*g_api_SetSpeedX)(s32 value);\nextern Entity* (*g_api_GetFreeEntity)(s16 start, s16 end);\nextern void (*g_api_GetEquipProperties)(\n    s32 handId, Equipment* res, s32 equipId);\nextern s32 (*g_api_func_800EA5E4)(u32);\nextern void (*g_api_LoadGfxAsync)(s32);\nextern void (*g_api_PlaySfx)(s32 sfxId);\nextern s16 (*g_api_func_800EDB58)(s32, s32);\nextern void (*g_api_func_800EA538)(s32 arg0);\nextern void (*g_api_g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\nextern Entity* (*g_api_CreateEntFactoryFromEntity)(\n    Entity* self, u32 flags, s32 arg2);\nextern bool (*g_api_func_80131F68)(void);\nextern DR_ENV* (*g_api_func_800EDB08)(POLY_GT4* poly);\nextern u16* (*g_api_func_80106A28)(u16 arg0, u16 kind);\nextern void (*g_api_func_80118894)(Entity*);\nextern EnemyDef* g_api_enemyDefs;\nextern u32 (*g_api_UpdateUnarmedAnim)(s8* frameProps, u16** frames);\nextern void (*g_api_PlayAnimation)(s8*, AnimationFrame** frames);\nextern void (*g_api_func_8010E168)(s32 arg0, s16 arg1);\nextern void (*g_api_func_8010DFF0)(s32 arg0, s32 arg1);\nextern u16 (*g_api_DealDamage)(Entity* enemyEntity, Entity* attackerEntity);\nextern void (*g_api_LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\nextern Equipment* g_api_equipDefs;\nextern Accessory* g_api_g_AccessoryDefs;\nextern void (*g_api_AddHearts)(s32 value);\nextern s32 (*g_api_TimeAttackController)(\n    TimeAttackEvents eventId, TimeAttackActions action);\nextern void* (*g_api_func_8010E0A8)(void);\nextern void (*g_api_func_800FE044)(s32, s32);\nextern void (*g_api_AddToInventory)(u16 id, EquipKind kind);\nextern RelicOrb* g_api_relicDefs;\nextern s32 (*g_api_func_80134714)(s32 arg0, s32 arg1, s32 arg2);\nextern s32 (*g_api_func_80134678)(s16 arg0, u16 arg1);\nextern void (*g_api_func_800F53A4)(void);\nextern u32 (*g_api_CheckEquipmentItemCount)(u32 itemId, u32 equipType);\nextern void (*g_api_func_8010BF64)(Unkstruct_8010BF64* arg0);\nextern void (*g_api_func_800F1FC4)(s32 arg0);\nextern void (*g_api_func_800F2288)(s32 arg0);\nextern void (*g_api_func_8011A3AC)(\n    Entity* entity, s32 spellId, s32 arg2, FamiliarStats* out);\nextern s32 (*g_api_func_800FF460)(s32 arg0);\nextern s32 (*g_api_func_800FF494)(EnemyDef* arg0);\nextern bool (*g_api_CdSoundCommandQueueEmpty)(void);\nextern bool (*g_api_func_80133950)(void);\nextern bool (*g_api_func_800F27F4)(s32 arg0);\nextern s32 (*g_api_func_800FF110)(s32 arg0);\nextern s32 (*g_api_func_800FD664)(s32 arg0);\nextern s32 (*g_api_func_800FD5BC)(DamageParam* arg0);\nextern void (*g_api_LearnSpell)(s32 spellId);\nextern void (*g_api_func_800E2438)(const char* str);\ntypedef struct {\n               u16** frames;\n               s8* frameProps;\n               u16 palette;\n               u16 soundId;\n               u8 frameStart;\n               u8 soundFrame;\n               s16 unused;\n} WeaponAnimation;\ntypedef struct {\n                        u16* layout;\n                        TileDefinition* tileDef;\n                        f32 scrollX;\n                        f32 scrollY;\n                        u32 unused10;\n                        u32 unused14;\n                        u32 order;\n                        u32 flags;\n                        u32 w;\n                        u32 h;\n                        u32 hideTimer;\n                        u32 scrollKind;\n} BgLayer;\ntypedef struct {\n                   u16* fg;\n                   TileDefinition* tileDef;\n                   f32 scrollX;\n                   f32 scrollY;\n                   s32 unused10;\n                   s32 unused14;\n                   s32 order;\n                   u32 flags;\n                   s32 hSize;\n                   s32 vSize;\n                   u32 hideTimer;\n                   s32 left;\n                   s32 top;\n                   s32 right;\n                   s32 bottom;\n                   s32 x;\n                   s32 y;\n                   s32 width;\n                   s32 height;\n                   s32 unk30;\n                   s32 D_800730D4;\n                   BgLayer bg[16];\n} Tilemap;\ntypedef struct {\n                     u16 flags;\n                     u16 unk2;\n                     u16 unk4;\n                     s16 zPriority;\n} FgLayer;\ntypedef struct {\n                   Collider colliders[4];\n                   Collider colliders2[4];\n                   Collider colliders3[14];\n                   s32 padPressed;\n                   s32 padTapped;\n                   s32 padHeld;\n                   u32 padSim;\n                   s32 D_80072EF8;\n                   s32 D_80072EFC;\n                   s16 D_80072F00[16];\n                   s32 pl_vram_flag;\n                   s32 unk04;\n                   s32 unk08;\n                   u32 unk0C;\n                   s32 unk10;\n                   u32 unk14;\n                   s32 unk18;\n                   s32 unk1C;\n                   s32 unk20;\n                   s32 unk24;\n                   s32 unk28;\n                   s32 unk2C;\n                   s32 unk30;\n                   s32 unk34;\n                   s32 unk38;\n                   s32 unk3C;\n                   u16 unk40;\n                   u16 pl_high_jump_timer;\n                   u16 unk44;\n                   u16 unk46;\n                   u16 unk48;\n                   s16 unk4A;\n                   u16 unk4C;\n                   u16 unk4E;\n                   u16 unk50;\n                   u16 unk52;\n                   u16 unk54;\n                   u16 unk56;\n                   u16 unk58;\n                   u16 damageTaken;\n                   u16 unk5C;\n                   u16 unk5E;\n                   u16 unk60;\n                   u16 unk62;\n                   u16 unk64;\n                   u16 unk66;\n                   u16 unk68;\n                   u16 unk6A;\n                   u16 unk6C;\n                   u16 unk6E;\n                   u16 unk70;\n                   u16 unk72;\n                   u32 unk74;\n                   u16 unk78;\n                   u16 unk7A;\n                   u16 unk7C;\n                   u16 unk7E;\n} PlayerState;\ntypedef struct {\n               RECT rect0;\n               RECT rect1;\n               RECT rect2;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 enableColorBlend;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 flipX;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 unk27;\n} PlayerDraw;\ntypedef struct {\n    s16 buttonsCorrect;\n    s16 timer;\n} ButtonComboState;\nextern s32 D_8003925C;\nextern s32 g_IsTimeAttackUnlocked;\nextern u8 g_CastleFlags[0x300];\nextern s32 D_8003C0EC[4];\nextern s32 D_8003C0F8;\nextern s32 D_8003C100;\nextern u16 g_ClutIds[];\nextern s32 D_8003C704;\nextern FgLayer D_8003C708;\nextern s16 D_8003C710;\nextern s16 D_8003C712;\nextern s32 D_8003C728;\nextern s32 D_8003C730;\nextern GameState g_GameState;\nextern s32 D_8003C738;\nextern s32 D_8003C73C;\nextern u32 D_8003C744;\nextern u32 g_RoomCount;\nextern GameApi g_api;\nextern s32 D_8003C8B8;\nextern u32 g_GameTimer;\nextern bool D_8003C908;\nextern s32 g_EquippedWeaponIds[2];\nextern u32 g_Timer;\nextern s32 g_MapCursorTimer;\n                 extern s32 g_PlayableCharacter;\n                 extern u32 D_8003C9A4;\n                 extern MenuNavigation g_MenuNavigation;\n                 extern GameSettings g_Settings;\nextern GpuBuffer g_GpuBuffers[2];\nextern s16 g_GpuBuffers_1_buf_draw_clip_y;\nextern const char g_MemcardSavePath[];\nextern const char aBaslus00067dra[19];\nextern const char g_strMemcardRootPath[];\nextern s32 g_LoadFile;\nextern s32 D_8006BB00;\nextern u8 g_CastleMap[0x800];\nextern s32 D_8006C374;\nextern s32 D_8006C378;\nextern GpuBuffer* g_CurrentBuffer;\nextern Point32 D_8006C384;\nextern Point32 D_8006C38C;\nextern u32 g_CdStep;\nextern s32 D_8006C3AC;\nextern s32 g_backbufferX;\nextern s32 g_backbufferY;\nextern s32 g_IsUsingCd;\nextern Entity* g_CurrentEntity;\nextern Unkstruct_8006C3C4 D_8006C3C4[32];\nextern s32 g_Servant;\nextern u16 g_Clut[0x3000];\nextern u16 D_8006EBCC[0x1000];\nextern u16 D_8006EBE0;\nextern s16 D_800705CC[];\nextern u32 D_80070BCC;\nextern PlayerState g_Player;\nextern Entity* D_psp_091CF3A0;\nextern s32 D_psp_091CF3A4;\nextern void (*D_psp_091CF3A8)(Entity*);\nextern s32 D_psp_091CF3AC;\nextern u16 D_psp_091CF3DC;\nextern GfxLoad g_GfxLoad[0x10];\nextern u32 g_GameStep;\nextern s32 g_ServantLoaded;\nextern Event g_EvSwCardEnd;\nextern Event g_EvSwCardErr;\nextern Event g_EvSwCardTmo;\nextern s32 g_PrevScrollX;\nextern Event g_EvSwCardNew;\nextern s32 g_PrevScrollY;\nextern s32 D_80073080;\nextern Tilemap g_Tilemap;\nextern Entity g_Entities[256];\nextern s32 g_entityDestroyed[18];\nextern Event g_EvHwCardEnd;\nextern Event g_EvHwCardErr;\nextern Event g_EvHwCardTmo;\nextern Event g_EvHwCardNew;\nextern u8 g_Pix[4][128 * 128 / 2];\nextern Primitive g_PrimBuf[0x500];\nextern s32 g_PlayerX;\nextern s32 g_PlayerY;\nextern u32 g_randomNext;\nextern s32 D_80096ED8[];\nextern s8 D_80097B98;\nextern s8 D_80097B99;\nextern s32 D_800973EC;\nextern unkGraphicsStruct g_unkGraphicsStruct;\nextern s32 D_80097448[];\nextern s32 D_80097450;\nextern Pos D_80097488;\nextern Pad g_pads[2];\nextern Stages g_StageId;\nextern s32 D_800974A4;\nextern DR_ENV D_800974AC[16];\nextern s32 g_UseDisk;\nextern s32 D_800978B4;\nextern s32 D_800978C4;\nextern u32 g_MenuStep;\nextern char D_80097902[];\nextern s32 D_80097904;\nextern s32 g_ScrollDeltaX;\nextern s32 g_ScrollDeltaY;\nextern s32 D_80097910;\nextern DemoMode g_DemoMode;\nextern s32 g_LoadOvlIdx;\nextern s32 D_8009791C;\nextern s32 D_80097920;\nextern s32 D_80097924;\nextern s32 D_80097928;\nextern GpuUsage g_GpuUsage;\nextern PlayerStatus g_Status;\nextern s32 D_80097C98;\nextern s32 subWeapon;\nextern u8 g_SaveName[12] ;\nextern u32 D_80097C40[];\nextern PlayerDraw g_PlayerDraw[0x10];\nextern s32 D_800987B4;\nextern s32 D_800987C8;\nextern s32 g_DebugPlayer;\nextern s32 D_80098894;\ntypedef enum ItemSlots {\n    LEFT_HAND_SLOT,\n    RIGHT_HAND_SLOT,\n    HEAD_SLOT,\n    ARMOR_SLOT,\n    CAPE_SLOT,\n    ACCESSORY_1_SLOT,\n    ACCESSORY_2_SLOT,\n    NUM_ITEM_SLOTS,\n} ItemSlots;\ntypedef enum HandItems {\n                ITEM_EMPTY_HAND,\n                ITEM_MONSTER_VIAL_1,\n                ITEM_MONSTER_VIAL_2,\n                ITEM_MONSTER_VIAL_3,\n                ITEM_SHIELD_ROD,\n                ITEM_LEATHER_SHIELD,\n                ITEM_KNIGHT_SHIELD,\n                ITEM_IRON_SHIELD,\n                ITEM_AXELORD_SHIELD,\n                ITEM_HERALD_SHIELD,\n                ITEM_DARK_SHIELD,\n                ITEM_GODDESS_SHIELD,\n                ITEM_SHAMAN_SHIELD,\n                ITEM_MEDUSA_SHIELD,\n                ITEM_SKULL_SHIELD,\n                ITEM_FIRE_SHIELD,\n                ITEM_ALUCARD_SHIELD,\n                ITEM_SWORD_OF_DAWN,\n                ITEM_BASILARD,\n                ITEM_SHORT_SWORD,\n                ITEM_COMBAT_KNIFE,\n                ITEM_NUNCHAKU,\n                ITEM_WERE_BANE,\n                ITEM_RAPIER,\n                ITEM_KARMA_COIN,\n                ITEM_MAGIC_MISSILE,\n                ITEM_RED_RUST,\n                ITEM_TAKEMITSU,\n                ITEM_SHOTEL,\n                ITEM_ORANGE,\n                ITEM_APPLE,\n                ITEM_BANANA,\n                ITEM_GRAPES,\n                ITEM_STRAWBERRY,\n                ITEM_PINEAPPLE,\n                ITEM_PEANUTS,\n                ITEM_TOADSTOOL,\n                ITEM_SHIITAKE,\n                ITEM_CHEESECAKE,\n                ITEM_SHORTCAKE,\n                ITEM_TART,\n                ITEM_PARFAIT,\n                ITEM_PUDDING,\n                ITEM_ICE_CREAM,\n                ITEM_FRANKFURTER,\n                ITEM_HAMBURGER,\n                ITEM_PIZZA,\n                ITEM_CHEESE,\n                ITEM_HAM_AND_EGGS,\n                ITEM_OMELETTE,\n                ITEM_MORNING_SET,\n                ITEM_LUNCH_A,\n                ITEM_LUNCH_B,\n                ITEM_CURRY_RICE,\n                ITEM_GYROS_PLATE,\n                ITEM_SPAGHETTI,\n                ITEM_GRAPE_JUICE,\n                ITEM_BARLEY_TEA,\n                ITEM_GREEN_TEA,\n                ITEM_NATOU,\n                ITEM_RAMEN,\n                ITEM_MISO_SOUP,\n                ITEM_SUSHI,\n                ITEM_PORK_BUN,\n                ITEM_RED_BEAN_BUN,\n                ITEM_CHINESE_BUN,\n                ITEM_DIM_SUM_SET,\n                ITEM_POT_ROAST,\n                ITEM_SIRLION,\n                ITEM_TURKEY,\n                ITEM_MEAL_TICKET,\n                ITEM_NEUTRON_BOMB,\n                ITEM_POWER_OF_SIRE,\n                ITEM_PENTAGRAM,\n                ITEM_BAT_PENTAGRAM,\n                ITEM_SHURIKEN,\n                ITEM_CROSS_SHURIKEN,\n                ITEM_BUFFALO_STAR,\n                ITEM_FLAME_STAR,\n                ITEM_TNT,\n                ITEM_BWAKA_KNIFE,\n                ITEM_BOOMERANG,\n                ITEM_JAVELIN,\n                ITEM_TYRFING,\n                ITEM_NAMAKURA,\n                ITEM_KNUCKLE_DUSTER,\n                ITEM_GLADIUS,\n                ITEM_SCIMITAR,\n                ITEM_CUTLASS,\n                ITEM_SABER,\n                ITEM_FALCHION,\n                ITEM_BROADSWORD,\n                ITEM_BEKATOWA,\n                ITEM_DAMASCUS_SWORD,\n                ITEM_HUNTER_SWORD,\n                ITEM_ESTOC,\n                ITEM_BASTARD_SWORD,\n                ITEM_JEWEL_KNUCKLES,\n                ITEM_CLAYMORE,\n                ITEM_TALWAR,\n                ITEM_KATANA,\n                ITEM_FLAMBERGE,\n                ITEM_IRON_FIST,\n                ITEM_ZWEIHANDER,\n                ITEM_SWORD_OF_HADOR,\n                ITEM_LUMINUS,\n                ITEM_HARPER,\n                ITEM_OBSIDIAN_SWORD,\n                ITEM_GRAM,\n                ITEM_JEWEL_SWORD,\n                ITEM_MORMEGIL,\n                ITEM_FIREBRAND,\n                ITEM_THUNDERBRAND,\n                ITEM_ICEBRAND,\n                ITEM_STONE_SWORD,\n                ITEM_HOLY_SWORD,\n                ITEM_TERMINUS_EST,\n                ITEM_MARSIL,\n                ITEM_DARK_BLADE,\n                ITEM_HEAVEN_SWORD,\n                ITEM_FIST_OF_TULKAS,\n                ITEM_GURTHANG,\n                ITEM_MOURNEBLADE,\n                ITEM_ALUCARD_SWORD,\n                ITEM_MABLUNG_SWORD,\n                ITEM_BADELAIRE,\n                ITEM_SWORD_FAMILIAR,\n                ITEM_GREAT_SWORD,\n                ITEM_MACE,\n                ITEM_MORNINGSTAR,\n                ITEM_HOLY_ROD,\n                ITEM_STAR_FLAIL,\n                ITEM_MOON_ROD,\n                ITEM_CHAKRAM,\n                ITEM_FIRE_BOOMERANG,\n                ITEM_IRON_BALL,\n                ITEM_HOLBEIN_DAGGER,\n                ITEM_BLUE_KNUCKLES,\n                ITEM_DYNAMITE,\n                ITEM_OSAFUNE_KATANA,\n                ITEM_MASAMUNE,\n                ITEM_MURAMASA,\n                ITEM_HEART_REFRESH,\n                ITEM_RUNESWORD,\n                ITEM_ANTIVENOM,\n                ITEM_UNCURSE,\n                ITEM_LIFE_APPLE,\n                ITEM_HAMMER,\n                ITEM_STR_POTION,\n                ITEM_LUCK_POTION,\n                ITEM_SMART_POTION,\n                ITEM_ATTACK_POTION,\n                ITEM_SHIELD_POTION,\n                ITEM_RESIST_FIRE,\n                ITEM_RESIST_THUNDER,\n                ITEM_RESIST_ICE,\n                ITEM_RESIST_STONE,\n                ITEM_RESIST_HOLY,\n                ITEM_RESIST_DARK,\n                ITEM_POTION,\n                ITEM_HIGH_POTION,\n                ITEM_ELIXIR,\n                ITEM_MANNA_PRISM,\n                ITEM_VORPAL_BLADE,\n                ITEM_CRISSAEGRIM,\n                ITEM_YASUTSUNA,\n                ITEM_LIBRARY_CARD,\n                ITEM_ALUCART_SHIELD,\n                ITEM_ALUCART_SWORD,\n                NUM_HAND_ITEMS,\n} HandItems;\ntypedef enum BodyItems {\n               ITEM_NO_ARMOR,\n               ITEM_CLOTH_TUNIC,\n               ITEM_HIDE_CUIRASS,\n               ITEM_BRONZE_CUIRASS,\n               ITEM_IRON_CUIRASS,\n               ITEM_STEEL_CUIRASS,\n               ITEM_SILVER_PLATE,\n               ITEM_GOLD_PLATE,\n               ITEM_PLATINUM_MAIL,\n               ITEM_DIAMOND_PLATE,\n               ITEM_FIRE_MAIL,\n               ITEM_LIGHTNING_MAIL,\n               ITEM_ICE_MAIL,\n               ITEM_MIRROR_CUIRASS,\n               ITEM_SPIKE_BREAKER,\n               ITEM_ALUCARD_MAIL,\n               ITEM_DARK_ARMOR,\n               ITEM_HEALING_MAIL,\n               ITEM_HOLY_MAIL,\n               ITEM_WALK_ARMOR,\n               ITEM_BRILLIANT_MAIL,\n               ITEM_MOJO_MAIL,\n               ITEM_FURY_PLATE,\n               ITEM_DRACULA_TUNIC,\n               ITEM_GODS_GARB,\n               ITEM_AXE_LORD_ARMOR,\n               ITEM_EMPTY_HEAD,\n               ITEM_SUNGLASSES,\n               ITEM_BALLROOM_MASK,\n               ITEM_BANDANNA,\n               ITEM_FELT_HAT,\n               ITEM_VELVET_HAT,\n               ITEM_GOGGLES,\n               ITEM_LEATHER_HAT,\n               ITEM_HOLY_GLASSES,\n               ITEM_STEEL_HELM,\n               ITEM_STONE_MASK,\n               ITEM_CIRCLET,\n               ITEM_GOLD_CIRCLET,\n               ITEM_RUBY_CIRCLET,\n               ITEM_OPAL_CIRCLET,\n               ITEM_TOPAZ_CIRCLET,\n               ITEM_BERYL_CIRCLET,\n               ITEM_CAT_EYE_CIRCLET,\n               ITEM_CORAL_CIRCLET,\n               ITEM_DRAGON_HELM,\n               ITEM_SILVER_CROWN,\n               ITEM_WIZARD_HAT,\n               ITEM_NO_CAPE,\n               ITEM_CLOTH_CAPE,\n               ITEM_REVERSE_CLOAK,\n               ITEM_ELVEN_CLOAK,\n               ITEM_CRYSTAL_CLOAK,\n               ITEM_ROYAL_CLOAK,\n               ITEM_BLOOD_CLOAK,\n               ITEM_JOSEPHS_CLOAK,\n               ITEM_TWILIGHT_CLOAK,\n               ITEM_NO_ACCESSORY,\n               ITEM_MOONSTONE,\n               ITEM_SUNSTONE,\n               ITEM_BLOODSTONE,\n               ITEM_STAUROLITE,\n               ITEM_RING_OF_PALES,\n               ITEM_ZIRCON,\n               ITEM_AQUAMARINE,\n               ITEM_TURQUOISE,\n               ITEM_ONYX,\n               ITEM_GARNET,\n               ITEM_OPAL,\n               ITEM_DIAMOND,\n               ITEM_LAPIS_LAZULI,\n               ITEM_RING_OF_ARES,\n               ITEM_GOLD_RING,\n               ITEM_SILVER_RING,\n               ITEM_RING_OF_VARDA,\n               ITEM_RING_OF_ARCANA,\n               ITEM_MYSTIC_PENDANT,\n               ITEM_HEART_BROACH,\n               ITEM_NECKLACE_OF_J,\n               ITEM_GAUNTLET,\n               ITEM_ANKH_OF_LIFE,\n               ITEM_RING_OF_FEANOR,\n               ITEM_MEDAL,\n               ITEM_TALISMAN,\n               ITEM_DUPLICATOR,\n               ITEM_KINGS_STONE,\n               ITEM_COVENANT_STONE,\n               ITEM_NAUGLAMIR,\n               ITEM_SECRET_BOOTS,\n               ITEM_ALUCART_MAIL,\n               NUM_BODY_ITEMS,\n} BodyItems;\nvoid EntityBreakable(Entity*);\nvoid EntityExplosion(Entity*);\nvoid EntityPrizeDrop(Entity*);\nvoid EntityDamageDisplay(Entity*);\nvoid EntityRedDoor(Entity*);\nvoid EntityIntenseExplosion(Entity*);\nvoid EntitySoulStealOrb(Entity*);\nvoid EntityRoomForeground(Entity*);\nvoid EntityStageNamePopup(Entity*);\nvoid EntityEquipItemDrop(Entity*);\nvoid EntityRelicOrb(Entity*);\nvoid EntityHeartDrop(Entity*);\nvoid EntityEnemyBlood(Entity*);\nvoid EntityMessageBox(Entity*);\nvoid EntityDummy(Entity*);\ntypedef enum { MONO_SOUND, STEREO_SOUND } soundMode;\nenum Sfx {\n    SFX_HARPY_WING_FLAP = 0x601,\n    SFX_RIC_WHIP_RATTLE_A,\n    SFX_RIC_WHIP_RATTLE_B,\n    SFX_RIC_WHIP_RATTLE_C,\n    SFX_RIC_WHIP_RATTLE_D,\n    SFX_RIC_WHIP_RATTLE_E,\n    SFX_STONE_MOVE_A,\n    SFX_STONE_MOVE_B,\n    SFX_STONE_MOVE_C,\n    SFX_WEAPON_SWISH_A,\n    SFX_WEAPON_SWISH_B,\n    SFX_WEAPON_SWISH_C,\n    SFX_METAL_CLANG_A,\n    SFX_METAL_CLANG_B,\n    SFX_METAL_CLANG_C,\n    SFX_METAL_CLANG_D,\n    SFX_METAL_CLANG_E,\n    SFX_METAL_CLANG_F,\n    SFX_UNK_CROW,\n    SFX_ELECTRICITY,\n    SFX_SCRAPE_A,\n    SFX_SCRAPE_B,\n    SFX_SCRAPE_C,\n    SFX_UNK_618,\n    SFX_GLASS_BREAK_A,\n    SFX_GLASS_BREAK_B,\n    SFX_GLASS_BREAK_C,\n    SFX_GLASS_BREAK_D,\n    SFX_GLASS_BREAK_E,\n    SFX_BAT_ECHO_A,\n    SFX_BAT_ECHO_B,\n    SFX_BAT_ECHO_C,\n    SFX_BAT_ECHO_D,\n    SFX_SKULL_BONK,\n    SFX_RIC_RSTONE_TINK,\n    SFX_SMALL_BURST,\n    SFX_ARROW_SHOT_A,\n    SFX_ARROW_SHOT_B,\n    SFX_ARROW_SHOT_C,\n    SFX_ARROW_SHOT_D,\n    SFX_SKELETON_DEATH_A,\n    SFX_SKELETON_DEATH_B,\n    SFX_SKELETON_DEATH_C,\n    SFX_FIRE_SHOT,\n    SFX_WEAPON_STAB_A,\n    SFX_WEAPON_STAB_B,\n    SFX_WEAPON_APPEAR,\n    SFX_UNK_BETA_630,\n    SFX_DEATH_AMBIENCE,\n    SFX_MAGIC_GLASS_BREAK,\n    SFX_UI_CONFIRM,\n    SFX_CANDLE_HIT,\n    SFX_TELEPORT_BANG_A,\n    SFX_TELEPORT_BANG_B,\n    SFX_SUC_APPEAR,\n    SFX_UNK_SCRAPE_A,\n    SFX_UNK_SCRAPE_B,\n    SFX_UNK_SCRAPE_C,\n    SFX_UNK_UI_SELECT,\n    SFX_START_SLAM_A,\n    SFX_START_SLAM_B,\n    SFX_START_SLAM_C,\n    SFX_ANIME_SWORD_A,\n    SFX_ANIME_SWORD_B,\n    SFX_ANIME_SWORD_C,\n    SFX_DOOR_OPEN,\n    SFX_WALL_DEBRIS_A,\n    SFX_WALL_DEBRIS_B,\n    SFX_WALL_DEBRIS_C,\n    SFX_STOMP_HARD_A,\n    SFX_STOMP_HARD_B,\n    SFX_STOMP_HARD_C,\n    SFX_STOMP_HARD_D,\n    SFX_STOMP_HARD_E,\n    SFX_STOMP_SOFT_A,\n    SFX_STOMP_SOFT_B,\n    SFX_SAVE_HEARTBEAT,\n    SFX_BAT_SCREECH,\n    SFX_DOOR_CLOSE_A,\n    SFX_DOOR_CLOSE_B,\n    SFX_UNK_UI_ERROR,\n    SFX_EXPLODE_FAST_A,\n    SFX_EXPLODE_FAST_B,\n    SFX_EXPLODE_A,\n    SFX_EXPLODE_B,\n    SFX_EXPLODE_C,\n    SFX_EXPLODE_D,\n    SFX_EXPLODE_E,\n    SFX_EXPLODE_F,\n    SFX_FM_EXPLODE_A,\n    SFX_FM_EXPLODE_B,\n    SFX_FM_EXPLODE_C,\n    SFX_FM_EXPLODE_D,\n    SFX_EXPLODE_SMALL,\n    SFX_WEAPON_HIT = 0x678,\n    SFX_HEART_PICKUP = 0x67A,\n    SFX_ITEM_PICKUP = 0x67C,\n    SFX_GOLD_PICKUP = 0x6A9,\n};\ntypedef struct {\n              u16 posX;\n              u16 posY;\n              u16 entityId;\n              u16 entityRoomIndex;\n              u16 params;\n} LayoutEntity;\ntypedef struct {\n    u16* layout;\n    TileDefinition* tileDef;\n    u32 params;\n    u16 zPriority;\n    u8 unkE;\n    u8 unkF;\n} MyLayer;\ntypedef struct {\n    MyLayer* fg;\n    MyLayer* bg;\n} MyRoomDef;\nextern LayoutEntity* g_pStObjLayoutHorizontal[];\nextern LayoutEntity* g_pStObjLayoutVertical[];\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern u16 g_ItemIconSlots[0x20];\nvoid InitRoomEntities(s32 objLayoutId);\nvoid UpdateRoomPosition();\nvoid Update(void);\nvoid HitDetection(void);\ns32 Random();\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\nvoid CreateEntityFromLayout(Entity* entity, LayoutEntity* initDesc);\nvoid DestroyEntity(Entity*);\nvoid DestroyEntitiesFromIndex(s16 index);\nvoid MoveEntity();\nvoid FallEntity(void);\nEntity* AllocEntity(Entity* start, Entity* end);\ntypedef struct EntityInit {\n    u16 animSet;\n    u16 animCurFrame;\n    u16 unk5A;\n    u16 palette;\n    u16 enemyId;\n    u16 : 16;\n} EntityInit;\nvoid InitializeEntity(u16 arg0[]);\ntypedef enum {\n    E_NONE,\n    E_BREAKABLE,\n    E_EXPLOSION,\n    E_PRIZE_DROP,\n    E_NUMERIC_DAMAGE,\n    E_RED_DOOR,\n    E_INTENSE_EXPLOSION,\n    E_SOUL_STEAL_ORB,\n    E_ROOM_FOREGROUND,\n    E_DUMMY_09,\n    E_EQUIP_ITEM_DROP,\n    E_DUMMY_0B,\n    E_DUMMY_0C,\n    E_DUMMY_0D,\n    E_DUMMY_0E,\n    E_DUMMY_0F,\n    E_DUMMY_10,\n    E_ID_14 = 0x14,\n    E_ID_15,\n    E_ID_26 = 0x26,\n    E_SECRET_BUTTON = 0x28,\n    E_SECRET_STAIRS = 0x29,\n} EntityIDs;\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\ns32 GetSideToPlayer();\nvoid MoveEntity();\nvoid SetStep(u8);\nvoid EntityExplosion(Entity*);\nvoid EntityUnkId14(Entity* entity);\nvoid EntityUnkId15(Entity* entity);\nextern const char* D_801A7984;\nextern const char* D_801A7990;\nextern const char* D_801A799C;\nextern s8 c_HeartPrizes[10];\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern bool g_isSecretStairsButtonPressed;\nextern bool g_isDraculaFirstFormDefeated;\nextern u16 D_80180574[];\nextern u16 g_InitializeEntityData0[];\nextern u16 D_80180598[];\nextern u16 g_eInitGeneric2[];\nextern u16 D_801805D4[];\nextern u16 D_801805E0[];\nextern u16 D_801805EC[];\nextern u16 D_80180604[];\nextern u16 D_80180610[];\nextern u16 D_8018061C[];\nextern u16 D_80180628[];\nextern ObjInit2 D_80180638[];\nextern s32 D_801806D0[];\nextern u8 D_801806F8[];\nextern u8 D_80180704[];\nextern u16 D_80180710[];\nextern s16 D_80180724[];\nextern s16 D_80180738[];\nextern s8 D_8018074C[];\nextern s16 D_80180758[];\nextern u8 D_80180770[];\nextern u8 D_80180830[];\nextern u8 D_8018083C[];\nextern u8 D_8018084C[];\nextern u8 D_8018085C[];\nextern u8 D_80180864[];\nextern u8 D_8018086C[];\nextern u8 D_8018087C[];\nextern u8 D_80180884[];\nextern u8 D_8018088C[];\nextern u8 D_80180894[];\nextern Point16 D_801808A0[];\nextern u16 D_801808B0[];\nextern s16 D_801808F8[];\nextern s32 D_80180908;\nextern s32 D_80180910;\nextern u8 D_80180914[];\nextern u8 D_80180924[];\nextern u8 D_80180934[];\nextern u8 D_80180944[];\nextern u8 D_80180954[];\nextern u8 D_80180964[];\nextern u8 D_8018097C[];\nextern u8 D_801809A4[];\nextern u8 D_80180A0C[];\nextern u8 D_80180A20[];\nextern u8 D_80180A2C[];\nextern u8 D_80180AA4[];\nextern u8 D_80180AB0[];\nextern u8 D_80180AC8[];\nextern u8 D_80180AD4[];\nextern u8 D_80180AEC[];\nextern u8 D_80180AFC[];\nextern u8 D_80180B20[];\nextern u8 D_80180B48[];\nextern u8 D_80180B58[];\nextern u8 D_80180B60[];\nextern u8 D_80180B80[];\nextern u8 D_80180BA0[];\nextern u8 D_80180BB8[];\nextern u8 D_80180BCC[];\nextern u8 D_80180BDC[];\nextern u16 D_80180A48[];\nextern Point16 D_80180A58[];\nextern u16 D_80180BE4[];\nextern s16 D_801810F4[];\nextern Point16 D_80181108[];\nextern s32 D_80181148;\nextern u32 D_8018114C;\nextern s16 D_80181150[];\nextern s16 D_8018129C[];\nextern u8 D_801813E8;\nextern u8 D_801814A8;\nextern u16 g_testCollEnemyLookup[];\nextern u8 g_testColluCoords[];\nextern u8 g_testCollvCoords[];\nextern u16 g_testCollElementLookup[10];\nextern u8 g_testColliFrames[10];\nextern u16 D_80181CAC[];\nextern u16 D_80181CDC[];\nextern u32 D_80181CF0[];\nextern s8 D_801A7B7C;\nextern Point32 D_801BEB64[];\nextern s32 D_801C2578;\nextern u32 D_801C257C;\nextern s32 D_801C2578;\nextern s16 D_80181990[];\nextern u16 g_InitializeData0[];\nextern u16 D_80181D74[];\nextern s16 D_80181E3C[];\nextern s16 D_80181E3E[];\nextern s16 D_80181EB0[];\nextern u32 D_80181EC0[];\nextern u16 D_80181F04[];\nextern u8 D_801824CC[];\nextern s8 D_801A7BDC;\nextern Point32 D_801BEB64[];\nextern s32 D_801C24C8;\nextern s16 D_801C24D4;\nextern s16 D_801C24D6;\nextern s16 D_801C24D8;\nextern s16 D_801C24DA;\nextern s16 D_801C24DC;\nextern s8 D_801C24DE;\nextern s8 D_801C24DF;\nextern Primitive* D_801C24E0;\nextern s32 D_801C24E4[];\nextern s32 D_801C2578;\nextern s32 D_801C2580;\nextern u16 g_ESoulStealOrbAngles[];\nextern s16 g_ESoulStealOrbSprt[];\nextern u8 g_ESoulStealOrbAnim[];\nextern u8 D_80180784[];\nextern u8 D_80180788[];\nextern u16 D_8018078C[];\nextern u16 D_80180790[];\nextern u16 D_80180794[];\nextern s16 D_80180798[];\nextern const char D_801829D8[];\nextern s32 D_801C24C8;\nextern s32 D_801C2504;\nextern u32 D_801C257C;\nextern s32 D_801C2580;\nextern Dialogue g_Dialogue;\n\nvoid SetWeaponProperties(Entity* self, s32 kind);\nvoid SetSpriteBank1(SpriteParts* animset);\nvoid SetSpriteBank2(SpriteParts* animset);\nvoid EntityWeaponAttack(Entity* self);\nvoid DestroyEntityWeapon(bool arg0);\n\nvoid LoadWeaponPalette(s32 clutIndex);\ns32 func_ptr_80170004(Entity* self);\nvoid func_ptr_80170008(Entity* self);\nvoid func_ptr_8017000C(Entity* self);\ns32 func_ptr_80170010(Entity* self);\ns32 func_ptr_80170014(Entity* self);\nint GetWeaponId(void);\nvoid EntityWeaponShieldSpell(Entity* self);\nvoid func_ptr_80170024(Entity* self);\nvoid func_ptr_80170028(Entity* self);\nvoid WeaponUnused2C(void);\nvoid WeaponUnused30(void);\nvoid WeaponUnused34(void);\nvoid WeaponUnused38(void);\nvoid WeaponUnused3C(void);\n\nvoid DestroyEntity(Entity* entity);\nvoid DecelerateX(s32 amount);\nvoid DecelerateY(s32 amount);\nvoid SetSpeedX(s32 speed);\n\nextern SpriteParts g_Animset[];\nextern s32 g_HandId;\nvoid func_154000_8017B810(Entity* ent, Point16* outPoint, bool arg2);\nextern u16 D_154000_8017AFE0[];	1	\N	7953ed1c0c86e3cb43ae28812589e1aa04455db0027b2753cb90432c7481179d	test zero	ps1	35800		test zero	35800	[]	f	[]	\N	\N
OJltG	2024-08-20 22:21:15.203376+00	2024-08-20 22:21:23.648992+00	gcc2.6.3-psx		/*\nDecompilation failure in function EntityEquipItemDrop:\n\nFound jr instruction at asm.s line 36, but the corresponding jump table is not provided.\n\nPlease include it in the input .s file(s), or in an additional file.\nIt needs to be within a data section (e.g. ".section .rodata", or\n.late_rodata/.data/.sdata/.sdata2).\n\n*/\n\n/*\nDecompilation failure in function jtbl_8018D560:\n\nFunction jtbl_8018D560 contains no instructions. Maybe it is rodata?\n*/\n\nvoid EntityEquipItemDrop(void) {\n    // ...\n}\n	#define MU_DEATH_BALLAD 0x334\n#define NA_VO_DEATH_LAUGH 0x7A1\n#define PAL_DRA(x) (x)\n#define EvSpNEW 0x2000\n#define EvSpINT 0x0002\n#define PLAYER_STATUS_AXEARMOR 0x01000000\n#define CdlModeSpeedDouble 1\n#define CdlDataEnd 0x04\n#define PLAYER_STATUS_UNK1000 0x1000\n#define HwCARD_0 (DescHW | 0x12)\n#define HwCARD_1 (DescHW | 0x13)\n#define FWLOCK 0x0020\n#define SPU_VOICE_ADSR_DR (0x01 << 12)\n#define SAVE_FLAG_REPLAY (2)\n#define SE_INTRO_WIND_QUIET 0x32C\n#define MU_MOONLIGHT_NOCTURNE 0x340\n#define gte_stsxy(r0) \n#define KERNEL_H \n#define MU_SILENCE 0x33D\n#define RCntMdFR 0x0000\n#define SS_IMEDIATE 0\n#define PAL_TERMINATE() ((u_long*)-1)\n#define VERSION_US \n#define SFX_UNK_647 0x647\n#define PAD_LEFT 0x8000\n#define setlen(p,_len) (((P_TAG*)(p))->len = (u_char)(_len))\n#define MU_CRYSTAL_TEARDROPS_LOOP_POINT 0x30C\n#define EvSpACK 0x0010\n#define NA_VO_SU_NO_SCREAM 0x87B\n#define SS_TICK120 3\n#define MU_ABANDONED_PIT_LOOP_POINT 0x31A\n#define NA_SE_SU_CHARGE_PINKBALLS 0x6E2\n#define CdlForward 0x04\n#define SPAD(x) ((s32*)SP(x * sizeof(s32)))\n#define CD_SOUND_COMMAND_8 8\n#define FLAG_UNK_10000000 0x10000000\n#define NA_SE_EN_SPITTLEBONE_ACID_SPLAT 0x73C\n#define getaddr(p) (u_long)(((P_TAG*)(p))->addr)\n#define CdlGetTN 0x13\n#define MU_MARBLE_GALLERY 0x30D\n#define FIX(x) ((s32)((x) * 65536.0))\n#define HEART_VESSEL_INCREASE 5\n#define PLAYER_STATUS_UNK800000 0x800000\n#define JP_VO_YANAMI_JYOUJI_MESSAGE 0x34B\n#define OTSIZE 0x200\n#define EvStACTIVE 0x2000\n#define LIBAPI_H \n#define PRIMITIVE_H \n#define SFX_UNK_6B1 0x6B1\n#define SFX_UNK_6B2 0x6B2\n#define FLAG_UNK_400000 0x400000\n#define EvSpERROR 0x8000\n#define WEAPON_0_END (WEAPON_1_START - 1)\n#define NAMEOF(var) #var\n#define FLAG_UNK_800 0x800\n#define SPU_VOICE_ADSR_RR (0x01 << 14)\n#define JP_VO_SATOU_MASAHARU_MESSAGE 0x348\n#define blendMode drawMode\n#define SPU_VOICE_ADSR_AMODE (0x01 << 8)\n#define NA_SE_PL_TELEPORT 0x8BA\n#define RCntMdSC 0x0001\n#define SFX_UNK_6A0 0x6A0\n#define RCntMdSP 0x0000\n#define PLAYER_STATUS_UNK10 0x10\n#define COLOR_LEN ((COLOR_BPP) / 8)\n#define NA_SE_EN_BONE_SCIMITAR_SWORD_SLASH 0x66D\n#define MU_FINAL_TOCATTA 0x338\n#define SS_TICKMODE_MAX 6\n#define DRAW_UNK_100 0x100\n#define JP_VO_YOKOYAMA_CHISA_MESSAGE 0x34A\n#define CD_SOUND_COMMAND_14 14\n#define COMMON_H \n#define CD_SOUND_COMMAND_16 16\n#define PLAYER_STATUS_UNK40 0x40\n#define SPU_VOICE_SAMPLE_NOTE (0x01 << 6)\n#define CdlReadN 0x06\n#define MaxEntityCount 32\n#define PLAYER_STATUS_POISON 0x00004000\n#define CdlNop 0x01\n#define JP_VO_SH_GROAN 0x52E\n#define ALIGNED4 \n#define FLAG_UNK_4 0x4\n#define NA_VO_RI_IMPRESSIVE_ESCAPE 0x3DB\n#define JP_VO_YANADA_KIYOYUKI_MESSAGE 0x346\n#define HwCPU (DescHW | 0x10)\n#define MU_RAINBOW_CEMETERY_LOOP_POINT 0x308\n#define getcode(p) (u_char)(((P_TAG*)(p))->code)\n#define FIX_FRAC(x) (*(s16*)&(x))\n#define WARNF(...) _log(LOG_LEVEL_W, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define gte_ldv0(r0) \n#define gte_ldv3(r0,r1,r2) \n#define NA_SE_EV_WATER_SPLASH 0x7C2\n#define PAD_TRIANGLE 0x0010\n#define MU_THE_TRAGIC_PRINCE 0x311\n#define FONT_SPACE 4\n#define DISP_ALL_H 240\n#define EvSpPERROR 0x8001\n#define NA_SE_EN_GAIBON_FLAME 0x691\n#define EvMdNOINTR 0x2000\n#define MEMCPY memcpy\n#define gte_SetRotMatrix(r0) \n#define HwCNTL (DescHW | 0x08)\n#define OT_TYPE u_long\n#define DEMO_MAX_LEN 0x2000\n#define MU_CRYSTAL_TEARDROPS 0x30B\n#define MU_REQUIEM_FOR_THE_GODS_LOOP_POINT 0x306\n#define LIBGS_H \n#define DRAW_UNK_40 0x40\n#define MU_METAMORPHOSIS 0x327\n#define FLAG_UNK_08000000 0x08000000\n#define SFX_RICHTER_ATTACK_HIT 0x705\n#define getTPage(tp,abr,x,y) ((GetGraphType() == 1 || GetGraphType() == 2) ? ((((tp) & 0x3) << 9) | (((abr) & 0x3) << 7) | (((y) & 0x300) >> 3) | (((x) & 0x3ff) >> 6)) : ((((tp) & 0x3) << 7) | (((abr) & 0x3) << 5) | (((y) & 0x100) >> 4) | (((x) & 0x3ff) >> 6) | (((y) & 0x200) << 2)))\n#define __asm__(...) \n#define USE_MICRO_OPTIMIZATIONS 0\n#define LAYER_SEMI_TRANS 0x80\n#define JP_VO_SOSHITE 0x342\n#define PAL_UNK_OP3 3\n#define CdlSeekL 0x15\n#define CdlSeekP 0x16\n#define PAD_L1 0x0004\n#define PAD_L3 0x0200\n#define MU_DOOR_OF_HOLY_SPIRITS 0x315\n#define NA_SE_EN_SLOGRA_HURT 0x70C\n#define DISP_TITLE_H DISP_ALL_H\n#define LAYER_TPAGE_ALT 0x100\n#define setLineG4(p) setlen(p, 9), setcode(p, 0x5c), (p)->pad = 0x55555555\n#define JP_VO_KONAMI_5 0x350\n#define SET_SOUNDMODE_MONO 5\n#define MU_LOST_PAINTING 0x301\n#define setSprt8(p) setlen(p, 3), setcode(p, 0x74)\n#define TILE_SIZE 16\n#define STRINGIFY_(x) #x\n#define SFX_THUNDER 0x665\n#define MU_TOWER_OF_MIST 0x313\n#define NA_SE_EN_SLOGRA_SPEAR_PROJECTILE 0x690\n#define SS_SOFF 0\n#define NA_SE_EN_SLOGRA_BEAK_ATTACK 0x6C8\n#define FLT(x) ((s32)((x) * 4096.0))\n#define PAD_SELECT 0x0100\n#define EvSpUNKNOWN 0x0200\n#define PAD_R1 0x0008\n#define PAD_R2 0x0002\n#define GAMEBUTTONS (~(PAD_START | PAD_SELECT))\n#define SE_UNK_TE1_692 0x692\n#define SFX_UNK_668 0x668\n#define SS_REV 1\n#define NA_SE_VO_AXE_KNIGHT_SCREAM 0x767\n#define FLAG_UNK_04000000 0x04000000\n#define MENUCHAR(x) ((x) - 0x20)\n#define setXY0(p,_x0,_y0) (p)->x0 = (_x0), (p)->y0 = (_y0)\n#define setXY2(p,_x0,_y0,_x1,_y1) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1)\n#define setXY4(p,_x0,_y0,_x1,_y1,_x2,_y2,_x3,_y3) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2), (p)->x3 = (_x3), (p)->y3 = (_y3)\n#define ASM_RODATA __asm__(".section .rodata")\n#define EvSpCZ 0x0001\n#define SS_TICKVSYNC 5\n#define NA_VO_RI_DIE_MONSTER 0x358\n#define SPU_VOICE_ADSR_ADSR2 (0x01 << 18)\n#define gte_nclip() \n#define setPolyFT3(p) setlen(p, 7), setcode(p, 0x24)\n#define setPolyFT4(p) setlen(p, 9), setcode(p, 0x2c)\n#define FLAG_UNK_10000 0x10000\n#define LIBGTE_H \n#define MAX_SPRT_COUNT 0x200\n#define MU_WOOD_CARVING_PARTITA 0x309\n#define STAGE_WIDTH 256\n#define CdlModeSize0 0x10\n#define ELEMENT_STONE 0x200\n#define NUM_AVAIL_RELICS (NUM_RELICS - 2)\n#define SS_SEQ_TABSIZ 176\n#define DescEV 0xf1000000\n#define EvStUNUSED 0x0000\n#define NA_SE_EV_CLOCK_TICK 0x6A1\n#define setSprt16(p) setlen(p, 3), setcode(p, 0x7c)\n#define JP_VO_SH_SONO_TEIDO 0x530\n#define SE_UI_MAIN_MENU_SELECT 0x67D\n#define CdlModeAP 0x02\n#define SFX_UNK_641 0x641\n#define DescHW 0xf0000000\n#define MU_BLOOD_RELATIONS_LOOP_POINT 0x337\n#define SAVE_FLAG_CLEAR (1)\n#define NA_SE_EN_GAIBON_SMALL_FIREBALL 0x652\n#define DEBUGF(...) _log(LOG_LEVEL_D, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define CdlDataReady 0x01\n#define ANIMSET_OVL_FLAG 0x8000\n#define PAL_GLOW_ANIM 4\n#define NA_VO_AL_DEATH_DREAM_WORLD 0x391\n#define _ROMIO_H \n#define SE_SAVE_HEARTBEAT 0x64D\n#define FTRUNC 0x0400\n#define LEN(x) ((s32)(sizeof(x) / sizeof(*(x))))\n#define SPU_VOICE_ADSR_AR (0x01 << 11)\n#define CD_SOUND_COMMAND_10 10\n#define LIFE_VESSEL_INCREASE 5\n#define CdlStatSeekError 0x04\n#define CdlGetlocP 0x11\n#define NA_SE_EN_BLOOD_SKELETON_DISASSEMBLES 0x6CB\n#define PLAYER_STATUS_WOLF_FORM 0x00000004\n#define MU_DANCE_OF_PALES_LOOP_POINT 0x318\n#define PAL_UNK_OP3_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define RELIC_FLAG_FOUND 1\n#define EvSpCLOSE 0x0008\n#define CdlSetfilter 0x0d\n#define ELEMENT_CUT 0x40\n#define CdlGetlocL 0x10\n#define TcbStUNUSED 0x1000\n#define SFX_KARMA_COIN_HEADS 0x6B1\n#define GFX_ENTRY(x,y,w,h,data) (u_long*)((x) | ((y) << 16)), (u_long*)((w) | ((h) << 16)), (u_long*)data\n#define DescRC 0xf2000000\n#define FNBLOCK 0x0004\n#define setaddr(p,_addr) (((P_TAG*)(p))->addr = (u_long)(_addr))\n#define FLAG_DESTROY_IF_BARELY_OUT_OF_CAMERA 0x40000000\n#define SE_BOSS_DEFEATED 0x7D2\n#define DescTH DescMask\n#define setWH(p,_w,_h) (p)->w = _w, (p)->h = _h\n#define SPU_OFF 0\n#define LIBSPU_H \n#define FLAG_UNK_20000000 0x20000000\n#define PAL_COPY_INFO() MAKE_PAL_OP(PAL_COPY, 0)\n#define SFX_UNK_6E7 0x6E7\n#define PAD_CROSS 0x0040\n#define SCRIPT(...) {}\n#define gte_SetTransMatrix(r0) \n#define NA_VO_SU_GRUNT_1 0x870\n#define CdlModeRT 0x40\n#define CdlMAXDIR 128\n#define PLAYER_STATUS_UNK80000 0x80000\n#define JP_VO_SHIINA_HEKIRU_MESSAGE 0x345\n#define SET_UNK_12 0x12\n#define LOHU(x) (*(u16*)&(x))\n#define FLAG_UNK_1000 0x1000\n#define NA_SE_EN_ZOMBIE_EXPLODE 0x65E\n#define USE_CD_SPEED_DOUBLE 0\n#define NA_SE_EV_SWITCH_CLICK 0x676\n#define PAL_COPY 1\n#define SEEK_CUR 1\n#define OVL_EXPORT(x) ST0_ ##x\n#define NA_SE_VO_DR_HURT_1 0x853\n#define NA_SE_VO_DR_HURT_2 0x85B\n#define NA_SE_VO_DR_HURT_3 0x85C\n#define NA_SE_VO_DR_HURT_4 0x85D\n#define PLAYER_STATUS_UNK40000000 0x40000000\n#define addPrim(ot,p) setaddr(p, getaddr(ot)), setaddr(ot, p)\n#define PAD_R3 0x0400\n#define FALL_TERMINAL_VELOCITY 0x60000\n#define PLAYER_STATUS_UNK20000 0x20000\n#define __SPU_IRQCALLBACK_PROC \n#define MU_PROLOGUE 0x321\n#define ANIMSET_DRA(x) (x)\n#define SS_TICK240 2\n#define NA_SE_EN_SLOGRA_FLOOR_STOMP 0x64F\n#define setPolyF3(p) setlen(p, 4), setcode(p, 0x20)\n#define setPolyF4(p) setlen(p, 5), setcode(p, 0x28)\n#define FRCOM 0x2000\n#define MU_ENCHANTED_BANQUET 0x330\n#define DRAW_UNK02 0x02\n#define ELEMENT_FIRE 0x8000\n#define MAX_PRIM_COUNT 0x500\n#define setPolyG3(p) setlen(p, 6), setcode(p, 0x30)\n#define setPolyG4(p) setlen(p, 8), setcode(p, 0x38)\n#define FLAG_UNK_400 0x400\n#define SFX_UNK_689 0x689\n#define FLAG_UNK_10 0x10\n#define CdlModeDA 0x01\n#define DescMask 0xff000000\n#define NA_VO_SU_GRUNT_3 0x874\n#define LAYER_WRAP_BG 0x1000\n#define MU_BLOOD_RELATIONS 0x336\n#define NA_SE_VO_WO_BARK 0x706\n#define DISP_STAGE_H DISP_ALL_H\n#define DISP_STAGE_W 256\n#define SET_SOUNDMODE_STEREO 6\n#define STRINGIFY(x) STRINGIFY_(x)\n#define isendprim(p) ((((P_TAG*)(p))->addr) == 0xffffff)\n#define MU_TOWER_OF_MIST_LOOP_POINT 0x314\n#define MU_DANCE_OF_PALES 0x317\n#define MU_FESTIVAL_OF_SERVANTS 0x31D\n#define TOTAL_ENTITY_COUNT 256\n#define NA_VO_MA_IF_YOU_WEAR 0x3CE\n#define setUV3(p,_u0,_v0,_u1,_v1,_u2,_v2) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2)\n#define setUV4(p,_u0,_v0,_u1,_v1,_u2,_v2,_u3,_v3) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u1), (p)->v1 = (_v1), (p)->u2 = (_u2), (p)->v2 = (_v2), (p)->u3 = (_u3), (p)->v3 = (_v3)\n#define CdlNoIntr 0x00\n#define JP_VO_AKUMAJO 0x343\n#define CdlSetloc 0x02\n#define SE_INTRO_WIND_LOOP_POINT 0x32B\n#define PLAYER_STATUS_TRANSFORM (PLAYER_STATUS_BAT_FORM | PLAYER_STATUS_MIST_FORM | PLAYER_STATUS_WOLF_FORM)\n#define SE_WPN_PENTAGRAM 0x6E4\n#define LOWU(x) (*(u32*)&(x))\n#define NA_SE_EN_BLOOD_SKELETON_REASSEMBLES 0x6CC\n#define NA_SE_VO_DR_TAUNT_2 0x850\n#define DISP_MENU_W 384\n#define PLAYER_MARIA 2\n#define MU_I_AM_THE_WIND 0x33C\n#define CdlPause 0x09\n#define NA_VO_SU_LAUGH 0x86E\n#define SPRITESHEET_PTR 0x8013C020\n#define PLAYER_STATUS_CURSE 0x00008000\n#define DRAW_UNK_200 0x200\n#define FLAG_UNK_4000 0x4000\n#define SS_TICK50 4\n#define FLAG_UNK_02000000 0x02000000\n#define SFX_UNK_6FF 0x6FF\n#define SS_TICK60 1\n#define HwRTC0 (DescHW | 0x05)\n#define HwRTC1 (DescHW | 0x06)\n#define HwRTC2 (DescHW | 0x07)\n#define ANIMSET_OVL(x) ((x) | ANIMSET_OVL_FLAG)\n#define FRLOCK 0x0010\n#define NA_SE_VO_AL_PUNCH 0x6F1\n#define PLAYER_STATUS_UNK400000 0x400000\n#define NA_VO_RI_IMPRESSIVE_WHIP 0x3DA\n#define MAX_POLY_GT3_COUNT 0x30\n#define SS_REV_TYPE_DELAY 8\n#define F3DEX_GBI_2 1\n#define COLOR_BPP (16)\n#define CdlModeSF 0x08\n#define FLAG_UNK_20000 0x20000\n#define PAL_GLOW_DATA(data) (u_long*)(data)\n#define STAGE_ENTITY_START 64\n#define SS_REV_TYPE_STUDIO_A 2\n#define SS_REV_TYPE_STUDIO_C 4\n#define SS_WAIT_COMPLETED 1\n#define NA_SE_EN_COG_CLICK 0x642\n#define STRCPY(dst,src) __builtin_memcpy(dst, src, sizeof(src))\n#define PAL_COPY_DATA_(dst,data,len) (dst), (u_long*)(len), (u_long*)(data)\n#define ELEMENT_THUNDER 0x4000\n#define CdlPlay 0x03\n#define M2CTX 1\n#define DRAW_MENU 0x80\n#define TEST_BITS(x,y) ((x & y) == y)\n#define termPrim(p) setaddr(p, 0xffffffff)\n#define SFX_UNK_69D 0x69D\n#define SET_STOP_MUSIC 0xA\n#define FIX_TO_I(x) ((s32)((x) >> 16))\n#define MU_JP_FAIRY_SONG 0x33F\n#define NA_VO_SU_GRUNT_2 0x872\n#define SPU_REV_MODE (0x01 << 0)\n#define ELEMENT_DARK 0x800\n#define DRAW_COLORS 0x04\n#define PLAYER_RICHTER 1\n#define MAX_PRIM_ALLOC_COUNT 0x400\n#define NOT_IMPLEMENTED WARNF("not implemented")\n#define NA_SE_PL_MAX_HP_MP_INCREASED 0x687\n#define NA_VO_RI_ONLY_THE_COUNT 0x3DC\n#define O_NOBUF FNBUF\n#define WEAPON_0_START 0xE0\n#define DIAG_EOL 0xFF\n#define MAX_POLY_G4_COUNT 0x100\n#define MU_REQUIEM_FOR_THE_GODS 0x305\n#define SFX_UNK_8BB 0x8BB\n#define FLAG_DEAD 0x100\n#define PLAYER_STATUS_UNK2000 0x2000\n#define SPU_VOICE_ADSR_SL (0x01 << 15)\n#define NA_SE_VO_AXE_KNIGHT_THROW 0x766\n#define DISP_TITLE_W 512\n#define FLAG_UNK_800000 0x800000\n#define EvSpERANGE 0x0302\n#define SPU_VOICE_ADSR_SR (0x01 << 13)\n#define PAL_OVL_FLAG 0x8000\n#define setXY3(p,_x0,_y0,_x1,_y1,_x2,_y2) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x1), (p)->y1 = (_y1), (p)->x2 = (_x2), (p)->y2 = (_y2)\n#define HwDMAC (DescHW | 0x04)\n#define GAME_H \n#define NA_SE_SU_CREATE_CLONES 0x6D5\n#define SS_REV_TYPE_ECHO 7\n#define CdlMAXLEVEL 8\n#define NA_VO_SU_BLANK 0x86F\n#define CLAMP_MAX(v,max) ((v) > (max) ? (max) : (v))\n#define DISP_MENU_H DISP_ALL_H\n#define SPU_VOICE_ADSR_SMODE (0x01 << 9)\n#define LAYER_SHOW 1\n#define MU_RAINBOW_CEMETERY 0x307\n#define DRAW_TPAGE 0x10\n#define SIM_PTR 0x80280000\n#define setPolyGT3(p) setlen(p, 9), setcode(p, 0x34)\n#define setPolyGT4(p) setlen(p, 12), setcode(p, 0x3c)\n#define INCLUDE_ASM_H \n#define EvSpEDOM 0x0301\n#define NA_SE_SU_FLAPPING_WINGS 0x6C6\n#define PLAYER_ALUCARD 0\n#define JP_VO_KONAMI_1 0x34C\n#define JP_VO_KONAMI_2 0x34D\n#define RCntCNT1 (DescRC | 0x01)\n#define RCntCNT2 (DescRC | 0x02)\n#define RCntCNT3 (DescRC | 0x03)\n#define JP_VO_KONAMI_8 0x353\n#define JP_VO_KONAMI_9 0x354\n#define ERRORF(...) _log(LOG_LEVEL_E, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define JP_VO_KONAMI_12 0x357\n#define MU_DOOR_OF_HOLY_SPIRITS_LOOP_POINT 0x316\n#define SIZEOF_MENUCONTEXT (0x1E)\n#define JP_VO_KONAMI_3 0x34E\n#define HwGPU (DescHW | 0x02)\n#define SPU_VOICE_VOLL (0x01 << 0)\n#define SS_SON 1\n#define SPU_VOICE_VOLR (0x01 << 1)\n#define MU_LAND_OF_BENEDICTION 0x33E\n#define MAX_GOLD 999999\n#define INFOF(...) _log(LOG_LEVEL_I, __FILE__, __LINE__, __func__, __VA_ARGS__)\n#define OFF(type,field) ((size_t)(&((type*)0)->field))\n#define CdlBackward 0x05\n#define MU_WANDERING_GHOSTS 0x323\n#define SS_REV_TYPE_HALL 5\n#define NA_SE_EN_SLOGRA_HISSING 0x709\n#define STAGE STAGE_ST0\n#define NA_SE_PL_BT_FIREBALL 0x680\n#define SFX_UNK_661 0x661\n#define O_RDWR FREAD | FWRITE\n#define setTile(p) setlen(p, 3), setcode(p, 0x60)\n#define NA_SE_EN_SLOGRA_DEATH_EXPLOSION 0x697\n#define NA_SE_EV_WINDOW_LATCH 0x79D\n#define FLAG_HAS_PRIMS 0x00800000\n#define CdlAcknowledge 0x03\n#define SwMATH (DescSW | 0x02)\n#define NA_SE_PL_RIC_UNK_6E2 0x6E2\n#define SOUND_BAT_SCREECH 0x64E\n#define gte_SetGeomScreen(r0) \n#define DRAW_DEFAULT 0x00\n#define PLAYER_STATUS_ABSORB_BLOOD 0x02000000\n#define NA_SE_SY_MOVE_MENU_CURSOR 0x67B\n#define SE_UI_OVERWRITE_SELECT 0x6A4\n#define NA_VO_SU_SUCK_YOU_DRY 0x876\n#define gte_stszotz(r0) \n#define setShadeTex(p,tge) ((tge) ? setcode(p, getcode(p) | 0x01) : setcode(p, getcode(p) & ~0x01))\n#define CD_SOUND_COMMAND_12 12\n#define PAL_COPY_DATA(dst,data) (dst), (u_long*)LEN(data), (u_long*)(data)\n#define SE_DRE_FADE_TO_WHITE 0x65A\n#define NA_SE_EN_BLOODY_ZOMBIE_INJURED_SCREAM 0x746\n#define NA_SE_VO_DR_GRANT_ME_POWER 0x857\n#define RCntMdINTR 0x1000\n#define MU_LOST_PAINTING_LOOP_POINT 0x302\n#define FALL_GRAVITY 0x4000\n#define MU_PRAYER_LOOP_POINT 0x333\n#define NA_SE_CS_BURNING_PHOTOGRAPH 0x8BE\n#define PAD_SQUARE 0x0080\n#define RIC_PRG_PTR 0x8013C000\n#define MU_CURSE_ZONE 0x303\n#define SE_UI_SELECT 0x67B\n#define getlen(p) (u_char)(((P_TAG*)(p))->len)\n#define GET_PAL_OP_FREQ(x) (HIH(x))\n#define PAD_UP 0x1000\n#define MU_CURSE_ZONE_LOOP_POINT 0x304\n#define SS_REV_TYPE_SPACE 6\n#define FLAG_DRAW_ROTX 0x01\n#define FLAG_DRAW_ROTY 0x02\n#define FLAG_DRAW_ROTZ 0x04\n#define EvSpDE 0x0080\n#define LIBGPU_H \n#define O_RDONLY FREAD\n#define PAL_BULK_COPY 5\n#define SS_REV_TYPE_PIPE 9\n#define PAD_L2 0x0001\n#define PLAYER_STATUS_UNK80000000 0x80000000\n#define REBOUND_STONE_BOUNCE 0x6A4\n#define ELEMENT_HIT 0x20\n#define nextPrim(p) (void*)((u_long)(((P_TAG*)(p))->addr) | 0x80000000)\n#define FWRITE 0x0002\n#define SS_REV_TYPE_OFF 0\n#define PLAYER_STATUS_UNK40000 0x40000\n#define PLAYER_STATUS_STONE 0x00000080\n#define setUV0(p,_u0,_v0) (p)->u0 = (_u0), (p)->v0 = (_v0)\n#define NA_SE_EN_SLOGRA_SPEAR_SLASH 0x6C6\n#define HIH(x) (((s16*)&(x))[1])\n#define NA_VO_SU_HURT_1 0x879\n#define SS_NOTICK0 0\n#define MU_DANCE_OF_ILLUSIONS_LOOP_POINT 0x320\n#define MU_HEAVENLY_DOORWAY 0x31B\n#define CdlStatStandby 0x02\n#define MU_DANCE_OF_GOLD_LOOP_POINT 0x32F\n#define SE_UI_OVERWRITE_MSG 0x6AD\n#define MAX_TILE_COUNT 0x100\n#define MU_THE_TRAGIC_PRINCE_LOOP_POINT 0x312\n#define setSprt(p) setlen(p, 4), setcode(p, 0x64)\n#define DRAW_UNK_800 0x800\n#define setLineF2(p) setlen(p, 3), setcode(p, 0x40)\n#define setLineF3(p) setlen(p, 5), setcode(p, 0x48), (p)->pad = 0x55555555\n#define setLineF4(p) setlen(p, 6), setcode(p, 0x4c), (p)->pad = 0x55555555\n#define BUTTON_COUNT 8\n#define EvSpTRAP 0x1000\n#define setLineG2(p) setlen(p, 4), setcode(p, 0x50)\n#define setLineG3(p) setlen(p, 7), setcode(p, 0x58), (p)->pad = 0x55555555\n#define NA_SE_EN_GAIBON_SCREAM 0x70B\n#define SFX_KARMA_COIN 0x682\n#define NA_SE_VO_AL_WHAT 0x6F2\n#define DRAW_UNK_1000 0x1000\n#define SEEK_SET 0\n#define SS_SERIAL_A 0\n#define SS_SERIAL_B 1\n#define FLAG_DESTROY_IF_OUT_OF_CAMERA 0x80000000\n#define gte_rtps() \n#define gte_rtpt() \n#define N_VERTI_TILES 16\n#define NA_SE_EN_GAIBON_FLAME_OUT 0x65E\n#define FSCAN 0x1000\n#define gte_stsxy2(r0) \n#define gte_stsxy3(r0,r1,r2) \n#define CdlDiskError 0x05\n#define PLAYER_STATUS_UNK10000 0x10000\n#define TILE_MASK 0x0F\n#define setTile16(p) setlen(p, 2), setcode(p, 0x78)\n#define NA_SE_EN_AXE_KNIGHT_BREAK_AXE 0x66B\n#define EvSpTIMOUT 0x0100\n#define NA_SE_VO_DR_HERE_IS_TRUE_POWER 0x855\n#define O_CREAT FCREAT\n#define SPELL_FLAG_KNOWN 0x80\n#define FLAG_UNK_00200000 0x00200000\n#define NA_SE_EN_GAIBON_COLLAPSE 0x672\n#define PAL_BULK(dst,data) (u_long*)(dst), (u_long*)LEN(data), (u_long*)(data)\n#define FNBUF 0x4000\n#define MU_THE_DOOR_TO_THE_ABYSS 0x325\n#define NA_SE_BREAK_GLASS 0x68B\n#define NULL (0)\n#define LAYER_TPAGE_ID (0x20 | 0x40)\n#define CD_SOUND_COMMAND_FADE_OUT_1 3\n#define CD_SOUND_COMMAND_FADE_OUT_2 2\n#define MU_THE_DOOR_TO_THE_ABYSS_LOOP_POINT 0x326\n#define CdlSetmode 0x0e\n#define NA_VO_SU_DELICIOUS 0x8D1\n#define setUVWH(p,_u0,_v0,_w,_h) (p)->u0 = (_u0), (p)->v0 = (_v0), (p)->u1 = (_u0) + (_w), (p)->v1 = (_v0), (p)->u2 = (_u0), (p)->v2 = (_v0) + (_h), (p)->u3 = (_u0) + (_w), (p)->v3 = (_v0) + (_h)\n#define SE_UI_ERROR 0x686\n#define CdlStatRead 0x20\n#define MAKE_PAL_OP(kind,freq) ((kind) | ((freq) << 0x10))\n#define CASTLE_MAP_PTR 0x801E0000\n#define NA_SE_EN_GAIBON_BIG_FIREBALL 0x655\n#define ELEMENT_HOLY 0x1000\n#define __attribute__(...) \n#define EvSpIOE 0x0004\n#define CD_SOUND_COMMAND_6 6\n#define NA_VO_MAR_AIM_HEAD 0x87F\n#define CdlStop 0x08\n#define SPU_VOICE_NOTE (0x01 << 5)\n#define SE_INTRO_WIND_QUIET_LOOP_POINT 0x32D\n#define SE_UI_DEBUG_SELECT 0x688\n#define DRAW_HIDE 0x08\n#define SE_HEALTH_REGAINED 0x68E\n#define TcbStACTIVE 0x4000\n#define CdlStandby 0x07\n#define SPU_VOICE_ADSR_RMODE (0x01 << 10)\n#define MU_PRAYER 0x332\n#define NA_SE_PL_MP_GAUGE 0x67D\n#define CdlMAXFILE 64\n#define PAL_GLOW_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define JP_VO_FUKAMI_RIKA_MESSAGE 0x344\n#define FLAG_UNK_80000 0x80000\n#define NA_VO_RI_TRIBUTE 0x35A\n#define SFX_UNK_6EA 0x6EA\n#define MU_FINAL_TOCATTA_LOOP_POINT 0x339\n#define MAX_BG_LAYER_COUNT 16\n#define MU_METAMORPHOSIS_II 0x328\n#define PAL_OVL(x) ((x) | ANIMSET_OVL_FLAG)\n#define PLAYER_STATUS_MIST_FORM 0x00000002\n#define SPU_VOICE_VOLMODEL (0x01 << 2)\n#define SPU_VOICE_VOLMODER (0x01 << 3)\n#define NA_SE_EN_SLOGRA_HURT_2 0x70A\n#define PLAYER_STATUS_BAT_FORM 0x00000001\n#define WEAPON1_PTR 0x8017D000\n#define SE_WPN_POWER_OF_SIRE 0x66A\n#define CdlStatSeek 0x40\n#define MU_ABANDONED_PIT 0x319\n#define CdlModeStream2 0x120\n#define SE_WPN_ALUCARD_SWORD_SWING 0x6A8\n#define NA_SE_EN_GAIBON_FLAP_WINGS 0x68D\n#define ELEMENT_WATER 0x400\n#define SS_REV_TYPE_ROOM 1\n#define SE_DEATH_TAKES_ITEMS 0x7A0\n#define SPU_VOICE_ADSR_ADSR1 (0x01 << 17)\n#define FLAG_UNK_01000000 0x01000000\n#define LOH(x) (*(s16*)&(x))\n#define HwCdRom (DescHW | 0x03)\n#define PLAYER_STATUS_UNK4000000 0x04000000\n#define NA_SE_EN_BLOODY_ZOMBIE_INJURED 0x748\n#define DRA_PRG_PTR 0x800A0000\n#define RELIC_FLAG_ACTIVE 2\n#define MAX_LINE_G2_COUNT 0x100\n#define SE_UNK_TE3_667 0x667\n#define MAX_ENV_COUNT 0x10\n#define NA_SE_VO_DR_PLAYTIME_IS_OVER 0x858\n#define O_NBLOCK FNBLOCK\n#define SE_UNK_TE3_679 0x679\n#define MAX_DRAW_MODES 0x400\n#define SET_STOP_SEQ 7\n#define PAD_RIGHT 0x2000\n#define MEMCARD_ID "BASLUS-00067DRAX00"\n#define N_HORIZ_TILES 17\n#define RCntMdNOINTR 0x2000\n#define HwVBLANK (DescHW | 0x01)\n#define STAGE_INVERTEDCASTLE_MASK 0x1F\n#define CdlModeStream 0x100\n#define HwSIO (DescHW | 0x0b)\n#define MU_DANCE_OF_ILLUSIONS 0x31F\n#define PLAYER_STATUS_UNK400 0x400\n#define MU_DRACULAS_CASTLE_LOOP_POINT 0x310\n#define gte_stopz(r0) \n#define NA_SE_SU_PETAL_ATTACK 0x6B0\n#define SE_TREE_BRANCH_SNAP 0x7A4\n#define CdlModeRept 0x04\n#define NA_SE_EN_SKELETON_THROW_BONE 0x6C8\n#define HwPIO (DescHW | 0x0a)\n#define SPU_REV_FEEDBACK (0x01 << 4)\n#define PAL_UNK_OP2_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define EvStWAIT 0x1000\n#define EvSpCOMP 0x0020\n#define FLAG_UNK_100000 0x100000\n#define O_NOWAIT FASYNC\n#define MU_DEATH_BALLAD_LOOP_POINT 0x335\n#define SE_UNK_TE3_6B8 0x6B8\n#define WEAPON0_PTR 0x8017A000\n#define NA_SE_EN_EXPLOSIVE_DEATH 0x693\n#define JP_VO_KONAMI_10 0x355\n#define JP_VO_KONAMI_11 0x356\n#define FLAG_UNK_200 0x200\n#define HwSPU (DescHW | 0x09)\n#define TYPES_H \n#define FCREAT 0x0200\n#define setSemiTrans(p,abe) ((abe) ? setcode(p, getcode(p) | 0x02) : setcode(p, getcode(p) & ~0x02))\n#define SS_IMMEDIATE 0\n#define DescUEV 0xf3000000\n#define CdlGetparam 0x0f\n#define DEMO_KEY_LEN 3\n#define SFX_UNK_6F0 0x6F0\n#define FLAG_UNK_8000 0x8000\n#define FONT_H 8\n#define FONT_W 8\n#define NA_SE_EN_BLOODY_ZOMBIE_HEMORRHAGE 0x749\n#define LIBETC_H \n#define BIBLE_SUBWPN_SWOOSH 0x8C3\n#define FONT_GAP FONT_W\n#define MU_BLACK_BANQUET 0x33A\n#define TcbMdPRI 0x2000\n#define setClut(p,x,y) ((p)->clut = getClut(x, y))\n#define SE_UNK_TE2_6B4 0x6B4\n#define PALETTE_LEN ((COLORS_PER_PAL) * ((COLOR_BPP) / 8))\n#define MU_ENCHANTED_BANQUET_LOOP_POINT 0x331\n#define NA_VO_DR_IT_WAS_NOT 0x359\n#define FREAD 0x0001\n#define EvStALREADY 0x4000\n#define setRGB0(p,_r0,_g0,_b0) (p)->r0 = _r0, (p)->g0 = _g0, (p)->b0 = _b0\n#define setRGB1(p,_r1,_g1,_b1) (p)->r1 = _r1, (p)->g1 = _g1, (p)->b1 = _b1\n#define setRGB2(p,_r2,_g2,_b2) (p)->r2 = _r2, (p)->g2 = _g2, (p)->b2 = _b2\n#define MU_BLACK_BANQUET_LOOP_POINT 0x33B\n#define SEEK_END 2\n#define RCntCNT0 (DescRC | 0x00)\n#define ELEMENT_CURSE 0x100\n#define CdlMute 0x0b\n#define JP_VO_KONAMI_4 0x34F\n#define DRAW_TPAGE2 0x20\n#define JP_VO_KONAMI_6 0x351\n#define catPrim(p0,p1) setaddr(p0, p1)\n#define JP_VO_KONAMI_7 0x352\n#define NA_SE_VO_AL_SOUL_STEAL 0x6F4\n#define SS_MIX 0\n#define CdlModeSize1 0x20\n#define FLAG_DRAW_UNK100 0x100\n#define PLAYER_STATUS_UNK200 0x200\n#define NA_VO_SU_HURT_2 0x87A\n#define SFX_UNK_64B 0x64B\n#define SFX_UNK_64C 0x64C\n#define CdlStatError 0x01\n#define SE_ITEM_YOINK 0x7A2\n#define ALUCARD_DARK_METAMORPHOSIS 0x705\n#define STAGE_PRG_PTR 0x80180000\n#define COLORS_PER_PAL (16)\n#define SFX_UNK_664 0x664\n#define setRGB3(p,_r3,_g3,_b3) (p)->r3 = _r3, (p)->g3 = _g3, (p)->b3 = _b3\n#define SFX_UNK_669 0x669\n#define PAD_COUNT 2\n#define O_WRONLY FWRITE\n#define STAGE_INVERTEDCASTLE_FLAG 0x20\n#define PLAYER g_Entities[PLAYER_CHARACTER]\n#define MU_DRACULAS_CASTLE 0x30F\n#define SFX_UNK_683 0x683\n#define SE_UNK_TE2_6B6 0x6B6\n#define HEART_VESSEL_RICHTER 30\n#define FACTORY(A0,BLUEPRINTNUM) (A0 << 8 | BLUEPRINTNUM)\n#define NA_SE_VO_AL_DYING 0x6F6\n#define SFX_UNK_69A 0x69A\n#define PLAYER_STATUS_UNK800 0x800\n#define CdlStatShellOpen 0x10\n#define DRAW_TRANSP 0x01\n#define SPU_REV_DELAYTIME (0x01 << 3)\n#define addPrims(ot,p0,p1) setaddr(p1, getaddr(ot)), setaddr(ot, p0)\n#define ELEMENT_POISON 0x80\n#define CdlStatPlay 0x80\n#define SPU_ON 1\n#define SS_NOTICK 0x1000\n#define SE_UNK_TE1_651 0x651\n#define FLAG_UNK_2000 0x2000\n#define SPU_VOICE_WDSA (0x01 << 7)\n#define PAL_UNK_OP2_DATA(data) (u_long*)(data)\n#define EvSpSYSCALL 0x4000\n#define FAMILIAR_PTR 0x80170000\n#define LAYER_CLUT_ALT 0x200\n#define SP(x) (0x1F800000 + (x))\n#define SQ(x) ((x) * (x))\n#define SE_UNK_TE1_66F 0x66F\n#define FLAG_DRAW_UNK10 0x10\n#define STAGE_H \n#define MAX_POLY_GT4_COUNT 0x300\n#define HwCARD (DescHW | 0x11)\n#define MU_FESTIVAL_OF_SERVANTS_LOOP_POINT 0x31E\n#define FLAG_DRAW_UNK20 0x20\n#define CdlModeSpeedNormal 0\n#define RCntMdGATE 0x0010\n#define SAVE_FLAG_NORMAL (0)\n#define SFX_UNK_6A3 0x6A3\n#define SFX_UNK_6AD 0x6AD\n#define setTile1(p) setlen(p, 2), setcode(p, 0x68)\n#define setTile8(p) setlen(p, 2), setcode(p, 0x70)\n#define FLAG_DRAW_UNK40 0x40\n#define SFX_UNK_6B0 0x6B0\n#define CdlDemute 0x0c\n#define JP_VO_KATSUTE 0x341\n#define setBlockFill(p) setlen(p, 3), setcode(p, 0x02)\n#define EvSpIOER 0x0400\n#define SFX_UNK_6DF 0x6DF\n#define FLAG_DRAW_UNK8 0x08\n#define SFX_UNK_6E0 0x6E0\n#define NA_SE_VO_AL_DARK_METAMORPHOSIS 0x6F3\n#define SFX_UNK_6E8 0x6E8\n#define SFX_UNK_6E9 0x6E9\n#define SFX_UNK_6EB 0x6EB\n#define SFX_UNK_6EC 0x6EC\n#define SFX_UNK_6ED 0x6ED\n#define SFX_UNK_6EE 0x6EE\n#define SFX_UNK_6EF 0x6EF\n#define EvSpIOEW 0x0800\n#define PAD_CIRCLE 0x0020\n#define FLAG_DRAW_UNK80 0x80\n#define SFX_UNK_6F7 0x6F7\n#define DIAG_EOS 0x00\n#define PLAYER_STATUS_UNK_20 0x00000020\n#define SFX_H \n#define CLAMP_MIN(v,min) ((v) < (min) ? (min) : (v))\n#define LIBSND_H \n#define PAL_UNK_OP2 2\n#define O_TAG u_long tag\n#define GET_PAL_OP_KIND(x) (LOH(x))\n#define MU_PROLOGUE_LOOP_POINT 0x322\n#define _LANGUAGE_C 1\n#define DRAW_UNK_400 0x400\n#define _S(x) (x)\n#define SE_UNK_TE1_6B3 0x6B3\n#define FAPPEND 0x0100\n#define WEAPON_1_START 0xF0\n#define DescSW 0xf4000000\n#define RENDERFLAGS_NOSHADOW 2\n#define SIM_CHR0 0x80280000\n#define SIM_CHR1 0x80284000\n#define CdlGetTD 0x14\n#define NA_SE_VO_DR_TAUNT_1 0x84F\n#define CdlReadS 0x1B\n#define MAX(a,b) ((a) > (b) ? (b) : (a))\n#define setcode(p,_code) (((P_TAG*)(p))->code = (u_char)(_code))\n#define getClut(x,y) ((y << 6) | ((x >> 4) & 0x3f))\n#define PAL_BULK_COPY_INFO(dst,n) (u_long*)(dst), (u_long*)(n)\n#define MU_MARBLE_GALLERY_LOOP_POINT 0x30E\n#define NA_SE_EN_BLOODY_ZOMBIE_DEATH_SCREAM 0x747\n#define SE_INTRO_WIND 0x32A\n#define SwCARD (DescSW | 0x01)\n#define DRAW_ABSPOS 0x2000\n#define FASYNC 0x8000\n#define JP_VO_OKIAYU_RYOUTAROU_MESSAGE 0x347\n#define SPU_VOICE_PITCH (0x01 << 4)\n#define DEMO_KEY_PTR 0x801E8000\n#define setTPage(p,tp,abr,x,y) ((p)->tpage = getTPage(tp, abr, x, y))\n#define _MIPS_SZLONG 32\n#define CdlComplete 0x02\n#define CdlModeSpeed 0x80\n#define SE_CASTLE_GATE_RISE 0x7A5\n#define CD_SOUND_COMMAND_START_XA 4\n#define SPU_REV_DEPTHL (0x01 << 1)\n#define SPU_REV_DEPTHR (0x01 << 2)\n#define EvMdINTR 0x1000\n#define VERSION "us"\n#define EvSpDR 0x0040\n#define PAL_UNK_OP3_DATA(data) (u_long*)(data)\n#define MIN(a,b) ((a) > (b) ? (b) : (a))\n#define MAXSPRT16 0x280\n#define RELIC_FLAG_DISABLE 0\n#define NA_SE_EN_DR_FIREBALL 0x660\n#define INCLUDE_ASM(FOLDER,NAME) __asm__(".pushsection .text\\n" "\\t.align\\t2\\n" "\\t.globl\\t" #NAME "\\n" "\\t.ent\\t" #NAME "\\n" #NAME ":\\n" ".include \\"asm/" VERSION "/" FOLDER "/" #NAME ".s\\"\\n" "\\t.set reorder\\n" "\\t.set at\\n" "\\t.end\\t" #NAME "\\n" ".popsection");\n#define SET_UNK_0B 0xB\n#define SET_UNK_0E 0xE\n#define SET_UNK_0F 0xF\n#define ELEMENT_ICE 0x2000\n#define JP_VO_SH_SCREAM 0x52F\n#define SET_UNK_10 0x10\n#define SET_UNK_11 0x11\n#define SPU_VOICE_LSAX (0x01 << 16)\n#define LOG_H \n#define COLOR16(r,g,b,a) (r) + ((g) << 5) + ((b) << 10) + ((a) << 15)\n#define setXYWH(p,_x0,_y0,_w,_h) (p)->x0 = (_x0), (p)->y0 = (_y0), (p)->x1 = (_x0) + (_w), (p)->y1 = (_y0), (p)->x2 = (_x0), (p)->y2 = (_y0) + (_h), (p)->x3 = (_x0) + (_w), (p)->y3 = (_y0) + (_h)\n#define MU_DANCE_OF_GOLD 0x32E\n#define MU_WANDERING_GHOSTS_LOOP_POINT 0x324\n#define FLAG_UNK_40000 0x40000\n#define FLAG_DRAW_DEFAULT 0x00\n#define JP_VO_WAKAMOTO_NORIO_MESSAGE 0x349\n#define PAD_DOWN 0x4000\n#define TcbMdRT 0x1000\n#define GFX_TERMINATE() ((u_long*)-1)\n#define NA_VO_SU_CRYSTAL_1 0x87C\n#define NA_VO_SU_CRYSTAL_2 0x6AF\n#define SS_REV_TYPE_STUDIO_B 3\n#define PAD_START 0x0800\n#define LOW(x) (*(s32*)&(x))\ntypedef char int8_t;\ntypedef short int16_t;\ntypedef int int32_t;\ntypedef long long int64_t;\ntypedef unsigned char uint8_t;\ntypedef unsigned short uint16_t;\ntypedef unsigned int uint32_t;\ntypedef unsigned long long uint64_t;\ntypedef unsigned char u_char;\ntypedef unsigned short u_short;\ntypedef unsigned long u_long;\ntypedef unsigned int size_t;\ntypedef signed char s8;\ntypedef signed short s16;\ntypedef signed int s32;\ntypedef signed long long s64;\ntypedef unsigned char u8;\ntypedef unsigned short u16;\ntypedef unsigned int u32;\ntypedef unsigned long long u64;\ntypedef signed char byte;\ntypedef enum { false, true } bool;\ntypedef union {\n    s32 val;\n    struct {\n        s16 lo;\n        s16 hi;\n    } i;\n} f32;\ntypedef struct {\n              s16 x;\n              s16 y;\n} Point16;\ntypedef struct {\n    u8 u;\n    u8 v;\n} uvPair;\ntypedef struct {\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 pad;\n} rgb_set;\nint sprintf(char* dst, const char* fmt, ...);\ntypedef enum {\n    LOG_LEVEL_D,\n    LOG_LEVEL_I,\n    LOG_LEVEL_W,\n    LOG_LEVEL_E,\n} LOG_LEVEL;\nvoid SetMinLogLevel(LOG_LEVEL level);\nvoid _log(unsigned int level, const char* file, unsigned int line,\n          const char* func, const char* fmt, ...);\ntypedef enum {\n    PLAYER_CHARACTER,\n    UNK_ENTITY_1,\n    UNK_ENTITY_2,\n    UNK_ENTITY_3,\n    UNK_ENTITY_4,\n    UNK_ENTITY_5,\n    UNK_ENTITY_6,\n    UNK_ENTITY_7,\n    UNK_ENTITY_8,\n    E_WEAPON = 0x10,\n    UNK_ENTITY_11 = 0x11,\n    UNK_ENTITY_12 = 0x12,\n    UNK_ENTITY_13 = 0x13,\n    UNK_ENTITY_20 = 0x20,\n    UNK_ENTITY_51 = 0x51,\n    UNK_ENTITY_100 = 0x100\n} EntityTypes;\nstruct DIRENTRY {\n               char name[20];\n               long attr;\n               long size;\n               struct DIRENTRY* next;\n              long head;\n               char system[4];\n};\nvoid EnterCriticalSection(void);\nvoid ExitCriticalSection(void);\nlong _card_info(long chan);\nlong _card_clear(long chan);\nlong _card_load(long chan);\nvoid InitCARD(long val);\nlong StartCARD(void);\nstruct EXEC {\n    unsigned long pc0;\n    unsigned long gp0;\n    unsigned long t_addr;\n    unsigned long t_size;\n    unsigned long d_addr;\n    unsigned long d_size;\n    unsigned long b_addr;\n    unsigned long b_size;\n    unsigned long s_addr;\n    unsigned long s_size;\n    unsigned long sp, fp, gp, ret, base;\n};\nextern void InitHeap(void*, unsigned long);\nextern long Load(char*, struct EXEC*);\nextern long Exec(struct EXEC*, long, char**);\nextern void _bu_init(void);\nextern long open(char* devname,\n                 int flag\n);\nextern long lseek(long, long, long);\nextern long read(long fd,\n                 void* buf,\n                 long n\n);\nextern long write(long, void*, long);\nextern int close(int fd\n);\nextern long format(char* fs\n);\nextern struct DIRENTRY* firstfile(char*, struct DIRENTRY*);\nextern struct DIRENTRY* nextfile(struct DIRENTRY*);\nextern long erase(char*);\nextern long Krom2RawAdd(unsigned long);\nextern void ChangeClearPAD(long);\nextern void StopPAD(void);\nint PAD_init(s32 , s32* );\nextern void FlushCache(void);\nextern void DeliverEvent(unsigned long, unsigned long);\nextern long TestEvent(unsigned long event\n);\nextern long OpenEvent(unsigned long, long, long, long (*func)());\nextern long EnableEvent(long);\nextern void _96_remove(void);\nextern long SetRCnt(unsigned long, unsigned short, long);\nextern long StartRCnt(unsigned long);\nextern long GetRCnt(unsigned long);\nextern long StopRCnt(unsigned long);\nextern long ResetRCnt(unsigned long);\nextern void exit();\nextern void puts(char*);\nextern char* strcat(char*, char*);\nextern int strcmp(char*, char*);\nextern int strncmp(char*, char*);\nextern char* strcpy(char*, char*);\nextern int strlen(char*);\nextern void* memcpy(unsigned char*, unsigned char*, int);\nextern void* memset(unsigned char*, unsigned char, int);\nextern int rand(void);\nextern void srand(unsigned int);\nextern void* malloc(size_t\n);\nextern void free(void*);\nint printf(char*, ...);\nint abs(int x);\ntypedef struct {\n    u_char minute;\n    u_char second;\n    u_char sector;\n    u_char track;\n} CdlLOC;\ntypedef struct {\n    u_char val0;\n    u_char val1;\n    u_char val2;\n    u_char val3;\n} CdlATV;\ntypedef struct {\n    u_short id;\n    u_short type;\n    u_short secCount;\n    u_short nSectors;\n    u_long frameCount;\n    u_long frameSize;\n    u_short width;\n    u_short height;\n    u_long dummy1;\n    u_long dummy2;\n    CdlLOC loc;\n} StHEADER;\ntypedef struct {\n    CdlLOC pos;\n    u_long size;\n    char name[16];\n} CdlFILE;\ntypedef void (*CdlCB)(u_char, u_char*);\nvoid def_cbsync(u_char intr, u_char* result);\nvoid def_cbready(u_char intr, u_char* result);\nvoid def_cbread(u_char intr, u_char* result);\nint CdInit(void);\nint CdStatus(void);\nint CdMode(void);\nint CdLastCom(void);\nint CdReset(int mode);\nvoid CdFlush(void);\nint CdSetDebug(int level);\nchar* CdComstr(u_char com);\nchar* CdIntstr(u_char intr);\nint CdSync(int mode, u_char* result);\nint CdReady(int mode, u_char* result);\nCdlCB CdSyncCallback(CdlCB func);\nCdlCB CdReadyCallback(CdlCB func);\nint CdControl(u_char com, u_char* param, u_char* result);\nint CdControlB(u_char com, u_char* param, u_char* result);\nint CdControlF(u_char com, u_char* param);\nint CdMix(CdlATV* vol\n);\nint CdGetSector(void* madr, int size);\nvoid(*CdDataCallback(void (*func)()));\nCdlLOC* CdIntToPos(int i, CdlLOC* p);\nint CdPosToInt(CdlLOC* p);\nCdlFILE* CdSearchFile(CdlFILE* fp, char* name);\nint CdRead(int sectors, u_long* buf, int mode);\nint CdReadSync(int mode, u_char* result);\nCdlCB CdReadCallback(CdlCB func);\nint CdRead2(long mode);\nvoid StClearRing(void);\nvoid StSetStream(u_long mode, u_long start_frame, u_long end_frame,\n                 void (*func1)(), void (*func2)());\nvoid StSetMask(u_long mask, u_long start, u_long end);\nu_long StGetNext(u_long** addr, u_long** header);\nu_long StFreeRing(u_long* base);\nint StGetBackloc(CdlLOC* loc);\nvoid StSetRing(u_long* ring_addr, u_long ring_size1);\nvoid StUnSetRing(void);\nstruct Callbacks {\n    const char* rcsid;\n    void* (*DMACallback)(int dma, void (*func)());\n    void* (*InterruptCallback)(int irq, void (*f)());\n    int (*ResetCallback)(void);\n    int (*StopCallback)(void);\n    int (*VSyncCallbacks)(int ch, void (*f)());\n    int (*RestartCallback)(void);\n};\nextern unsigned short D_8002C2BA;\nextern struct Callbacks* D_8002D340;\nint VSync(int mode);\nint VSyncCallback(void (*f)());\nint VSyncCallbacks(int ch, void (*f)());\nvoid* DMACallback(int dma, void (*func)());\nint ResetCallback(void);\nint StopCallback(void);\nint RestartCallback(void);\nint CheckCallback(void);\nlong SetVideoMode(long mode);\nvoid PadInit(int mode);\nu_long PadRead(int id);\nvoid PadStop(void);\ntypedef struct {\n              short x;\n              short y;\n              short w;\n              short h;\n} RECT;\ntypedef struct {\n    unsigned addr : 24;\n    unsigned len : 8;\n    u_char r0, g0, b0, code;\n} P_TAG;\ntypedef struct {\n    u_char r0, g0, b0, code;\n} P_CODE;\ntypedef struct {\n    u_long tag;\n              u_long code[15];\n} DR_ENV;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n} POLY_F3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    short x3, y3;\n} POLY_F4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char u0, v0;\n    u_short clut;\n    short x1, y1;\n    u_char u1, v1;\n    u_short tpage;\n    short x2, y2;\n    u_char u2, v2;\n    u_short pad1;\n} POLY_FT3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char u0, v0;\n    u_short clut;\n    short x1, y1;\n    u_char u1, v1;\n    u_short tpage;\n    short x2, y2;\n    u_char u2, v2;\n    u_short pad1;\n    short x3, y3;\n    u_char u3, v3;\n    u_short pad2;\n} POLY_FT4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, pad1;\n    short x1, y1;\n    u_char r2, g2, b2, pad2;\n    short x2, y2;\n} POLY_G3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n} POLY_GT3;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char pad1;\n               short x1;\n               short y1;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char pad2;\n               short x2;\n               short y2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char pad3;\n               short x3;\n               short y3;\n} POLY_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               u_char r1;\n               u_char g1;\n               u_char b1;\n               u_char p1;\n               short x1;\n               short y1;\n               u_char u1;\n               u_char v1;\n               u_short tpage;\n               u_char r2;\n               u_char g2;\n               u_char b2;\n               u_char p2;\n               short x2;\n               short y2;\n               u_char u2;\n               u_char v2;\n               u_short pad2;\n               u_char r3;\n               u_char g3;\n               u_char b3;\n               u_char p3;\n               short x3;\n               short y3;\n               u_char u3;\n               u_char v3;\n               u_short pad3;\n} POLY_GT4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n} LINE_F2;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n} LINE_G2;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    u_long pad;\n} LINE_F3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n    u_char r2, g2, b2, p2;\n    short x2, y2;\n    u_long pad;\n} LINE_G3;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short x1, y1;\n    short x2, y2;\n    short x3, y3;\n    u_long pad;\n} LINE_F4;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    u_char r1, g1, b1, p1;\n    short x1, y1;\n    u_char r2, g2, b2, p2;\n    short x2, y2;\n    u_char r3, g3, b3, p3;\n    short x3, y3;\n    u_long pad;\n} LINE_G4;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n               short w;\n               short h;\n} SPRT;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_16;\ntypedef struct {\n               u_long tag;\n               u_char r0;\n               u_char g0;\n               u_char b0;\n               u_char code;\n               short x0;\n               short y0;\n               u_char u0;\n               u_char v0;\n               u_short clut;\n} SPRT_8;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short w, h;\n} TILE;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_16;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_8;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n} TILE_1;\ntypedef struct {\n    u_long tag;\n    u_char r0, g0, b0, code;\n    short x0, y0;\n    short w, h;\n} BLK_FILL;\ntypedef struct {\n               RECT clip;\n               short ofs[2];\n               RECT tw;\n               u_short tpage;\n               u_char dtd;\n               u_char dfe;\n               u_char isbg;\n               u_char r0, g0, b0;\n               DR_ENV dr_env;\n} DRAWENV;\ntypedef struct {\n               RECT disp;\n               RECT screen;\n               u_char isinter;\n               u_char isrgb24;\n               u_char pad0;\n               u_char pad1;\n} DISPENV;\ntypedef struct {\n               u_long tag;\n               u_long code[2];\n} DR_MODE;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_TWIN;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_AREA;\ntypedef struct {\n    u_long tag;\n    u_long code[2];\n} DR_OFFSET;\ntypedef struct {\n    u_long tag;\n    u32 code[2];\n} DR_PRIO;\ntypedef struct PixPattern {\n    u8 w;\n    u8 h;\n    u8 x;\n    u8 y;\n} PixPattern;\nextern u_short LoadTPage(\n    u_long* pix,\n    int tp,\n    int abr,\n    int x, int y,\n    int w, int h\n);\nextern u_short LoadClut2(u_long* clut, int x, int y);\nu_short GetClut(int x,\n                int y\n);\nu_short GetTPage(int tp, int abr, int x, int y);\nvoid DumpTPage(u_short tpage);\nvoid DumpClut(u_short clut);\nextern void AddPrim(void* ot, void* p);\nextern void SetShadeTex(void* p, int tge);\nextern void SetLineG2(LINE_G2* p);\nextern void SetPolyGT3(POLY_GT3* p);\nextern void SetPolyG4(POLY_G4* p);\nextern void SetPolyGT4(POLY_GT4* p);\nextern void SetSemiTrans(void* p, int abe);\nextern void SetSprt(SPRT* p);\nextern void SetSprt16(SPRT_16* p);\nextern void SetSprt8(SPRT_8* p);\nextern void SetTile(TILE* p);\nextern int ResetGraph(int mode);\nint SetGraphDebug(int level);\nextern int SetGraphReverse(int mode);\nextern int SetGraphQueue(int mode);\nextern u_long DrawSyncCallback(void (*func)());\nextern void FntLoad(int tx, int ty);\nint FntPrint(const char* fmt, ...);\nextern void SetDispMask(int mask);\nextern void SetDrawMode(DR_MODE* p, int dfe, int dtd, int tpage, RECT* tw);\nextern void SetDumpFnt(int id);\nextern int ClearImage(RECT* rect, u_char r, u_char g, u_char b);\nextern int DrawSync(int mode);\nextern int FntOpen(int x, int y, int w, int h, int isbg, int n);\nextern u_long* FntFlush(int id);\nextern int LoadImage(RECT* rect, u_long* p);\nextern int StoreImage(RECT* rect, u_long* p);\nextern int MoveImage(RECT* rect, int x, int y);\nextern u_long* ClearOTag(u_long* ot, int n);\nextern u_long* ClearOTagR(u_long* ot, int n);\nextern void DrawOTag(u_long* p);\nextern DRAWENV* PutDrawEnv(DRAWENV* env);\nextern DISPENV* PutDispEnv(DISPENV* env);\nextern DISPENV* SetDefDispEnv(DISPENV* env, int x, int y, int w, int h);\nextern DRAWENV* SetDefDrawEnv(DRAWENV* env, int x, int y, int w, int h);\nextern void SetDrawEnv(DR_ENV* dr_env, DRAWENV* env);\nvoid GsClearVcount(void);\nlong GsGetVcount();\nvoid GsInitVcount();\nvoid InitGeom();\ntypedef struct {\n    short m[3][3];\n    long t[3];\n} MATRIX;\ntypedef struct {\n    long vx, vy, vz;\n    long pad;\n} VECTOR;\ntypedef struct {\n    short vx, vy, vz;\n    short pad;\n} SVECTOR;\ntypedef struct {\n    u_char r, g, b;\n    u_char cd;\n} CVECTOR;\nMATRIX* RotMatrix(SVECTOR* r, MATRIX* m);\nvoid SetGeomOffset(long ofx, long ofy);\nlong RotTransPers(SVECTOR*, long*, long*, long*);\nvoid SetGeomScreen(long h);\nvoid SetRotMatrix(MATRIX* m);\nMATRIX* RotMatrixX(long r, MATRIX* m);\nMATRIX* RotMatrixY(long r, MATRIX* m);\nMATRIX* RotMatrixZ(long r, MATRIX* m);\nMATRIX* TransMatrix(MATRIX* m, VECTOR* v);\nMATRIX* ScaleMatrix(MATRIX* m, VECTOR* v);\nvoid SetTransMatrix(MATRIX* m);\nlong RotTransPers4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* v10, long* v11, long* v12,\n    long* v13,\n    long* p,\n    long* flag\n);\nlong RotAverageNclip4(\n    SVECTOR* v0, SVECTOR* v1, SVECTOR* v2,\n    SVECTOR* v3,\n    long* sxy0, long* sxy1, long* sxy2,\n    long* sxy3,\n    long* p,\n    long* otz,\n    long* flag\n);\nvoid NormalColorCol(SVECTOR* v0,\n                    CVECTOR* v1,\n                    CVECTOR* v2\n);\nMATRIX* RotMatrixY(long r,\n                   MATRIX* m\n);\nvoid SetBackColor(long rbk, long gbk, long bbk);\nvoid SetColorMatrix(MATRIX* m);\nvoid SetLightMatrix(MATRIX* m);\nvoid SetTransMatrix(MATRIX* m);\nvoid SetFarColor(long rfc, long gfc, long bfc);\nvoid SetFogNear(long a, long h);\nextern long SquareRoot0(long a);\nextern long SquareRoot12(long a);\nextern int rcos(int a);\nextern int rsin(int a);\nextern long ratan2(long y, long x);\ntypedef void (*SpuIRQCallbackProc)(void);\ntypedef struct {\n    short left;\n    short right;\n} SpuVolume;\ntypedef struct {\n               unsigned long voice;\n               unsigned long mask;\n               SpuVolume volume;\n               SpuVolume volmode;\n               SpuVolume volumex;\n               unsigned short pitch;\n               unsigned short note;\n               unsigned short sample_note;\n               short envx;\n               unsigned long addr;\n               unsigned long loop_addr;\n               long a_mode;\n               long s_mode;\n               long r_mode;\n               unsigned short ar;\n               unsigned short dr;\n               unsigned short sr;\n               unsigned short rr;\n               unsigned short sl;\n               unsigned short adsr1;\n               unsigned short adsr2;\n} SpuVoiceAttr;\ntypedef struct {\n    unsigned long mask;\n    long mode;\n    SpuVolume depth;\n    long delay;\n    long feedback;\n} SpuReverbAttr;\nextern long SpuSetTransferMode(long mode);\nextern unsigned long SpuWrite(unsigned char* addr, unsigned long size);\nextern long SpuSetReverbModeParam(SpuReverbAttr* attr);\nextern void SpuSetVoiceAttr(SpuVoiceAttr* arg);\nextern void SpuSetKey(long on_off, unsigned long voice_bit);\nextern long SpuMallocWithStartAddr(unsigned long addr, long size);\nextern SpuIRQCallbackProc SpuSetIRQCallback(SpuIRQCallbackProc);\nextern void SsSeqClose(short seq_access_num);\nextern void SsSetMVol(short voll, short volr);\nextern void SsSetSerialAttr(char s_num, char attr, char mode);\nextern void SsSetSerialVol(short s_num, short voll, short volr);\nextern long SpuClearReverbWorkArea(long rev_mode\n);\nvoid SsInitHot(void);\nchar SsSetReservedVoice(char voices\n);\nvoid SsSetTickMode(long tick_mode\n);\nvoid SsStart(void);\nshort SsUtKeyOnV(\n    short voice,\n    short vabId,\n    short prog,\n    short tone,\n    short note,\n    short fine,\n    short voll,\n    short volr\n);\nshort SsUtSetVVol(short vc,\n                  short voll,\n                  short volr\n);\nvoid SpuGetAllKeysStatus(char* status);\nvoid SsSetTableSize(\n    char* table,\n    short s_max,\n    short t_max\n);\nvoid SsSeqStop(short seq_access_num\n);\nvoid SsSetMono(void);\nvoid SsSetStereo(void);\ns32 SsVabOpenHeadSticky(\n    u_char* addr,\n    u_long vabid,\n    u_long sbaddr\n);\ns32 SsVabTransBodyPartly(\n    u_char* addr,\n    u_long bufsize,\n    u_long vabid\n);\ns32 SsVabTransCompleted(\n    short immediateFlag\n);\nvoid SsUtSetReverbType(short type);\nvoid SsUtReverbOn(void);\nvoid SsUtSetReverbDepth(\n    short ldepth,\n    short rdepth\n);\nvoid SsUtSetReverbDelay(short delay);\ntypedef long Event;\ntypedef enum {\n    PRIM_NONE,\n    PRIM_TILE,\n    PRIM_LINE_G2,\n    PRIM_G4,\n    PRIM_GT4,\n    PRIM_GT3,\n    PRIM_SPRT,\n    PRIM_ENV,\n    PRIM_TILE_ALT = PRIM_TILE | 0x10,\n    PRIM_LINE_G2_ALT = PRIM_LINE_G2 | 0x10,\n    PRIM_G4_ALT = PRIM_G4 | 0x10\n} PrimitiveType;\ntypedef struct Vertex {\n              u8 r;\n              u8 g;\n              u8 b;\n              u8 p;\n              s16 x;\n              s16 y;\n              u8 u;\n              u8 v;\n              u16 param;\n} Vertex;\ntypedef struct {\n               SVECTOR* v0;\n               SVECTOR* v1;\n               SVECTOR* v2;\n               SVECTOR* v3;\n} SVEC4;\ntypedef struct {\n    s16 x;\n    s16 y;\n    u8 u;\n    u8 v;\n    u16 param;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 p;\n} VertexFake;\ntypedef struct Prim {\n    struct Prim* next;\n    struct Vertex v[4];\n} Prim;\ntypedef struct Primitive {\n               struct Primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               s16 x2;\n               s16 y2;\n               u8 u2;\n               u8 v2;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               s16 x3;\n               s16 y3;\n               u8 u3;\n               u8 v3;\n               u16 drawMode;\n} Primitive;\ntypedef struct FakePrim {\n    struct FakePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 w;\n               u8 h;\n               u16 clut;\n               f32 posX;\n               f32 posY;\n               f32 velocityX;\n               f32 velocityY;\n               s16 x2;\n               s16 y2;\n               s16 delay;\n               u16 priority;\n               f32 accelerationX;\n               f32 accelerationY;\n               s16 timer;\n               u16 drawMode;\n} FakePrim;\ntypedef struct PrimLineG2 {\n    struct PrimLineG2* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               s16 xLength;\n               s16 yLength;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               f32 velocityX;\n               f32 velocityY;\n               s32 angle;\n               s16 delay;\n               u16 priority;\n               f32 preciseX;\n               f32 preciseY;\n               s16 timer;\n               u16 drawMode;\n} PrimLineG2;\ntypedef struct {\n    struct primitive* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               u8 u0;\n               u8 v0;\n               u16 clut;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 p1;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 p2;\n               f32 y1_f32;\n               s16 unk24;\n               u16 priority;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 p3;\n               f32 y1_f32_velocity;\n               s16 unk30;\n               u16 drawMode;\n} draculaPrimitive;\ntypedef struct AxePrim {\n    struct AxePrim* next;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 type;\n               s16 x0;\n               s16 y0;\n               s32 unk0C;\n               s32 unk10;\n               s16 x1;\n               s16 y1;\n               u8 u1;\n               u8 v1;\n               u16 tpage;\n               s16 unk1C;\n              s16 unk1E;\n               s16 x2;\n               s16 y2;\n               u8 step;\n               u16 priority;\n               s32 pad;\n               s16 timer;\n               s16 unk2E;\n               s16 unk30;\n               u16 drawMode;\n} AxePrim;\nstruct Entity;\ntypedef void (*PfnEntityUpdate)(struct Entity*);\ntypedef union {\n    s32 unk;\n    void* ptr;\n    struct {\n        s8 unk0, unk1, unk2, unk3;\n    } S8;\n    struct {\n        u8 unk0, unk1, unk2, unk3;\n    } U8;\n    struct {\n        s16 unk0, unk2;\n    } S16;\n    struct {\n        u16 unk0, unk2;\n    } U16;\n} Multi;\ntypedef union {\n    s16 s;\n    u16 u;\n    struct {\n        s8 unk0, unk1;\n    } S8;\n    struct {\n        u8 unk0, unk1;\n    } U8;\n} Multi16;\nstruct Entity;\ntypedef struct ET_Generic {\n               Multi16 unk7C;\n    union {\n                   u16 modeU16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeU8;\n    } unk7E;\n    union {\n                   s32 modeS32;\n                   struct Entity* entityPtr;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n        } modeS8;\n    } unk80;\n               Multi unk84;\n               Multi unk88;\n    union {\n                   struct Entity* entityPtr;\n                   struct Primitive* primPtr;\n                   s32 modeS32;\n        struct {\n                       u16 unk0;\n                       u16 unk2;\n        } modeU16;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk8C;\n               s16 unk90;\n               s16 unk92;\n               u8 unk94;\n               u8 unk95;\n               s16 unk96;\n               s32 unk98;\n               struct Entity* unk9C;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               u8 unkAC;\n               s8 unkAD;\n               s8 unkAE;\n               s8 unkAF;\n               s16 unkB0;\n               s16 unkB2;\n               s16 unkB4;\n               s16 unkB6;\n    union {\n                   void (*unkFuncB8)(struct Entity*);\n                   struct Entity* entityPtr;\n        struct {\n                       u8 unk0;\n                       u8 unk1;\n                       u8 unk2;\n                       u8 unk3;\n        } modeU8;\n    } unkB8;\n} ET_Generic;\ntypedef struct {\n               u16 timer;\n               s16 unk7E;\n               u8 aliveTimer;\n               s8 unk81;\n               s16 unk82;\n               s32 fallSpeed;\n               s16 gravity;\n               s16 unk8A;\n               s16 iconSlot;\n               s16 unk8E;\n               s16 unk90;\n               s16 unk92;\n               s32 castleFlag;\n} ET_EquipItemDrop;\ntypedef struct {\n               u32 unk[14];\n               u16 unkB4;\n               s16 unkB6;\n               PfnEntityUpdate update;\n} ET_HeartDrop;\ntypedef struct {\n               u16 timer;\n               u16 size;\n               u32 speed;\n} ET_BloodDroplets;\ntypedef struct {\n               u16 nPrims;\n               u16 nDigits;\n               u8 digits[4];\n               u16 timer;\n               s16 unk86;\n               u16 unk88;\n               s16 unk8A;\n} ET_NumericDamage;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u16 sparkleCycle;\n    u16 sparkleAnim;\n    u32 unk84;\n    u32 unk88;\n    s16 iconSlot;\n    u16 unk8E;\n    u16 floatTimer;\n    u16 unk92;\n    s32 yFloatSpeed;\n} ET_RelicOrb;\ntypedef struct {\n               u32 unused7C;\n               s16 unused80;\n               s16 unk82;\n               s16 angle;\n               s16 unk86;\n               u8 sideToPlayer;\n               u8 showedMessage;\n} ET_Door;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               struct Primitive* unk84;\n               struct Primitive* unk88;\n               struct Primitive* unk8C;\n               s16 unk90;\n               s16 unk92;\n} ET_StagePopup;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               struct Primitive* unk84;\n               struct Primitive* unk88;\n               u8 unk8C;\n} ET_StagePopupJP;\ntypedef struct {\n               char* label;\n               u16 width;\n               u16 height;\n               s16 unk84;\n               u16 duration;\n} ET_MessageBox;\ntypedef struct {\n               s16 lifetime;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               struct Entity* some_ent;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s32 accelerationX;\n               s32 accelerationY;\n               s32 unkA4;\n               s32 unkA8;\n               u8 anim;\n               u8 unkAD;\n               s16 equipId;\n} ET_Weapon;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    s32 unk80;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n} ET_KarmaCoin;\ntypedef struct {\n    s16 angle;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 xPos;\n    s16 unk8A;\n    struct Entity* parent;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 accelerationX;\n    s32 accelerationY;\n    s32 unkA4;\n    s32 unkA8;\n    u8 anim;\n    u8 unkAD;\n    s16 equipId;\n} ET_HeavenSword;\ntypedef struct {\n    s16 angle;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s32 unk84;\n    s16 xPos;\n    s16 unk8A;\n    struct Entity* parent;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 accelerationX;\n    s32 accelerationY;\n    s32 unkA4;\n    s32 unkA8;\n    u8 anim;\n    u8 unkAD;\n    s16 equipId;\n} ET_HeavenSword2;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               byte pad[10];\n               u8 anim;\n               u8 padAD;\n               s16 unkAE;\n} ET_Shield;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               u16 unk80;\n               s16 pal;\n               s16* palettePtr;\n               u16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               byte pad[14];\n               u8 anim;\n               u8 padAD;\n               s16 unkAE;\n} ET_DarkShield;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               struct Entity* target;\n               s16 unk94;\n               s16 unk96;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               byte pad[6];\n               s16 unkAE;\n} ET_MedusaShieldLaser;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n} ET_ShamanShieldStar;\ntypedef struct {\n               u8 unk7C;\n               u8 unk7D;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 childPalette;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 unk90;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               u8 unk9C;\n               byte pad[14];\n               u8 anim;\n               s16 unkAE;\n} ET_HeraldShieldSwirlEffect;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    s32 unk80;\n    s16 pad[21];\n    s16 foodId;\n} ET_Food;\ntypedef struct {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 attackMode;\n               u8 flag;\n               u8 nearDeath;\n               s32 speed;\n               s16 angle;\n               char pad_8E[0xE];\n               u8 pickupFlag;\n               u8 grabedAscending;\n} ET_GaibonSlogra;\ntypedef struct {\n               u16 angle;\n               u16 unk7E;\n               u16 unk80;\n               s16 unk82;\n} ET_SoulStealOrb;\ntypedef struct {\n               Primitive* primBg;\n               s32 unused80;\n               Primitive* primFade;\n               s32 unk88;\n} ET_WarpRoom;\ntypedef struct {\n               char pad_0[0x8];\n               u8 timer;\n               char pad_85[0x1];\n               s8 timer2;\n               char pad_87[0x5];\n               u16 palette;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_0[0x6];\n               s8 timer;\n               char pad_87[0x5];\n               s16 rotation;\n               char pad_8E[0x12];\n               u8 isUnderwater;\n               u8 ignoreCol;\n} ET_Merman_2;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               s16 unk8C;\n               s16 unk8E;\n               s32 unk90;\n               s32 unk94;\n               s32 unk98;\n               s16 unk9C;\n               s16 unk9E;\n               s32 unkA0;\n               struct Entity* target;\n               s16 unkA8;\n               s16 unkAA;\n               s16 cameraX;\n               s16 cameraY;\n               s16 unkB0;\n               s16 unkB2;\n               struct Entity* follow;\n} ET_Bat;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    struct Primitive* unk84;\n    s16 unk88;\n    s16 unk8A;\n} ET_BatEcho;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n               char pad_8A[0x3];\n               u8 unk8D;\n               char pad_8E[0xE];\n               s16 unk9C;\n               struct Entity* next;\n} ET_801CF254;\ntypedef struct {\n               char pad_0[0x4];\n               s16 unk80;\n               char pad_82[0xA];\n               u8 unk8C;\n               char pad_8D[0xF];\n               u16 unk9C;\n               char pad_9E[0x8];\n               s16 unkA6;\n} ET_GurkhaSword;\ntypedef struct ET_Dracula {\n               char pad_7C[4];\n               struct draculaPrimitive* unk80;\n               struct draculaPrimitive* unk84;\n               char pad_88[4];\n               s16 unk8C;\n               char pad_8E[0x2];\n               u8 unk90;\n               char pad91;\n               u8 unk92;\n               char pad93;\n               u8 unk94;\n               char pad_95[0x3];\n               s16 unk98;\n               char pad_9A[0x2];\n               s16 unk9C;\n               char pad_9E[0x2];\n               u8 unkA0;\n               u8 unkA1;\n               u8 unkA2;\n               char pad_A3[0x9];\n               struct Primitive* prim;\n} ET_Dracula;\ntypedef struct {\n               struct Primitive* prim;\n               s32 unk80;\n               s32 unk84;\n               s16 unk88;\n               char pad_8A[0x2];\n               s16 unk8C;\n               s16 unk8E;\n} ET_StageTitleCard;\ntypedef struct ET_Succubus {\n               char pad_7C[0x4];\n               s16 timer;\n               char pad_82[0x2];\n               u8 facingLeft;\n               u8 unk85;\n               u8 nextAttack;\n               u8 unk87;\n               u16 nextStep;\n               char pad_8A[0x4];\n               s16 yOffset;\n               char pad_90[0xC];\n               struct Entity* real;\n               s16 clonePosX;\n               s16 unkA2;\n} ET_Succubus;\ntypedef struct {\n               u16 timer;\n               char pad_7E[2];\n               s32 unk80;\n} ET_RoomTransition2;\ntypedef struct {\n               u8 pad0[0x4];\n               s32 unk80;\n               s16 unk84;\n               u8 pad86[2];\n               u8 unk88;\n               u8 unk89;\n} ET_801B3C38;\ntypedef struct {\n               u16 unk7C;\n} ET_801BCC4C;\ntypedef struct ET_CastleDoor {\n               struct Primitive* prim;\n               s16 timer;\n               char pad_82[0x2];\n               s16 rotZ;\n} ET_CastleDoor;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n               s16 unk82;\n               s16 timer;\n} ET_ShuttingWindow;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               u16 unk84;\n} ET_DeathSkySwirl;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s32 elevatorTarget;\n} ET_Elevator;\ntypedef struct {\n               s32 pad[8];\n               s16 unk84;\n               s16 unk86;\n               s16* unk88;\n} ET_801D0B40;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0xC];\n               u8 unk8C;\n               u8 unk8D;\n               char pad_8E[0xE];\n               u16 unk9C;\n} ET_801D1BB8;\ntypedef struct {\n               char pad_0[0xC];\n               u16 unk88;\n} ET_801D0B78;\ntypedef struct {\n               s32 unk7C;\n               s16 unk80;\n               s16 unk82;\n    union {\n                   s32 val;\n        struct {\n                       s16 unk0;\n                       s16 unk2;\n        } modeS16;\n    } unk84;\n               u16 unk88;\n} ET_WaterEffects;\ntypedef struct {\n               char pad_0[4];\n               s16 unk80;\n               char pad_82[2];\n               u8 unk84;\n               char pad_85[3];\n               u16 unk88;\n               char pad_8A[2];\n               u8 unk8C;\n               u8 unk8D;\n               u8 unk8E;\n               char pad_8E[13];\n               s16 rotZ;\n               s16 unk9E;\n               struct Entity* parent;\n               s16 unkA4;\n               s16 unkA6;\n               u8 unkA8;\n               char pad_A9[0x7];\n               u16 unkB0[0x6];\n} ET_GurkhaHammer;\ntypedef struct {\n               char pad_0[0x20];\n               s16 unk9C;\n               char pad_A0[0x6];\n               s16 unkA4;\n               s16 unkA6;\n               char pad_A8[0xC];\n               u16 unkB4;\n} ET_801CDFD8;\ntypedef struct {\n               char pad_0[0x8];\n               u8 unk84;\n               char pad_85[0x9];\n               u8 unk8E;\n               char pad_8F[0x20];\n               s16 unkB0;\n} ET_801CE4CC;\ntypedef struct {\n               struct Primitive* prim;\n               s16 unk80;\n} ET_TransparentWater;\ntypedef struct {\n               struct Primitive* prim;\n               s32 timer;\n} ET_HeartRoomGoldDoor;\ntypedef struct {\n               struct Primitive* prim;\n               char pad_80[0x4];\n               s8 unk84;\n               char pad_85[0x1];\n               s8 unk86;\n} ET_MermanWaterSplash;\ntypedef struct {\n               s32 playerVelocity;\n} ET_CastleDoorTransition;\ntypedef struct {\n               s8 unk7C;\n} ET_AlucardController;\ntypedef struct {\n               u16 unk7C;\n} ET_ForegroundTree;\ntypedef struct {\n               u16 unk7C;\n               u16 unk7E;\n               s16 unk80;\n} ET_FadeToWhite;\ntypedef struct {\n               u16 unk7C;\n} ET_DeathStolenItems;\ntypedef struct {\n               u16 unk7C;\n               char pad_7E[0x2];\n               s16 posX;\n               s16 posY;\n               u16 moveTimer;\n               u16 moveDirection;\n} ET_Death;\ntypedef struct {\n               u8 unk7C;\n               char pad_7D[0x3];\n               s16 unk80;\n               s16 unk82;\n               struct Entity* unk84;\n} ET_SpittleBone;\ntypedef struct {\n    Primitive* prim;\n    char pad[0x24];\n    s16 unkA4;\n    s16 unkA6;\n    char padd[4];\n    u8 anim;\n    char pad2[0x8];\n    struct Entity* unkB8;\n} ET_Player;\ntypedef struct {\n    u8 unk0;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n} ET_EntitySlot1;\ntypedef struct {\n    char pad[0x32];\n    s16 unkAE;\n} ET_EntitySlot16;\ntypedef struct {\n               s16 unk7C;\n} ET_Entity12;\ntypedef struct {\n    u8 fiveFrameCounter;\n    struct Entity* parent;\n    char pad[8];\n    u16 parentId;\n} ET_Entity13;\ntypedef struct {\n    s16 t;\n} ET_TimerOnly;\ntypedef struct {\n    char pad[8];\n    struct Primitive* prim;\n} ET_AxeKnight;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 unk80;\n               s16 unk82;\n               s16 unk84;\n               s16 unk86;\n               s16 unk88;\n               s16 unk8A;\n               struct Entity* parent;\n               s16 childId;\n               s16 unk92;\n               s16 unk94;\n               s16 unk96;\n               s16 unk98;\n               s16 unk9A;\n               s16 unk9C;\n               s16 unk9E;\n               s16 unkA0;\n               s16 unkA2;\n               s16 unkA4;\n               s16 unkA6;\n               s16 unkA8;\n               s16 unkAA;\n               s16 unkAC;\n               s16 unkAE;\n               s16 unkB0;\n               s16 unkB2;\n} ET_EntFactory;\ntypedef struct {\n    char pad[8];\n    s32 unk8;\n} unk_sub_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    byte pad[14];\n    unk_sub_8011E4BC* unk8C;\n} ET_8011E4BC;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_HellfireHandler;\ntypedef struct {\n    s16 stoneAngle;\n    s16 lifeTimer;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_ReboundStone;\ntypedef struct {\n    s16 timer;\n} ET_Vibhuti;\ntypedef struct {\n               s16 unk7C;\n               s16 unk7E;\n               s16 pad[24];\n               s16 unkB0;\n} ET_GiantSpinningCross;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_8017091C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 pad[0x16];\n    s16 unkB0;\n} ET_80170F64;\ntypedef struct {\n    s16 timer;\n    s16 size;\n} ET_stopwatchCircle;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    f32 unk84;\n    s32 unk88;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 unk96;\n    struct Entity* unk98;\n    s32 pad[5];\n    s16 unkB0;\n} ET_801719A4;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 unk96;\n    struct Entity* unk98;\n    s32 pad[5];\n    s16 unkB0;\n} ET_BibleSubwpn;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s32 unk84;\n    s32 unk88;\n    struct Entity* parent1;\n    s32 pad[10];\n    struct Entity* parent2;\n} ET_80128C2C;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n} ET_80161FF0;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n} ET_80162870;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n} ET_8016E9E4;\ntypedef struct {\n    u8 unk7C;\n    u8 unk7D[3];\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_801CC820;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    struct Primitive* unk88;\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n} ET_stopwatchSparkle;\ntypedef struct {\n    s16 t;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    f32 unk84;\n    f32 unk88;\n    s16 unk8C;\n    s16 unk8E;\n} ET_stopwatch;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n} ET_RichterPowerUpRing;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n} ET_TransparentWhiteCircle;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n} ET_HitByIce;\ntypedef struct {\n    s16 unk7C;\n    s16 pad7E;\n    s16 unk80;\n    s16 unk82;\n    byte pad84[12];\n    s16 unk90;\n    s16 unk92;\n    s16 unk94;\n    s16 pad96[3];\n    s16 unk9C;\n} ET_HitByLightning;\ntypedef struct {\n    s32 unk7C;\n    s32 unk80;\n    s32 unk84;\n    s32 unk88;\n    s32 unk8C;\n    s32 unk90;\n} ET_Teleport;\ntypedef struct {\n    s16 timer;\n    s16 angle;\n    s16 unk80;\n    s16 unk82;\n} ET_HolyWater;\ntypedef struct {\n    s16 timer;\n    s16 angle;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_HolyWaterFlame;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u8 unk80;\n    byte pad81;\n    u8 unk82;\n    byte pad83;\n    s32 unk84;\n} ET_CrashCross;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    u8 unk80;\n    byte pad81;\n    u8 unk82;\n    byte pad83;\n    s32 unk84;\n} ET_RicRevivalColumn;\ntypedef struct {\n    s16 timer;\n    s16 unk7E;\n    u16 unk80;\n    u16 pad82;\n    Point16* unk84;\n} ET_CrossBoomerang;\ntypedef struct {\n    f32 unk7C;\n    f32 unk80;\n    s16 unk84;\n    s16 unk86;\n    s32 unk88;\n    s16 unk8C;\n    s16 unk8E;\n    s32 unk90;\n    s32 unk94;\n    s32 unk98;\n    s32 unk9C;\n    s32 unkA0;\n    s16 unkA4;\n    s16 unkA6;\n    s32 unkA8;\n    s32 unkAC;\n    s16 unkB0;\n    s32 unkB4;\n    s32 unkB8;\n} ET_80166784;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s8 unk8A;\n    u8 unk8B[12];\n    s32 unk98;\n} ET_AguneaCrash;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s8 unk8A;\n    u8 unk8B[12];\n    s32 unk98;\n    s32 unk9C;\n    u16 unkA0;\n} ET_AxeCrash;\ntypedef struct {\n    s32 pad7c;\n    Primitive* unk80;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    struct Entity* parent;\n    s16 unk90;\n} ET_801291C4;\ntypedef struct {\n    s16 timer;\n    u16 unk7E;\n    s16 unk80;\n    s16 pad82;\n    s32 unk84;\n    s32 unk88;\n    u16 unk8C;\n} ET_VibhutiCrash;\ntypedef struct {\n    PrimLineG2* lines[4];\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n} ET_8016D9C4;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_8016DF74;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    byte pad[46];\n    s16 unkB0;\n} ET_8016E46C;\ntypedef struct {\n    struct Primitive* prim1;\n    struct Primitive* prim2;\n    struct Primitive* prim3;\n    struct Primitive* prim4;\n    s16 unk8C;\n    s16 unk8E;\n} ET_801AF774;\ntypedef struct {\n    s32 unk7C;\n    s16 timer;\n    s16 unk82;\n    s16 unk84;\n} ET_DracFinal;\ntypedef struct {\n    byte pad[0x18];\n    s32 unk94;\n} ET_Drop;\ntypedef struct {\n               byte pad[4];\n               s16 angle;\n               byte pad2[2];\n               u8 switch_control;\n               u8 speed;\n} ET_BigRedFireball;\ntypedef struct {\n    s16 timer;\n    s16 spawnTimer;\n} ET_SummonSpirit;\ntypedef struct {\n    struct Primitive* prim;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n} ET_3DBackgroundhouse;\ntypedef struct {\n    struct Primitive* prim1;\n    struct Primitive* prim2;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n} ET_LifeUpSpawn;\ntypedef struct {\n    u16 unk7C;\n    u16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    u16 unk88;\n    u16 unk8A;\n} ET_801B0AA4;\ntypedef struct {\n    byte pad[4];\n    u16 unk80;\n    u16 unk82;\n    s16 unk84;\n    s16 unk86;\n    s16 unk88;\n    s16 unk8A;\n    u8 unk8C;\n} ET_Owl;\ntypedef struct {\n    u16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n    u16 unk88;\n    s16 unk8A;\n    s16 unk8C;\n    s16 unk8E;\n} ET_AlucardWaterEffect;\ntypedef struct {\n    s32 pad;\n    s16 timer;\n} ET_801B28E4;\ntypedef struct {\n    u32 unk24[10];\n    u8 unk28;\n    u8 unk29;\n} ET_80123B40;\ntypedef struct {\n    struct Entity* ent;\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    s16 unk86;\n} ET_80129864;\ntypedef struct {\n    s16 timer;\n    s16 pad;\n    s16 xCurrent;\n    s16 yCurrent;\n    s16 xTarget;\n    s16 yTarget;\n} ET_Mist;\ntypedef struct {\n    s32 unk7C;\n    s16 unk80;\n    s16 unk82;\n    s32 un84;\n    s16 unk88;\n    s16 unk8A;\n    s32 unk8C;\n    s16 unk90;\n    s16 unk92;\n    s32 unk94;\n    s16 unk98;\n    s16 unk9A;\n    s16 unk9C;\n} ET_PlayerBlink;\ntypedef struct {\n    struct Primitive* prim;\n    s16 unk80;\n    s16 pad82;\n    s32 pad84;\n    s32 pad88;\n    struct Primitive* prim2;\n    struct Primitive* prim3;\n} ET_BloodSplatter;\ntypedef struct {\n    s32 pad7c;\n    s16 timer;\n    s16 pad82;\n    s32 pad84;\n    s32 pad88;\n    s32 pad8C;\n    s16 brightness;\n} ET_PlayerOutline;\ntypedef struct {\n    u8 digits[4];\n    s16 unk80;\n    s16 unk82;\n    s16 unk84;\n    u16 unk86;\n    u16 unk88;\n    u16 unk8A;\n    s16 unk8C;\n    s16 unk8E;\n    s16 unk90;\n    s16 unk92;\n    s16 angleToMeter;\n    s16 distToMeter;\n    s16 unk98;\n} ET_HPNumberMove;\ntypedef struct {\n    s16 timer;\n    s16 pad1;\n    s16 halfWidth;\n    s16 halfHeight;\n    s32 pad2;\n    s16 angle;\n    s16 pad3;\n    s32 pad4;\n    s32 str_x;\n    s32 str_y;\n    s32 unk98;\n} ET_GuardText;\ntypedef struct {\n    s16 unk7C;\n    s16 unk7E;\n    s16 unk80;\n} ET_Dissolve;\ntypedef union {\n    struct Primitive* prim;\n    char stub[0x40];\n    ET_TimerOnly timer;\n    ET_EntFactory factory;\n    ET_Generic generic;\n    ET_EntitySlot1 entSlot1;\n    ET_EntitySlot16 entSlot16;\n    ET_Entity12 ent12;\n    ET_Entity13 ent13;\n    ET_8011E4BC et_8011E4BC;\n    ET_HellfireHandler hellfireHandler;\n    ET_ReboundStone reboundStone;\n    ET_8016D9C4 et_8016D9C4;\n    ET_8016E46C et_8016E46C;\n    ET_8016DF74 et_8016DF74;\n    ET_CrossBoomerang crossBoomerang;\n    ET_Vibhuti vibhuti;\n    ET_HolyWater holywater;\n    ET_HolyWaterFlame holywaterflame;\n    ET_CrashCross crashcross;\n    ET_AguneaCrash aguneaCrash;\n    ET_AxeCrash axeCrash;\n    ET_VibhutiCrash vibhutiCrash;\n    ET_RicRevivalColumn ricColumn;\n    ET_GiantSpinningCross giantcross;\n    ET_EquipItemDrop equipItemDrop;\n    ET_HeartDrop heartDrop;\n    ET_BloodDroplets bloodDroplets;\n    ET_BloodSplatter bloodSplatter;\n    ET_NumericDamage ndmg;\n    ET_RelicOrb relicOrb;\n    ET_Door door;\n    ET_StagePopup stpopup;\n    ET_StagePopupJP stpopupj;\n    ET_MessageBox messageBox;\n    ET_Weapon weapon;\n    ET_Shield shield;\n    ET_DarkShield darkShield;\n    ET_KarmaCoin karmacoin;\n    ET_HeavenSword heavenSword;\n    ET_HeavenSword2 heavenSword2;\n    ET_MedusaShieldLaser medshieldlaser;\n    ET_ShamanShieldStar shamanshieldstar;\n    ET_HeraldShieldSwirlEffect heraldSwirl;\n    ET_Food food;\n    ET_HitByIce hitbyice;\n    ET_HitByLightning hitbylightning;\n    ET_PlayerBlink playerBlink;\n    ET_Mist mist;\n    ET_Bat bat;\n    ET_BatEcho batEcho;\n    ET_SoulStealOrb soulStealOrb;\n    ET_GaibonSlogra GS_Props;\n    ET_WarpRoom warpRoom;\n    ET_Teleport teleport;\n    ET_Merman merman;\n    ET_Merman_2 merman2;\n    ET_MermanWaterSplash mermanWaterSplash;\n    ET_80128C2C et_80128C2C;\n    ET_801291C4 et_801291C4;\n    ET_8017091C et_8017091C;\n    ET_80170F64 et_80170F64;\n    ET_stopwatchCircle et_stopwatchCircle;\n    ET_stopwatchSparkle et_stopWatchSparkle;\n    ET_stopwatch stopwatch;\n    ET_80161FF0 et_80161FF0;\n    ET_80162870 et_80162870;\n    ET_80166784 et_80166784;\n    ET_RichterPowerUpRing ricPowerRing;\n    ET_TransparentWhiteCircle whiteCircle;\n    ET_8016E9E4 et_8016E9E4;\n    ET_801719A4 et_801719A4;\n    ET_BibleSubwpn et_BibleSubwpn;\n    ET_801CF254 et_801CF254;\n    ET_GurkhaSword gurkhaSword;\n    ET_Dracula dracula;\n    ET_DracFinal dracFinalForm;\n    ET_Succubus succubus;\n    ET_StageTitleCard stageTitleCard;\n    ET_RoomTransition2 roomTransition2;\n    ET_801B3C38 et38;\n    ET_801BCC4C et_801BCC4C;\n    ET_ShuttingWindow shuttingWindow;\n    ET_CastleDoor castleDoor;\n    ET_DeathSkySwirl deathSkySwirl;\n    ET_Elevator elevator;\n    ET_801D0B40 et_801D0B40;\n    ET_801D1BB8 et_801D1BB8;\n    ET_801D0B78 et_801D0B78;\n    ET_WaterEffects waterEffects;\n    ET_GurkhaHammer GH_Props;\n    ET_801CE4CC et_801CE4CC;\n    ET_801CDFD8 et_801CDFD8;\n    ET_TransparentWater transparentWater;\n    ET_HeartRoomGoldDoor heartRoomGoldDoor;\n    ET_CastleDoorTransition castleDoorTransition;\n    ET_AlucardController alucardController;\n    ET_ForegroundTree foregroundTree;\n    ET_FadeToWhite fadeToWhite;\n    ET_DeathStolenItems deathStolenItems;\n    ET_Death death;\n    ET_SpittleBone spittleBone;\n    ET_Player player;\n    ET_801CC820 et_801CC820;\n    ET_801AF774 et_801AF774;\n    ET_Drop drop;\n    ET_BigRedFireball bigredfireball;\n    ET_SummonSpirit summonspirit;\n    ET_3DBackgroundhouse bghouse;\n    ET_LifeUpSpawn lifeUpSpawn;\n    ET_AxeKnight axeknight;\n    ET_801B0AA4 et_801B0AA4;\n    ET_Owl owl;\n    ET_AlucardWaterEffect aluwater;\n    ET_80123B40 et_80123B40;\n    ET_80129864 et_80129864;\n    ET_801B28E4 et_801B28E4;\n    ET_PlayerOutline playerOutline;\n    ET_HPNumberMove hpNumMove;\n    ET_GuardText guardText;\n    ET_Dissolve dissolve;\n} Ext;\ntypedef enum {\n    Game_Init,\n    Game_Title,\n    Game_Play,\n    Game_GameOver,\n    Game_NowLoading,\n    Game_VideoPlayback,\n    Game_Unk6,\n    Game_PrologueEnd,\n    Game_MainMenu,\n    Game_Ending,\n    Game_Boot,\n    Game_99 = 99,\n} GameState;\ntypedef enum {\n    STAGE_NO0 = 0x00,\n    STAGE_NO1 = 0x01,\n    STAGE_LIB = 0x02,\n    STAGE_CAT = 0x03,\n    STAGE_NO2 = 0x04,\n    STAGE_CHI = 0x05,\n    STAGE_DAI = 0x06,\n    STAGE_NP3 = 0x07,\n    STAGE_CEN = 0x08,\n    STAGE_NO4 = 0x09,\n    STAGE_ARE = 0x0A,\n    STAGE_TOP = 0x0B,\n    STAGE_NZ0 = 0x0C,\n    STAGE_NZ1 = 0x0D,\n    STAGE_WRP = 0x0E,\n    STAGE_NO1_ALT = 0x0F,\n    STAGE_NO0_ALT = 0x10,\n    STAGE_DRE = 0x12,\n    STAGE_NZ0_DEMO = 0x13,\n    STAGE_NZ1_DEMO = 0x14,\n    STAGE_LIB_DEMO = 0x15,\n    STAGE_BO7 = 0x16,\n    STAGE_MAR = 0x17,\n    STAGE_BO6 = 0x18,\n    STAGE_BO5 = 0x19,\n    STAGE_BO4 = 0x1A,\n    STAGE_BO3 = 0x1B,\n    STAGE_BO2 = 0x1C,\n    STAGE_BO1 = 0x1D,\n    STAGE_BO0 = 0x1E,\n    STAGE_ST0 = 0x1F,\n    STAGE_RNO0 = STAGE_NO0 | 0x20,\n    STAGE_RNO1 = STAGE_NO1 | 0x20,\n    STAGE_RLIB = STAGE_LIB | 0x20,\n    STAGE_RCAT = STAGE_CAT | 0x20,\n    STAGE_RNO2 = STAGE_NO2 | 0x20,\n    STAGE_RCHI = STAGE_CHI | 0x20,\n    STAGE_RDAI = STAGE_DAI | 0x20,\n    STAGE_RNO3 = STAGE_NP3 | 0x20,\n    STAGE_RCEN = STAGE_CEN | 0x20,\n    STAGE_RNO4 = STAGE_NO4 | 0x20,\n    STAGE_RARE = STAGE_ARE | 0x20,\n    STAGE_RTOP = STAGE_TOP | 0x20,\n    STAGE_RNZ0 = STAGE_NZ0 | 0x20,\n    STAGE_RNZ1 = STAGE_NZ1 | 0x20,\n    STAGE_RWRP = STAGE_WRP | 0x20,\n    STAGE_RNZ1_DEMO = 0x35,\n    STAGE_RBO8 = 0x36,\n    STAGE_RBO7 = 0x37,\n    STAGE_RBO6 = 0x38,\n    STAGE_RBO5 = 0x39,\n    STAGE_RBO4 = 0x3A,\n    STAGE_RBO3 = 0x3B,\n    STAGE_RBO2 = 0x3C,\n    STAGE_RBO1 = 0x3D,\n    STAGE_RBO0 = 0x3E,\n    STAGE_MAD = 0x40,\n    STAGE_NO3 = 0x41,\n    STAGE_IWA_LOAD = 0x42,\n    STAGE_IGA_LOAD = 0x43,\n    STAGE_HAGI_LOAD = 0x44,\n    STAGE_SEL = 0x45,\n    STAGE_TE1 = 0x46,\n    STAGE_TE2 = 0x47,\n    STAGE_TE3 = 0x48,\n    STAGE_TE4 = 0x49,\n    STAGE_TE5 = 0x4A,\n    STAGE_TOP_ALT = 0x4B,\n    STAGE_EU_WARNING = 0x70,\n    STAGE_ENDING = 0xFE,\n    STAGE_MEMORYCARD = 0xFF,\n} Stages;\ntypedef enum {\n    Play_Reset = 0,\n    Play_Init,\n    Play_PrepareDemo,\n    Play_Default,\n    Play_PrepareNextStage,\n    Play_LoadStageChr,\n    Play_WaitStageChr,\n    Play_LoadStageSfx,\n    Play_WaitStageSfx,\n    Play_LoadStagePrg,\n    Play_WaitStagePrg,\n    Play_16 = 16,\n    Gameover_Init = 0,\n    Gameover_AllocResources,\n    Gameover_2,\n    Gameover_3,\n    Gameover_4,\n    Gameover_5,\n    Gameover_6,\n    Gameover_7,\n    Gameover_8,\n    Gameover_9,\n    Gameover_10,\n    Gameover_11,\n    Gameover_Alt = 99,\n    Gameover_Init_Alt,\n    Gameover_AllocResources_Alt,\n    Gameover_2_Alt,\n    Gameover_3_Alt,\n    Gameover_11_Alt = 111,\n    NowLoading_2 = 2,\n} GameSteps;\ntypedef enum {\n    Demo_None,\n    Demo_PlaybackInit,\n    Demo_Recording,\n    Demo_End,\n    Demo_Playback,\n} DemoMode;\ntypedef enum {\n    TIMEATTACK_INVALID = -1,\n    TIMEATTACK_GET_RECORD,\n    TIMEATTACK_SET_RECORD,\n    TIMEATTACK_SET_VISITED,\n} TimeAttackActions;\ntypedef enum {\n    TIMEATTACK_EVENT_DRACULA_DEFEAT,\n    TIMEATTACK_EVENT_ORLOX_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_10_DEFEAT,\n    TIMEATTACK_EVENT_GRANFALOON_DEFEAT,\n    TIMEATTACK_EVENT_MINOTAUR_WEREWOLF_DEFEAT,\n    TIMEATTACK_EVENT_SCYLLA_DEFEAT,\n    TIMEATTACK_EVENT_SLOGRA_GAIBON_DEFEAT,\n    TIMEATTACK_EVENT_HYPPOGRYPH_DEFEAT,\n    TIMEATTACK_EVENT_BEELZEBUB_DEFEAT,\n    TIMEATTACK_EVENT_SUCCUBUS_DEFEAT,\n    TIMEATTACK_EVENT_KARASUMAN_DEFEAT,\n    TIMEATTACK_EVENT_RALPH_GRANT_SYPHA_DEFEAT,\n    TIMEATTACK_EVENT_DEATH_DEFEAT,\n    TIMEATTACK_EVENT_CERBERUS_DEFEAT,\n    TIMEATTACK_EVENT_SAVE_RICHTER,\n    TIMEATTACK_EVENT_MEDUSA_DEFEAT,\n    TIMEATTACK_EVENT_THE_CREATURE_DEFEAT,\n    TIMEATTACK_EVENT_LESSER_DEMON_DEFEAT,\n    TIMEATTACK_EVENT_DOPPLEGANGER_40_DEFEAT,\n    TIMEATTACK_EVENT_AKMODAN_II_DEFEAT,\n    TIMEATTACK_EVENT_DARKWING_BAT_DEFEAT,\n    TIMEATTACK_EVENT_GALAMOTH_DEFEAT,\n    TIMEATTACK_EVENT_FINAL_SAVEPOINT,\n    TIMEATTACK_EVENT_MEET_DEATH,\n    TIMEATTACK_EVENT_GET_HOLYGLASSES,\n    TIMEATTACK_EVENT_MEET_MASTER_LIBRARIAN,\n    TIMEATTACK_EVENT_FIRST_MARIA_MEET,\n    NUM_TIMEATTACK_EVENTS,\n    TIMEATTACK_EVENT_UNUSED_28,\n    TIMEATTACK_EVENT_UNUSED_29,\n    TIMEATTACK_EVENT_UNUSED_30,\n    TIMEATTACK_EVENT_UNUSED_31,\n    TIMEATTACK_EVENT_END,\n    TIMEATTACK_EVENT_INVALID = 0xFF,\n} TimeAttackEvents;\nstruct Entity;\ntypedef struct {\n              s32 x;\n              s32 y;\n} Point32;\ntypedef struct {\n               u8 vabid;\n               u8 prog;\n               u8 note;\n               s8 volume;\n               u8 unk4;\n               u8 tone;\n               u8 unk6;\n} Unkstruct_800BF554;\ntypedef struct {\n               u_long* desc;\n               u_long* data;\n               u16 unk8;\n               u16 index;\n               u16 unkC;\n               u16 unkE;\n               u8 unkArray[0x30];\n} Unkstruct_8006C3C4;\ntypedef struct {\n               char pad0[0x14];\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Unkstruct_8010BF64;\ntypedef struct {\n               s16 sndId;\n               u16 unk02;\n               s16 unk04;\n} SfxRingBufferItem;\ntypedef struct {\n               s32 unk0;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n} Unkstruct_800EA5E4;\ntypedef struct {\n    s32 unk0;\n    s32 unk4;\n    s32 unk8;\n    s32 unkC;\n} Unkstruct_800FDB18;\ntypedef struct Unkstruct_801C6C6C {\n    union {\n        struct {\n            u16 w;\n            u16 x;\n        } c;\n        s32 p;\n    } x;\n    union {\n        struct {\n            u16 h;\n            u16 y;\n        } c;\n        s32 p;\n    } y;\n} Unkstruct_801C6C6C;\ntypedef struct {\n    u16 start;\n    s16 current;\n    s16* coords;\n    s16 unk8;\n} Unkstruct_80102CD8;\ntypedef struct {\n              s16 animSet;\n              s16 unk2;\n              u16 palette;\n              s8 drawMode;\n              char pad_7;\n              s32 unk8;\n} Unkstruct_80180FE0;\ntypedef struct Unkstruct_801C7954 {\n               u16 x1;\n               u16 x0;\n               u16 y2;\n               u16 y0;\n               u16 y3;\n               u16 y1;\n               u16 x3;\n               u16 x2;\n} Unkstruct_801C7954;\ntypedef struct {\n    u8 unk0[7];\n    u8 unk8;\n    u8 pad2[8];\n    u8 unk16[1];\n    u8 pad3[5];\n    u32 unk18;\n} Unkstruct_800ADEF0;\ntypedef struct {\n    u16 palette;\n    u8 unk2;\n} Unkstruct_800AE180;\ntypedef struct {\n                     s32 D_800973F8;\n                     s32 D_800973FC;\n                     s32 unk0;\n                     s32 unk4;\n                     Multi g_zEntityCenter;\n                     s32 unkC;\n                     s32 BottomCornerTextTimer;\n                     s32 BottomCornerTextPrims;\n                     s32 unk18;\n                     s32 unk1C;\n                     s32 unk20;\n                     s32 unk24;\n                     s32 D_80097428[8];\n} unkGraphicsStruct;\ntypedef struct {\n    u8 count;\n    u8 r;\n    u8 g;\n    u8 b;\n    u8 w;\n    u8 h;\n    u16 priority;\n    u16 drawMode;\n    s16 unkA;\n    u32 flags;\n} unkStr_8011E4BC;\ntypedef struct {\n    s32 : 32;\n    s16 unk4;\n    s16 unk6;\n    s16 unk8;\n    s16 unkA;\n    s16 unkC;\n    s32 unk10;\n    s32 unk14;\n    s32 unk18;\n} Unkstruct_8012BEF8;\ntypedef struct {\n    u8 childId;\n    u8 unk1;\n    u8 unk2;\n    u8 unk3;\n    u8 unk4;\n    u8 unk5;\n} FactoryBlueprint;\ntypedef struct {\n    s16 xOffset;\n    s16 yOffset;\n    s32 velocityX;\n    s32 velocityY;\n    s16 timerInit;\n    s16 tpage;\n    s16 clut;\n    u8 uBase;\n    u8 vBase;\n} unkStr80154E5C;\ntypedef struct {\n    s32 unk0;\n    s16 unk4;\n} unkstr_800cfe48;\ntypedef struct {\n    f32 x;\n    f32 y;\n} Pos;\ntypedef struct {\n    f32 posX;\n    f32 posY;\n} Camera;\ntypedef struct {\n    unsigned char width;\n    unsigned char height;\n    unsigned short unk2;\n    unsigned char data[0];\n} ImgSrc;\ntypedef struct {\n             u32 gfxOff;\n             u32 ovlOff;\n             u32 ovlLen;\n             u32 vhOff;\n             u32 vhLen;\n             u32 vbLen;\n             u32 unk18;\n             const char* gfxName;\n             const char* ovlName;\n             const char* name;\n             u8 unk28;\n             s8 seqIdx;\n             u16 unk2A;\n} Lba;\ntypedef struct {\n               s16 cursorX;\n               s16 cursorY;\n               s16 cursorW;\n               s16 cursorH;\n               RECT unk1;\n               s16 w;\n               s16 h;\n               s16 unk14;\n               s16 unk16;\n               s16 otIdx;\n               s16 unk1A;\n               u8 unk1C;\n               u8 unk1D;\n} MenuContext;\ntypedef struct {\n              u8 tileLayoutId;\n              u8 tilesetId;\n              u8 objGfxId;\n              u8 objLayoutId;\n} RoomLoadDef;\ntypedef struct {\n    RoomLoadDef* def;\n} RoomLoadDefHolder;\ntypedef struct {\n              u8 left;\n              u8 top;\n              u8 right;\n              u8 bottom;\n              RoomLoadDef load;\n} RoomHeader;\ntypedef struct {\n              u16 x;\n              u16 y;\n              u16 roomId;\n              u16 unk6;\n              u16 stageId;\n} RoomTeleport;\ntypedef struct {\n               s32 x;\n               s32 y;\n               Stages stageId;\n               TimeAttackEvents eventId;\n               s32 unk10;\n} RoomBossTeleport;\ntypedef struct {\n              u16 pressed;\n              s16 previous;\n              u16 tapped;\n              u16 repeat;\n} Pad;\ntypedef struct {\n    u16 duration;\n    u16 unk2;\n} AnimationFrame;\ntypedef struct {\n    s8 unk0;\n    s8 unk2;\n    s8 hitboxWidth;\n    s8 hitboxHeight;\n} FrameProperty;\ntypedef enum {\n    Player_Stand,\n    Player_Walk,\n    Player_Crouch,\n    Player_Fall,\n    Player_Jump,\n    Player_MorphBat,\n    Player_AlucardStuck,\n    Player_MorphMist,\n    Player_HighJump,\n    Player_UnmorphBat,\n    Player_Hit,\n    Player_StatusStone,\n    Player_BossGrab,\n    Player_KillWater,\n    Player_UnmorphMist,\n    Player_SwordWarp,\n    Player_Kill,\n    Player_Unk17,\n    Player_Teleport,\n    Player_FlameWhip,\n    Player_Hydrostorm,\n    Player_ThousandBlades,\n    Player_RichterFourHolyBeasts,\n    Player_Slide,\n    Player_MorphWolf,\n    Player_UnmorphWolf,\n    Player_SlideKick,\n    Player_Unk27,\n    Player_SpellDarkMetamorphosis = 32,\n    Player_SpellSummonSpirit,\n    Player_SpellHellfire,\n    Player_SpellTetraSpirit,\n    Player_Spell36,\n    Player_SpellSoulSteal,\n    Player_Unk38,\n    Player_SpellSwordBrothers,\n    Player_AxearmorStand,\n    Player_AxearmorWalk,\n    Player_AxearmorJump,\n    Player_AxearmorHit,\n    Player_Unk48 = 48,\n    Player_Unk49,\n    Player_Unk50\n} PlayerSteps;\ntypedef struct Entity {\n               f32 posX;\n               f32 posY;\n               s32 velocityX;\n               s32 velocityY;\n               s16 hitboxOffX;\n               s16 hitboxOffY;\n               u16 facingLeft;\n               u16 palette;\n               u8 drawMode;\n               u8 drawFlags;\n               s16 rotX;\n               s16 rotY;\n               s16 rotZ;\n               s16 rotPivotX;\n               s16 rotPivotY;\n               u16 zPriority;\n               u16 entityId;\n               PfnEntityUpdate pfnUpdate;\n               u16 step;\n               u16 step_s;\n               u16 params;\n               u16 entityRoomIndex;\n               s32 flags;\n               s16 unk38;\n               u16 enemyId;\n               u16 hitboxState;\n               s16 hitPoints;\n               s16 attack;\n               s16 attackElement;\n               u16 unk44;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               u8 hitFlags;\n               u8 nFramesInvincibility;\n               s16 unk4A;\n               AnimationFrame* unk4C;\n               u16 animFrameIdx;\n               s16 animFrameDuration;\n               s16 animSet;\n               s16 animCurFrame;\n               s16 stunFrames;\n               u16 unk5A;\n               struct Entity* unk5C;\n               struct Entity* unk60;\n               s32 primIndex;\n               u16 unk68;\n               u16 hitEffect;\n               u8 unk6C;\n               u8 unk6D[11];\n               s32 unk78;\n               Ext ext;\n} Entity;\ntypedef struct {\n               u16 animSet;\n               u16 zPriority;\n               Multi16 unk4;\n               u16 palette;\n               u16 drawFlags;\n               u16 drawMode;\n               u32 unkC;\n               u8* unk10;\n} ObjInit2;\ntypedef struct GpuBuffer {\n                  struct GpuBuffer* next;\n                  DRAWENV draw;\n                  DISPENV disp;\n                  DR_ENV env[0x10];\n                  u_long ot[0x200];\n                  DR_MODE drawModes[0x400];\n                  POLY_GT4 polyGT4[0x300];\n                  POLY_G4 polyG4[0x100];\n                  POLY_GT3 polyGT3[0x30];\n                  LINE_G2 lineG2[0x100];\n                  SPRT_16 sprite16[0x280];\n                  TILE tiles[0x100];\n                  SPRT sprite[0x200];\n} GpuBuffer;\ntypedef struct {\n               u32 drawModes;\n               u32 gt4;\n               u32 g4;\n               u32 gt3;\n               u32 line;\n               u32 sp16;\n               u32 tile;\n               u32 sp;\n               u32 env;\n} GpuUsage;\ntypedef enum {\n    GFX_BANK_NONE,\n    GFX_BANK_4BPP,\n    GFX_BANK_8BPP,\n    GFX_BANK_16BPP,\n    GFX_BANK_COMPRESSED,\n} GfxBankKind;\ntypedef struct {\n               u_long* xy;\n               u_long* wh;\n               u_long* data;\n} GfxEntry;\ntypedef struct {\n    GfxBankKind kind;\n    GfxEntry entries[0];\n} GfxBank;\ntypedef struct {\n              GfxEntry* next;\n              u16 kind;\n              s16 unk6;\n              s16 unk8;\n              s16 unkA;\n} GfxLoad;\ntypedef enum EquipKind {\n    EQUIP_HAND,\n    EQUIP_HEAD,\n    EQUIP_ARMOR,\n    EQUIP_CAPE,\n    EQUIP_ACCESSORY,\n    NUM_EQUIP_KINDS,\n} EquipKind;\ntypedef enum {\n    ITEM_S_SWORD,\n    ITEM_SWORD,\n    ITEM_THROW_1,\n    ITEM_FIST,\n    ITEM_CLUB,\n    ITEM_TWOHAND,\n    ITEM_FOOD,\n    ITEM_BOMB,\n    ITEM_THROW_2,\n    ITEM_SHIELD,\n    ITEM_MEDICINE,\n    ITEM_END,\n} ItemCategory;\ntypedef enum {\n    SUBWPN_NONE,\n    SUBWPN_DAGGER,\n    SUBWPN_AXE,\n    SUBWPN_HOLYWATER,\n    SUBWPN_CROSS,\n    SUBWPN_BIBLE,\n    SUBWPN_STOPWATCH,\n    SUBWPN_REBNDSTONE,\n    SUBWPN_VIBHUTI,\n    SUBWPN_AGUNEA\n} SubWpnID;\ntypedef enum { STAT_STR, STAT_CON, STAT_INT, STAT_LCK } Stats;\ntypedef struct {\n    s32 level;\n    s32 exp;\n    s32 unk8;\n} FamiliarStats;\ntypedef enum {\n    RELIC_SOUL_OF_BAT,\n    RELIC_FIRE_OF_BAT,\n    RELIC_ECHO_OF_BAT,\n    RELIC_FORCE_OF_ECHO,\n    RELIC_SOUL_OF_WOLF,\n    RELIC_POWER_OF_WOLF,\n    RELIC_SKILL_OF_WOLF,\n    RELIC_FORM_OF_MIST,\n    RELIC_POWER_OF_MIST,\n    RELIC_GAS_CLOUD,\n    RELIC_CUBE_OF_ZOE,\n    RELIC_SPIRIT_ORB,\n    RELIC_GRAVITY_BOOTS,\n    RELIC_LEAP_STONE,\n    RELIC_HOLY_SYMBOL,\n    RELIC_FAERIE_SCROLL,\n    RELIC_JEWEL_OF_OPEN,\n    RELIC_MERMAN_STATUE,\n    RELIC_BAT_CARD,\n    RELIC_GHOST_CARD,\n    RELIC_FAERIE_CARD,\n    RELIC_DEMON_CARD,\n    RELIC_SWORD_CARD,\n    RELIC_JP_0,\n    RELIC_JP_1,\n    RELIC_HEART_OF_VLAD,\n    RELIC_TOOTH_OF_VLAD,\n    RELIC_RIB_OF_VLAD,\n    RELIC_RING_OF_VLAD,\n    RELIC_EYE_OF_VLAD,\n    NUM_RELICS,\n} RelicIds;\ntypedef enum {\n    SPELL_DARK_METAMORPHOSIS,\n    SPELL_SUMMON_SPIRIT,\n    SPELL_HELLFIRE,\n    SPELL_TETRA_SPIRIT,\n    SPELL_WOLF_CHARGE,\n    SPELL_SOUL_STEAL,\n    SPELL_WING_SMASH,\n    SPELL_SWORD_BROTHERS,\n    NUM_SPELLS,\n} SpellIds;\ntypedef enum {\n    FAM_STATS_BAT,\n    FAM_STATS_GHOST,\n    FAM_STATS_FAERIE,\n    FAM_STATS_DEMON,\n    FAM_STATS_SWORD,\n    FAM_STATS_YOUSEI,\n    FAM_STATS_NOSE_DEMON,\n    NUM_FAMILIARS\n} FamiliarStatsIds;\ntypedef enum {\n    FAM_ACTIVE_NONE,\n    FAM_ACTIVE_BAT = FAM_STATS_BAT + 1,\n    FAM_ACTIVE_GHOST = FAM_STATS_GHOST + 1,\n    FAM_ACTIVE_FAERIE = FAM_STATS_FAERIE + 1,\n    FAM_ACTIVE_DEMON = FAM_STATS_DEMON + 1,\n    FAM_ACTIVE_SWORD = FAM_STATS_SWORD + 1,\n    FAM_ACTIVE_YOUSEI = FAM_STATS_YOUSEI + 1,\n    FAM_ACTIVE_NOSE_DEMON = FAM_STATS_NOSE_DEMON + 1,\n} FamiliarActiveIds;\ntypedef struct {\n                   u8 relics[30];\n                   u8 spells[NUM_SPELLS];\n                   u8 equipHandCount[169];\n                   u8 equipBodyCount[90];\n                   u8 equipHandOrder[169];\n                   u8 equipBodyOrder[90];\n                   u8 saveName[12];\n                   u32 spellsLearnt;\n                   s32 hp;\n                   s32 hpMax;\n                   s32 hearts;\n                   s32 heartsMax;\n                   s32 mp;\n                   s32 mpMax;\n                   s32 statsBase[4];\n                   s32 statsEquip[4];\n                   s32 statsTotal[4];\n                   u32 level;\n                   u32 exp;\n                   s32 gold;\n                   s32 killCount;\n                   u32 D_80097BF8;\n                   u32 subWeapon;\n                   u32 equipment[7];\n                   u32 attackHands[2];\n                   s32 defenseEquip;\n                   u16 defenseElement;\n                   u16 D_80097C2A;\n                   u16 D_80097C2C;\n                   u16 D_80097C2E;\n                   s32 timerHours;\n                   s32 timerMinutes;\n                   s32 timerSeconds;\n                   s32 timerFrames;\n                   u32 D_80097C40;\n                   FamiliarStats statsFamiliars[NUM_FAMILIARS];\n} PlayerStatus;\ntypedef struct {\n                         s32 cursorMain;\n                         s32 cursorRelic;\n                         s32 cursorEquip;\n                         s32 cursorEquipType[NUM_EQUIP_KINDS];\n                         s32 scrollEquipType[NUM_EQUIP_KINDS];\n                         s32 cursorSpells;\n                         s32 cursorSettings;\n                         s32 cursorCloak;\n                         s32 cursorButtons;\n                         s32 cursorWindowColors;\n                         s32 cursorTimeAttack;\n} MenuNavigation;\ntypedef struct {\n                            u32 buttonConfig[8];\n                            u16 buttonMask[8];\n                            s32 timeAttackRecords[TIMEATTACK_EVENT_END];\n                            s32 cloakColors[6];\n                            s32 windowColors[3];\n                            s32 equipOrderTypes[ITEM_END];\n                            s32 isCloakLiningReversed;\n                            s32 isSoundMono;\n                            s32 D_8003CB00;\n                            s32 D_8003CB04;\n} GameSettings;\ntypedef struct {\n               u8 Magic[2];\n               u8 Type;\n               u8 BlockEntry;\n               u8 Title[64];\n               u8 reserve[28];\n               u8 Clut[32];\n               u8 Icon[3][128];\n} MemcardHeader;\ntypedef struct {\n               char name[12];\n               s32 level;\n               s32 gold;\n               s32 playHours;\n               s32 playMinutes;\n               s32 playSeconds;\n               s32 cardIcon;\n               s32 endGameFlags;\n               s16 stage;\n               u16 nRoomsExplored;\n               u16 roomX;\n               u16 roomY;\n               s32 character;\n               s32 saveSize;\n} SaveInfo;\ntypedef struct {\n                MemcardHeader header;\n                SaveInfo info;\n                PlayerStatus status;\n                MenuNavigation menuNavigation;\n                GameSettings settings;\n                u8 castleFlags[0x300];\n                u8 castleMap[0x800];\n                 s32 rng;\n} SaveData;\ntypedef struct {\n               u8* gfxPage;\n               u8* gfxIndex;\n               u8* clut;\n               u8* collision;\n} TileDefinition;\ntypedef struct {\n               u32 left : 6;\n               u32 top : 6;\n               u32 right : 6;\n               u32 bottom : 6;\n               u8 params : 8;\n} LayoutRect;\ntypedef struct {\n               u16* layout;\n               TileDefinition* tileDef;\n               LayoutRect rect;\n               u16 zPriority;\n               u16 flags;\n} LayerDef;\ntypedef struct {\n    LayerDef* fg;\n    LayerDef* bg;\n} RoomDef;\ntypedef struct {\n               s16 x;\n               s16 y;\n               s16 width;\n               s16 height;\n               s16 clut;\n               s16 tpage;\n               s16 texLeft;\n               s16 texTop;\n               s16 texRight;\n               s16 texBottom;\n} Sprite;\ntypedef struct {\n             s16 flags;\n             s16 offsetx;\n             s16 offsety;\n             s16 width;\n             s16 height;\n             s16 clut;\n             s16 tileset;\n             s16 left;\n             s16 top;\n             s16 right;\n             s16 bottom;\n} SpritePart;\ntypedef struct {\n             u16 count;\n             SpritePart parts[0];\n} SpriteParts;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*HitDetection)(void);\n                   void (*UpdateRoomPosition)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   SpriteParts** spriteBanks;\n                   u_long** cluts;\n                   void* objLayoutHorizontal;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*UpdateStageEntities)(void);\n                   u8** unk2c;\n                   u8** unk30;\n                   s32* unk34;\n                   s32* unk38;\n                   void (*StageEndCutScene)(void);\n} Overlay;\ntypedef struct {\n                   void (*Update)(void);\n                   void (*HitDetection)(void);\n                   void (*UpdateRoomPosition)(void);\n                   void (*InitRoomEntities)(s32 layoutId);\n                   RoomHeader* rooms;\n                   SpriteParts** spriteBanks;\n                   u_long** cluts;\n                   void* objLayoutHorizontal;\n                   RoomDef* tileLayers;\n                   GfxBank** gfxBanks;\n                   void (*UpdateStageEntities)(void);\n} AbbreviatedOverlay;\ntypedef enum {\n    EFFECT_SOLID = 1 << 0,\n    EFFECT_UNK_0002 = 1 << 1,\n    EFFECT_QUICKSAND = 1 << 2,\n    EFFECT_WATER = 1 << 3,\n    EFFECT_MIST_ONLY = 1 << 4,\n    EFFECT_UNK_0020 = 1 << 5,\n    EFFECT_SOLID_FROM_ABOVE = 1 << 6,\n    EFFECT_SOLID_FROM_BELOW = 1 << 7,\n    EFFECT_UNK_0100 = 1 << 8,\n    EFFECT_UNK_0200 = 1 << 9,\n    EFFECT_UNK_0400 = 1 << 10,\n    EFFECT_UNK_0800 = 1 << 11,\n    EFFECT_UNK_1000 = 1 << 12,\n    EFFECT_UNK_2000 = 1 << 13,\n    EFFECT_UNK_4000 = 1 << 14,\n    EFFECT_UNK_8000 = 1 << 15,\n    EFFECT_NOTHROUGH = EFFECT_SOLID | EFFECT_QUICKSAND,\n    EFFECT_NOTHROUGH_PLUS = EFFECT_SOLID | EFFECT_UNK_0002 | EFFECT_QUICKSAND,\n    EFFECT_UNK_C000 = EFFECT_UNK_8000 | EFFECT_UNK_4000\n} ColliderEffectFlags;\ntypedef struct Collider {\n               u32 effects;\n               s32 unk4;\n               s32 unk8;\n               s32 unkC;\n               s32 unk10;\n               s32 unk14;\n               s32 unk18;\n               s32 unk1C;\n               s32 unk20;\n} Collider;\ntypedef struct XaMusicConfig {\n    u32 cd_addr;\n    s32 unk228;\n    u8 filter_file;\n    u8 filter_channel_id;\n    u8 volume;\n    u8 unk22f;\n    u8 unk230;\n    u8 pad[3];\n} XaMusicConfig;\ntypedef struct {\n               const char* name;\n               s16 hitPoints;\n               s16 attack;\n               u16 attackElement;\n               s16 defense;\n               u16 hitboxState;\n               u16 weaknesses;\n               u16 strengths;\n               u16 immunes;\n               u16 absorbs;\n               u16 level;\n               u16 exp;\n               u16 rareItemId;\n               u16 uncommonItemId;\n               u16 rareItemDropRate;\n               u16 uncommonItemDropRate;\n               u8 hitboxWidth;\n               u8 hitboxHeight;\n               s32 flags;\n} EnemyDef;\ntypedef struct {\n               s16 attack;\n               s16 heartCost;\n               u16 attackElement;\n               u8 unk6;\n               u8 nFramesInvincibility;\n               u16 stunFrames;\n               u8 anim;\n               u8 blueprintNum;\n               u16 hitboxState;\n               u16 hitEffect;\n               u8 crashId;\n               u8 unk11;\n               u16 entityRoomIndex;\n} SubweaponDef;\ntypedef struct {\n               const char* name;\n               const char* description;\n               s16 attack;\n               s16 defense;\n               u16 element;\n               u8 itemCategory;\n               u8 weaponId;\n               u8 palette;\n               u8 unk11;\n               u8 playerAnim;\n               u8 unk13;\n               u8 unk14;\n               u8 lockDuration;\n               u8 chainLimit;\n               u8 unk17;\n               u8 specialMove;\n               u8 isConsumable;\n               u8 enemyInvincibilityFrames;\n               u8 unk1B;\n               u32 comboSub;\n               u32 comboMain;\n               u16 mpUsage;\n               u16 stunFrames;\n               u16 hitType;\n               u16 hitEffect;\n               u16 icon;\n               u16 iconPalette;\n               u16 criticalRate;\n               u16 unk32;\n} Equipment;\ntypedef struct {\n             const char* name;\n             const char* description;\n             s16 attBonus;\n             s16 defBonus;\n             u8 statsBonus[4];\n             u16 unk10;\n             u16 unk12;\n             u16 unk14;\n             u16 unk16;\n             u16 icon;\n             u16 iconPalette;\n             u16 equipType;\n             u16 unk1E;\n} Accessory;\ntypedef struct {\n               const char* name;\n               const char* combo;\n               const char* description;\n               u8 mpUsage;\n               s8 nFramesInvincibility;\n               s16 stunFrames;\n               s16 hitboxState;\n               s16 hitEffect;\n               s16 entityRoomIndex;\n               u16 attackElement;\n               s16 attack;\n               s16 unk1A;\n} SpellDef;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 unk08;\n               u16 unk0A;\n               s32 unk0C;\n} RelicDesc;\ntypedef struct {\n               const char* name;\n               const char* desc;\n               u16 icon;\n               u16 iconPalette;\n               u16 unk0C;\n               u16 unk0E;\n} RelicOrb;\ntypedef struct {\n               const char* nextCharDialogue;\n               s16 startX;\n               s16 nextLineY;\n               s16 startY;\n               s16 nextCharX;\n               s16 nextLineX;\n               s16 nextCharY;\n               s16 portraitAnimTimer;\n               u16 unk12;\n               u16 clutIndex;\n               u8 nextCharTimer;\n               u8 unk17;\n               Primitive* prim[6];\n               s32 primIndex[3];\n               u16 unk3C;\n               u16 timer;\n               const char* unk40;\n} Dialogue;\ntypedef struct {\n    u32 effects;\n    u32 damageKind;\n    s32 damageTaken;\n    s32 unkC;\n} DamageParam;\ntypedef struct {\n                   Overlay o;\n                   void (*FreePrimitives)(s32);\n                   s16 (*AllocPrimitives)(PrimitiveType type, s32 count);\n                   void (*CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\n                   void (*func_80102CD8)(s32 arg0);\n                   void (*UpdateAnim)(\n        FrameProperty* frameProps, AnimationFrame** anims);\n                   void (*SetSpeedX)(s32 value);\n                   Entity* (*GetFreeEntity)(s16 start, s16 end);\n                   void (*GetEquipProperties)(\n        s32 handId, Equipment* res, s32 equipId);\n                   s32 (*func_800EA5E4)(u32);\n                   void (*LoadGfxAsync)(s32 gfxId);\n                   void (*PlaySfx)(s32 sfxId);\n                   s16 (*func_800EDB58)(s32, s32);\n                   void (*func_800EA538)(s32 arg0);\n                   void (*g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\n                   void (*func_801027C4)(u32 arg0);\n                   void (*func_800EB758)(\n        s16 pivotX, s16 pivotY, Entity* e, u16 flags, POLY_GT4* p, u8 flipX);\n                   Entity* (*CreateEntFactoryFromEntity)(\n        Entity* self, u32 flags, s32 arg2);\n                   bool (*func_80131F68)(void);\n                   DR_ENV* (*func_800EDB08)(POLY_GT4* poly);\n                   u16* (*func_80106A28)(u32 arg0, u16 kind);\n                   void (*func_80118894)(Entity*);\n                   EnemyDef* enemyDefs;\n                   Entity* (*func_80118970)(void);\n                   s16 (*func_80118B18)(\n        Entity* ent1, Entity* ent2, s32 facingLeft);\n                   s32 (*UpdateUnarmedAnim)(s8* frameProps, u16** frames);\n                   void (*PlayAnimation)(s8*, AnimationFrame** frames);\n                   void (*func_80118C28)(s32 arg0);\n                   void (*func_8010E168)(s32 arg0, s16 arg1);\n                   void (*func_8010DFF0)(s32 arg0, s32 arg1);\n                   u16 (*DealDamage)(\n        Entity* enemyEntity, Entity* attackerEntity);\n                   void (*LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\n                   Equipment* equipDefs;\n                   Accessory* accessoryDefs;\n                   void (*AddHearts)(s32 value);\n                   bool (*LoadMonsterLibrarianPreview)(s32 monsterId);\n                   s32 (*TimeAttackController)(\n        TimeAttackEvents eventId, TimeAttackActions action);\n                   void* (*func_8010E0A8)(void);\n                   void (*func_800FE044)(s32, s32);\n                   void (*AddToInventory)(u32 id, EquipKind kind);\n                   RelicOrb* relicDefs;\n                   void (*InitStatsAndGear)(bool debugMode);\n                   s32 (*func_80134714)(s32 arg0, s32 arg1, s32 arg2);\n                   s32 (*func_80134678)(s16 arg0, u16 arg1);\n                   void (*func_800F53A4)(void);\n                   u32 (*CheckEquipmentItemCount)(u32 itemId, u32 equipType);\n                   void (*func_8010BF64)(Unkstruct_8010BF64* arg0);\n                   void (*func_800F1FC4)(s32 arg0);\n                   void (*func_800F2288)(s32 arg0);\n                   void (*func_8011A3AC)(\n        Entity* entity, s32 spellId, s32 arg2, FamiliarStats* out);\n                   s32 (*func_800FF460)(s32 arg0);\n                   s32 (*func_800FF494)(EnemyDef* arg0);\n                   bool (*CdSoundCommandQueueEmpty)(void);\n                   bool (*func_80133950)(void);\n                   bool (*func_800F27F4)(s32 arg0);\n                   s32 (*func_800FF110)(s32 arg0);\n                   s32 (*func_800FD664)(s32 arg0);\n                   s32 (*func_800FD5BC)(DamageParam* arg0);\n                   void (*LearnSpell)(s32 spellId);\n                   void (*DebugInputWait)(const char* str);\n                   void* unused12C;\n                   void* unused130;\n                   void* unused134;\n                   void* unused138;\n                   void* unused13C;\n} GameApi;\ntypedef struct {\n    void (*D_8013C000)(void);\n    void (*D_8013C004)(void);\n    void (*D_8013C008)(void);\n    void (*D_8013C00C)(void);\n} PlayerOvl;\nextern PlayerOvl g_PlOvl;\nextern u8** g_PlOvlAluBatSpritesheet[1];\nextern u8* g_PlOvlSpritesheet[];\nextern void (*g_api_FreePrimitives)(s32);\nextern s16 (*g_api_AllocPrimitives)(PrimitiveType type, s32 count);\nextern void (*g_api_CheckCollision)(s32 x, s32 y, Collider* res, s32 unk);\nextern void (*g_api_func_80102CD8)(s32 arg0);\nextern void (*g_api_UpdateAnim)(FrameProperty* frameProps, s32* arg1);\nextern void (*g_api_SetSpeedX)(s32 value);\nextern Entity* (*g_api_GetFreeEntity)(s16 start, s16 end);\nextern void (*g_api_GetEquipProperties)(\n    s32 handId, Equipment* res, s32 equipId);\nextern s32 (*g_api_func_800EA5E4)(u32);\nextern void (*g_api_LoadGfxAsync)(s32);\nextern void (*g_api_PlaySfx)(s32 sfxId);\nextern s16 (*g_api_func_800EDB58)(s32, s32);\nextern void (*g_api_func_800EA538)(s32 arg0);\nextern void (*g_api_g_pfn_800EA5AC)(u16 arg0, u8 arg1, u8 arg2, u8 arg3);\nextern Entity* (*g_api_CreateEntFactoryFromEntity)(\n    Entity* self, u32 flags, s32 arg2);\nextern bool (*g_api_func_80131F68)(void);\nextern DR_ENV* (*g_api_func_800EDB08)(POLY_GT4* poly);\nextern u16* (*g_api_func_80106A28)(u16 arg0, u16 kind);\nextern void (*g_api_func_80118894)(Entity*);\nextern EnemyDef* g_api_enemyDefs;\nextern u32 (*g_api_UpdateUnarmedAnim)(s8* frameProps, u16** frames);\nextern void (*g_api_PlayAnimation)(s8*, AnimationFrame** frames);\nextern void (*g_api_func_8010E168)(s32 arg0, s16 arg1);\nextern void (*g_api_func_8010DFF0)(s32 arg0, s32 arg1);\nextern u16 (*g_api_DealDamage)(Entity* enemyEntity, Entity* attackerEntity);\nextern void (*g_api_LoadEquipIcon)(s32 equipIcon, s32 palette, s32 index);\nextern Equipment* g_api_equipDefs;\nextern Accessory* g_api_g_AccessoryDefs;\nextern void (*g_api_AddHearts)(s32 value);\nextern s32 (*g_api_TimeAttackController)(\n    TimeAttackEvents eventId, TimeAttackActions action);\nextern void* (*g_api_func_8010E0A8)(void);\nextern void (*g_api_func_800FE044)(s32, s32);\nextern void (*g_api_AddToInventory)(u16 id, EquipKind kind);\nextern RelicOrb* g_api_relicDefs;\nextern s32 (*g_api_func_80134714)(s32 arg0, s32 arg1, s32 arg2);\nextern s32 (*g_api_func_80134678)(s16 arg0, u16 arg1);\nextern void (*g_api_func_800F53A4)(void);\nextern u32 (*g_api_CheckEquipmentItemCount)(u32 itemId, u32 equipType);\nextern void (*g_api_func_8010BF64)(Unkstruct_8010BF64* arg0);\nextern void (*g_api_func_800F1FC4)(s32 arg0);\nextern void (*g_api_func_800F2288)(s32 arg0);\nextern void (*g_api_func_8011A3AC)(\n    Entity* entity, s32 spellId, s32 arg2, FamiliarStats* out);\nextern s32 (*g_api_func_800FF460)(s32 arg0);\nextern s32 (*g_api_func_800FF494)(EnemyDef* arg0);\nextern bool (*g_api_CdSoundCommandQueueEmpty)(void);\nextern bool (*g_api_func_80133950)(void);\nextern bool (*g_api_func_800F27F4)(s32 arg0);\nextern s32 (*g_api_func_800FF110)(s32 arg0);\nextern s32 (*g_api_func_800FD664)(s32 arg0);\nextern s32 (*g_api_func_800FD5BC)(DamageParam* arg0);\nextern void (*g_api_LearnSpell)(s32 spellId);\nextern void (*g_api_func_800E2438)(const char* str);\ntypedef struct {\n               u16** frames;\n               s8* frameProps;\n               u16 palette;\n               u16 soundId;\n               u8 frameStart;\n               u8 soundFrame;\n               s16 unused;\n} WeaponAnimation;\ntypedef struct {\n                        u16* layout;\n                        TileDefinition* tileDef;\n                        f32 scrollX;\n                        f32 scrollY;\n                        u32 unused10;\n                        u32 unused14;\n                        u32 order;\n                        u32 flags;\n                        u32 w;\n                        u32 h;\n                        u32 hideTimer;\n                        u32 scrollKind;\n} BgLayer;\ntypedef struct {\n                   u16* fg;\n                   TileDefinition* tileDef;\n                   f32 scrollX;\n                   f32 scrollY;\n                   s32 unused10;\n                   s32 unused14;\n                   s32 order;\n                   u32 flags;\n                   s32 hSize;\n                   s32 vSize;\n                   u32 hideTimer;\n                   s32 left;\n                   s32 top;\n                   s32 right;\n                   s32 bottom;\n                   s32 x;\n                   s32 y;\n                   s32 width;\n                   s32 height;\n                   s32 unk30;\n                   s32 D_800730D4;\n                   BgLayer bg[16];\n} Tilemap;\ntypedef struct {\n                     u16 flags;\n                     u16 unk2;\n                     u16 unk4;\n                     s16 zPriority;\n} FgLayer;\ntypedef struct {\n                   Collider colliders[4];\n                   Collider colliders2[4];\n                   Collider colliders3[14];\n                   s32 padPressed;\n                   s32 padTapped;\n                   s32 padHeld;\n                   u32 padSim;\n                   s32 D_80072EF8;\n                   s32 D_80072EFC;\n                   s16 D_80072F00[16];\n                   s32 pl_vram_flag;\n                   s32 unk04;\n                   s32 unk08;\n                   u32 unk0C;\n                   s32 unk10;\n                   u32 unk14;\n                   s32 unk18;\n                   s32 unk1C;\n                   s32 unk20;\n                   s32 unk24;\n                   s32 unk28;\n                   s32 unk2C;\n                   s32 unk30;\n                   s32 unk34;\n                   s32 unk38;\n                   s32 unk3C;\n                   u16 unk40;\n                   u16 pl_high_jump_timer;\n                   u16 unk44;\n                   u16 unk46;\n                   u16 unk48;\n                   s16 unk4A;\n                   u16 unk4C;\n                   u16 unk4E;\n                   u16 unk50;\n                   u16 unk52;\n                   u16 unk54;\n                   u16 unk56;\n                   u16 unk58;\n                   u16 damageTaken;\n                   u16 unk5C;\n                   u16 unk5E;\n                   u16 unk60;\n                   u16 unk62;\n                   u16 unk64;\n                   u16 unk66;\n                   u16 unk68;\n                   u16 unk6A;\n                   u16 unk6C;\n                   u16 unk6E;\n                   u16 unk70;\n                   u16 unk72;\n                   u32 unk74;\n                   u16 unk78;\n                   u16 unk7A;\n                   u16 unk7C;\n                   u16 unk7E;\n} PlayerState;\ntypedef struct {\n               RECT rect0;\n               RECT rect1;\n               RECT rect2;\n               u8 r0;\n               u8 g0;\n               u8 b0;\n               u8 enableColorBlend;\n               u8 r1;\n               u8 g1;\n               u8 b1;\n               u8 tpage;\n               u8 r2;\n               u8 g2;\n               u8 b2;\n               u8 flipX;\n               u8 r3;\n               u8 g3;\n               u8 b3;\n               u8 unk27;\n} PlayerDraw;\ntypedef struct {\n    s16 buttonsCorrect;\n    s16 timer;\n} ButtonComboState;\nextern s32 D_8003925C;\nextern s32 g_IsTimeAttackUnlocked;\nextern u8 g_CastleFlags[0x300];\nextern s32 D_8003C0EC[4];\nextern s32 D_8003C0F8;\nextern s32 D_8003C100;\nextern u16 g_ClutIds[];\nextern s32 D_8003C704;\nextern FgLayer D_8003C708;\nextern s16 D_8003C710;\nextern s16 D_8003C712;\nextern s32 D_8003C728;\nextern s32 D_8003C730;\nextern GameState g_GameState;\nextern s32 D_8003C738;\nextern s32 D_8003C73C;\nextern u32 D_8003C744;\nextern u32 g_RoomCount;\nextern GameApi g_api;\nextern s32 D_8003C8B8;\nextern u32 g_GameTimer;\nextern bool D_8003C908;\nextern s32 g_EquippedWeaponIds[2];\nextern u32 g_Timer;\nextern s32 g_MapCursorTimer;\n                 extern s32 g_PlayableCharacter;\n                 extern u32 D_8003C9A4;\n                 extern MenuNavigation g_MenuNavigation;\n                 extern GameSettings g_Settings;\nextern GpuBuffer g_GpuBuffers[2];\nextern s16 g_GpuBuffers_1_buf_draw_clip_y;\nextern const char g_MemcardSavePath[];\nextern const char aBaslus00067dra[19];\nextern const char g_strMemcardRootPath[];\nextern s32 g_LoadFile;\nextern s32 D_8006BB00;\nextern u8 g_CastleMap[0x800];\nextern s32 D_8006C374;\nextern s32 D_8006C378;\nextern GpuBuffer* g_CurrentBuffer;\nextern Point32 D_8006C384;\nextern Point32 D_8006C38C;\nextern u32 g_CdStep;\nextern s32 D_8006C3AC;\nextern s32 g_backbufferX;\nextern s32 g_backbufferY;\nextern s32 g_IsUsingCd;\nextern Entity* g_CurrentEntity;\nextern Unkstruct_8006C3C4 D_8006C3C4[32];\nextern s32 g_Servant;\nextern u16 g_Clut[0x3000];\nextern u16 D_8006EBCC[0x1000];\nextern u16 D_8006EBE0;\nextern s16 D_800705CC[];\nextern u32 D_80070BCC;\nextern PlayerState g_Player;\nextern Entity* D_psp_091CF3A0;\nextern s32 D_psp_091CF3A4;\nextern void (*D_psp_091CF3A8)(Entity*);\nextern s32 D_psp_091CF3AC;\nextern u16 D_psp_091CF3DC;\nextern GfxLoad g_GfxLoad[0x10];\nextern u32 g_GameStep;\nextern s32 g_ServantLoaded;\nextern Event g_EvSwCardEnd;\nextern Event g_EvSwCardErr;\nextern Event g_EvSwCardTmo;\nextern s32 g_PrevScrollX;\nextern Event g_EvSwCardNew;\nextern s32 g_PrevScrollY;\nextern s32 D_80073080;\nextern Tilemap g_Tilemap;\nextern Entity g_Entities[256];\nextern s32 g_entityDestroyed[18];\nextern Event g_EvHwCardEnd;\nextern Event g_EvHwCardErr;\nextern Event g_EvHwCardTmo;\nextern Event g_EvHwCardNew;\nextern u8 g_Pix[4][128 * 128 / 2];\nextern Primitive g_PrimBuf[0x500];\nextern s32 g_PlayerX;\nextern s32 g_PlayerY;\nextern u32 g_randomNext;\nextern s32 D_80096ED8[];\nextern s8 D_80097B98;\nextern s8 D_80097B99;\nextern s32 D_800973EC;\nextern unkGraphicsStruct g_unkGraphicsStruct;\nextern s32 D_80097448[];\nextern s32 D_80097450;\nextern Pos D_80097488;\nextern Pad g_pads[2];\nextern Stages g_StageId;\nextern s32 D_800974A4;\nextern DR_ENV D_800974AC[16];\nextern s32 g_UseDisk;\nextern s32 D_800978B4;\nextern s32 D_800978C4;\nextern u32 g_MenuStep;\nextern char D_80097902[];\nextern s32 D_80097904;\nextern s32 g_ScrollDeltaX;\nextern s32 g_ScrollDeltaY;\nextern s32 D_80097910;\nextern DemoMode g_DemoMode;\nextern s32 g_LoadOvlIdx;\nextern s32 D_8009791C;\nextern s32 D_80097920;\nextern s32 D_80097924;\nextern s32 D_80097928;\nextern GpuUsage g_GpuUsage;\nextern PlayerStatus g_Status;\nextern s32 D_80097C98;\nextern s32 subWeapon;\nextern u8 g_SaveName[12] ;\nextern u32 D_80097C40[];\nextern PlayerDraw g_PlayerDraw[0x10];\nextern s32 D_800987B4;\nextern s32 D_800987C8;\nextern s32 g_DebugPlayer;\nextern s32 D_80098894;\ntypedef enum ItemSlots {\n    LEFT_HAND_SLOT,\n    RIGHT_HAND_SLOT,\n    HEAD_SLOT,\n    ARMOR_SLOT,\n    CAPE_SLOT,\n    ACCESSORY_1_SLOT,\n    ACCESSORY_2_SLOT,\n    NUM_ITEM_SLOTS,\n} ItemSlots;\ntypedef enum HandItems {\n                ITEM_EMPTY_HAND,\n                ITEM_MONSTER_VIAL_1,\n                ITEM_MONSTER_VIAL_2,\n                ITEM_MONSTER_VIAL_3,\n                ITEM_SHIELD_ROD,\n                ITEM_LEATHER_SHIELD,\n                ITEM_KNIGHT_SHIELD,\n                ITEM_IRON_SHIELD,\n                ITEM_AXELORD_SHIELD,\n                ITEM_HERALD_SHIELD,\n                ITEM_DARK_SHIELD,\n                ITEM_GODDESS_SHIELD,\n                ITEM_SHAMAN_SHIELD,\n                ITEM_MEDUSA_SHIELD,\n                ITEM_SKULL_SHIELD,\n                ITEM_FIRE_SHIELD,\n                ITEM_ALUCARD_SHIELD,\n                ITEM_SWORD_OF_DAWN,\n                ITEM_BASILARD,\n                ITEM_SHORT_SWORD,\n                ITEM_COMBAT_KNIFE,\n                ITEM_NUNCHAKU,\n                ITEM_WERE_BANE,\n                ITEM_RAPIER,\n                ITEM_KARMA_COIN,\n                ITEM_MAGIC_MISSILE,\n                ITEM_RED_RUST,\n                ITEM_TAKEMITSU,\n                ITEM_SHOTEL,\n                ITEM_ORANGE,\n                ITEM_APPLE,\n                ITEM_BANANA,\n                ITEM_GRAPES,\n                ITEM_STRAWBERRY,\n                ITEM_PINEAPPLE,\n                ITEM_PEANUTS,\n                ITEM_TOADSTOOL,\n                ITEM_SHIITAKE,\n                ITEM_CHEESECAKE,\n                ITEM_SHORTCAKE,\n                ITEM_TART,\n                ITEM_PARFAIT,\n                ITEM_PUDDING,\n                ITEM_ICE_CREAM,\n                ITEM_FRANKFURTER,\n                ITEM_HAMBURGER,\n                ITEM_PIZZA,\n                ITEM_CHEESE,\n                ITEM_HAM_AND_EGGS,\n                ITEM_OMELETTE,\n                ITEM_MORNING_SET,\n                ITEM_LUNCH_A,\n                ITEM_LUNCH_B,\n                ITEM_CURRY_RICE,\n                ITEM_GYROS_PLATE,\n                ITEM_SPAGHETTI,\n                ITEM_GRAPE_JUICE,\n                ITEM_BARLEY_TEA,\n                ITEM_GREEN_TEA,\n                ITEM_NATOU,\n                ITEM_RAMEN,\n                ITEM_MISO_SOUP,\n                ITEM_SUSHI,\n                ITEM_PORK_BUN,\n                ITEM_RED_BEAN_BUN,\n                ITEM_CHINESE_BUN,\n                ITEM_DIM_SUM_SET,\n                ITEM_POT_ROAST,\n                ITEM_SIRLION,\n                ITEM_TURKEY,\n                ITEM_MEAL_TICKET,\n                ITEM_NEUTRON_BOMB,\n                ITEM_POWER_OF_SIRE,\n                ITEM_PENTAGRAM,\n                ITEM_BAT_PENTAGRAM,\n                ITEM_SHURIKEN,\n                ITEM_CROSS_SHURIKEN,\n                ITEM_BUFFALO_STAR,\n                ITEM_FLAME_STAR,\n                ITEM_TNT,\n                ITEM_BWAKA_KNIFE,\n                ITEM_BOOMERANG,\n                ITEM_JAVELIN,\n                ITEM_TYRFING,\n                ITEM_NAMAKURA,\n                ITEM_KNUCKLE_DUSTER,\n                ITEM_GLADIUS,\n                ITEM_SCIMITAR,\n                ITEM_CUTLASS,\n                ITEM_SABER,\n                ITEM_FALCHION,\n                ITEM_BROADSWORD,\n                ITEM_BEKATOWA,\n                ITEM_DAMASCUS_SWORD,\n                ITEM_HUNTER_SWORD,\n                ITEM_ESTOC,\n                ITEM_BASTARD_SWORD,\n                ITEM_JEWEL_KNUCKLES,\n                ITEM_CLAYMORE,\n                ITEM_TALWAR,\n                ITEM_KATANA,\n                ITEM_FLAMBERGE,\n                ITEM_IRON_FIST,\n                ITEM_ZWEIHANDER,\n                ITEM_SWORD_OF_HADOR,\n                ITEM_LUMINUS,\n                ITEM_HARPER,\n                ITEM_OBSIDIAN_SWORD,\n                ITEM_GRAM,\n                ITEM_JEWEL_SWORD,\n                ITEM_MORMEGIL,\n                ITEM_FIREBRAND,\n                ITEM_THUNDERBRAND,\n                ITEM_ICEBRAND,\n                ITEM_STONE_SWORD,\n                ITEM_HOLY_SWORD,\n                ITEM_TERMINUS_EST,\n                ITEM_MARSIL,\n                ITEM_DARK_BLADE,\n                ITEM_HEAVEN_SWORD,\n                ITEM_FIST_OF_TULKAS,\n                ITEM_GURTHANG,\n                ITEM_MOURNEBLADE,\n                ITEM_ALUCARD_SWORD,\n                ITEM_MABLUNG_SWORD,\n                ITEM_BADELAIRE,\n                ITEM_SWORD_FAMILIAR,\n                ITEM_GREAT_SWORD,\n                ITEM_MACE,\n                ITEM_MORNINGSTAR,\n                ITEM_HOLY_ROD,\n                ITEM_STAR_FLAIL,\n                ITEM_MOON_ROD,\n                ITEM_CHAKRAM,\n                ITEM_FIRE_BOOMERANG,\n                ITEM_IRON_BALL,\n                ITEM_HOLBEIN_DAGGER,\n                ITEM_BLUE_KNUCKLES,\n                ITEM_DYNAMITE,\n                ITEM_OSAFUNE_KATANA,\n                ITEM_MASAMUNE,\n                ITEM_MURAMASA,\n                ITEM_HEART_REFRESH,\n                ITEM_RUNESWORD,\n                ITEM_ANTIVENOM,\n                ITEM_UNCURSE,\n                ITEM_LIFE_APPLE,\n                ITEM_HAMMER,\n                ITEM_STR_POTION,\n                ITEM_LUCK_POTION,\n                ITEM_SMART_POTION,\n                ITEM_ATTACK_POTION,\n                ITEM_SHIELD_POTION,\n                ITEM_RESIST_FIRE,\n                ITEM_RESIST_THUNDER,\n                ITEM_RESIST_ICE,\n                ITEM_RESIST_STONE,\n                ITEM_RESIST_HOLY,\n                ITEM_RESIST_DARK,\n                ITEM_POTION,\n                ITEM_HIGH_POTION,\n                ITEM_ELIXIR,\n                ITEM_MANNA_PRISM,\n                ITEM_VORPAL_BLADE,\n                ITEM_CRISSAEGRIM,\n                ITEM_YASUTSUNA,\n                ITEM_LIBRARY_CARD,\n                ITEM_ALUCART_SHIELD,\n                ITEM_ALUCART_SWORD,\n                NUM_HAND_ITEMS,\n} HandItems;\ntypedef enum BodyItems {\n               ITEM_NO_ARMOR,\n               ITEM_CLOTH_TUNIC,\n               ITEM_HIDE_CUIRASS,\n               ITEM_BRONZE_CUIRASS,\n               ITEM_IRON_CUIRASS,\n               ITEM_STEEL_CUIRASS,\n               ITEM_SILVER_PLATE,\n               ITEM_GOLD_PLATE,\n               ITEM_PLATINUM_MAIL,\n               ITEM_DIAMOND_PLATE,\n               ITEM_FIRE_MAIL,\n               ITEM_LIGHTNING_MAIL,\n               ITEM_ICE_MAIL,\n               ITEM_MIRROR_CUIRASS,\n               ITEM_SPIKE_BREAKER,\n               ITEM_ALUCARD_MAIL,\n               ITEM_DARK_ARMOR,\n               ITEM_HEALING_MAIL,\n               ITEM_HOLY_MAIL,\n               ITEM_WALK_ARMOR,\n               ITEM_BRILLIANT_MAIL,\n               ITEM_MOJO_MAIL,\n               ITEM_FURY_PLATE,\n               ITEM_DRACULA_TUNIC,\n               ITEM_GODS_GARB,\n               ITEM_AXE_LORD_ARMOR,\n               ITEM_EMPTY_HEAD,\n               ITEM_SUNGLASSES,\n               ITEM_BALLROOM_MASK,\n               ITEM_BANDANNA,\n               ITEM_FELT_HAT,\n               ITEM_VELVET_HAT,\n               ITEM_GOGGLES,\n               ITEM_LEATHER_HAT,\n               ITEM_HOLY_GLASSES,\n               ITEM_STEEL_HELM,\n               ITEM_STONE_MASK,\n               ITEM_CIRCLET,\n               ITEM_GOLD_CIRCLET,\n               ITEM_RUBY_CIRCLET,\n               ITEM_OPAL_CIRCLET,\n               ITEM_TOPAZ_CIRCLET,\n               ITEM_BERYL_CIRCLET,\n               ITEM_CAT_EYE_CIRCLET,\n               ITEM_CORAL_CIRCLET,\n               ITEM_DRAGON_HELM,\n               ITEM_SILVER_CROWN,\n               ITEM_WIZARD_HAT,\n               ITEM_NO_CAPE,\n               ITEM_CLOTH_CAPE,\n               ITEM_REVERSE_CLOAK,\n               ITEM_ELVEN_CLOAK,\n               ITEM_CRYSTAL_CLOAK,\n               ITEM_ROYAL_CLOAK,\n               ITEM_BLOOD_CLOAK,\n               ITEM_JOSEPHS_CLOAK,\n               ITEM_TWILIGHT_CLOAK,\n               ITEM_NO_ACCESSORY,\n               ITEM_MOONSTONE,\n               ITEM_SUNSTONE,\n               ITEM_BLOODSTONE,\n               ITEM_STAUROLITE,\n               ITEM_RING_OF_PALES,\n               ITEM_ZIRCON,\n               ITEM_AQUAMARINE,\n               ITEM_TURQUOISE,\n               ITEM_ONYX,\n               ITEM_GARNET,\n               ITEM_OPAL,\n               ITEM_DIAMOND,\n               ITEM_LAPIS_LAZULI,\n               ITEM_RING_OF_ARES,\n               ITEM_GOLD_RING,\n               ITEM_SILVER_RING,\n               ITEM_RING_OF_VARDA,\n               ITEM_RING_OF_ARCANA,\n               ITEM_MYSTIC_PENDANT,\n               ITEM_HEART_BROACH,\n               ITEM_NECKLACE_OF_J,\n               ITEM_GAUNTLET,\n               ITEM_ANKH_OF_LIFE,\n               ITEM_RING_OF_FEANOR,\n               ITEM_MEDAL,\n               ITEM_TALISMAN,\n               ITEM_DUPLICATOR,\n               ITEM_KINGS_STONE,\n               ITEM_COVENANT_STONE,\n               ITEM_NAUGLAMIR,\n               ITEM_SECRET_BOOTS,\n               ITEM_ALUCART_MAIL,\n               NUM_BODY_ITEMS,\n} BodyItems;\nvoid EntityBreakable(Entity*);\nvoid EntityExplosion(Entity*);\nvoid EntityPrizeDrop(Entity*);\nvoid EntityDamageDisplay(Entity*);\nvoid EntityRedDoor(Entity*);\nvoid EntityIntenseExplosion(Entity*);\nvoid EntitySoulStealOrb(Entity*);\nvoid EntityRoomForeground(Entity*);\nvoid EntityStageNamePopup(Entity*);\nvoid EntityEquipItemDrop(Entity*);\nvoid EntityRelicOrb(Entity*);\nvoid EntityHeartDrop(Entity*);\nvoid EntityEnemyBlood(Entity*);\nvoid EntityMessageBox(Entity*);\nvoid EntityDummy(Entity*);\ntypedef enum { MONO_SOUND, STEREO_SOUND } soundMode;\nenum Sfx {\n    SFX_HARPY_WING_FLAP = 0x601,\n    SFX_RIC_WHIP_RATTLE_A,\n    SFX_RIC_WHIP_RATTLE_B,\n    SFX_RIC_WHIP_RATTLE_C,\n    SFX_RIC_WHIP_RATTLE_D,\n    SFX_RIC_WHIP_RATTLE_E,\n    SFX_STONE_MOVE_A,\n    SFX_STONE_MOVE_B,\n    SFX_STONE_MOVE_C,\n    SFX_WEAPON_SWISH_A,\n    SFX_WEAPON_SWISH_B,\n    SFX_WEAPON_SWISH_C,\n    SFX_METAL_CLANG_A,\n    SFX_METAL_CLANG_B,\n    SFX_METAL_CLANG_C,\n    SFX_METAL_CLANG_D,\n    SFX_METAL_CLANG_E,\n    SFX_METAL_CLANG_F,\n    SFX_UNK_CROW,\n    SFX_ELECTRICITY,\n    SFX_SCRAPE_A,\n    SFX_SCRAPE_B,\n    SFX_SCRAPE_C,\n    SFX_UNK_618,\n    SFX_GLASS_BREAK_A,\n    SFX_GLASS_BREAK_B,\n    SFX_GLASS_BREAK_C,\n    SFX_GLASS_BREAK_D,\n    SFX_GLASS_BREAK_E,\n    SFX_BAT_ECHO_A,\n    SFX_BAT_ECHO_B,\n    SFX_BAT_ECHO_C,\n    SFX_BAT_ECHO_D,\n    SFX_SKULL_BONK,\n    SFX_RIC_RSTONE_TINK,\n    SFX_SMALL_BURST,\n    SFX_ARROW_SHOT_A,\n    SFX_ARROW_SHOT_B,\n    SFX_ARROW_SHOT_C,\n    SFX_ARROW_SHOT_D,\n    SFX_SKELETON_DEATH_A,\n    SFX_SKELETON_DEATH_B,\n    SFX_SKELETON_DEATH_C,\n    SFX_FIRE_SHOT,\n    SFX_WEAPON_STAB_A,\n    SFX_WEAPON_STAB_B,\n    SFX_WEAPON_APPEAR,\n    SFX_UNK_BETA_630,\n    SFX_DEATH_AMBIENCE,\n    SFX_MAGIC_GLASS_BREAK,\n    SFX_UI_CONFIRM,\n    SFX_CANDLE_HIT,\n    SFX_TELEPORT_BANG_A,\n    SFX_TELEPORT_BANG_B,\n    SFX_SUC_APPEAR,\n    SFX_UNK_SCRAPE_A,\n    SFX_UNK_SCRAPE_B,\n    SFX_UNK_SCRAPE_C,\n    SFX_UNK_UI_SELECT,\n    SFX_START_SLAM_A,\n    SFX_START_SLAM_B,\n    SFX_START_SLAM_C,\n    SFX_ANIME_SWORD_A,\n    SFX_ANIME_SWORD_B,\n    SFX_ANIME_SWORD_C,\n    SFX_DOOR_OPEN,\n    SFX_WALL_DEBRIS_A,\n    SFX_WALL_DEBRIS_B,\n    SFX_WALL_DEBRIS_C,\n    SFX_STOMP_HARD_A,\n    SFX_STOMP_HARD_B,\n    SFX_STOMP_HARD_C,\n    SFX_STOMP_HARD_D,\n    SFX_STOMP_HARD_E,\n    SFX_STOMP_SOFT_A,\n    SFX_STOMP_SOFT_B,\n    SFX_SAVE_HEARTBEAT,\n    SFX_BAT_SCREECH,\n    SFX_DOOR_CLOSE_A,\n    SFX_DOOR_CLOSE_B,\n    SFX_UNK_UI_ERROR,\n    SFX_EXPLODE_FAST_A,\n    SFX_EXPLODE_FAST_B,\n    SFX_EXPLODE_A,\n    SFX_EXPLODE_B,\n    SFX_EXPLODE_C,\n    SFX_EXPLODE_D,\n    SFX_EXPLODE_E,\n    SFX_EXPLODE_F,\n    SFX_FM_EXPLODE_A,\n    SFX_FM_EXPLODE_B,\n    SFX_FM_EXPLODE_C,\n    SFX_FM_EXPLODE_D,\n    SFX_EXPLODE_SMALL,\n    SFX_WEAPON_HIT = 0x678,\n    SFX_HEART_PICKUP = 0x67A,\n    SFX_ITEM_PICKUP = 0x67C,\n    SFX_GOLD_PICKUP = 0x6A9,\n};\ntypedef struct {\n              u16 posX;\n              u16 posY;\n              u16 entityId;\n              u16 entityRoomIndex;\n              u16 params;\n} LayoutEntity;\ntypedef struct {\n    u16* layout;\n    TileDefinition* tileDef;\n    u32 params;\n    u16 zPriority;\n    u8 unkE;\n    u8 unkF;\n} MyLayer;\ntypedef struct {\n    MyLayer* fg;\n    MyLayer* bg;\n} MyRoomDef;\nextern LayoutEntity* g_pStObjLayoutHorizontal[];\nextern LayoutEntity* g_pStObjLayoutVertical[];\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern u16 g_ItemIconSlots[0x20];\nvoid InitRoomEntities(s32 objLayoutId);\nvoid UpdateRoomPosition();\nvoid Update(void);\nvoid HitDetection(void);\ns32 Random();\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\nvoid CreateEntityFromLayout(Entity* entity, LayoutEntity* initDesc);\nvoid DestroyEntity(Entity*);\nvoid DestroyEntitiesFromIndex(s16 index);\nvoid MoveEntity();\nvoid FallEntity(void);\nEntity* AllocEntity(Entity* start, Entity* end);\ntypedef struct EntityInit {\n    u16 animSet;\n    u16 animCurFrame;\n    u16 unk5A;\n    u16 palette;\n    u16 enemyId;\n    u16 : 16;\n} EntityInit;\nvoid InitializeEntity(u16 arg0[]);\ntypedef enum {\n    E_NONE,\n    E_BREAKABLE,\n    E_EXPLOSION,\n    E_PRIZE_DROP,\n    E_NUMERIC_DAMAGE,\n    E_RED_DOOR,\n    E_INTENSE_EXPLOSION,\n    E_SOUL_STEAL_ORB,\n    E_ROOM_FOREGROUND,\n    E_DUMMY_09,\n    E_EQUIP_ITEM_DROP,\n    E_DUMMY_0B,\n    E_DUMMY_0C,\n    E_DUMMY_0D,\n    E_DUMMY_0E,\n    E_DUMMY_0F,\n    E_DUMMY_10,\n    E_ID_14 = 0x14,\n    E_ID_15,\n    E_ID_26 = 0x26,\n    E_SECRET_BUTTON = 0x28,\n    E_SECRET_STAIRS = 0x29,\n} EntityIDs;\nvoid CreateEntityFromEntity(u16 entityId, Entity* source, Entity* entity);\ns32 GetSideToPlayer();\nvoid MoveEntity();\nvoid SetStep(u8);\nvoid EntityExplosion(Entity*);\nvoid EntityUnkId14(Entity* entity);\nvoid EntityUnkId15(Entity* entity);\nextern const char* D_801A7984;\nextern const char* D_801A7990;\nextern const char* D_801A799C;\nextern s8 c_HeartPrizes[10];\nextern PfnEntityUpdate PfnEntityUpdates[];\nextern bool g_isSecretStairsButtonPressed;\nextern bool g_isDraculaFirstFormDefeated;\nextern u16 D_80180574[];\nextern u16 g_InitializeEntityData0[];\nextern u16 D_80180598[];\nextern u16 g_eInitGeneric2[];\nextern u16 D_801805D4[];\nextern u16 D_801805E0[];\nextern u16 D_801805EC[];\nextern u16 D_80180604[];\nextern u16 D_80180610[];\nextern u16 D_8018061C[];\nextern u16 D_80180628[];\nextern ObjInit2 D_80180638[];\nextern s32 D_801806D0[];\nextern u8 D_801806F8[];\nextern u8 D_80180704[];\nextern u16 D_80180710[];\nextern s16 D_80180724[];\nextern s16 D_80180738[];\nextern s8 D_8018074C[];\nextern s16 D_80180758[];\nextern u8 D_80180770[];\nextern u8 D_80180830[];\nextern u8 D_8018083C[];\nextern u8 D_8018084C[];\nextern u8 D_8018085C[];\nextern u8 D_80180864[];\nextern u8 D_8018086C[];\nextern u8 D_8018087C[];\nextern u8 D_80180884[];\nextern u8 D_8018088C[];\nextern u8 D_80180894[];\nextern Point16 D_801808A0[];\nextern u16 D_801808B0[];\nextern s16 D_801808F8[];\nextern s32 D_80180908;\nextern s32 D_80180910;\nextern u8 D_80180914[];\nextern u8 D_80180924[];\nextern u8 D_80180934[];\nextern u8 D_80180944[];\nextern u8 D_80180954[];\nextern u8 D_80180964[];\nextern u8 D_8018097C[];\nextern u8 D_801809A4[];\nextern u8 D_80180A0C[];\nextern u8 D_80180A20[];\nextern u8 D_80180A2C[];\nextern u8 D_80180AA4[];\nextern u8 D_80180AB0[];\nextern u8 D_80180AC8[];\nextern u8 D_80180AD4[];\nextern u8 D_80180AEC[];\nextern u8 D_80180AFC[];\nextern u8 D_80180B20[];\nextern u8 D_80180B48[];\nextern u8 D_80180B58[];\nextern u8 D_80180B60[];\nextern u8 D_80180B80[];\nextern u8 D_80180BA0[];\nextern u8 D_80180BB8[];\nextern u8 D_80180BCC[];\nextern u8 D_80180BDC[];\nextern u16 D_80180A48[];\nextern Point16 D_80180A58[];\nextern u16 D_80180BE4[];\nextern s16 D_801810F4[];\nextern Point16 D_80181108[];\nextern s32 D_80181148;\nextern u32 D_8018114C;\nextern s16 D_80181150[];\nextern s16 D_8018129C[];\nextern u8 D_801813E8;\nextern u8 D_801814A8;\nextern u16 g_testCollEnemyLookup[];\nextern u8 g_testColluCoords[];\nextern u8 g_testCollvCoords[];\nextern u16 g_testCollElementLookup[10];\nextern u8 g_testColliFrames[10];\nextern u16 D_80181CAC[];\nextern u16 D_80181CDC[];\nextern u32 D_80181CF0[];\nextern s8 D_801A7B7C;\nextern Point32 D_801BEB64[];\nextern s32 D_801C2578;\nextern u32 D_801C257C;\nextern s32 D_801C2578;\nextern s16 D_80181990[];\nextern u16 g_InitializeData0[];\nextern u16 D_80181D74[];\nextern s16 D_80181E3C[];\nextern s16 D_80181E3E[];\nextern s16 D_80181EB0[];\nextern u32 D_80181EC0[];\nextern u16 D_80181F04[];\nextern u8 D_801824CC[];\nextern s8 D_801A7BDC;\nextern Point32 D_801BEB64[];\nextern s32 D_801C24C8;\nextern s16 D_801C24D4;\nextern s16 D_801C24D6;\nextern s16 D_801C24D8;\nextern s16 D_801C24DA;\nextern s16 D_801C24DC;\nextern s8 D_801C24DE;\nextern s8 D_801C24DF;\nextern Primitive* D_801C24E0;\nextern s32 D_801C24E4[];\nextern s32 D_801C2578;\nextern s32 D_801C2580;\nextern u16 g_ESoulStealOrbAngles[];\nextern s16 g_ESoulStealOrbSprt[];\nextern u8 g_ESoulStealOrbAnim[];\nextern u8 D_80180784[];\nextern u8 D_80180788[];\nextern u16 D_8018078C[];\nextern u16 D_80180790[];\nextern u16 D_80180794[];\nextern s16 D_80180798[];\nextern const char D_801829D8[];\nextern s32 D_801C24C8;\nextern s32 D_801C2504;\nextern u32 D_801C257C;\nextern s32 D_801C2580;\nextern Dialogue g_Dialogue;\n\nvoid SetWeaponProperties(Entity* self, s32 kind);\nvoid SetSpriteBank1(SpriteParts* animset);\nvoid SetSpriteBank2(SpriteParts* animset);\nvoid EntityWeaponAttack(Entity* self);\nvoid DestroyEntityWeapon(bool arg0);\n\nvoid LoadWeaponPalette(s32 clutIndex);\ns32 func_ptr_80170004(Entity* self);\nvoid func_ptr_80170008(Entity* self);\nvoid func_ptr_8017000C(Entity* self);\ns32 func_ptr_80170010(Entity* self);\ns32 func_ptr_80170014(Entity* self);\nint GetWeaponId(void);\nvoid EntityWeaponShieldSpell(Entity* self);\nvoid func_ptr_80170024(Entity* self);\nvoid func_ptr_80170028(Entity* self);\nvoid WeaponUnused2C(void);\nvoid WeaponUnused30(void);\nvoid WeaponUnused34(void);\nvoid WeaponUnused38(void);\nvoid WeaponUnused3C(void);\n\nvoid DestroyEntity(Entity* entity);\nvoid DecelerateX(s32 amount);\nvoid DecelerateY(s32 amount);\nvoid SetSpeedX(s32 speed);\n\nextern SpriteParts g_Animset[];\nextern s32 g_HandId;\nvoid func_154000_8017B810(Entity* ent, Point16* outPoint, bool arg2);\nextern u16 D_154000_8017AFE0[];	1	\N	5767879b1b8c2c22c9a0ac82432600acc1764152efe96eeb4fe5757401219a06	EntityEquipItemDrop	ps1	-1		EntityEquipItemDrop	-1	[]	f	[]	\N	\N
\.


--
-- Data for Name: django_admin_log; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.django_admin_log (id, action_time, object_id, object_repr, action_flag, change_message, content_type_id, user_id) FROM stdin;
\.


--
-- Data for Name: django_content_type; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.django_content_type (id, app_label, model) FROM stdin;
1	coreapp	asm
2	coreapp	assembly
3	coreapp	profile
4	coreapp	scratch
5	coreapp	githubuser
6	coreapp	project
7	coreapp	projectmember
8	coreapp	course
9	coreapp	coursechapter
10	coreapp	coursescenario
11	coreapp	preset
12	admin	logentry
13	auth	permission
14	auth	group
15	auth	user
16	contenttypes	contenttype
17	sessions	session
\.


--
-- Data for Name: django_migrations; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.django_migrations (id, app, name, applied) FROM stdin;
1	contenttypes	0001_initial	2024-08-14 22:52:21.355319+00
2	auth	0001_initial	2024-08-14 22:52:21.572729+00
3	admin	0001_initial	2024-08-14 22:52:21.634054+00
4	admin	0002_logentry_remove_auto_add	2024-08-14 22:52:21.646479+00
5	admin	0003_logentry_add_action_flag_choices	2024-08-14 22:52:21.663845+00
6	contenttypes	0002_remove_content_type_name	2024-08-14 22:52:21.6933+00
7	auth	0002_alter_permission_name_max_length	2024-08-14 22:52:21.706109+00
8	auth	0003_alter_user_email_max_length	2024-08-14 22:52:21.719629+00
9	auth	0004_alter_user_username_opts	2024-08-14 22:52:21.731339+00
10	auth	0005_alter_user_last_login_null	2024-08-14 22:52:21.745312+00
11	auth	0006_require_contenttypes_0002	2024-08-14 22:52:21.749999+00
12	auth	0007_alter_validators_add_error_messages	2024-08-14 22:52:21.760524+00
13	auth	0008_alter_user_username_max_length	2024-08-14 22:52:21.786816+00
14	auth	0009_alter_user_last_name_max_length	2024-08-14 22:52:21.799586+00
15	auth	0010_alter_group_name_max_length	2024-08-14 22:52:21.815846+00
16	auth	0011_update_proxy_permissions	2024-08-14 22:52:21.827021+00
17	auth	0012_alter_user_first_name_max_length	2024-08-14 22:52:21.842305+00
18	coreapp	0001_initial	2024-08-14 22:52:22.07008+00
19	coreapp	0002_remove_assembly_as_opts	2024-08-14 22:52:22.080015+00
20	coreapp	0003_github_profile	2024-08-14 22:52:22.143771+00
21	coreapp	0004_scratch_diff_label	2024-08-14 22:52:22.155808+00
22	coreapp	0005_scratch_arch	2024-08-14 22:52:22.170426+00
23	coreapp	0006_scratch_name_score_description	2024-08-14 22:52:22.214064+00
24	coreapp	0007_rename_arch_scratch_platform	2024-08-14 22:52:22.228509+00
25	coreapp	0008_scratch_max_score_squashed_0011_alter_scratch_compiler	2024-08-14 22:52:22.276661+00
26	coreapp	0009_remove_crud_from_compilation	2024-08-14 22:52:22.308916+00
27	coreapp	0010_delete_compilation	2024-08-14 22:52:22.315856+00
28	coreapp	0011_alter_scratch_diff_label	2024-08-14 22:52:22.327351+00
29	coreapp	0012_alter_scratch_name	2024-08-14 22:52:22.339956+00
30	coreapp	0013_scratch_name_default	2024-08-14 22:52:22.372596+00
31	coreapp	0014_projects	2024-08-14 22:52:22.70156+00
32	coreapp	0015_project_description	2024-08-14 22:52:22.724112+00
33	coreapp	0016_give_scratches_project_functions	2024-08-14 22:52:22.747098+00
34	coreapp	0017_rename_psyq_compilers	2024-08-14 22:52:22.776481+00
35	coreapp	0018_rename_compilers	2024-08-14 22:52:22.801896+00
36	coreapp	0019_scratch_preset	2024-08-14 22:52:22.882212+00
37	coreapp	0020_diff_flags	2024-08-14 22:52:22.912366+00
38	coreapp	0021_diff_flags_default	2024-08-14 22:52:22.957648+00
39	coreapp	0022_make_diff_label_non_null	2024-08-14 22:52:22.986178+00
40	coreapp	0023_alter_scratch_diff_label	2024-08-14 22:52:23.007737+00
41	coreapp	0024_remove_psyq_as_compiler	2024-08-14 22:52:23.029858+00
42	coreapp	0025_profile_pseudonym	2024-08-14 22:52:23.067385+00
43	coreapp	0026_project_member_no_anons	2024-08-14 22:52:23.198487+00
44	coreapp	0027_uploadable_project_icon	2024-08-14 22:52:23.216955+00
45	coreapp	0028_alter_project_icon	2024-08-14 22:52:23.228683+00
46	coreapp	0029_courses	2024-08-14 22:52:23.380917+00
47	coreapp	0030_replace_ps1_gcc263_with_psyq36	2024-08-14 22:52:23.407953+00
48	coreapp	0031_raise_scratch_and_diff_label_length_limit_to_1024	2024-08-14 22:52:23.43504+00
49	coreapp	0032_replace_ps2_991111_with_991111a	2024-08-14 22:52:23.455063+00
50	coreapp	0033_scratch_match_override	2024-08-14 22:52:23.473+00
51	coreapp	0034_replace_125e_125n	2024-08-14 22:52:23.50723+00
52	coreapp	0035_auto_20230912_0230	2024-08-14 22:52:23.528698+00
53	coreapp	0036_fix_compiler_gah	2024-08-14 22:52:23.552716+00
54	coreapp	0037_rename_psyq43_to_psyq44	2024-08-14 22:52:23.5772+00
55	coreapp	0038_scratch_libraries	2024-08-14 22:52:23.594571+00
56	coreapp	0039_alter_scratch_libraries	2024-08-14 22:52:23.611688+00
57	coreapp	0040_create_preset	2024-08-14 22:52:23.661416+00
58	coreapp	0041_remove_project_and_github_stuff	2024-08-14 22:52:23.68912+00
59	coreapp	0043_scratch_preset_fk	2024-08-14 22:52:23.730363+00
60	coreapp	0044_populate_preset_fk	2024-08-14 22:52:23.754096+00
61	coreapp	0045_remove_scratch_preset	2024-08-14 22:52:23.771266+00
62	coreapp	0046_rename_preset_fk_scratch_preset	2024-08-14 22:52:23.792404+00
63	coreapp	0047_alter_preset_diff_flags_alter_preset_libraries_and_more	2024-08-14 22:52:23.813151+00
64	coreapp	0048_remove_scratch_project_function_and_more	2024-08-14 22:52:23.851181+00
65	coreapp	0049_alter_assembly_source_asm	2024-08-14 22:52:23.881001+00
66	coreapp	0050_scratch_claim_token	2024-08-14 22:52:23.898517+00
67	coreapp	0051_alter_compilerconfig_diff_flags_and_more	2024-08-14 22:52:23.929811+00
68	coreapp	0052_win9x_to_win32	2024-08-14 22:52:23.957531+00
69	coreapp	0053_rename_mwcps2_compilers	2024-08-14 22:52:23.982433+00
70	coreapp	0054_presets_owner	2024-08-14 22:52:24.023957+00
71	coreapp	0055_alter_preset_owner	2024-08-14 22:52:24.112285+00
72	coreapp	0056_delete_compilerconfig	2024-08-14 22:52:24.120771+00
73	sessions	0001_initial	2024-08-14 22:52:24.171065+00
\.


--
-- Data for Name: django_session; Type: TABLE DATA; Schema: public; Owner: decompme
--

COPY public.django_session (session_key, session_data, expire_date) FROM stdin;
7aafhcjfn4fpbxsqsqi6yod03rexmqpz	eyJwcm9maWxlX2lkIjo1OCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkzNDM3LjY3Njk0Nn0:1sgXTZ:aBx4ZaALAEK-JY4lI6mFEYQs7rlkpGb_geWPh0T1xDk	2024-11-18 22:37:17.706004+00
wwd44fyy1nbw8w0w23adwcknqc3r08dr	eyJwcm9maWxlX2lkIjoyMywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMjc0LjI2MTkzMzN9:1sgXAo:J4j7aX9qvkIpL9W3CVksuOlC5mJyQIxV-s9g81fzYKo	2024-11-18 22:17:54.285117+00
mp15wu6x2l7zvyrhboort81hh3jy5fks	eyJwcm9maWxlX2lkIjoxNSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMTE3LjI2MzEyMzV9:1sgX8H:dFIK4Wn77cWWz7cME0FTE1V2pMgF6Oi6wc23oOsiLGM	2024-11-18 22:15:17.289222+00
tn6rund3hog2jlhbqj6tbfadikstps30	eyJwcm9maWxlX2lkIjoxNiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMTE3LjI2NjMyNDh9:1sgX8H:AuEHZI6LItC5R0j6OY7JPxgmP3SmRHAG2KgXboILhvE	2024-11-18 22:15:17.289981+00
a3f1kz1qo4mwswjss6axra1fphuagl4e	eyJwcm9maWxlX2lkIjoxNywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMTE3LjMyMjc0OTZ9:1sgX8H:Th038EvBC56U9M3vR03GmJW-wpdGeTOx0m_32QH77rQ	2024-11-18 22:15:17.483034+00
us7m6uk37por267cu9l7sxuo2xlghi86	eyJwcm9maWxlX2lkIjoxOCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMTE3LjMyNTE2MTJ9:1sgX8H:NUhXzXJpbLYEYWqmhw6-E_4bz5aQTZHgV1qHiDLHV5c	2024-11-18 22:15:17.483656+00
y5edthzn0xanooabspfdykk2h03lngka	eyJwcm9maWxlX2lkIjoyNCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMjc0LjI2NDUxNDR9:1sgXAo:f9h26dHmH-QH5ehSJ6PFRv1XXikCKa2wjU1GqvLTpqI	2024-11-18 22:17:54.285802+00
nl1nj0et4rzof8njexco0qacb9gn0moo	eyJwcm9maWxlX2lkIjoyNSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMjc0LjMzNDQ4OH0:1sgXAo:Ka3-3oEj9sz4yOG6KKFs-r2o9S2ne8NxNaDbSgFrvr8	2024-11-18 22:17:54.470561+00
sm5ghhgsooyil5fuq3wr6cdc1d5humhk	eyJwcm9maWxlX2lkIjoyNiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMjc0LjMzODI5MDd9:1sgXAo:HHdVUsa6FJvRAsLwnWTmP8peIchg7Z97mS66nUg-cTc	2024-11-18 22:17:54.508061+00
x9zmssk3m6fuuq72lqgqcev6rg0vhg05	eyJwcm9maWxlX2lkIjoyLCJfc2Vzc2lvbl9pbml0X3RpbWVzdGFtcF8iOjE3MjM2NzYxNDIuOTA4MzY5fQ:1seMu6:jGZDzmQJSpjz9Zu169OND6SohUYob4tU4yUA9hLrc_U	2024-11-12 22:55:42.975354+00
x6othtphnttseg0w6b4kchpj058u6ums	eyJwcm9maWxlX2lkIjozMSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNDQ4LjQ5NDMwNH0:1sgXDc:Olc8hyXBUnlATub-JvmTAWo9gx0GJKrvlT-8EtCKEkU	2024-11-18 22:20:48.512646+00
u39t4zlg78p4fbkvdti3qk44w7hf30hl	eyJwcm9maWxlX2lkIjozMywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNDc1LjcwMjMzN30:1sgXE3:vsMhWRDMQ-k9-3IdyjbgO719VSneF3etKoNFE036rpw	2024-11-18 22:21:15.722027+00
g3tsirfijwjn1nmrnfzllptjlc767m4y	eyJwcm9maWxlX2lkIjozMiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNDc1LjY5OTk4N30:1sgXE3:OrwfrF2oHjVtePrqWXRGUiM087U64l39-xWFZ7_NpGE	2024-11-18 22:21:15.722699+00
hvlt6bv0xn9syht5a66bfczir48h95qq	eyJwcm9maWxlX2lkIjozNCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNDc1Ljc1MTExNzd9:1sgXE3:qv71FoRJumM3m68xDqwukPxReHRQM5nCzBLfjHKH4cI	2024-11-18 22:21:15.848153+00
99htri6xj4mey7uy1x2zh0h10a5fl61f	eyJwcm9maWxlX2lkIjozNSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNDc1Ljc1MzY0ODN9:1sgXE3:eaegOWlBct9RkfK3oxsu9xuc6SIswDKSD9Q3FMNz7gI	2024-11-18 22:21:15.866949+00
5snbeo7qruvi5n108zeij5ryazzw5rvw	eyJwcm9maWxlX2lkIjozLCJfc2Vzc2lvbl9pbml0X3RpbWVzdGFtcF8iOjE3MjM3NjA0OTUuMjA1ODc0Mn0:1seiqd:Pt697X6aRkGVJOh3zN_xOZ3m5sfHNX81yyzEDcsppds	2024-11-13 22:21:35.282126+00
uzq14l5wulgtnq66rhczfl24ijgunz89	eyJwcm9maWxlX2lkIjozNiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNDkwLjQ1OTgzOTZ9:1sgXEI:P7edvsksWaEHJLTWDBojV7Ru4cuKEcnTcgnZlMdf2wM	2024-11-18 22:21:30.465191+00
37hoye4pk3l31wc00t0pepi61jhzhp74	eyJwcm9maWxlX2lkIjo0LCJfc2Vzc2lvbl9pbml0X3RpbWVzdGFtcF8iOjE3MjM3NjEyNjQuMDQ5NTg5fQ:1sej32:QV-FPBpR-A_OeA5Hsn0jT-wx1mdpHxy3rjAB8yW-vSs	2024-11-13 22:34:24.079754+00
pv3sw84uc8hdllz0u9qhx2k6eofeiuj1	eyJwcm9maWxlX2lkIjozNywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNDkwLjQ2MzkxMDZ9:1sgXEI:rOPNTgoMLc-BFyddj1s2fPa0ORxE2kjhpu00faw0Bjo	2024-11-18 22:21:30.468102+00
wypnlga139nbbvm5niqchh2o1t1qfv9v	eyJwcm9maWxlX2lkIjoxMCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMDI1LjA3NTMwOTN9:1sgX6n:6SOyb1Ye4xQHuR5nX58kFvjxg5rjXyczDvh957YlW9s	2024-11-18 22:13:45.095375+00
uzj59zj9cm8pl2i4mwl3hn75shbsxghh	eyJwcm9maWxlX2lkIjoxMSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMDM5LjQ5MjUwNTN9:1sgX71:Sfwde6JKKCC5G_CXUseeFfb17A7cSU0VNaF5uSLitKc	2024-11-18 22:13:59.515434+00
ourq2l2o4jcss6ovu9byh4t25gzblfx7	eyJwcm9maWxlX2lkIjoxMiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMDM5LjUwMTA3MTV9:1sgX71:HHgpjl29BaFRzdlIKnVt3Vt_EqDjUxo-H6YcYlTuMFA	2024-11-18 22:13:59.523344+00
7j2ljcz4yryk32tmi1y3p98l2ccj4vi2	eyJwcm9maWxlX2lkIjoxMywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMDM5LjU1MDAxNX0:1sgX71:S4K2g05mh9CZ-6bTI6e4X_i3cMvJCuejmBpacBfKIIU	2024-11-18 22:13:59.718814+00
8829iqpmy2s0r7d4my1o037t5cwbjfvg	eyJwcm9maWxlX2lkIjoxNCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMDM5LjU1MzU4OX0:1sgX71:HHesZYfMc7-e-zPKQFabecNAqbxX0d5XdFYoAZx_vZo	2024-11-18 22:13:59.756667+00
eikrgdgqf1147q9uhd1ik7cgkfub41x3	eyJwcm9maWxlX2lkIjo1LCJfc2Vzc2lvbl9pbml0X3RpbWVzdGFtcF8iOjE3MjQxOTA4ODYuOTIzNDQ5M30:1sgWoQ:jzUAR1PDskAgp7N5Yv_ETu0FWcxV6Kd51mReFj8Q0J4	2024-11-18 21:54:46.95141+00
za3vlqy1ul82lmeyd0no8qz4hcusz5kv	eyJwcm9maWxlX2lkIjoyNywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMzQxLjI1MjI4OTV9:1sgXBt:GBZg6fp43_iMQM2lTYOoCYNAM4eFO-zcjAzs2oFy3hY	2024-11-18 22:19:01.262153+00
mklqxuabzosxu00bsw476fju4iqgrv8z	eyJwcm9maWxlX2lkIjoyOCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMzQxLjI1NTM1NDJ9:1sgXBt:t6Ca9RMdBImRWf8aQgbZOtO8RyIuL0ofTJ3f-Uf8IF4	2024-11-18 22:19:01.264191+00
0xvuwhfnxw6ixe1z7fwm1mbc5spt2khe	eyJwcm9maWxlX2lkIjoyMCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMjE5LjgzODQ5Mjl9:1sgX9v:6m9hEJ6VNIrlG7VRVVU_S3svEg4-71yEI6uhbxGEUJg	2024-11-18 22:16:59.861322+00
t4i99e01tcwk85hw8wa6g5moq6ftdi5t	eyJwcm9maWxlX2lkIjo2LCJfc2Vzc2lvbl9pbml0X3RpbWVzdGFtcF8iOjE3MjQxOTExMzAuMzAyMzI0OH0:1sgWsM:OyouZdtD5Qh3C9hcyimjkb9iTKAxrSIGbEsoXa7W_oY	2024-11-18 21:58:50.332215+00
s7qt1o5rjw1z0i6xn8u9eonfz8xrbydl	eyJwcm9maWxlX2lkIjo3LCJfc2Vzc2lvbl9pbml0X3RpbWVzdGFtcF8iOjE3MjQxOTExMzAuMzA1MDYwMX0:1sgWsM:vxNZmNq-xqSAIRt3jqnkKV1tS66GvPt-Qj_47EPTZtw	2024-11-18 21:58:50.338013+00
mvd5qc1l81pzxt8fifujaaz0fn6qqbyj	eyJwcm9maWxlX2lkIjo4LCJfc2Vzc2lvbl9pbml0X3RpbWVzdGFtcF8iOjE3MjQxOTExMzAuMzc3ODEzM30:1sgWsM:_f6JG1UeN6dPoLwBd4HvdHfZUNzmwL4kHzFWX-EYNMI	2024-11-18 21:58:50.595026+00
rwe7rrt6pi5g1hzj0xnmx4tud3stfj6q	eyJwcm9maWxlX2lkIjo5LCJfc2Vzc2lvbl9pbml0X3RpbWVzdGFtcF8iOjE3MjQxOTExMzAuMzgwOTA0NH0:1sgWsM:oBahIv0vwZXi1m4Qu_XuB8IHO4mTZ-4MQETLgKaiccA	2024-11-18 21:58:50.64433+00
9hf106z8n3dhqp9ymfj1ve34bp2dw1wl	eyJwcm9maWxlX2lkIjoxOSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMjE5LjgzNTk2MTZ9:1sgX9v:upeqasd0MtZtY65RCmN5H0_Dm--563aSFvyf5FZ1Prs	2024-11-18 22:16:59.861939+00
84xsdyzob6jki3dzlf1g7dvw9llys61l	eyJwcm9maWxlX2lkIjoyMiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMjE5LjkwMjk4MX0:1sgX9w:XkrgDGckdOaUfYeoZfZI4_tFCBIdy7aot6cy4BrLLcQ	2024-11-18 22:17:00.206395+00
450hw10fm8gz0yhv3i779k80vi67s23m	eyJwcm9maWxlX2lkIjoyMSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMjE5Ljg5Nzg5MDZ9:1sgX9w:D7pupDH-H2Dc2AeAbs131T2fVHKuCKuMUUdFIrVW2f4	2024-11-18 22:17:00.207082+00
cwlanhfdwwpz42p0w8sn61upl6vw2uhu	eyJwcm9maWxlX2lkIjoyOSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMzczLjY3NzMwMTZ9:1sgXCP:Gdxw7vJTZc-SmYuqw5U8w_WdQKRrvV-pKYYP5MqwTws	2024-11-18 22:19:33.681363+00
l147wfa4p8c25treu04dbqpjfchzn3q0	eyJwcm9maWxlX2lkIjozMCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyMzczLjY3OTQ5M30:1sgXCP:jilSGsjvXYs8VlVBOALaUQPsSVohDmGwZLzKYOc9dDk	2024-11-18 22:19:33.683033+00
doket8ilhlqxk7p4cgvw5p0d0fwbtepn	eyJwcm9maWxlX2lkIjoxMjEsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTQ4OC42OTUzMTg3fQ:1sgY0e:gBbYPHrDsiECxY59ICwIfVC6yGWI8AwTLpok3I0qWEw	2024-11-18 23:11:28.700011+00
q0unv342aa4rl2h5uil9vk8774hs8pmu	eyJwcm9maWxlX2lkIjoxMjQsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTUwNS41MjI1MjU4fQ:1sgY0v:pX0AFhaDa21_4z-gVEpvMOGE4rlfq-fdssh-HLFSVEw	2024-11-18 23:11:45.527016+00
49xlwjhghfxvtscyxv8n4lscdx156v6l	eyJwcm9maWxlX2lkIjozOCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNjcxLjE0MTA5MX0:1sgXHD:eIGqx0RjAc0YqWr_kBWW95FInsIWcc2XzYid7MpWokk	2024-11-18 22:24:31.148178+00
eunai3x3xm6laknpte0b2vwv9qrr40i2	eyJwcm9maWxlX2lkIjozOSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNjcxLjE0MzUwOTl9:1sgXHD:48nwx-i9LMPm7w7wQOXYrCxadn1T9sc85Fi-E5w75K4	2024-11-18 22:24:31.149501+00
c7zirgnq6m4jkkw4zx9rjhviblpop7n3	eyJwcm9maWxlX2lkIjo0MCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNjcxLjE4MDg2Mjd9:1sgXHD:I_BtWUFWRqaCTnQLdRplQve_6iDEtlhtCjKdBx1OZrg	2024-11-18 22:24:31.186279+00
cvqop5m8y95jnjpdguuhbzxc8bf00iuw	eyJwcm9maWxlX2lkIjo0MSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNjcxLjI2MDEwNX0:1sgXHD:s8NlWDwRHeuRp8nQNKdFo5bLQkYHqhozimG1_AHGu50	2024-11-18 22:24:31.265015+00
8xhy2r6hkdi3k6c40qr8cy3fpjb00wh8	eyJwcm9maWxlX2lkIjo0MiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNjk1LjE2MjkyNDh9:1sgXHb:T4yjuwAgQbzDSZskEtN3UBVN05MhU2BcrvofFykvws8	2024-11-18 22:24:55.167203+00
lqxw9w5l1ughlfrkwq0b1ltlpo7wpq0i	eyJwcm9maWxlX2lkIjo0MywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyNjk1LjE2NTg2NzN9:1sgXHb:wsOvxsPTdO2LMnaVec6RtwE3GAzeTNQhVA73aDXKNnU	2024-11-18 22:24:55.169943+00
2jv4i52ccg5nis2ql15hot5o3yrwfynt	eyJwcm9maWxlX2lkIjo0NCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyODIwLjMxMzA2Nn0:1sgXJc:xvMxoDoGAK8pr63LGXFqWyVZh3FqQyGnUqUAz0-wii4	2024-11-18 22:27:00.318653+00
2i61uc8babpm7tx02gbnemwot136gbol	eyJwcm9maWxlX2lkIjo0NSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyODIwLjMxNTQzOH0:1sgXJc:CMXQ54irj7_wPjX1z1uJgBZWX_NqRcUKkMh5eAEYyrs	2024-11-18 22:27:00.321111+00
u84qwamp9rngco5zt55exguyak7uy0sz	eyJwcm9maWxlX2lkIjo0NiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyODIwLjQyMzc3Mzh9:1sgXJc:iyEj9yGdoCk3JH2bnIEku4P0AZdUwSCzH8EnyXFCBkw	2024-11-18 22:27:00.432019+00
i21ushyno9fgyz4g5m4dlzlpsqns01wo	eyJwcm9maWxlX2lkIjo0NywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyODIwLjQzNDc2MjV9:1sgXJc:N-sfpdw8wjkKFcPp-5mcr9VdPMQrlPh65uLEIjfxP_A	2024-11-18 22:27:00.440662+00
igudmy603z2v1rgu0cu30k9s8l6zmmww	eyJwcm9maWxlX2lkIjo0OCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyODIwLjY1NjUzMjV9:1sgXJc:BRHpiR5RIBbgve-7We1R4ufw9_GqNc7mRjusnjR7VDM	2024-11-18 22:27:00.662536+00
nllaz5p9zr5k2t6d8ekqkbck4exu8lzc	eyJwcm9maWxlX2lkIjo0OSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkyODIwLjcwMDMxNn0:1sgXJc:CnSmSJPfMWqkdZzRBoo1FNLAmauYlkEPT3hfzgImlOU	2024-11-18 22:27:00.70547+00
r3mi3vliz1ljlg88v576in07i5wlgm9i	eyJwcm9maWxlX2lkIjo1OSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkzNDM3LjY3OTY3OTJ9:1sgXTZ:L3H0XefvcbUjTdR7_WYBGF2g7cGYWlyOZveYW6OzBbc	2024-11-18 22:37:17.706584+00
ifegwqyhfbnjk74ib5prxh3sv092l95m	eyJwcm9maWxlX2lkIjo2MSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkzNDM3Ljc0MDQ1MDZ9:1sgXTZ:8G2fFuQSuRz0PtPeOMZoo_Kp4mdjhfSUxqbmmpgxEN0	2024-11-18 22:37:17.887002+00
a13g9nfn894a1g7x8ojlk8v9lrvqlhec	eyJwcm9maWxlX2lkIjo2MCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkzNDM3LjczNTk1NjR9:1sgXTZ:ABNC91IDDJe5yQBKEh8QRNMbzssj4XJSIIYGxzuCl0Q	2024-11-18 22:37:17.932302+00
mv4pgn9aztb9a696kq1t1e28a7t6dyab	eyJwcm9maWxlX2lkIjo2MiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk0MzM3LjI5NDc0NTd9:1sgXi5:S1xL7sXZd4Qz6i32ZOq8_bb1HTK53zpttgX1xS7wCuw	2024-11-18 22:52:17.361121+00
enmi0w7nn6fgx1tel9dz51j2gwleuqto	eyJwcm9maWxlX2lkIjo2NCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk0MzM3LjMwNjgyMDR9:1sgXi5:Asho8u9KZgmjLP98-vz43FZw8Jz1oy57Tcs-Qp5ax2A	2024-11-18 22:52:17.412475+00
tj04dnp8363ned2c64k5hizoy1hax0tv	eyJwcm9maWxlX2lkIjo2MywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk0MzM3LjMwOTQ0NzV9:1sgXi5:mTo4bsnS94yuiKPgWxoLFcCAVq3IsLnq3fE-t-DtNtg	2024-11-18 22:52:17.427451+00
apdxvx8uzg74437kkg4fdi83p0uvu2l0	eyJwcm9maWxlX2lkIjo1MCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkzMjcyLjgwMDQyODZ9:1sgXQu:ssqOLfEldIOF0MoMtWrZeqFJxBQcWsjrf5O2bnhqEYU	2024-11-18 22:34:32.832941+00
ii062w341yejuc32kakxvhypqegew1t4	eyJwcm9maWxlX2lkIjo1MSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkzMjcyLjgwNTF9:1sgXQu:7xkKpwSZnLdlyvATlTO2KRzgnlyX7zpRPaWrqF6TWdw	2024-11-18 22:34:32.833572+00
fo77hy1zon3uqvy9omttoagthr7z75jk	eyJwcm9maWxlX2lkIjo1MiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkzMjcyLjg2ODkwNDR9:1sgXQv:lEgxpPZMY8zP3z1bkc7pKVZ12tfWPK7dAPS-n595gyw	2024-11-18 22:34:33.022022+00
4wtzcf4c7hpu3c5skf459bzwei5cq1wa	eyJwcm9maWxlX2lkIjo1MywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkzMjcyLjg3MjM4OTN9:1sgXQv:3rBPhuy3AQAXpmVClvaXcOhWj8I5YtveJCg4b9x1AcY	2024-11-18 22:34:33.023271+00
qbpdkcgf69viksy6ceic471yon603ay0	eyJwcm9maWxlX2lkIjo2NiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk0MzM3LjQxOTU1OX0:1sgXi5:F5GrVO4O7Y5tFBRA55e2P9ZJOkptTJZ8jifcxt7xevo	2024-11-18 22:52:17.440268+00
swmep859g7t5npdzydn747s8gjj1iht5	eyJwcm9maWxlX2lkIjo2NSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk0MzM3LjMxNjc1ODJ9:1sgXi5:hRtydlU9_0bW4qm9P2EaaIu_tK6X_CU48SVOzNBBtx0	2024-11-18 22:52:17.449883+00
45ysd6w9750uqwgq95vjqh5vbrd4l9o3	eyJwcm9maWxlX2lkIjo2NywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk0MzM3LjQyOTEyMDV9:1sgXi5:XEPk-KyxTE6SpiMndvyJX_3vh57nRCZCJl18Fb9Cu6o	2024-11-18 22:52:17.469532+00
hrccpgjwqg6df2z1islel5gz60y3bdht	eyJwcm9maWxlX2lkIjo3MiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk0MzM3LjU4MzEyOH0:1sgXi5:MFZwhCSFMnid7KEvF2JUNMu-ij1hgIJXYfU82GBejR8	2024-11-18 22:52:17.588314+00
lqtnmldhuoftmo6tjqgprz47c7n4s4vp	eyJwcm9maWxlX2lkIjo2OSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk0MzM3LjQ3OTYxMTl9:1sgXi5:3PIN6vMEHogABAwLy08kfhvmDuBwFFpKrU4Dc2uPOzA	2024-11-18 22:52:17.707829+00
tgor1fi76hy5msj0w92dbkrpgj3p5ka7	eyJwcm9maWxlX2lkIjo3MywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk0MzM3Ljc4MTcxMjN9:1sgXi5:JNO_bflqNGBGsW_4nxIn8bcZlzjoshI-576rHsjhUP8	2024-11-18 22:52:17.805705+00
e0p1m7uwv6vn2sgeb5v8ys4mrjb1kj3w	eyJwcm9maWxlX2lkIjo1NCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkzMjc1LjIwMTEwNH0:1sgXQx:FvrNL4yvY33Edsz8cSJIxyLaVZ-x5MSdrmJ030SSWgk	2024-11-18 22:34:35.231003+00
bazl4py3xaq945w3cacczx5h95z074dr	eyJwcm9maWxlX2lkIjo1NSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkzMjc1LjIxODUzODN9:1sgXQx:FRGetUUB_SHzqI1bvoJPKmx_SSIjAY_dJMg6P9sqpu0	2024-11-18 22:34:35.239475+00
v1l2nraebqj4mu9ri6nritgdsur8l868	eyJwcm9maWxlX2lkIjo1NiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkzMjc1LjI2MjQ0MjZ9:1sgXQx:_xgjLJZtypJBjfZToy9SNua8UeExHoO52Cojc1pzr0c	2024-11-18 22:34:35.541852+00
093vwn969fzqva3p896j9ltacfap620y	eyJwcm9maWxlX2lkIjo1NywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTkzMjc1LjI3MjAxMjd9:1sgXQx:o0PHN9TQdpfJy3YyFbjN9DrFYt1mMXfhbY1ub3LSiVU	2024-11-18 22:34:35.546435+00
km09lrln7qzr58myock1qo1za1ggctz7	eyJwcm9maWxlX2lkIjo3MSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk0MzM3LjUxNDM4NDd9:1sgXi5:FWn-clvA0i60LFj7xuJDWPH8BKvF06I7lqh2Cr299gQ	2024-11-18 22:52:17.812707+00
rp2p73ylog1q25jzfldfmi01gravuhqr	eyJwcm9maWxlX2lkIjo2OCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk0MzM3LjQ0NDIyNDZ9:1sgXi5:_yhBgjkhRsYLB0Kml6x-YsVadLoqqbKdP51LDe2jyhU	2024-11-18 22:52:17.861489+00
jkwwplvaj4fdkc9fwfy66rkexbrbzmmm	eyJwcm9maWxlX2lkIjo3MCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk0MzM3LjUwNjY2Mn0:1sgXi5:j-Unp67qETiffBh6X4TGoPYOF_IUmvqCHV_ljQlSxEc	2024-11-18 22:52:17.862316+00
ctk9aswf8piyhkkrpx877j4v24evns3u	eyJwcm9maWxlX2lkIjoxMjIsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTQ4OC42OTg5MTU1fQ:1sgY0e:q0JKAHttkO8E-Aj9kH3gV219--2blCVG9T2L8HxdK8Q	2024-11-18 23:11:28.703086+00
36o90mti57skfgcstfsbc536t3qfxt3g	eyJwcm9maWxlX2lkIjoxMjgsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTUzOC42MDU1NDMxfQ:1sgY1S:nRKzYiZ51LqrGPp3Hbpap9-v0ulzMqjyGKEV4EBT9_E	2024-11-18 23:12:18.649707+00
g1j4shqiv9z4sviv1kg14lpylum5fx2e	eyJwcm9maWxlX2lkIjo3NCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjA0MjE5MDN9:1sgXth:SZvngD5ND07b0OiSgfwXZo4xxOCSF8yuksWVYw3v3R0	2024-11-18 23:04:17.112322+00
9dowaff7tma7vod3afsnv9o7igqdzxqg	eyJwcm9maWxlX2lkIjo3NiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjA1MjgwNjl9:1sgXth:E6w3UtVz8RrDoGk1MyU_XNZsOTK286xB2IoxZwOTl-w	2024-11-18 23:04:17.123615+00
ymruys2zuj1cvcvfixtiak21vy0p72y6	eyJwcm9maWxlX2lkIjo3NSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjA1NDMwMDN9:1sgXth:eoI3kUWOYXx0QPG5ZAn-zJRpfTjJU6hd4f-XYs203bo	2024-11-18 23:04:17.125991+00
qwczjzda2rndz7wj71u26p34fau9t1cx	eyJwcm9maWxlX2lkIjo3OCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjEzNTc0ODF9:1sgXth:3FPpK4IfTaCdCGosigKskqx7FIsR8blk35adu-x7NcA	2024-11-18 23:04:17.148707+00
mw6ztmxiipd2eo9fduw9969ndh9xxjz4	eyJwcm9maWxlX2lkIjo3NywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjA0NzEzfQ:1sgXth:4SekXcLTzxVb85Bf52Bo_0mRh0GTXQDVv9Ap4-F56aI	2024-11-18 23:04:17.151044+00
r35120rj45zgnjq1aj6x1kczke1xreib	eyJwcm9maWxlX2lkIjo3OSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjEzOTMyODV9:1sgXth:urYISm1mnarF0-w8LNxHABWb80zd1zl1VWFyYftJhic	2024-11-18 23:04:17.157761+00
ibxgwqq5d31l1zfjv72qjsq1g28ad2j5	eyJwcm9maWxlX2lkIjo4MCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjE4ODExODd9:1sgXth:9LiwoQrugY3Rvg5K3RA7TwJPFj7FlA2RBoKSU6QBlkM	2024-11-18 23:04:17.413023+00
te5ix11qpcxnrca5f40mzo2ro48hti97	eyJwcm9maWxlX2lkIjo4NCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjQwMTg4NX0:1sgXth:sF45Kj88mruEvh0yr-vWf7RQ5Nd49B9RF5BEtTUeyuI	2024-11-18 23:04:17.415126+00
2w889z97f3jiv377pjvgg3u5od2f4uhr	eyJwcm9maWxlX2lkIjo4MywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjIzNDA0NX0:1sgXth:QHrKB2Vw9Mub1jr940P89T_OnVTW9_4JMFWsxv8Ze_U	2024-11-18 23:04:17.560269+00
ak262wiezhnwuhrz4stzhvaw04epk98b	eyJwcm9maWxlX2lkIjo4NSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjUxMDM0Mn0:1sgXth:zf3h3HflbXo9yZ16PlsV8MrL0qxq_Xu5bAlNepfim5g	2024-11-18 23:04:17.56898+00
1prc8aacdjr1cxkl9q85k3xiqrtvxayo	eyJwcm9maWxlX2lkIjo4MiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjIyMDk3MDl9:1sgXth:F9SAoQtAQlhzfK5KiMJ0JCwJKOVRjPd1HlZRgW4iZj0	2024-11-18 23:04:17.571838+00
0w8q62l4onrztmgyejvpanaopn92bfbm	eyJwcm9maWxlX2lkIjo4MSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjIwMTExNDJ9:1sgXth:33goZg2SuC4wzozNJQemItPWWIiAvQsZ0ovM4KW3fgc	2024-11-18 23:04:17.572754+00
kjlym6u9dzcwsi96zq2y4wedfs2gpynq	eyJwcm9maWxlX2lkIjo4NiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MDU3LjY4NjQ1Mn0:1sgXth:NkLl_5zXUqmtNHBuLc7cUWDoCKqV4lYWzwCLPITo_h8	2024-11-18 23:04:17.690562+00
v5onycjhx8yj6ptpylspav1y1v8m3que	eyJwcm9maWxlX2lkIjo4NywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjIyLjY3ODYzODJ9:1sgXwM:AUr_me_TbWe-DnljGMO5ob1jzf69-r4hRWcw5ZG5AkA	2024-11-18 23:07:02.687076+00
uhre3yga37xdqihgy95sstwhdc8sia9m	eyJwcm9maWxlX2lkIjo4OCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjIyLjY4MTEyNjh9:1sgXwM:DP1tGwa1kz-EtBwV87qR_mh-cfjjqVSBWWvGRxRecHU	2024-11-18 23:07:02.68769+00
d3ehhpatlmnd3bxwjxykzhqngkh7i3tu	eyJwcm9maWxlX2lkIjo4OSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjIyLjgyMTcwNH0:1sgXwM:B-np02jD-x5NfmuqX7RDFZfNKSQB-Qp-hyLt14SThaY	2024-11-18 23:07:02.898995+00
wsitrv31p612rq8n2m5gf9q0m593u6hr	eyJwcm9maWxlX2lkIjo5MSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjIyLjgzMjU2Mn0:1sgXwM:xiXDeZp17zmVbL9pQPhKHBa77C38Ekshx-uHDJ4uq7s	2024-11-18 23:07:02.900263+00
s7p8h477bqnzbw4f082f34aw5wkqfu9m	eyJwcm9maWxlX2lkIjo5MCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjIyLjgyOTA0MTd9:1sgXwM:I8dXdJP9-QyUfuWp_JQJV3BZG4G0OefSvuS3FYUGJCk	2024-11-18 23:07:02.900876+00
0a5l3qz1j2qot0l8o6fdied5lw4dhvjg	eyJwcm9maWxlX2lkIjo5MiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjIyLjg0MjgzMn0:1sgXwM:S8c_HhFrUhAOGRCm-aHGnZDAw1G-epDw_RaGA0K0SK4	2024-11-18 23:07:02.903136+00
o8yjwkr28ejerh592eeiog37352vc5ho	eyJwcm9maWxlX2lkIjo5NiwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjIyLjk5MzU0OX0:1sgXwN:b1LtaU7XcgOvrKS-A580Hv4Yet01dgo3L2jupGXxQJ0	2024-11-18 23:07:03.246852+00
sg7o4f6mhtv6o6sewynocu3fs43ojn11	eyJwcm9maWxlX2lkIjo5NSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjIyLjk1Mzk1MTZ9:1sgXwN:PpGll9atjyewF9j8RMZqdTO2-twD3X5BlZvBZ6aErbY	2024-11-18 23:07:03.255864+00
jw8tfqun2lk9v5n12iipl9ymtqnrm7i9	eyJwcm9maWxlX2lkIjo5NCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjIyLjk0ODgzNTR9:1sgXwN:vfKfl4KtwcvNItdpbKa21Pifm6dk4FxIxiwC1DPyq1M	2024-11-18 23:07:03.363899+00
63ex7da8vt1db60r5730ubu6570jkfra	eyJwcm9maWxlX2lkIjo5MywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjIyLjk0MjkxOTd9:1sgXwN:AAP3DihVkHogLF0BsWnTJa_8hAimnzzXNvnARghplq0	2024-11-18 23:07:03.365493+00
yki4yv1t9fehho8bvmlaayea2yi2xtot	eyJwcm9maWxlX2lkIjo5OSwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjU4LjU3MzI4NDR9:1sgXww:nDanXDA5oZqg61Ss2qs0Jem8rieVM0MlqAPsKu86zWg	2024-11-18 23:07:38.645613+00
c4fm4nix36c15batb8mwz6fixzhv16fw	eyJwcm9maWxlX2lkIjoxMDAsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI1OC41OTU2NDl9:1sgXww:E5aQErNWDQ3IEHwhfLnv0Vzr1_JYtqwECAvxDkRjcNM	2024-11-18 23:07:38.647094+00
d99brr5pd59j8qsnjrv0i2qhdtlru2jp	eyJwcm9maWxlX2lkIjo5NywiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjU4LjU2NzI1MzZ9:1sgXww:vuO92PiOpppnQAceHyfBjP4re3j34J-qH63r6cD3ty0	2024-11-18 23:07:38.647774+00
c7fmqytp8cgq85xqb65wyv6wjl54w8li	eyJwcm9maWxlX2lkIjo5OCwiX3Nlc3Npb25faW5pdF90aW1lc3RhbXBfIjoxNzI0MTk1MjU4LjU3MDc4MjJ9:1sgXww:voQa7zaGbwAIGNG4EJbVbKsWyExLpp6df9gqqPVpTmQ	2024-11-18 23:07:38.659143+00
88rgy52qerw7sa83q3wthdkc1pot992m	eyJwcm9maWxlX2lkIjoxMDEsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI1OC42ODA0MjA0fQ:1sgXww:u6yDq4_mm7YrvyT1UzesnRNDyuY3jLkB7nCCkLa5a0o	2024-11-18 23:07:38.690086+00
4ssnpajaojkuf05onpg7fkfnf1leqyi2	eyJwcm9maWxlX2lkIjoxMDIsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI1OC42ODU2MDM5fQ:1sgXww:R5GGZqeGmfic7-VQNZgVXTAt7pNSogP9i2Z0VYCtxvk	2024-11-18 23:07:38.69214+00
tozwlbnfuvfmys0prf3r679pwh47fkx7	eyJwcm9maWxlX2lkIjoxMDcsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI1OC44MjQyODk4fQ:1sgXww:FxdIsjJzvQs6XfmoD12VMeDN7BD0cw4vO0eSPnvCL3E	2024-11-18 23:07:38.848759+00
8088mignya3ly8pzf9u6kg4rjp4ie2pz	eyJwcm9maWxlX2lkIjoxMDgsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI1OC45Mjg4MTM1fQ:1sgXww:I71hRv73V4QHFpyLyGRg28z2EZoRBaeeL3wn0CKCmVk	2024-11-18 23:07:38.934896+00
e92ziy5d0q0moqmtveq61c8wp2lbz7jq	eyJwcm9maWxlX2lkIjoxMDMsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI1OC43MTc5MjcyfQ:1sgXww:beBV1o4U2aFiJQatOGdvVSiH62LOa5aGfs0bdrsp1f8	2024-11-18 23:07:38.947502+00
7gz6b0m1mpjgc8foogo2b7oox3ipsa6q	eyJwcm9maWxlX2lkIjoxMDQsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI1OC43NDI3OTA1fQ:1sgXwx:I8IOQ9-rHRvtyUGflC_60mNpzqELQFhEDo70S-UX6tE	2024-11-18 23:07:39.961997+00
bj9zlas0ihuky2v7c9h7p01ugy8kwq84	eyJwcm9maWxlX2lkIjoxMDUsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI1OC43NjM4MjY0fQ:1sgXwx:0cC-wVvj8q8Et6fql6R9z2vn-l_IGcXtbAIn30NLyVA	2024-11-18 23:07:39.962727+00
sda6mq6rntyjck81k58jlvzcqbbra3us	eyJwcm9maWxlX2lkIjoxMDYsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI1OC43Nzc1NTY3fQ:1sgXwx:f6pB-rRs4ACqpJrcWim_7rQz06Ue0KouHk29ubm_8Rk	2024-11-18 23:07:39.976954+00
cd13ja9k58pf252ehuts45m5t0f77652	eyJwcm9maWxlX2lkIjoxMDksIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI4Mi44NzI2NDk0fQ:1sgXxK:TPREBsJeezYqaU-xqW9xggvPRjijjVwx4bHNh36O7ks	2024-11-18 23:08:02.943407+00
h5mvo5fbx6gizjnel5fdjul6spukq8p7	eyJwcm9maWxlX2lkIjoxMTIsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI4Mi45MDE1NTk4fQ:1sgXxK:TJe9dg2lTLvez3qVV9TEK_Eg9oIcKGYQ1n4sEpqJSXU	2024-11-18 23:08:02.95466+00
9yqw4onnog4dwbru6ri2a94n0jrafn2a	eyJwcm9maWxlX2lkIjoxMTAsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI4Mi45MDQ2ODg0fQ:1sgXxK:UzFEBYFwo6V_aDnYEL0MWytg0M2gjqziHnMJ9Ivxr4Q	2024-11-18 23:08:02.976228+00
bit9fvo5djltwe5f13y8p97y1j9c29fg	eyJwcm9maWxlX2lkIjoxMTEsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI4Mi44OTgyNjI3fQ:1sgXxK:eFjgQ1Zc6GGbZIstAIRAy1cCeREnYHWPV4CzlSRCwCE	2024-11-18 23:08:02.986931+00
42td4sx3ghyqqkh0nggisxe69u1l79tj	eyJwcm9maWxlX2lkIjoxMTMsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI4My4wNDA3NzQ4fQ:1sgXxL:KgsRPHaxk_-KAdBhv0Fc_CITnlUCPZZ_YhxHpJremtE	2024-11-18 23:08:03.050849+00
io9fb0yhnk2tk364drs4hjsa0n5ao6aa	eyJwcm9maWxlX2lkIjoxMTQsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI4My4wNTcyOTY4fQ:1sgXxL:RqZtdsGY9HtHJV2nxoxLdL4n6WxVqdt-x-AeqJwKv_E	2024-11-18 23:08:03.063702+00
txzzy7ota4xrt5bk3thdwm3jde4wrenk	eyJwcm9maWxlX2lkIjoxMTksIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI4My4yMzQ1ODg5fQ:1sgXxL:9HHbEqcUk8ztIg-CbGkus2sGq-BVEaxZUlU07yK0LZ0	2024-11-18 23:08:03.242609+00
d3yrw8cjn1ijmzrs0gidw8961pz2r3vo	eyJwcm9maWxlX2lkIjoxMjAsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI4My4yNTY5MTV9:1sgXxL:yDhP3qs9DJJvzODDMeo4exYZklngXAGMR3uFgKwEZIs	2024-11-18 23:08:03.269427+00
y1usdc7ty54bwbrsj282rf8c8gdwzrzk	eyJwcm9maWxlX2lkIjoxMTgsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI4My4wODA4OTk1fQ:1sgXxL:3nk0jXr_8tkdoumUIh1lxlROL2VKIf56d4X8CDhEr1w	2024-11-18 23:08:03.337596+00
54s9k4mr0dv74rxezthkv7gwo024b64q	eyJwcm9maWxlX2lkIjoxMTUsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI4My4wNzM0Mjg2fQ:1sgXxL:2m2xdG3FIAC1YK483vwc8oL3zgS61QquWLHYdCQDFoQ	2024-11-18 23:08:03.483305+00
oe479f2kd9os8orunw04nomu2l7z2qxv	eyJwcm9maWxlX2lkIjoxMTcsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI4My4wNzY4MDI1fQ:1sgXxL:cEYXBJlVtGmr9-_5con_IpkI6b9OCWfxpMh_RJBysxo	2024-11-18 23:08:03.482334+00
hfww7xnllo84i3xbs1rcvyys1v7igpuo	eyJwcm9maWxlX2lkIjoxMTYsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTI4My4wNjY5NTE4fQ:1sgXxL:o2OcpH63pbIUEZNEMnBWX9jqERYfKW-MrOJ4psqDXJQ	2024-11-18 23:08:03.487977+00
19jeea4rlqaztce1lgt3u9wilaiica0v	eyJwcm9maWxlX2lkIjoxMjMsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTUwNS41MTk2MjYxfQ:1sgY0v:RIBxgB4K66m_ALmWN4JvLyda_I0rbwIjmP5nfHFa41Y	2024-11-18 23:11:45.526539+00
pmjnm8f5o5w171v9gx14sitlr0usad6r	eyJwcm9maWxlX2lkIjoxMjUsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTUzOC41OTE0MjQyfQ:1sgY1S:z9PCOKNnHSNq0qG-2EPdXA7pfS7uFZ540OrmFIkg2mk	2024-11-18 23:12:18.650204+00
ugxdw6jeotwrndx8vrftve41gv4vbubh	eyJwcm9maWxlX2lkIjoxMjcsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTUzOC42MDA1MTI1fQ:1sgY1S:dGz8vuxw3YzJC6epXO_kyaRS99bgy39PYPflKRuPYWA	2024-11-18 23:12:18.652181+00
4zua3jbvcfjkgvm47ius9gbrrp68zsen	eyJwcm9maWxlX2lkIjoxMjYsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTUzOC41OTQxNzU2fQ:1sgY1S:u6eiHjbTa21UeuIGTFI_7TVBOwSQor8KaW4jGjLJqbY	2024-11-18 23:12:18.653084+00
qifk3onzk84691e321e73rto02yq3z2v	eyJwcm9maWxlX2lkIjoxMzAsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTUzOC45MjUzMTl9:1sgY1S:JtSBh1HtKSQpq4duqt21UZZz_5YLmUOwd4bXKfBIzQs	2024-11-18 23:12:18.938549+00
2fct4avqmy6hfv5hfqgq6lmduvqvza36	eyJwcm9maWxlX2lkIjoxMjksIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTUzOC45MjExNTI4fQ:1sgY1S:ji2LrWgHOD6GsfEewLxcckeFPIdSgWJCAJUfY6JaQfY	2024-11-18 23:12:18.974376+00
wjbnqtyja1p3gqt809jphukdm4fg79qb	eyJwcm9maWxlX2lkIjoxMzEsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTUzOC45MTczMjY3fQ:1sgY1T:F-UeEYgS_ylocBa8aFTEppGXXON4sFE55qApKi8_8js	2024-11-18 23:12:19.088868+00
vezyr1q2x2njnbkhxcueereu99zw3uk5	eyJwcm9maWxlX2lkIjoxMzIsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTUzOC45MzM2NTIyfQ:1sgY1T:ZyxA5cx5G0tpCHfvgiLv3TbzUCgj3oo6iN0Wb_nSYGo	2024-11-18 23:12:19.103139+00
dre2tg3gsj2l9jwqx4qdage5tpxndzlz	eyJwcm9maWxlX2lkIjoxMzMsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTUzOC45MzExMDk0fQ:1sgY1T:GQfVvAtdv2kzgll2rDKrOGXvJmBrQKLTx-7RczYlVyU	2024-11-18 23:12:19.226169+00
b26foubmr9z0854z59sp4be2tktkhya0	eyJwcm9maWxlX2lkIjoxMzQsIl9zZXNzaW9uX2luaXRfdGltZXN0YW1wXyI6MTcyNDE5NTUzOC45MjI4Nzg3fQ:1sgY1T:inoa3uxQ-vWhkIMHptPxbbvsVmXPuvX_INWi7Q9ur0M	2024-11-18 23:12:19.227204+00
yo0sm5xxwvkzrjbwpccrs8tgi8p10odv	eyJwcm9maWxlX2lkIjoxLCJfc2Vzc2lvbl9pbml0X3RpbWVzdGFtcF8iOjE3MjQxOTcwMzIuMzkwODk1MX0:1sgYPY:uL3345YOtqtDv5dBoERubhlnxkbBTrHrH13fmu7_DUA	2024-11-18 23:37:12.391744+00
\.


--
-- Name: auth_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.auth_group_id_seq', 1, false);


--
-- Name: auth_group_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.auth_group_permissions_id_seq', 1, false);


--
-- Name: auth_permission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.auth_permission_id_seq', 68, true);


--
-- Name: auth_user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.auth_user_groups_id_seq', 1, false);


--
-- Name: auth_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.auth_user_id_seq', 1, false);


--
-- Name: auth_user_user_permissions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.auth_user_user_permissions_id_seq', 1, false);


--
-- Name: coreapp_course_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.coreapp_course_id_seq', 1, false);


--
-- Name: coreapp_coursechapter_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.coreapp_coursechapter_id_seq', 1, false);


--
-- Name: coreapp_coursescenario_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.coreapp_coursescenario_id_seq', 1, false);


--
-- Name: coreapp_preset_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.coreapp_preset_id_seq', 1, false);


--
-- Name: coreapp_profile_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.coreapp_profile_id_seq', 134, true);


--
-- Name: coreapp_projectmember_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.coreapp_projectmember_id_seq', 1, false);


--
-- Name: django_admin_log_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.django_admin_log_id_seq', 1, false);


--
-- Name: django_content_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.django_content_type_id_seq', 17, true);


--
-- Name: django_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: decompme
--

SELECT pg_catalog.setval('public.django_migrations_id_seq', 73, true);


--
-- Name: auth_group auth_group_name_key; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_name_key UNIQUE (name);


--
-- Name: auth_group_permissions auth_group_permissions_group_id_permission_id_0cd325b0_uniq; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_permission_id_0cd325b0_uniq UNIQUE (group_id, permission_id);


--
-- Name: auth_group_permissions auth_group_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_group auth_group_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_group
    ADD CONSTRAINT auth_group_pkey PRIMARY KEY (id);


--
-- Name: auth_permission auth_permission_content_type_id_codename_01ab375a_uniq; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_codename_01ab375a_uniq UNIQUE (content_type_id, codename);


--
-- Name: auth_permission auth_permission_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_pkey PRIMARY KEY (id);


--
-- Name: auth_user_groups auth_user_groups_user_id_group_id_94350c0c_uniq; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_group_id_94350c0c_uniq UNIQUE (user_id, group_id);


--
-- Name: auth_user auth_user_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_pkey PRIMARY KEY (id);


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_permission_id_14a6b632_uniq; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_permission_id_14a6b632_uniq UNIQUE (user_id, permission_id);


--
-- Name: auth_user auth_user_username_key; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_user
    ADD CONSTRAINT auth_user_username_key UNIQUE (username);


--
-- Name: coreapp_asm coreapp_asm_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_asm
    ADD CONSTRAINT coreapp_asm_pkey PRIMARY KEY (hash);


--
-- Name: coreapp_assembly coreapp_assembly_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_assembly
    ADD CONSTRAINT coreapp_assembly_pkey PRIMARY KEY (hash);


--
-- Name: coreapp_course coreapp_course_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_course
    ADD CONSTRAINT coreapp_course_pkey PRIMARY KEY (id);


--
-- Name: coreapp_course coreapp_course_slug_key; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_course
    ADD CONSTRAINT coreapp_course_slug_key UNIQUE (slug);


--
-- Name: coreapp_coursechapter coreapp_coursechapter_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_coursechapter
    ADD CONSTRAINT coreapp_coursechapter_pkey PRIMARY KEY (id);


--
-- Name: coreapp_coursescenario coreapp_coursescenario_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_coursescenario
    ADD CONSTRAINT coreapp_coursescenario_pkey PRIMARY KEY (id);


--
-- Name: coreapp_githubuser coreapp_githubuser_github_id_key; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_githubuser
    ADD CONSTRAINT coreapp_githubuser_github_id_key UNIQUE (github_id);


--
-- Name: coreapp_githubuser coreapp_githubuser_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_githubuser
    ADD CONSTRAINT coreapp_githubuser_pkey PRIMARY KEY (user_id);


--
-- Name: coreapp_preset coreapp_preset_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_preset
    ADD CONSTRAINT coreapp_preset_pkey PRIMARY KEY (id);


--
-- Name: coreapp_profile coreapp_profile_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_profile
    ADD CONSTRAINT coreapp_profile_pkey PRIMARY KEY (id);


--
-- Name: coreapp_profile coreapp_profile_user_id_key; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_profile
    ADD CONSTRAINT coreapp_profile_user_id_key UNIQUE (user_id);


--
-- Name: coreapp_project coreapp_project_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_project
    ADD CONSTRAINT coreapp_project_pkey PRIMARY KEY (slug);


--
-- Name: coreapp_projectmember coreapp_projectmember_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_projectmember
    ADD CONSTRAINT coreapp_projectmember_pkey PRIMARY KEY (id);


--
-- Name: coreapp_scratch coreapp_scratch_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_scratch
    ADD CONSTRAINT coreapp_scratch_pkey PRIMARY KEY (slug);


--
-- Name: django_admin_log django_admin_log_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_pkey PRIMARY KEY (id);


--
-- Name: django_content_type django_content_type_app_label_model_76bd3d3b_uniq; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_app_label_model_76bd3d3b_uniq UNIQUE (app_label, model);


--
-- Name: django_content_type django_content_type_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.django_content_type
    ADD CONSTRAINT django_content_type_pkey PRIMARY KEY (id);


--
-- Name: django_migrations django_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.django_migrations
    ADD CONSTRAINT django_migrations_pkey PRIMARY KEY (id);


--
-- Name: django_session django_session_pkey; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.django_session
    ADD CONSTRAINT django_session_pkey PRIMARY KEY (session_key);


--
-- Name: coreapp_projectmember unique_project_member; Type: CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_projectmember
    ADD CONSTRAINT unique_project_member UNIQUE (project_id, user_id);


--
-- Name: auth_group_name_a6ea08ec_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX auth_group_name_a6ea08ec_like ON public.auth_group USING btree (name varchar_pattern_ops);


--
-- Name: auth_group_permissions_group_id_b120cbf9; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX auth_group_permissions_group_id_b120cbf9 ON public.auth_group_permissions USING btree (group_id);


--
-- Name: auth_group_permissions_permission_id_84c5c92e; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX auth_group_permissions_permission_id_84c5c92e ON public.auth_group_permissions USING btree (permission_id);


--
-- Name: auth_permission_content_type_id_2f476e4b; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX auth_permission_content_type_id_2f476e4b ON public.auth_permission USING btree (content_type_id);


--
-- Name: auth_user_groups_group_id_97559544; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX auth_user_groups_group_id_97559544 ON public.auth_user_groups USING btree (group_id);


--
-- Name: auth_user_groups_user_id_6a12ed8b; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX auth_user_groups_user_id_6a12ed8b ON public.auth_user_groups USING btree (user_id);


--
-- Name: auth_user_user_permissions_permission_id_1fbb5f2c; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX auth_user_user_permissions_permission_id_1fbb5f2c ON public.auth_user_user_permissions USING btree (permission_id);


--
-- Name: auth_user_user_permissions_user_id_a95ead1b; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX auth_user_user_permissions_user_id_a95ead1b ON public.auth_user_user_permissions USING btree (user_id);


--
-- Name: auth_user_username_6821ab7c_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX auth_user_username_6821ab7c_like ON public.auth_user USING btree (username varchar_pattern_ops);


--
-- Name: coreapp_asm_hash_11f446b4_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_asm_hash_11f446b4_like ON public.coreapp_asm USING btree (hash varchar_pattern_ops);


--
-- Name: coreapp_assembly_hash_12290b98_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_assembly_hash_12290b98_like ON public.coreapp_assembly USING btree (hash varchar_pattern_ops);


--
-- Name: coreapp_assembly_source_asm_id_ec245923; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_assembly_source_asm_id_ec245923 ON public.coreapp_assembly USING btree (source_asm_id);


--
-- Name: coreapp_assembly_source_asm_id_ec245923_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_assembly_source_asm_id_ec245923_like ON public.coreapp_assembly USING btree (source_asm_id varchar_pattern_ops);


--
-- Name: coreapp_course_slug_50d5c9cd_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_course_slug_50d5c9cd_like ON public.coreapp_course USING btree (slug varchar_pattern_ops);


--
-- Name: coreapp_coursechapter_course_id_a561e57e; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_coursechapter_course_id_a561e57e ON public.coreapp_coursechapter USING btree (course_id);


--
-- Name: coreapp_coursechapter_slug_9b5780a1; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_coursechapter_slug_9b5780a1 ON public.coreapp_coursechapter USING btree (slug);


--
-- Name: coreapp_coursechapter_slug_9b5780a1_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_coursechapter_slug_9b5780a1_like ON public.coreapp_coursechapter USING btree (slug varchar_pattern_ops);


--
-- Name: coreapp_coursescenario_chapter_id_dc727368; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_coursescenario_chapter_id_dc727368 ON public.coreapp_coursescenario USING btree (chapter_id);


--
-- Name: coreapp_coursescenario_scratch_id_22d90169; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_coursescenario_scratch_id_22d90169 ON public.coreapp_coursescenario USING btree (scratch_id);


--
-- Name: coreapp_coursescenario_scratch_id_22d90169_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_coursescenario_scratch_id_22d90169_like ON public.coreapp_coursescenario USING btree (scratch_id varchar_pattern_ops);


--
-- Name: coreapp_coursescenario_slug_084daa58; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_coursescenario_slug_084daa58 ON public.coreapp_coursescenario USING btree (slug);


--
-- Name: coreapp_coursescenario_slug_084daa58_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_coursescenario_slug_084daa58_like ON public.coreapp_coursescenario USING btree (slug varchar_pattern_ops);


--
-- Name: coreapp_preset_owner_id_4564880f; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_preset_owner_id_4564880f ON public.coreapp_preset USING btree (owner_id);


--
-- Name: coreapp_project_slug_02031c3e_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_project_slug_02031c3e_like ON public.coreapp_project USING btree (slug varchar_pattern_ops);


--
-- Name: coreapp_projectmember_project_id_603cb0ad; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_projectmember_project_id_603cb0ad ON public.coreapp_projectmember USING btree (project_id);


--
-- Name: coreapp_projectmember_project_id_603cb0ad_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_projectmember_project_id_603cb0ad_like ON public.coreapp_projectmember USING btree (project_id varchar_pattern_ops);


--
-- Name: coreapp_projectmember_user_id_da35bc20; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_projectmember_user_id_da35bc20 ON public.coreapp_projectmember USING btree (user_id);


--
-- Name: coreapp_scratch_owner_id_589e1292; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_scratch_owner_id_589e1292 ON public.coreapp_scratch USING btree (owner_id);


--
-- Name: coreapp_scratch_parent_id_1c2e2d85; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_scratch_parent_id_1c2e2d85 ON public.coreapp_scratch USING btree (parent_id);


--
-- Name: coreapp_scratch_parent_id_1c2e2d85_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_scratch_parent_id_1c2e2d85_like ON public.coreapp_scratch USING btree (parent_id varchar_pattern_ops);


--
-- Name: coreapp_scratch_preset_fk_id_428fb0c7; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_scratch_preset_fk_id_428fb0c7 ON public.coreapp_scratch USING btree (preset_id);


--
-- Name: coreapp_scratch_slug_85f66296_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_scratch_slug_85f66296_like ON public.coreapp_scratch USING btree (slug varchar_pattern_ops);


--
-- Name: coreapp_scratch_target_assembly_id_27f08bfe; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_scratch_target_assembly_id_27f08bfe ON public.coreapp_scratch USING btree (target_assembly_id);


--
-- Name: coreapp_scratch_target_assembly_id_27f08bfe_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX coreapp_scratch_target_assembly_id_27f08bfe_like ON public.coreapp_scratch USING btree (target_assembly_id varchar_pattern_ops);


--
-- Name: django_admin_log_content_type_id_c4bce8eb; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX django_admin_log_content_type_id_c4bce8eb ON public.django_admin_log USING btree (content_type_id);


--
-- Name: django_admin_log_user_id_c564eba6; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX django_admin_log_user_id_c564eba6 ON public.django_admin_log USING btree (user_id);


--
-- Name: django_session_expire_date_a5c62663; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX django_session_expire_date_a5c62663 ON public.django_session USING btree (expire_date);


--
-- Name: django_session_session_key_c0390e0f_like; Type: INDEX; Schema: public; Owner: decompme
--

CREATE INDEX django_session_session_key_c0390e0f_like ON public.django_session USING btree (session_key varchar_pattern_ops);


--
-- Name: auth_group_permissions auth_group_permissio_permission_id_84c5c92e_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissio_permission_id_84c5c92e_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_group_permissions auth_group_permissions_group_id_b120cbf9_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_group_permissions
    ADD CONSTRAINT auth_group_permissions_group_id_b120cbf9_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_permission auth_permission_content_type_id_2f476e4b_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_permission
    ADD CONSTRAINT auth_permission_content_type_id_2f476e4b_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_group_id_97559544_fk_auth_group_id; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_group_id_97559544_fk_auth_group_id FOREIGN KEY (group_id) REFERENCES public.auth_group(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_groups auth_user_groups_user_id_6a12ed8b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_user_groups
    ADD CONSTRAINT auth_user_groups_user_id_6a12ed8b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm FOREIGN KEY (permission_id) REFERENCES public.auth_permission(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: auth_user_user_permissions auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.auth_user_user_permissions
    ADD CONSTRAINT auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_assembly coreapp_assembly_source_asm_id_ec245923_fk_coreapp_asm_hash; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_assembly
    ADD CONSTRAINT coreapp_assembly_source_asm_id_ec245923_fk_coreapp_asm_hash FOREIGN KEY (source_asm_id) REFERENCES public.coreapp_asm(hash) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_coursechapter coreapp_coursechapter_course_id_a561e57e_fk_coreapp_course_id; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_coursechapter
    ADD CONSTRAINT coreapp_coursechapter_course_id_a561e57e_fk_coreapp_course_id FOREIGN KEY (course_id) REFERENCES public.coreapp_course(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_coursescenario coreapp_coursescenar_chapter_id_dc727368_fk_coreapp_c; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_coursescenario
    ADD CONSTRAINT coreapp_coursescenar_chapter_id_dc727368_fk_coreapp_c FOREIGN KEY (chapter_id) REFERENCES public.coreapp_coursechapter(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_coursescenario coreapp_coursescenar_scratch_id_22d90169_fk_coreapp_s; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_coursescenario
    ADD CONSTRAINT coreapp_coursescenar_scratch_id_22d90169_fk_coreapp_s FOREIGN KEY (scratch_id) REFERENCES public.coreapp_scratch(slug) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_githubuser coreapp_githubuser_user_id_87289f92_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_githubuser
    ADD CONSTRAINT coreapp_githubuser_user_id_87289f92_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_preset coreapp_preset_owner_id_4564880f_fk_coreapp_profile_id; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_preset
    ADD CONSTRAINT coreapp_preset_owner_id_4564880f_fk_coreapp_profile_id FOREIGN KEY (owner_id) REFERENCES public.coreapp_profile(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_profile coreapp_profile_user_id_f8031e10_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_profile
    ADD CONSTRAINT coreapp_profile_user_id_f8031e10_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_projectmember coreapp_projectmembe_project_id_603cb0ad_fk_coreapp_p; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_projectmember
    ADD CONSTRAINT coreapp_projectmembe_project_id_603cb0ad_fk_coreapp_p FOREIGN KEY (project_id) REFERENCES public.coreapp_project(slug) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_projectmember coreapp_projectmember_user_id_da35bc20_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_projectmember
    ADD CONSTRAINT coreapp_projectmember_user_id_da35bc20_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_scratch coreapp_scratch_owner_id_589e1292_fk_coreapp_profile_id; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_scratch
    ADD CONSTRAINT coreapp_scratch_owner_id_589e1292_fk_coreapp_profile_id FOREIGN KEY (owner_id) REFERENCES public.coreapp_profile(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_scratch coreapp_scratch_parent_id_1c2e2d85_fk_coreapp_scratch_slug; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_scratch
    ADD CONSTRAINT coreapp_scratch_parent_id_1c2e2d85_fk_coreapp_scratch_slug FOREIGN KEY (parent_id) REFERENCES public.coreapp_scratch(slug) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_scratch coreapp_scratch_preset_id_4ff6e0e6_fk_coreapp_preset_id; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_scratch
    ADD CONSTRAINT coreapp_scratch_preset_id_4ff6e0e6_fk_coreapp_preset_id FOREIGN KEY (preset_id) REFERENCES public.coreapp_preset(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: coreapp_scratch coreapp_scratch_target_assembly_id_27f08bfe_fk_coreapp_a; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.coreapp_scratch
    ADD CONSTRAINT coreapp_scratch_target_assembly_id_27f08bfe_fk_coreapp_a FOREIGN KEY (target_assembly_id) REFERENCES public.coreapp_assembly(hash) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_content_type_id_c4bce8eb_fk_django_co; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_content_type_id_c4bce8eb_fk_django_co FOREIGN KEY (content_type_id) REFERENCES public.django_content_type(id) DEFERRABLE INITIALLY DEFERRED;


--
-- Name: django_admin_log django_admin_log_user_id_c564eba6_fk_auth_user_id; Type: FK CONSTRAINT; Schema: public; Owner: decompme
--

ALTER TABLE ONLY public.django_admin_log
    ADD CONSTRAINT django_admin_log_user_id_c564eba6_fk_auth_user_id FOREIGN KEY (user_id) REFERENCES public.auth_user(id) DEFERRABLE INITIALLY DEFERRED;


--
-- PostgreSQL database dump complete
--

